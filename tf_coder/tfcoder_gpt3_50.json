[
    {
        "name": "google_01",
        "description": "Convert index tensor into pairs for SparseTensor indexing",
        "target_program": "tf.cast(tf.where(tf.sequence_mask(tf.math.bincount(in1))), tf.int32)",
        "source": "From an internal Google chat room, 09/07/2018",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 0, 0, 1, 3, 3],]",
            "outputs": "[[0, 0], [0, 1], [0, 2], [1, 0], [3, 0], [3, 1]]"
        },
        "completions": [
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "return tf.transpose(tf.stack([tf.repeat(tf.range(tf.size(in1)), tf.ones_like(in1)), in1]))",
            "def transform(input_tensor):\n    indices = tf.expand_dims(input_tensor, axis=1)\n    values = tf.zeros_like(indices)\n    return tf.concat([indices, values], axis=1)\n",
            "return tf.math.cumsum(tf.one_hot(in1, depth=tf.reduce_max(in1)+1), exclusive=True)",
            "return tf.transpose(tf.stack([tf.range(tf.size(in1)), in1]))",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)\n",
            "return tf.transpose(tf.stack([tf.range(tf.size(in1)), in1]))",
            "return tf.transpose(tf.meshgrid(tf.range(tf.size(in1)), tf.range(tf.reduce_max(in1)+1), indexing='ij'), perm=[1, 0])",
            "return tf.transpose(tf.stack([in1, tf.range(tf.shape(in1)[0])]))",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "return tf.transpose(tf.stack([tf.range(tf.size(in1)), in1]))",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "return tf.transpose(tf.tile(tf.expand_dims(tf.range(tf.size(in1)), 1), [1, 2]))",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "return tf.transpose(tf.stack([tf.range(tf.size(in1)), in1]))",
            "return tf.concat([tf.expand_dims(in1, 1), tf.range(tf.size(in1))], axis=1)",
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "return tf.concat([tf.expand_dims(tf.range(tf.size(in1)), 1), tf.expand_dims(in1, 1)], axis=1)",
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "return tf.transpose([tf.cast(tf.range(tf.size(in1)), tf.int64), in1])",
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "return tf.stack([in1, tf.cast(tf.range(tf.shape(in1)[0]), tf.int64)], axis=-1)",
            "return tf.stack([in1, tf.argsort(in1)], axis=1)\n",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)\n",
            "def transform(in1):\n    indices = tf.expand_dims(tf.range(tf.size(in1)), axis=1)\n    indices = tf.concat([tf.zeros_like(indices), tf.reshape(in1, (-1, 1))], axis=1)\n    return indices\n",
            "def transform(in1):\n    indices = tf.expand_dims(in1, axis=1)\n    indices = tf.repeat(indices, 2, axis=1)\n    values = tf.range(tf.reduce_max(indices) + 1)\n    output = tf.gather(values, indices)\n    return output\n",
            "def transform(in1):\n    indices = tf.expand_dims(tf.range(tf.size(in1), dtype=tf.int64), axis=1)\n    arr = tf.concat([tf.reshape(in1, (-1, 1)), indices], axis=1)\n    return arr\n",
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "def transform(in1):\n    indices = tf.stack([tf.range(tf.size(in1)), in1], axis=1)\n    return indices\n",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)\n",
            "return tf.stack([in1, tf.range(tf.shape(in1)[0])], axis=1)\n",
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "def transform(in1):\n    pairs = tf.stack([in1, tf.range(tf.size(in1))], axis=1)\n    return pairs\n",
            "def transform(in1):\n    indices = tf.expand_dims(tf.range(tf.size(in1)), axis=1)\n    indices = tf.tile(indices, [1, 2])\n    pairs = tf.stack([in1, tf.argmax(indices, axis=1)], axis=1)\n    return pairs\n",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)\n",
            "def transform(in1):\n    indices = tf.expand_dims(tf.range(tf.size(in1)), axis=1)\n    updates = tf.expand_dims(in1, axis=1)\n    return tf.concat([indices, updates], axis=1)\n",
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "return tf.transpose([tf.range(tf.size(in1)), in1])\n",
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))\n"
        ],
        "tf_operators": {
            "tf.size": 43,
            "tf.range": 47,
            "tf.transpose": 22,
            "tf.stack": 38,
            "tf.repeat": 2,
            "tf.ones_like": 1,
            "tf.expand_dims": 9,
            "tf.zeros_like": 2,
            "tf.concat": 6,
            "tf.math.cumsum": 1,
            "tf.one_hot": 1,
            "tf.reduce_max": 3,
            "tf.meshgrid": 1,
            "tf.shape": 3,
            "tf.tile": 2,
            "tf.int64": 3,
            "tf.cast": 2,
            "tf.argsort": 1,
            "tf.reshape": 2,
            "tf.gather": 1,
            "tf.argmax": 1
        },
        "coverage_percentage": 20.0,
        "total_covered": 1,
        "total_in_target": 5,
        "parsed_constants": [
            [],
            [],
            [
                1,
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [
                1,
                1,
                0
            ],
            [
                0
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1,
                2
            ],
            [
                1
            ],
            [],
            [
                1,
                1
            ],
            [],
            [
                1,
                1,
                1
            ],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                -1,
                1,
                1
            ],
            [
                1,
                2,
                1,
                1
            ],
            [
                1,
                -1,
                1,
                1
            ],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [],
            [
                1
            ],
            [
                1,
                1,
                2,
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1,
                1
            ],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [],
            []
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 122,
            "shape": 0,
            "tf_bool": 0,
            "provided": 3,
            "common": 52,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 3,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.002066115702479339,
                "tf.add(x, y)": 0.002066115702479339,
                "tf.add_n(inputs)": 0.002066115702479339,
                "tf.argmax(input, axis)": 0.004132231404958678,
                "tf.argmin(input, axis)": 0.002066115702479339,
                "tf.argsort(values, axis, stable=True)": 0.002066115702479339,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.002066115702479339,
                "tf.boolean_mask(tensor, mask)": 0.002066115702479339,
                "tf.broadcast_to(input, shape)": 0.002066115702479339,
                "tf.cast(x, dtype)": 0.006198347107438017,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.002066115702479339,
                "tf.concat(values, axis)": 0.014462809917355372,
                "tf.constant(value)": 0.002066115702479339,
                "tf.constant(value, dtype)": 0.002066115702479339,
                "tf.divide(x, y)": 0.002066115702479339,
                "tf.equal(x, y)": 0.002066115702479339,
                "tf.exp(x)": 0.002066115702479339,
                "tf.expand_dims(input, axis)": 0.024793388429752067,
                "tf.eye(num_rows)": 0.002066115702479339,
                "tf.eye(num_rows, num_columns)": 0.002066115702479339,
                "tf.eye(num_rows, dtype)": 0.002066115702479339,
                "tf.fill(dims, value)": 0.002066115702479339,
                "tf.gather(params, indices)": 0.004132231404958678,
                "tf.gather(params, indices, axis, batch_dims)": 0.002066115702479339,
                "tf.gather_nd(params, indices)": 0.002066115702479339,
                "tf.gather_nd(params, indices, batch_dims)": 0.002066115702479339,
                "tf.greater(x, y)": 0.002066115702479339,
                "tf.greater_equal(x, y)": 0.002066115702479339,
                "tf.math.bincount(arr)": 0.002066115702479339,
                "tf.math.ceil(x)": 0.002066115702479339,
                "tf.math.count_nonzero(input)": 0.002066115702479339,
                "tf.math.count_nonzero(input, axis)": 0.002066115702479339,
                "tf.math.cumsum(x, axis)": 0.002066115702479339,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004132231404958678,
                "tf.math.divide_no_nan(x, y)": 0.002066115702479339,
                "tf.math.floor(x)": 0.002066115702479339,
                "tf.math.log(x)": 0.002066115702479339,
                "tf.math.logical_and(x, y)": 0.002066115702479339,
                "tf.math.logical_not(x)": 0.002066115702479339,
                "tf.math.logical_or(x, y)": 0.002066115702479339,
                "tf.math.logical_xor(x, y)": 0.002066115702479339,
                "tf.math.negative(x)": 0.002066115702479339,
                "tf.math.reciprocal(x)": 0.002066115702479339,
                "tf.math.reciprocal_no_nan(x)": 0.002066115702479339,
                "tf.math.segment_max(data, segment_ids)": 0.002066115702479339,
                "tf.math.segment_mean(data, segment_ids)": 0.002066115702479339,
                "tf.math.segment_min(data, segment_ids)": 0.002066115702479339,
                "tf.math.segment_prod(data, segment_ids)": 0.002066115702479339,
                "tf.math.segment_sum(data, segment_ids)": 0.002066115702479339,
                "tf.math.squared_difference(x, y)": 0.002066115702479339,
                "tf.math.top_k(input, k)": 0.002066115702479339,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.002066115702479339,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.002066115702479339,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.002066115702479339,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.002066115702479339,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.002066115702479339,
                "tf.matmul(a, b)": 0.002066115702479339,
                "tf.maximum(x, y)": 0.002066115702479339,
                "tf.minimum(x, y)": 0.002066115702479339,
                "tf.multiply(x, y)": 0.002066115702479339,
                "tf.not_equal(x, y)": 0.002066115702479339,
                "tf.one_hot(indices, depth)": 0.004132231404958678,
                "tf.ones(shape)": 0.002066115702479339,
                "tf.ones_like(input)": 0.004132231404958678,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.002066115702479339,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.002066115702479339,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.002066115702479339,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.002066115702479339,
                "tf.range(start)": 0.09917355371900827,
                "tf.range(start, limit, delta)": 0.004132231404958678,
                "tf.reduce_any(input_tensor, axis)": 0.002066115702479339,
                "tf.reduce_all(input_tensor, axis)": 0.002066115702479339,
                "tf.reduce_max(input_tensor)": 0.008264462809917356,
                "tf.reduce_max(input_tensor, axis)": 0.002066115702479339,
                "tf.reduce_mean(input_tensor)": 0.002066115702479339,
                "tf.reduce_mean(input_tensor, axis)": 0.002066115702479339,
                "tf.reduce_min(input_tensor)": 0.002066115702479339,
                "tf.reduce_min(input_tensor, axis)": 0.002066115702479339,
                "tf.reduce_prod(input_tensor, axis)": 0.002066115702479339,
                "tf.reduce_sum(input_tensor)": 0.002066115702479339,
                "tf.reduce_sum(input_tensor, axis)": 0.002066115702479339,
                "tf.repeat(input, repeats)": 0.004132231404958678,
                "tf.repeat(input, repeats, axis)": 0.002066115702479339,
                "tf.reshape(tensor, shape)": 0.006198347107438017,
                "tf.reverse(tensor, axis)": 0.002066115702479339,
                "tf.roll(input, shift, axis)": 0.002066115702479339,
                "tf.round(x)": 0.002066115702479339,
                "tf.scatter_nd(indices, updates, shape)": 0.002066115702479339,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.002066115702479339,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.002066115702479339,
                "tf.sequence_mask(lengths)": 0.002066115702479339,
                "tf.sequence_mask(lengths, maxlen)": 0.002066115702479339,
                "tf.shape(input)": 0.008264462809917356,
                "tf.sign(x)": 0.002066115702479339,
                "tf.sort(values, axis)": 0.002066115702479339,
                "tf.sort(values, axis, direction='DESCENDING')": 0.002066115702479339,
                "tf.sqrt(x)": 0.002066115702479339,
                "tf.square(x)": 0.002066115702479339,
                "tf.squeeze(input)": 0.002066115702479339,
                "tf.squeeze(input, axis)": 0.002066115702479339,
                "tf.stack(values, axis)": 0.08057851239669421,
                "tf.subtract(x, y)": 0.002066115702479339,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.002066115702479339,
                "tf.tensordot(a, b, axes)": 0.002066115702479339,
                "tf.tile(input, multiples)": 0.006198347107438017,
                "tf.transpose(a)": 0.045454545454545456,
                "tf.transpose(a, perm)": 0.002066115702479339,
                "tf.unique_with_counts(x)": 0.002066115702479339,
                "tf.unstack(value, axis)": 0.002066115702479339,
                "tf.where(condition)": 0.002066115702479339,
                "tf.where(condition, x, y)": 0.002066115702479339,
                "tf.zeros(shape)": 0.002066115702479339,
                "tf.zeros_like(input)": 0.006198347107438017,
                "tf.SparseTensor(indices, values, dense_shape)": 0.002066115702479339,
                "tf.sparse.add(a, b)": 0.002066115702479339,
                "tf.sparse.concat(axis, sp_inputs)": 0.002066115702479339,
                "tf.sparse.expand_dims(sp_input, axis)": 0.002066115702479339,
                "tf.sparse.from_dense(tensor)": 0.002066115702479339,
                "tf.sparse.maximum(sp_a, sp_b)": 0.002066115702479339,
                "tf.sparse.minimum(sp_a, sp_b)": 0.002066115702479339,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.002066115702479339,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.002066115702479339,
                "tf.sparse.reset_shape(sp_input)": 0.002066115702479339,
                "tf.sparse.reshape(sp_input, shape)": 0.002066115702479339,
                "tf.sparse.retain(sp_input, to_retain)": 0.002066115702479339,
                "tf.sparse.slice(sp_input, start, size)": 0.002066115702479339,
                "tf.sparse.split(sp_input, num_split, axis)": 0.002066115702479339,
                "tf.sparse.to_dense(sp_input)": 0.002066115702479339,
                "tf.sparse.to_dense(sp_input, default_value)": 0.002066115702479339,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.002066115702479339,
                "tf.sparse.transpose(sp_input)": 0.002066115702479339,
                "tf.sparse.transpose(sp_input, perm)": 0.002066115702479339,
                "IndexingAxis1Operation": 0.002066115702479339,
                "IndexingOperation": 0.008264462809917356,
                "PairCreationOperation": 0.006198347107438017,
                "SingletonTupleCreationOperation": 0.002066115702479339,
                "SlicingAxis0BothOperation": 0.002066115702479339,
                "SlicingAxis0LeftOperation": 0.002066115702479339,
                "SlicingAxis0RightOperation": 0.002066115702479339,
                "SlicingAxis1BothOperation": 0.002066115702479339,
                "SlicingAxis1LeftOperation": 0.002066115702479339,
                "SlicingAxis1RightOperation": 0.002066115702479339,
                "TripleCreationOperation": 0.002066115702479339,
                "PROVIDED_CONSTANT_WEIGHT": 0.008264462809917356,
                "COMMON_CONSTANT_WEIGHT": 0.10950413223140495,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.002066115702479339,
                "INPUT_VARIABLE_WEIGHT": 0.25413223140495866,
                "AXIS_CONSTANT_WEIGHT": 0.002066115702479339,
                "SHAPE_CONSTANT_WEIGHT": 0.002066115702479339,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.002066115702479339,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.002066115702479339,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.002066115702479339,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.002066115702479339,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.008264462809917356
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 6,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 5,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 3,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 7,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 4,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 4,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 7,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 9,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 7
            }
        }
    },
    {
        "name": "google_03",
        "description": "Slice the first dimension of a SparseTensor",
        "target_program": "tf.divide(in1, tf.expand_dims(tf.reduce_sum(in1, axis=1), 1))",
        "source": "Real task encountered by Googler, 11/01/2018",
        "constants": "[]",
        "examples": {
            "inputs": "tf.SparseTensor(indices=[[0, 0, 0], [0, 1, 1], [1, 1, 1], [1, 1, 2]], values=[1., 1., 1., 1.], dense_shape=[2, 2, 800])",
            "outputs": "tf.SparseTensor(indices=[[0, 0, 0], [0, 1, 1]], values=[1., 1.], dense_shape=[1, 2, 800])"
        },
        "completions": [
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "output_indices = tf.sparse.slice(in1.indices, [0, 0, 0], [2, -1, -1])\noutput_values = tf.sparse.slice(in1.values, [0], [2])\noutput_dense_shape = tf.sparse.slice(in1.dense_shape, [0], [1])\n\nreturn tf.SparseTensor(indices=output_indices, values=output_values, dense_shape=output_dense_shape)\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, start=[0, 0, 0], size=[1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "output = tf.sparse.slice(in1, start=[0, 0, 0], size=[1, -1, -1])\nreturn output\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, -1, -1])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, tf.constant([0, 0, 0], dtype=tf.int64), tf.constant([1, 2, 800], dtype=tf.int64))",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, -1, -1])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "sp_input = in1\nstart = tf.constant([0, 0, 0], dtype=tf.int64)\nsize = tf.constant([1, tf.shape(sp_input.indices)[1]], dtype=tf.int64)\nsp_output = tf.sparse.slice(sp_input, start, size)\nreturn sp_output\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "out_indices = tf.sparse.slice(in1.indices, [0, 0, 0], [2, -1, -1])\nout_values = tf.slice(in1.values, [0], [2])\nout_shape = tf.slice(in1.dense_shape, [0], [2])\nreturn tf.SparseTensor(indices=out_indices, values=out_values, dense_shape=out_shape)\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [2, 2, 800])",
            "output_indices = tf.sparse.slice(in1, [0, 0, 0], [2, -1, -1]).indices\noutput_values = tf.sparse.slice(in1, [0, 0, 0], [2, -1, -1]).values\noutput_dense_shape = tf.concat([[1], in1.dense_shape[1:]], axis=0)\noutput = tf.SparseTensor(indices=output_indices, values=output_values, dense_shape=output_dense_shape)\nreturn output\n",
            "result = tf.sparse.slice(in1, start=[0, 0, 0], size=[1, -1, -1])\nreturn result\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, start=[0, 0, 0], size=[1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "result = tf.sparse.slice(in1, [0, 0, 0], [1, -1, -1])\nreturn result\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "output_indices = tf.sparse.slice(in1.indices, [0, 0], [2, -1])\noutput_values = tf.sparse.slice(in1.values, [0], [2])\noutput_dense_shape = tf.sparse.slice(in1.dense_shape, [0], [1, -1])\noutput = tf.SparseTensor(indices=output_indices, values=output_values, dense_shape=output_dense_shape)\nreturn output\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [2, 2, 800])\n",
            "return tf.sparse.slice(in1, start=[0, 0, 0], size=[1, 2, 800])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n"
        ],
        "tf_operators": {
            "tf.sparse.slice": 50,
            "tf.SparseTensor": 4,
            "tf.int64": 2,
            "tf.constant": 2,
            "tf.shape": 1,
            "tf.slice": 1,
            "tf.concat": 1
        },
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 3,
        "parsed_constants": [
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                2,
                -1,
                -1,
                0,
                2,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                1
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                2,
                -1,
                -1,
                0,
                2,
                0,
                2
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                2,
                2,
                800
            ],
            [
                0,
                0,
                0,
                2,
                -1,
                -1,
                0,
                0,
                0,
                2,
                -1,
                -1,
                1,
                1,
                0
            ],
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                2,
                -1,
                0,
                2,
                0,
                1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                1,
                2
            ],
            [
                0,
                0,
                0,
                2,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            800,
            -1
        ],
        "constant_counts": [
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 2,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 2,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 13,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 48,
            "shape": 39,
            "tf_bool": 0,
            "provided": 0,
            "common": 229,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 51,
            "tf_int64": 4,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.001692047377326565,
                "tf.add(x, y)": 0.001692047377326565,
                "tf.add_n(inputs)": 0.001692047377326565,
                "tf.argmax(input, axis)": 0.001692047377326565,
                "tf.argmin(input, axis)": 0.001692047377326565,
                "tf.argsort(values, axis, stable=True)": 0.001692047377326565,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.001692047377326565,
                "tf.boolean_mask(tensor, mask)": 0.001692047377326565,
                "tf.broadcast_to(input, shape)": 0.001692047377326565,
                "tf.cast(x, dtype)": 0.001692047377326565,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.001692047377326565,
                "tf.concat(values, axis)": 0.00338409475465313,
                "tf.constant(value)": 0.001692047377326565,
                "tf.constant(value, dtype)": 0.001692047377326565,
                "tf.divide(x, y)": 0.001692047377326565,
                "tf.equal(x, y)": 0.001692047377326565,
                "tf.exp(x)": 0.001692047377326565,
                "tf.expand_dims(input, axis)": 0.001692047377326565,
                "tf.eye(num_rows)": 0.001692047377326565,
                "tf.eye(num_rows, num_columns)": 0.001692047377326565,
                "tf.eye(num_rows, dtype)": 0.001692047377326565,
                "tf.fill(dims, value)": 0.001692047377326565,
                "tf.gather(params, indices)": 0.001692047377326565,
                "tf.gather(params, indices, axis, batch_dims)": 0.001692047377326565,
                "tf.gather_nd(params, indices)": 0.001692047377326565,
                "tf.gather_nd(params, indices, batch_dims)": 0.001692047377326565,
                "tf.greater(x, y)": 0.001692047377326565,
                "tf.greater_equal(x, y)": 0.001692047377326565,
                "tf.math.bincount(arr)": 0.001692047377326565,
                "tf.math.ceil(x)": 0.001692047377326565,
                "tf.math.count_nonzero(input)": 0.001692047377326565,
                "tf.math.count_nonzero(input, axis)": 0.001692047377326565,
                "tf.math.cumsum(x, axis)": 0.001692047377326565,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.001692047377326565,
                "tf.math.divide_no_nan(x, y)": 0.001692047377326565,
                "tf.math.floor(x)": 0.001692047377326565,
                "tf.math.log(x)": 0.001692047377326565,
                "tf.math.logical_and(x, y)": 0.001692047377326565,
                "tf.math.logical_not(x)": 0.001692047377326565,
                "tf.math.logical_or(x, y)": 0.001692047377326565,
                "tf.math.logical_xor(x, y)": 0.001692047377326565,
                "tf.math.negative(x)": 0.001692047377326565,
                "tf.math.reciprocal(x)": 0.001692047377326565,
                "tf.math.reciprocal_no_nan(x)": 0.001692047377326565,
                "tf.math.segment_max(data, segment_ids)": 0.001692047377326565,
                "tf.math.segment_mean(data, segment_ids)": 0.001692047377326565,
                "tf.math.segment_min(data, segment_ids)": 0.001692047377326565,
                "tf.math.segment_prod(data, segment_ids)": 0.001692047377326565,
                "tf.math.segment_sum(data, segment_ids)": 0.001692047377326565,
                "tf.math.squared_difference(x, y)": 0.001692047377326565,
                "tf.math.top_k(input, k)": 0.001692047377326565,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.001692047377326565,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.001692047377326565,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.001692047377326565,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.001692047377326565,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.001692047377326565,
                "tf.matmul(a, b)": 0.001692047377326565,
                "tf.maximum(x, y)": 0.001692047377326565,
                "tf.minimum(x, y)": 0.001692047377326565,
                "tf.multiply(x, y)": 0.001692047377326565,
                "tf.not_equal(x, y)": 0.001692047377326565,
                "tf.one_hot(indices, depth)": 0.001692047377326565,
                "tf.ones(shape)": 0.001692047377326565,
                "tf.ones_like(input)": 0.001692047377326565,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.001692047377326565,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.001692047377326565,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.001692047377326565,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.001692047377326565,
                "tf.range(start)": 0.001692047377326565,
                "tf.range(start, limit, delta)": 0.001692047377326565,
                "tf.reduce_any(input_tensor, axis)": 0.001692047377326565,
                "tf.reduce_all(input_tensor, axis)": 0.001692047377326565,
                "tf.reduce_max(input_tensor)": 0.001692047377326565,
                "tf.reduce_max(input_tensor, axis)": 0.001692047377326565,
                "tf.reduce_mean(input_tensor)": 0.001692047377326565,
                "tf.reduce_mean(input_tensor, axis)": 0.001692047377326565,
                "tf.reduce_min(input_tensor)": 0.001692047377326565,
                "tf.reduce_min(input_tensor, axis)": 0.001692047377326565,
                "tf.reduce_prod(input_tensor, axis)": 0.001692047377326565,
                "tf.reduce_sum(input_tensor)": 0.001692047377326565,
                "tf.reduce_sum(input_tensor, axis)": 0.001692047377326565,
                "tf.repeat(input, repeats)": 0.001692047377326565,
                "tf.repeat(input, repeats, axis)": 0.001692047377326565,
                "tf.reshape(tensor, shape)": 0.001692047377326565,
                "tf.reverse(tensor, axis)": 0.001692047377326565,
                "tf.roll(input, shift, axis)": 0.001692047377326565,
                "tf.round(x)": 0.001692047377326565,
                "tf.scatter_nd(indices, updates, shape)": 0.001692047377326565,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.001692047377326565,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.001692047377326565,
                "tf.sequence_mask(lengths)": 0.001692047377326565,
                "tf.sequence_mask(lengths, maxlen)": 0.001692047377326565,
                "tf.shape(input)": 0.00338409475465313,
                "tf.sign(x)": 0.001692047377326565,
                "tf.sort(values, axis)": 0.001692047377326565,
                "tf.sort(values, axis, direction='DESCENDING')": 0.001692047377326565,
                "tf.sqrt(x)": 0.001692047377326565,
                "tf.square(x)": 0.001692047377326565,
                "tf.squeeze(input)": 0.001692047377326565,
                "tf.squeeze(input, axis)": 0.001692047377326565,
                "tf.stack(values, axis)": 0.001692047377326565,
                "tf.subtract(x, y)": 0.001692047377326565,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.001692047377326565,
                "tf.tensordot(a, b, axes)": 0.001692047377326565,
                "tf.tile(input, multiples)": 0.001692047377326565,
                "tf.transpose(a)": 0.001692047377326565,
                "tf.transpose(a, perm)": 0.001692047377326565,
                "tf.unique_with_counts(x)": 0.001692047377326565,
                "tf.unstack(value, axis)": 0.001692047377326565,
                "tf.where(condition)": 0.001692047377326565,
                "tf.where(condition, x, y)": 0.001692047377326565,
                "tf.zeros(shape)": 0.001692047377326565,
                "tf.zeros_like(input)": 0.001692047377326565,
                "tf.SparseTensor(indices, values, dense_shape)": 0.008460236886632826,
                "tf.sparse.add(a, b)": 0.001692047377326565,
                "tf.sparse.concat(axis, sp_inputs)": 0.001692047377326565,
                "tf.sparse.expand_dims(sp_input, axis)": 0.001692047377326565,
                "tf.sparse.from_dense(tensor)": 0.001692047377326565,
                "tf.sparse.maximum(sp_a, sp_b)": 0.001692047377326565,
                "tf.sparse.minimum(sp_a, sp_b)": 0.001692047377326565,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.001692047377326565,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.001692047377326565,
                "tf.sparse.reset_shape(sp_input)": 0.001692047377326565,
                "tf.sparse.reshape(sp_input, shape)": 0.001692047377326565,
                "tf.sparse.retain(sp_input, to_retain)": 0.001692047377326565,
                "tf.sparse.slice(sp_input, start, size)": 0.09475465313028765,
                "tf.sparse.split(sp_input, num_split, axis)": 0.001692047377326565,
                "tf.sparse.to_dense(sp_input)": 0.001692047377326565,
                "tf.sparse.to_dense(sp_input, default_value)": 0.001692047377326565,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.001692047377326565,
                "tf.sparse.transpose(sp_input)": 0.001692047377326565,
                "tf.sparse.transpose(sp_input, perm)": 0.001692047377326565,
                "IndexingAxis1Operation": 0.001692047377326565,
                "IndexingOperation": 0.00676818950930626,
                "PairCreationOperation": 0.001692047377326565,
                "SingletonTupleCreationOperation": 0.001692047377326565,
                "SlicingAxis0BothOperation": 0.001692047377326565,
                "SlicingAxis0LeftOperation": 0.00338409475465313,
                "SlicingAxis0RightOperation": 0.001692047377326565,
                "SlicingAxis1BothOperation": 0.001692047377326565,
                "SlicingAxis1LeftOperation": 0.001692047377326565,
                "SlicingAxis1RightOperation": 0.001692047377326565,
                "TripleCreationOperation": 0.001692047377326565,
                "PROVIDED_CONSTANT_WEIGHT": 0.001692047377326565,
                "COMMON_CONSTANT_WEIGHT": 0.38917089678510997,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.001692047377326565,
                "INPUT_VARIABLE_WEIGHT": 0.0829103214890017,
                "AXIS_CONSTANT_WEIGHT": 0.08798646362098139,
                "SHAPE_CONSTANT_WEIGHT": 0.0676818950930626,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.001692047377326565,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.001692047377326565,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.001692047377326565,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.001692047377326565,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.008460236886632826
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 9,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 9,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 9,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 8,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 3,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 7,
                "PairCreationOperation": 9,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 1,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 4,
                "AXIS_CONSTANT_WEIGHT": 4,
                "SHAPE_CONSTANT_WEIGHT": 4,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 7
            }
        }
    },
    {
        "name": "google_04",
        "description": "Reshape a flat array into a rank 3 tensor",
        "target_program": "tf.reshape(in1, shape=(4, 3, 2))",
        "source": "Real task encountered by Googler, 3/21/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[111, 112, 121, 122, 131, 132, 211, 212, 221, 222, 231, 232, 311, 312, 321, 322, 331, 332, 411, 412, 421, 422, 431, 432],]",
            "outputs": "[[[111, 112], [121, 122], [131, 132]],    [[211, 212], [221, 222], [231, 232]],    [[311, 312], [321, 322], [331, 332]],    [[411, 412], [421, 422], [431, 432]]]"
        },
        "completions": [
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, [4, 3, 2])\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))"
        ],
        "tf_operators": {
            "tf.reshape": 50
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ]
        ],
        "all_constants": [
            2,
            3,
            4
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            }
        ],
        "aggregate_constant_count": {
            "input_var": 50,
            "shape": 0,
            "tf_bool": 0,
            "provided": 6,
            "common": 0,
            "shape_tuple": 48,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0028011204481792717,
                "tf.add(x, y)": 0.0028011204481792717,
                "tf.add_n(inputs)": 0.0028011204481792717,
                "tf.argmax(input, axis)": 0.0028011204481792717,
                "tf.argmin(input, axis)": 0.0028011204481792717,
                "tf.argsort(values, axis, stable=True)": 0.0028011204481792717,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0028011204481792717,
                "tf.boolean_mask(tensor, mask)": 0.0028011204481792717,
                "tf.broadcast_to(input, shape)": 0.0028011204481792717,
                "tf.cast(x, dtype)": 0.0028011204481792717,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0028011204481792717,
                "tf.concat(values, axis)": 0.0028011204481792717,
                "tf.constant(value)": 0.0028011204481792717,
                "tf.constant(value, dtype)": 0.0028011204481792717,
                "tf.divide(x, y)": 0.0028011204481792717,
                "tf.equal(x, y)": 0.0028011204481792717,
                "tf.exp(x)": 0.0028011204481792717,
                "tf.expand_dims(input, axis)": 0.0028011204481792717,
                "tf.eye(num_rows)": 0.0028011204481792717,
                "tf.eye(num_rows, num_columns)": 0.0028011204481792717,
                "tf.eye(num_rows, dtype)": 0.0028011204481792717,
                "tf.fill(dims, value)": 0.0028011204481792717,
                "tf.gather(params, indices)": 0.0028011204481792717,
                "tf.gather(params, indices, axis, batch_dims)": 0.0028011204481792717,
                "tf.gather_nd(params, indices)": 0.0028011204481792717,
                "tf.gather_nd(params, indices, batch_dims)": 0.0028011204481792717,
                "tf.greater(x, y)": 0.0028011204481792717,
                "tf.greater_equal(x, y)": 0.0028011204481792717,
                "tf.math.bincount(arr)": 0.0028011204481792717,
                "tf.math.ceil(x)": 0.0028011204481792717,
                "tf.math.count_nonzero(input)": 0.0028011204481792717,
                "tf.math.count_nonzero(input, axis)": 0.0028011204481792717,
                "tf.math.cumsum(x, axis)": 0.0028011204481792717,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0028011204481792717,
                "tf.math.divide_no_nan(x, y)": 0.0028011204481792717,
                "tf.math.floor(x)": 0.0028011204481792717,
                "tf.math.log(x)": 0.0028011204481792717,
                "tf.math.logical_and(x, y)": 0.0028011204481792717,
                "tf.math.logical_not(x)": 0.0028011204481792717,
                "tf.math.logical_or(x, y)": 0.0028011204481792717,
                "tf.math.logical_xor(x, y)": 0.0028011204481792717,
                "tf.math.negative(x)": 0.0028011204481792717,
                "tf.math.reciprocal(x)": 0.0028011204481792717,
                "tf.math.reciprocal_no_nan(x)": 0.0028011204481792717,
                "tf.math.segment_max(data, segment_ids)": 0.0028011204481792717,
                "tf.math.segment_mean(data, segment_ids)": 0.0028011204481792717,
                "tf.math.segment_min(data, segment_ids)": 0.0028011204481792717,
                "tf.math.segment_prod(data, segment_ids)": 0.0028011204481792717,
                "tf.math.segment_sum(data, segment_ids)": 0.0028011204481792717,
                "tf.math.squared_difference(x, y)": 0.0028011204481792717,
                "tf.math.top_k(input, k)": 0.0028011204481792717,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0028011204481792717,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0028011204481792717,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0028011204481792717,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0028011204481792717,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0028011204481792717,
                "tf.matmul(a, b)": 0.0028011204481792717,
                "tf.maximum(x, y)": 0.0028011204481792717,
                "tf.minimum(x, y)": 0.0028011204481792717,
                "tf.multiply(x, y)": 0.0028011204481792717,
                "tf.not_equal(x, y)": 0.0028011204481792717,
                "tf.one_hot(indices, depth)": 0.0028011204481792717,
                "tf.ones(shape)": 0.0028011204481792717,
                "tf.ones_like(input)": 0.0028011204481792717,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0028011204481792717,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0028011204481792717,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0028011204481792717,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0028011204481792717,
                "tf.range(start)": 0.0028011204481792717,
                "tf.range(start, limit, delta)": 0.0028011204481792717,
                "tf.reduce_any(input_tensor, axis)": 0.0028011204481792717,
                "tf.reduce_all(input_tensor, axis)": 0.0028011204481792717,
                "tf.reduce_max(input_tensor)": 0.0028011204481792717,
                "tf.reduce_max(input_tensor, axis)": 0.0028011204481792717,
                "tf.reduce_mean(input_tensor)": 0.0028011204481792717,
                "tf.reduce_mean(input_tensor, axis)": 0.0028011204481792717,
                "tf.reduce_min(input_tensor)": 0.0028011204481792717,
                "tf.reduce_min(input_tensor, axis)": 0.0028011204481792717,
                "tf.reduce_prod(input_tensor, axis)": 0.0028011204481792717,
                "tf.reduce_sum(input_tensor)": 0.0028011204481792717,
                "tf.reduce_sum(input_tensor, axis)": 0.0028011204481792717,
                "tf.repeat(input, repeats)": 0.0028011204481792717,
                "tf.repeat(input, repeats, axis)": 0.0028011204481792717,
                "tf.reshape(tensor, shape)": 0.14285714285714285,
                "tf.reverse(tensor, axis)": 0.0028011204481792717,
                "tf.roll(input, shift, axis)": 0.0028011204481792717,
                "tf.round(x)": 0.0028011204481792717,
                "tf.scatter_nd(indices, updates, shape)": 0.0028011204481792717,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0028011204481792717,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0028011204481792717,
                "tf.sequence_mask(lengths)": 0.0028011204481792717,
                "tf.sequence_mask(lengths, maxlen)": 0.0028011204481792717,
                "tf.shape(input)": 0.0028011204481792717,
                "tf.sign(x)": 0.0028011204481792717,
                "tf.sort(values, axis)": 0.0028011204481792717,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0028011204481792717,
                "tf.sqrt(x)": 0.0028011204481792717,
                "tf.square(x)": 0.0028011204481792717,
                "tf.squeeze(input)": 0.0028011204481792717,
                "tf.squeeze(input, axis)": 0.0028011204481792717,
                "tf.stack(values, axis)": 0.0028011204481792717,
                "tf.subtract(x, y)": 0.0028011204481792717,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0028011204481792717,
                "tf.tensordot(a, b, axes)": 0.0028011204481792717,
                "tf.tile(input, multiples)": 0.0028011204481792717,
                "tf.transpose(a)": 0.0028011204481792717,
                "tf.transpose(a, perm)": 0.0028011204481792717,
                "tf.unique_with_counts(x)": 0.0028011204481792717,
                "tf.unstack(value, axis)": 0.0028011204481792717,
                "tf.where(condition)": 0.0028011204481792717,
                "tf.where(condition, x, y)": 0.0028011204481792717,
                "tf.zeros(shape)": 0.0028011204481792717,
                "tf.zeros_like(input)": 0.0028011204481792717,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0028011204481792717,
                "tf.sparse.add(a, b)": 0.0028011204481792717,
                "tf.sparse.concat(axis, sp_inputs)": 0.0028011204481792717,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0028011204481792717,
                "tf.sparse.from_dense(tensor)": 0.0028011204481792717,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0028011204481792717,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0028011204481792717,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0028011204481792717,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0028011204481792717,
                "tf.sparse.reset_shape(sp_input)": 0.0028011204481792717,
                "tf.sparse.reshape(sp_input, shape)": 0.0028011204481792717,
                "tf.sparse.retain(sp_input, to_retain)": 0.0028011204481792717,
                "tf.sparse.slice(sp_input, start, size)": 0.0028011204481792717,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0028011204481792717,
                "tf.sparse.to_dense(sp_input)": 0.0028011204481792717,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0028011204481792717,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0028011204481792717,
                "tf.sparse.transpose(sp_input)": 0.0028011204481792717,
                "tf.sparse.transpose(sp_input, perm)": 0.0028011204481792717,
                "IndexingAxis1Operation": 0.0028011204481792717,
                "IndexingOperation": 0.0028011204481792717,
                "PairCreationOperation": 0.0028011204481792717,
                "SingletonTupleCreationOperation": 0.0028011204481792717,
                "SlicingAxis0BothOperation": 0.0028011204481792717,
                "SlicingAxis0LeftOperation": 0.0028011204481792717,
                "SlicingAxis0RightOperation": 0.0028011204481792717,
                "SlicingAxis1BothOperation": 0.0028011204481792717,
                "SlicingAxis1LeftOperation": 0.0028011204481792717,
                "SlicingAxis1RightOperation": 0.0028011204481792717,
                "TripleCreationOperation": 0.13725490196078433,
                "PROVIDED_CONSTANT_WEIGHT": 0.0196078431372549,
                "COMMON_CONSTANT_WEIGHT": 0.0028011204481792717,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0028011204481792717,
                "INPUT_VARIABLE_WEIGHT": 0.14285714285714285,
                "AXIS_CONSTANT_WEIGHT": 0.0028011204481792717,
                "SHAPE_CONSTANT_WEIGHT": 0.0028011204481792717,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.13725490196078433,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0028011204481792717,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0028011204481792717,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0028011204481792717,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0028011204481792717
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 3,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 3,
                "PROVIDED_CONSTANT_WEIGHT": 6,
                "COMMON_CONSTANT_WEIGHT": 8,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 3,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_05",
        "description": "Repeat each input entry 6 times",
        "target_program": "tf.tile(tf.expand_dims(in1, 1), (1, 6, 1))",
        "source": "Real task encountered by Googler, 3/22/2019",
        "constants": "[6]",
        "examples": {
            "inputs": "[[[1, 2, 3, 4], [5, 6, 7, 8]],]",
            "outputs": "[[[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4],     [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]],    [[5, 6, 7, 8], [5, 6, 7, 8], [5, 6, 7, 8],     [5, 6, 7, 8], [5, 6, 7, 8], [5, 6, 7, 8]]]"
        },
        "completions": [
            "return tf.repeat(in1, repeats=6, axis=1)",
            "return tf.repeat(in1, 6, axis=1)\n",
            "return tf.repeat(in1, 6, axis=1)\n",
            "return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 6])",
            "return tf.tile(tf.expand_dims(in1, 2), [1, 1, 6])\n",
            "return tf.repeat(input=in1, repeats=6, axis=1)\n",
            "return tf.repeat(in1, 6, axis=1)\n",
            "return tf.repeat(in1, 6, axis=1)",
            "out = tf.repeat(in1, repeats=6, axis=1)\nreturn out\n",
            "return tf.repeat(in1, repeats=6, axis=1)\n",
            "return tf.repeat(in1, 6)",
            "return tf.tile(in1, [1, 6])",
            "return tf.tile(in1, [1, 6])",
            "return tf.tile(in1, [1, 6])\n",
            "return tf.repeat(in1, 6)\n",
            "return tf.repeat(in1, repeats=6, axis=1)",
            "return tf.repeat(in1, 6, axis=1)\n",
            "return tf.repeat(in1, 6, axis=0)",
            "return tf.repeat(in1, 6, axis=1)",
            "return tf.repeat(in1, 6, axis=1)\n",
            "return tf.repeat(in1, repeats=6, axis=1)\n",
            "return tf.repeat(in1, 6, axis=1)",
            "return tf.repeat(in1, 6, axis=1)",
            "return tf.repeat(in1, repeats=6, axis=1)\n",
            "return tf.tile(tf.expand_dims(in1, 2), [1, 1, 6])\n",
            "return tf.repeat(in1, repeats=6, axis=1)\n",
            "return tf.repeat(in1, repeats=6, axis=1)",
            "return tf.repeat(in1, 6)",
            "return tf.repeat(in1, repeats=6, axis=1)",
            "return tf.repeat(in1, 6, axis=1)",
            "return tf.repeat(in1, repeats=6)\n",
            "return tf.repeat(in1, 6, axis=1)\n",
            "return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 6])",
            "return tf.repeat(in1, repeats=6, axis=1)",
            "return tf.repeat(in1, 6, axis=1)",
            "return tf.repeat(tf.expand_dims(in1, axis=2), 6, axis=2)",
            "return tf.repeat(in1, 6, axis=1)",
            "return tf.repeat(in1, 6, axis=1)\n",
            "return tf.tile(tf.expand_dims(in1, axis=-1), [1, 1, 6])",
            "return tf.repeat(in1, 6, axis=1)",
            "return tf.repeat(in1, repeats=6, axis=1)",
            "return tf.repeat(in1, 6)",
            "return tf.tile(in1, [1, 6])",
            "out = tf.repeat(in1, repeats=6)\nreturn out\n",
            "return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 6])",
            "return tf.repeat(in1, 6, axis=1)",
            "return tf.repeat(in1, repeats=6, axis=1)",
            "return tf.tile(in1, [1, 6])\n",
            "return tf.repeat(in1, repeats=6, axis=1)\n",
            "return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)"
        ],
        "tf_operators": {
            "tf.repeat": 39,
            "tf.tile": 11,
            "tf.expand_dims": 8
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                2,
                1,
                1,
                6
            ],
            [
                2,
                1,
                1,
                6
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6
            ],
            [
                1,
                6
            ],
            [
                1,
                6
            ],
            [
                1,
                6
            ],
            [
                6
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6,
                0
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                2,
                1,
                1,
                6
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6
            ],
            [
                6,
                1
            ],
            [
                2,
                1,
                1,
                6
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                2,
                6,
                2
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                -1,
                1,
                1,
                6
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6
            ],
            [
                1,
                6
            ],
            [
                6
            ],
            [
                2,
                1,
                1,
                6
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                1,
                6
            ],
            [
                6,
                1
            ],
            [
                1,
                6,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            6,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 2,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 50,
            "shape": 0,
            "tf_bool": 0,
            "provided": 50,
            "common": 51,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 7,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0029585798816568047,
                "tf.add(x, y)": 0.0029585798816568047,
                "tf.add_n(inputs)": 0.0029585798816568047,
                "tf.argmax(input, axis)": 0.0029585798816568047,
                "tf.argmin(input, axis)": 0.0029585798816568047,
                "tf.argsort(values, axis, stable=True)": 0.0029585798816568047,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0029585798816568047,
                "tf.boolean_mask(tensor, mask)": 0.0029585798816568047,
                "tf.broadcast_to(input, shape)": 0.0029585798816568047,
                "tf.cast(x, dtype)": 0.0029585798816568047,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0029585798816568047,
                "tf.concat(values, axis)": 0.0029585798816568047,
                "tf.constant(value)": 0.0029585798816568047,
                "tf.constant(value, dtype)": 0.0029585798816568047,
                "tf.divide(x, y)": 0.0029585798816568047,
                "tf.equal(x, y)": 0.0029585798816568047,
                "tf.exp(x)": 0.0029585798816568047,
                "tf.expand_dims(input, axis)": 0.026627218934911243,
                "tf.eye(num_rows)": 0.0029585798816568047,
                "tf.eye(num_rows, num_columns)": 0.0029585798816568047,
                "tf.eye(num_rows, dtype)": 0.0029585798816568047,
                "tf.fill(dims, value)": 0.0029585798816568047,
                "tf.gather(params, indices)": 0.0029585798816568047,
                "tf.gather(params, indices, axis, batch_dims)": 0.0029585798816568047,
                "tf.gather_nd(params, indices)": 0.0029585798816568047,
                "tf.gather_nd(params, indices, batch_dims)": 0.0029585798816568047,
                "tf.greater(x, y)": 0.0029585798816568047,
                "tf.greater_equal(x, y)": 0.0029585798816568047,
                "tf.math.bincount(arr)": 0.0029585798816568047,
                "tf.math.ceil(x)": 0.0029585798816568047,
                "tf.math.count_nonzero(input)": 0.0029585798816568047,
                "tf.math.count_nonzero(input, axis)": 0.0029585798816568047,
                "tf.math.cumsum(x, axis)": 0.0029585798816568047,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0029585798816568047,
                "tf.math.divide_no_nan(x, y)": 0.0029585798816568047,
                "tf.math.floor(x)": 0.0029585798816568047,
                "tf.math.log(x)": 0.0029585798816568047,
                "tf.math.logical_and(x, y)": 0.0029585798816568047,
                "tf.math.logical_not(x)": 0.0029585798816568047,
                "tf.math.logical_or(x, y)": 0.0029585798816568047,
                "tf.math.logical_xor(x, y)": 0.0029585798816568047,
                "tf.math.negative(x)": 0.0029585798816568047,
                "tf.math.reciprocal(x)": 0.0029585798816568047,
                "tf.math.reciprocal_no_nan(x)": 0.0029585798816568047,
                "tf.math.segment_max(data, segment_ids)": 0.0029585798816568047,
                "tf.math.segment_mean(data, segment_ids)": 0.0029585798816568047,
                "tf.math.segment_min(data, segment_ids)": 0.0029585798816568047,
                "tf.math.segment_prod(data, segment_ids)": 0.0029585798816568047,
                "tf.math.segment_sum(data, segment_ids)": 0.0029585798816568047,
                "tf.math.squared_difference(x, y)": 0.0029585798816568047,
                "tf.math.top_k(input, k)": 0.0029585798816568047,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0029585798816568047,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0029585798816568047,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0029585798816568047,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0029585798816568047,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0029585798816568047,
                "tf.matmul(a, b)": 0.0029585798816568047,
                "tf.maximum(x, y)": 0.0029585798816568047,
                "tf.minimum(x, y)": 0.0029585798816568047,
                "tf.multiply(x, y)": 0.0029585798816568047,
                "tf.not_equal(x, y)": 0.0029585798816568047,
                "tf.one_hot(indices, depth)": 0.0029585798816568047,
                "tf.ones(shape)": 0.0029585798816568047,
                "tf.ones_like(input)": 0.0029585798816568047,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0029585798816568047,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0029585798816568047,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0029585798816568047,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0029585798816568047,
                "tf.range(start)": 0.0029585798816568047,
                "tf.range(start, limit, delta)": 0.0029585798816568047,
                "tf.reduce_any(input_tensor, axis)": 0.0029585798816568047,
                "tf.reduce_all(input_tensor, axis)": 0.0029585798816568047,
                "tf.reduce_max(input_tensor)": 0.0029585798816568047,
                "tf.reduce_max(input_tensor, axis)": 0.0029585798816568047,
                "tf.reduce_mean(input_tensor)": 0.0029585798816568047,
                "tf.reduce_mean(input_tensor, axis)": 0.0029585798816568047,
                "tf.reduce_min(input_tensor)": 0.0029585798816568047,
                "tf.reduce_min(input_tensor, axis)": 0.0029585798816568047,
                "tf.reduce_prod(input_tensor, axis)": 0.0029585798816568047,
                "tf.reduce_sum(input_tensor)": 0.0029585798816568047,
                "tf.reduce_sum(input_tensor, axis)": 0.0029585798816568047,
                "tf.repeat(input, repeats)": 0.014792899408284023,
                "tf.repeat(input, repeats, axis)": 0.008875739644970414,
                "tf.reshape(tensor, shape)": 0.0029585798816568047,
                "tf.reverse(tensor, axis)": 0.0029585798816568047,
                "tf.roll(input, shift, axis)": 0.0029585798816568047,
                "tf.round(x)": 0.0029585798816568047,
                "tf.scatter_nd(indices, updates, shape)": 0.0029585798816568047,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0029585798816568047,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0029585798816568047,
                "tf.sequence_mask(lengths)": 0.0029585798816568047,
                "tf.sequence_mask(lengths, maxlen)": 0.0029585798816568047,
                "tf.shape(input)": 0.0029585798816568047,
                "tf.sign(x)": 0.0029585798816568047,
                "tf.sort(values, axis)": 0.0029585798816568047,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0029585798816568047,
                "tf.sqrt(x)": 0.0029585798816568047,
                "tf.square(x)": 0.0029585798816568047,
                "tf.squeeze(input)": 0.0029585798816568047,
                "tf.squeeze(input, axis)": 0.0029585798816568047,
                "tf.stack(values, axis)": 0.0029585798816568047,
                "tf.subtract(x, y)": 0.0029585798816568047,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0029585798816568047,
                "tf.tensordot(a, b, axes)": 0.0029585798816568047,
                "tf.tile(input, multiples)": 0.03550295857988166,
                "tf.transpose(a)": 0.0029585798816568047,
                "tf.transpose(a, perm)": 0.0029585798816568047,
                "tf.unique_with_counts(x)": 0.0029585798816568047,
                "tf.unstack(value, axis)": 0.0029585798816568047,
                "tf.where(condition)": 0.0029585798816568047,
                "tf.where(condition, x, y)": 0.0029585798816568047,
                "tf.zeros(shape)": 0.0029585798816568047,
                "tf.zeros_like(input)": 0.0029585798816568047,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0029585798816568047,
                "tf.sparse.add(a, b)": 0.0029585798816568047,
                "tf.sparse.concat(axis, sp_inputs)": 0.0029585798816568047,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0029585798816568047,
                "tf.sparse.from_dense(tensor)": 0.0029585798816568047,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0029585798816568047,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0029585798816568047,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0029585798816568047,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0029585798816568047,
                "tf.sparse.reset_shape(sp_input)": 0.0029585798816568047,
                "tf.sparse.reshape(sp_input, shape)": 0.0029585798816568047,
                "tf.sparse.retain(sp_input, to_retain)": 0.0029585798816568047,
                "tf.sparse.slice(sp_input, start, size)": 0.0029585798816568047,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0029585798816568047,
                "tf.sparse.to_dense(sp_input)": 0.0029585798816568047,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0029585798816568047,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0029585798816568047,
                "tf.sparse.transpose(sp_input)": 0.0029585798816568047,
                "tf.sparse.transpose(sp_input, perm)": 0.0029585798816568047,
                "IndexingAxis1Operation": 0.0029585798816568047,
                "IndexingOperation": 0.0029585798816568047,
                "PairCreationOperation": 0.0029585798816568047,
                "SingletonTupleCreationOperation": 0.0029585798816568047,
                "SlicingAxis0BothOperation": 0.0029585798816568047,
                "SlicingAxis0LeftOperation": 0.0029585798816568047,
                "SlicingAxis0RightOperation": 0.0029585798816568047,
                "SlicingAxis1BothOperation": 0.0029585798816568047,
                "SlicingAxis1LeftOperation": 0.0029585798816568047,
                "SlicingAxis1RightOperation": 0.0029585798816568047,
                "TripleCreationOperation": 0.0029585798816568047,
                "PROVIDED_CONSTANT_WEIGHT": 0.15088757396449703,
                "COMMON_CONSTANT_WEIGHT": 0.15384615384615385,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0029585798816568047,
                "INPUT_VARIABLE_WEIGHT": 0.15088757396449703,
                "AXIS_CONSTANT_WEIGHT": 0.023668639053254437,
                "SHAPE_CONSTANT_WEIGHT": 0.0029585798816568047,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0029585798816568047,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0029585798816568047,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0029585798816568047,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0029585798816568047,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0029585798816568047
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 5,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 6,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 5,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 3,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 5,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_06",
        "description": "Take the max from each group of elements",
        "target_program": "tf.math.segment_max(in2, in1)",
        "source": "Real task encountered by Googler, 3/28/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 1, 1, 2, 3, 3, 3, 3],[1, 3, 4, 5, 10, 8, 9, 4],]",
            "outputs": "[1, 4, 5, 10]"
        },
        "completions": [
            "return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n",
            "return tf.reduce_max(tf.math.segment_max(in2, in1), axis=1)\n",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    max_group = tf.math.segment_max(in2, in1)\n    return max_group\n",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "return tf.gather(in2, tf.argmax(in1))\n",
            "def transform(in1, in2):\n    return tf.gather(params=in2, indices=tf.math.segment_max(data=in1, segment_ids=in2))\n",
            "return tf.gather(in2, tf.argmax(in2, axis=1))\n",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(tf.constant(in2), tf.constant(in1))",
            "return tf.math.segment_max(in2, in1)\n",
            "def transform(in1, in2):\n    unique_vals, idx = tf.unique(in1)\n    return tf.math.segment_max(in2, idx)\n",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "return tf.math.unsorted_segment_max(tf.cast(in2, tf.int32), tf.cast(in1, tf.int32), tf.reduce_max(in1)+1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    segments = tf.math.segment_max(in2, in1)\n    return segments\n",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "def transform(in1, in2):\n    unique_values, unique_idx = tf.unique(in1)\n    max_values = tf.math.segment_max(in2, unique_idx)\n    return max_values\n",
            "return tf.math.segment_max(in2, in1)\n",
            "def transform(in1, in2):\n    result = tf.math.segment_max(in2, in1)\n    return result\n",
            "def transform(in1, in2):\n    unique_values, idx = tf.unique(in1)\n    max_values = tf.math.segment_max(in2, idx)\n    return max_values\n",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "return tf.math.segment_max(in2, in1)"
        ],
        "tf_operators": {
            "tf.math.segment_max": 32,
            "tf.reduce_max": 17,
            "tf.math.unsorted_segment_max": 15,
            "tf.unsorted_segment_max": 1,
            "tf.gather": 3,
            "tf.argmax": 2,
            "tf.constant": 1,
            "tf.unique": 3,
            "tf.cast": 1,
            "tf.int32": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            []
        ],
        "all_constants": [
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 117,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 18,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 2
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0027247956403269754,
                "tf.add(x, y)": 0.0027247956403269754,
                "tf.add_n(inputs)": 0.0027247956403269754,
                "tf.argmax(input, axis)": 0.008174386920980926,
                "tf.argmin(input, axis)": 0.0027247956403269754,
                "tf.argsort(values, axis, stable=True)": 0.0027247956403269754,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0027247956403269754,
                "tf.boolean_mask(tensor, mask)": 0.0027247956403269754,
                "tf.broadcast_to(input, shape)": 0.0027247956403269754,
                "tf.cast(x, dtype)": 0.008174386920980926,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0027247956403269754,
                "tf.concat(values, axis)": 0.0027247956403269754,
                "tf.constant(value)": 0.008174386920980926,
                "tf.constant(value, dtype)": 0.0027247956403269754,
                "tf.divide(x, y)": 0.0027247956403269754,
                "tf.equal(x, y)": 0.0027247956403269754,
                "tf.exp(x)": 0.0027247956403269754,
                "tf.expand_dims(input, axis)": 0.0027247956403269754,
                "tf.eye(num_rows)": 0.0027247956403269754,
                "tf.eye(num_rows, num_columns)": 0.0027247956403269754,
                "tf.eye(num_rows, dtype)": 0.0027247956403269754,
                "tf.fill(dims, value)": 0.0027247956403269754,
                "tf.gather(params, indices)": 0.008174386920980926,
                "tf.gather(params, indices, axis, batch_dims)": 0.005449591280653951,
                "tf.gather_nd(params, indices)": 0.0027247956403269754,
                "tf.gather_nd(params, indices, batch_dims)": 0.0027247956403269754,
                "tf.greater(x, y)": 0.0027247956403269754,
                "tf.greater_equal(x, y)": 0.0027247956403269754,
                "tf.math.bincount(arr)": 0.0027247956403269754,
                "tf.math.ceil(x)": 0.0027247956403269754,
                "tf.math.count_nonzero(input)": 0.0027247956403269754,
                "tf.math.count_nonzero(input, axis)": 0.0027247956403269754,
                "tf.math.cumsum(x, axis)": 0.0027247956403269754,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0027247956403269754,
                "tf.math.divide_no_nan(x, y)": 0.0027247956403269754,
                "tf.math.floor(x)": 0.0027247956403269754,
                "tf.math.log(x)": 0.0027247956403269754,
                "tf.math.logical_and(x, y)": 0.0027247956403269754,
                "tf.math.logical_not(x)": 0.0027247956403269754,
                "tf.math.logical_or(x, y)": 0.0027247956403269754,
                "tf.math.logical_xor(x, y)": 0.0027247956403269754,
                "tf.math.negative(x)": 0.0027247956403269754,
                "tf.math.reciprocal(x)": 0.0027247956403269754,
                "tf.math.reciprocal_no_nan(x)": 0.0027247956403269754,
                "tf.math.segment_max(data, segment_ids)": 0.08991825613079019,
                "tf.math.segment_mean(data, segment_ids)": 0.0027247956403269754,
                "tf.math.segment_min(data, segment_ids)": 0.0027247956403269754,
                "tf.math.segment_prod(data, segment_ids)": 0.0027247956403269754,
                "tf.math.segment_sum(data, segment_ids)": 0.0027247956403269754,
                "tf.math.squared_difference(x, y)": 0.0027247956403269754,
                "tf.math.top_k(input, k)": 0.0027247956403269754,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.043596730245231606,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0027247956403269754,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0027247956403269754,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0027247956403269754,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0027247956403269754,
                "tf.matmul(a, b)": 0.0027247956403269754,
                "tf.maximum(x, y)": 0.0027247956403269754,
                "tf.minimum(x, y)": 0.0027247956403269754,
                "tf.multiply(x, y)": 0.0027247956403269754,
                "tf.not_equal(x, y)": 0.0027247956403269754,
                "tf.one_hot(indices, depth)": 0.0027247956403269754,
                "tf.ones(shape)": 0.0027247956403269754,
                "tf.ones_like(input)": 0.0027247956403269754,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0027247956403269754,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0027247956403269754,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0027247956403269754,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0027247956403269754,
                "tf.range(start)": 0.0027247956403269754,
                "tf.range(start, limit, delta)": 0.0027247956403269754,
                "tf.reduce_any(input_tensor, axis)": 0.0027247956403269754,
                "tf.reduce_all(input_tensor, axis)": 0.0027247956403269754,
                "tf.reduce_max(input_tensor)": 0.04632152588555858,
                "tf.reduce_max(input_tensor, axis)": 0.0027247956403269754,
                "tf.reduce_mean(input_tensor)": 0.0027247956403269754,
                "tf.reduce_mean(input_tensor, axis)": 0.0027247956403269754,
                "tf.reduce_min(input_tensor)": 0.0027247956403269754,
                "tf.reduce_min(input_tensor, axis)": 0.0027247956403269754,
                "tf.reduce_prod(input_tensor, axis)": 0.0027247956403269754,
                "tf.reduce_sum(input_tensor)": 0.0027247956403269754,
                "tf.reduce_sum(input_tensor, axis)": 0.0027247956403269754,
                "tf.repeat(input, repeats)": 0.0027247956403269754,
                "tf.repeat(input, repeats, axis)": 0.0027247956403269754,
                "tf.reshape(tensor, shape)": 0.0027247956403269754,
                "tf.reverse(tensor, axis)": 0.0027247956403269754,
                "tf.roll(input, shift, axis)": 0.0027247956403269754,
                "tf.round(x)": 0.0027247956403269754,
                "tf.scatter_nd(indices, updates, shape)": 0.0027247956403269754,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0027247956403269754,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0027247956403269754,
                "tf.sequence_mask(lengths)": 0.0027247956403269754,
                "tf.sequence_mask(lengths, maxlen)": 0.0027247956403269754,
                "tf.shape(input)": 0.0027247956403269754,
                "tf.sign(x)": 0.0027247956403269754,
                "tf.sort(values, axis)": 0.0027247956403269754,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0027247956403269754,
                "tf.sqrt(x)": 0.0027247956403269754,
                "tf.square(x)": 0.0027247956403269754,
                "tf.squeeze(input)": 0.0027247956403269754,
                "tf.squeeze(input, axis)": 0.0027247956403269754,
                "tf.stack(values, axis)": 0.0027247956403269754,
                "tf.subtract(x, y)": 0.0027247956403269754,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0027247956403269754,
                "tf.tensordot(a, b, axes)": 0.0027247956403269754,
                "tf.tile(input, multiples)": 0.0027247956403269754,
                "tf.transpose(a)": 0.0027247956403269754,
                "tf.transpose(a, perm)": 0.0027247956403269754,
                "tf.unique_with_counts(x)": 0.0027247956403269754,
                "tf.unstack(value, axis)": 0.0027247956403269754,
                "tf.where(condition)": 0.0027247956403269754,
                "tf.where(condition, x, y)": 0.0027247956403269754,
                "tf.zeros(shape)": 0.0027247956403269754,
                "tf.zeros_like(input)": 0.0027247956403269754,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0027247956403269754,
                "tf.sparse.add(a, b)": 0.0027247956403269754,
                "tf.sparse.concat(axis, sp_inputs)": 0.0027247956403269754,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0027247956403269754,
                "tf.sparse.from_dense(tensor)": 0.0027247956403269754,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0027247956403269754,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0027247956403269754,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0027247956403269754,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0027247956403269754,
                "tf.sparse.reset_shape(sp_input)": 0.0027247956403269754,
                "tf.sparse.reshape(sp_input, shape)": 0.0027247956403269754,
                "tf.sparse.retain(sp_input, to_retain)": 0.0027247956403269754,
                "tf.sparse.slice(sp_input, start, size)": 0.0027247956403269754,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0027247956403269754,
                "tf.sparse.to_dense(sp_input)": 0.0027247956403269754,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0027247956403269754,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0027247956403269754,
                "tf.sparse.transpose(sp_input)": 0.0027247956403269754,
                "tf.sparse.transpose(sp_input, perm)": 0.0027247956403269754,
                "IndexingAxis1Operation": 0.0027247956403269754,
                "IndexingOperation": 0.0027247956403269754,
                "PairCreationOperation": 0.010899182561307902,
                "SingletonTupleCreationOperation": 0.0027247956403269754,
                "SlicingAxis0BothOperation": 0.0027247956403269754,
                "SlicingAxis0LeftOperation": 0.0027247956403269754,
                "SlicingAxis0RightOperation": 0.0027247956403269754,
                "SlicingAxis1BothOperation": 0.0027247956403269754,
                "SlicingAxis1LeftOperation": 0.0027247956403269754,
                "SlicingAxis1RightOperation": 0.0027247956403269754,
                "TripleCreationOperation": 0.0027247956403269754,
                "PROVIDED_CONSTANT_WEIGHT": 0.0027247956403269754,
                "COMMON_CONSTANT_WEIGHT": 0.051771117166212535,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0027247956403269754,
                "INPUT_VARIABLE_WEIGHT": 0.3215258855585831,
                "AXIS_CONSTANT_WEIGHT": 0.0027247956403269754,
                "SHAPE_CONSTANT_WEIGHT": 0.0027247956403269754,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0027247956403269754,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.008174386920980926,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0027247956403269754,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0027247956403269754,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0027247956403269754
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 7,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 9,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 3,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 5,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 9,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 4,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 9,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 9,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 9,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "google_07",
        "description": "Take the argmax of each group of elements",
        "target_program": "tf.cast(tf.argmax((tf.sequence_mask(tf.cumsum(tf.math.bincount(in1)), dtype=tf.int32) - tf.sequence_mask(tf.cumsum(tf.math.bincount(in1), exclusive=True), dtype=tf.int32, maxlen=in1.shape[0])) * in2, axis=1), tf.int32) - tf.cumsum(tf.math.bincount(in1), exclusive=True)",
        "source": "Real task encountered by Googler, 3/29/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 4, 5, 5],[4, 1, 8, 2, 5, 7, 9, 3, 7, 3, 1, 42, 1, 2, 4, 0],]",
            "outputs": "[2, 3, 1, 0, 1, 0]"
        },
        "completions": [
            "sorted_indices = tf.argsort(in1)\nsorted_values = tf.gather(in2, sorted_indices)\nmax_indices = tf.math.segment_max(sorted_values, in1)\nreturn max_indices\n",
            "return tf.tensordot(tf.cast(in1, tf.int32), tf.one_hot(in2, tf.reduce_max(in2) + 1), axes=1)\n",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)\n",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    segment_ids = tf.cast(in1, tf.int32)\n    data = in2\n    seg_max = tf.math.segment_max(data, segment_ids)\n    return tf.argmax(seg_max, axis=0)\n",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.argmax(tf.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1), axis=0)\n",
            "return tf.argmax(tf.math.segment_max(in2, in1), axis=1)\n",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.argmax(tf.math.segment_max(in2, in1), axis=1)",
            "return tf.argmax(tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1), 1)\n",
            "return tf.argmax(tf.math.segment_max(in2, in1), axis=1)\n      ",
            "return tf.math.segment_max(in2, in1)\n",
            "def transform(in1, in2):\n    unique_groups, _ = tf.unique(in1)\n    result = tf.argmax(in2, axis=0)\n    return tf.gather(result, unique_groups)\n",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "return tf.argmax(tf.unstack(in2), axis=1)\n",
            "return tf.argmax(tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1), axis=0)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)\n",
            "sorted_indices = tf.argsort(in1)\nsorted_values = tf.gather(in2, sorted_indices)\nunique_indices, _ = tf.unique(sorted_indices)\nmax_values = tf.gather(sorted_values, tf.argmax(sorted_values, axis=-1))\nresult = tf.gather(max_values, unique_indices)\nreturn result\n",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)\n",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.argmax(tf.math.segment_max(in2, in1), axis=1)\n",
            "return tf.argmax(tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1), axis=0)\n",
            "return tf.argmax(tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1), axis=0)",
            "return tf.math.unsorted_segment_max(in2, in1, 6)",
            "return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    unique_values, unique_indices = tf.unique(in1)\n    return tf.math.argmax(tf.gather(in2, unique_indices))",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.argmax(tf.unstack(in2), axis=1)",
            "return tf.argmax(tf.math.segment_max(in1, in2), axis=1)\n",
            "return tf.argmax(tf.math.segment_max(in2, in1), axis=1)",
            "return tf.argmax(tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1), axis=0)\n",
            "return tf.argmax(tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1), axis=0)",
            "return tf.math.segment_max(in2, in1)\n",
            "def transform(in1, in2):\n    unique_elements, _ = tf.unique(in1)\n    max_indices = tf.gather(tf.argmax(in2, axis=0), unique_elements)\n    return max_indices\n",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.argmax(tf.unsorted_segment_max(in2, in1, num_segments=tf.reduce_max(in1)+1), axis=1)",
            "segment_ids = in1\ndata = in2\nmax_values = tf.math.segment_max(data, segment_ids)\nreturn tf.argmax(tf.equal(data, tf.expand_dims(max_values, 1)), axis=0)\n",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.math.segment_max(in2, in1)\n",
            "values = tf.cast(in1, tf.float32)\nsegment_ids = in2\nmax_indices = tf.math.segment_max(values, segment_ids)\nreturn max_indices\n"
        ],
        "tf_operators": {
            "tf.gather": 5,
            "tf.math.segment_max": 28,
            "tf.argsort": 2,
            "tf.tensordot": 1,
            "tf.one_hot": 1,
            "tf.reduce_max": 15,
            "tf.cast": 3,
            "tf.int32": 2,
            "tf.math.unsorted_segment_max": 12,
            "tf.argmax": 21,
            "tf.unsorted_segment_max": 3,
            "tf.unique": 4,
            "tf.unstack": 2,
            "tf.math.argmax": 1,
            "tf.expand_dims": 1,
            "tf.equal": 1,
            "tf.float32": 1
        },
        "coverage_percentage": 50.0,
        "total_covered": 3,
        "total_in_target": 6,
        "parsed_constants": [
            [],
            [
                1,
                1
            ],
            [
                1
            ],
            [],
            [],
            [
                0
            ],
            [],
            [
                1
            ],
            [],
            [
                1,
                0
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                -1
            ],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                6
            ],
            [],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [],
            [
                0
            ],
            [],
            [
                1,
                1
            ],
            [
                1,
                0
            ],
            [],
            [],
            []
        ],
        "all_constants": [
            0,
            1,
            -1,
            6
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 114,
            "shape": 0,
            "tf_bool": 0,
            "provided": 1,
            "common": 38,
            "shape_tuple": 0,
            "tf_float32": 1,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 2
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.002457002457002457,
                "tf.add(x, y)": 0.002457002457002457,
                "tf.add_n(inputs)": 0.002457002457002457,
                "tf.argmax(input, axis)": 0.05405405405405406,
                "tf.argmin(input, axis)": 0.002457002457002457,
                "tf.argsort(values, axis, stable=True)": 0.002457002457002457,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.002457002457002457,
                "tf.boolean_mask(tensor, mask)": 0.002457002457002457,
                "tf.broadcast_to(input, shape)": 0.002457002457002457,
                "tf.cast(x, dtype)": 0.009828009828009828,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.002457002457002457,
                "tf.concat(values, axis)": 0.002457002457002457,
                "tf.constant(value)": 0.002457002457002457,
                "tf.constant(value, dtype)": 0.002457002457002457,
                "tf.divide(x, y)": 0.002457002457002457,
                "tf.equal(x, y)": 0.004914004914004914,
                "tf.exp(x)": 0.002457002457002457,
                "tf.expand_dims(input, axis)": 0.004914004914004914,
                "tf.eye(num_rows)": 0.002457002457002457,
                "tf.eye(num_rows, num_columns)": 0.002457002457002457,
                "tf.eye(num_rows, dtype)": 0.002457002457002457,
                "tf.fill(dims, value)": 0.002457002457002457,
                "tf.gather(params, indices)": 0.019656019656019656,
                "tf.gather(params, indices, axis, batch_dims)": 0.002457002457002457,
                "tf.gather_nd(params, indices)": 0.002457002457002457,
                "tf.gather_nd(params, indices, batch_dims)": 0.002457002457002457,
                "tf.greater(x, y)": 0.002457002457002457,
                "tf.greater_equal(x, y)": 0.002457002457002457,
                "tf.math.bincount(arr)": 0.002457002457002457,
                "tf.math.ceil(x)": 0.002457002457002457,
                "tf.math.count_nonzero(input)": 0.002457002457002457,
                "tf.math.count_nonzero(input, axis)": 0.002457002457002457,
                "tf.math.cumsum(x, axis)": 0.002457002457002457,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.002457002457002457,
                "tf.math.divide_no_nan(x, y)": 0.002457002457002457,
                "tf.math.floor(x)": 0.002457002457002457,
                "tf.math.log(x)": 0.002457002457002457,
                "tf.math.logical_and(x, y)": 0.002457002457002457,
                "tf.math.logical_not(x)": 0.002457002457002457,
                "tf.math.logical_or(x, y)": 0.002457002457002457,
                "tf.math.logical_xor(x, y)": 0.002457002457002457,
                "tf.math.negative(x)": 0.002457002457002457,
                "tf.math.reciprocal(x)": 0.002457002457002457,
                "tf.math.reciprocal_no_nan(x)": 0.002457002457002457,
                "tf.math.segment_max(data, segment_ids)": 0.07125307125307126,
                "tf.math.segment_mean(data, segment_ids)": 0.002457002457002457,
                "tf.math.segment_min(data, segment_ids)": 0.002457002457002457,
                "tf.math.segment_prod(data, segment_ids)": 0.002457002457002457,
                "tf.math.segment_sum(data, segment_ids)": 0.002457002457002457,
                "tf.math.squared_difference(x, y)": 0.002457002457002457,
                "tf.math.top_k(input, k)": 0.002457002457002457,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.03194103194103194,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.002457002457002457,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.002457002457002457,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.002457002457002457,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.002457002457002457,
                "tf.matmul(a, b)": 0.002457002457002457,
                "tf.maximum(x, y)": 0.002457002457002457,
                "tf.minimum(x, y)": 0.002457002457002457,
                "tf.multiply(x, y)": 0.002457002457002457,
                "tf.not_equal(x, y)": 0.002457002457002457,
                "tf.one_hot(indices, depth)": 0.004914004914004914,
                "tf.ones(shape)": 0.002457002457002457,
                "tf.ones_like(input)": 0.002457002457002457,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.002457002457002457,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.002457002457002457,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.002457002457002457,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.002457002457002457,
                "tf.range(start)": 0.002457002457002457,
                "tf.range(start, limit, delta)": 0.002457002457002457,
                "tf.reduce_any(input_tensor, axis)": 0.002457002457002457,
                "tf.reduce_all(input_tensor, axis)": 0.002457002457002457,
                "tf.reduce_max(input_tensor)": 0.03931203931203931,
                "tf.reduce_max(input_tensor, axis)": 0.002457002457002457,
                "tf.reduce_mean(input_tensor)": 0.002457002457002457,
                "tf.reduce_mean(input_tensor, axis)": 0.002457002457002457,
                "tf.reduce_min(input_tensor)": 0.002457002457002457,
                "tf.reduce_min(input_tensor, axis)": 0.002457002457002457,
                "tf.reduce_prod(input_tensor, axis)": 0.002457002457002457,
                "tf.reduce_sum(input_tensor)": 0.002457002457002457,
                "tf.reduce_sum(input_tensor, axis)": 0.002457002457002457,
                "tf.repeat(input, repeats)": 0.002457002457002457,
                "tf.repeat(input, repeats, axis)": 0.002457002457002457,
                "tf.reshape(tensor, shape)": 0.002457002457002457,
                "tf.reverse(tensor, axis)": 0.002457002457002457,
                "tf.roll(input, shift, axis)": 0.002457002457002457,
                "tf.round(x)": 0.002457002457002457,
                "tf.scatter_nd(indices, updates, shape)": 0.002457002457002457,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.002457002457002457,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.002457002457002457,
                "tf.sequence_mask(lengths)": 0.002457002457002457,
                "tf.sequence_mask(lengths, maxlen)": 0.002457002457002457,
                "tf.shape(input)": 0.002457002457002457,
                "tf.sign(x)": 0.002457002457002457,
                "tf.sort(values, axis)": 0.002457002457002457,
                "tf.sort(values, axis, direction='DESCENDING')": 0.002457002457002457,
                "tf.sqrt(x)": 0.002457002457002457,
                "tf.square(x)": 0.002457002457002457,
                "tf.squeeze(input)": 0.002457002457002457,
                "tf.squeeze(input, axis)": 0.002457002457002457,
                "tf.stack(values, axis)": 0.002457002457002457,
                "tf.subtract(x, y)": 0.002457002457002457,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.002457002457002457,
                "tf.tensordot(a, b, axes)": 0.004914004914004914,
                "tf.tile(input, multiples)": 0.002457002457002457,
                "tf.transpose(a)": 0.002457002457002457,
                "tf.transpose(a, perm)": 0.002457002457002457,
                "tf.unique_with_counts(x)": 0.002457002457002457,
                "tf.unstack(value, axis)": 0.007371007371007371,
                "tf.where(condition)": 0.002457002457002457,
                "tf.where(condition, x, y)": 0.002457002457002457,
                "tf.zeros(shape)": 0.002457002457002457,
                "tf.zeros_like(input)": 0.002457002457002457,
                "tf.SparseTensor(indices, values, dense_shape)": 0.002457002457002457,
                "tf.sparse.add(a, b)": 0.002457002457002457,
                "tf.sparse.concat(axis, sp_inputs)": 0.002457002457002457,
                "tf.sparse.expand_dims(sp_input, axis)": 0.002457002457002457,
                "tf.sparse.from_dense(tensor)": 0.002457002457002457,
                "tf.sparse.maximum(sp_a, sp_b)": 0.002457002457002457,
                "tf.sparse.minimum(sp_a, sp_b)": 0.002457002457002457,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.002457002457002457,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.002457002457002457,
                "tf.sparse.reset_shape(sp_input)": 0.002457002457002457,
                "tf.sparse.reshape(sp_input, shape)": 0.002457002457002457,
                "tf.sparse.retain(sp_input, to_retain)": 0.002457002457002457,
                "tf.sparse.slice(sp_input, start, size)": 0.002457002457002457,
                "tf.sparse.split(sp_input, num_split, axis)": 0.002457002457002457,
                "tf.sparse.to_dense(sp_input)": 0.002457002457002457,
                "tf.sparse.to_dense(sp_input, default_value)": 0.002457002457002457,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.002457002457002457,
                "tf.sparse.transpose(sp_input)": 0.002457002457002457,
                "tf.sparse.transpose(sp_input, perm)": 0.002457002457002457,
                "IndexingAxis1Operation": 0.002457002457002457,
                "IndexingOperation": 0.002457002457002457,
                "PairCreationOperation": 0.012285012285012284,
                "SingletonTupleCreationOperation": 0.002457002457002457,
                "SlicingAxis0BothOperation": 0.002457002457002457,
                "SlicingAxis0LeftOperation": 0.002457002457002457,
                "SlicingAxis0RightOperation": 0.002457002457002457,
                "SlicingAxis1BothOperation": 0.002457002457002457,
                "SlicingAxis1LeftOperation": 0.002457002457002457,
                "SlicingAxis1RightOperation": 0.002457002457002457,
                "TripleCreationOperation": 0.002457002457002457,
                "PROVIDED_CONSTANT_WEIGHT": 0.004914004914004914,
                "COMMON_CONSTANT_WEIGHT": 0.09582309582309582,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.002457002457002457,
                "INPUT_VARIABLE_WEIGHT": 0.28255528255528256,
                "AXIS_CONSTANT_WEIGHT": 0.002457002457002457,
                "SHAPE_CONSTANT_WEIGHT": 0.002457002457002457,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.002457002457002457,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.007371007371007371,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004914004914004914,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.002457002457002457,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.002457002457002457
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 4,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 6,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 4,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 5,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 9,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 5,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 9,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 9,
                "PairCreationOperation": 6,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 9,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "google_08",
        "description": "create a mask for sequences of the given lengths",
        "target_program": "tf.cast(tf.greater(tf.expand_dims(in1, 1), tf.range(5)), tf.int32)",
        "source": "Real task encountered by Googler, 4/11/2019",
        "constants": "[5]",
        "examples": {
            "inputs": "[[3, 4, 2, 1],]",
            "outputs": "[[1, 1, 1, 0, 0],    [1, 1, 1, 1, 0],    [1, 1, 0, 0, 0],    [1, 0, 0, 0, 0]]"
        },
        "completions": [
            "return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1, tf.reduce_max(in1))\n",
            "def transform(input_lengths):\n    max_length = tf.reduce_max(input_lengths)\n    mask = tf.sequence_mask(input_lengths, max_length)\n    return mask",
            "return tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)",
            "return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1, maxlen=5)\n",
            "return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1, maxlen=5)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "return tf.sequence_mask(in1, maxlen=5)\n",
            "return tf.sequence_mask(in1, maxlen=5)\n",
            "return tf.sequence_mask(in1, maxlen=5)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)",
            "return tf.sequence_mask(in1, maxlen=5)",
            "return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)",
            "return tf.sequence_mask(in1, maxlen=5)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "return tf.sequence_mask(in1)",
            "return tf.sequence_mask(in1, maxlen=5)\n",
            "return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=5)",
            "return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "\nreturn tf.sequence_mask(in1)\n",
            "def transform(lengths):\n    max_len = tf.reduce_max(lengths)\n    batch_size = tf.shape(lengths)[0]\n    range_tensor = tf.range(max_len)\n    sequence_masks = tf.expand_dims(range_tensor, axis=0) < tf.reshape(lengths, [batch_size, 1])\n    return tf.cast(sequence_masks, tf.int32)\n",
            "return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1, maxlen=5)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1, tf.reduce_max(in1))\n",
            "return tf.sequence_mask(in1)",
            "return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1, tf.reduce_max(in1))\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=5)",
            "return tf.sequence_mask(in1)\n"
        ],
        "tf_operators": {
            "tf.sequence_mask": 49,
            "tf.reduce_max": 5,
            "tf.cast": 2,
            "tf.int32": 2,
            "tf.shape": 1,
            "tf.range": 1,
            "tf.expand_dims": 1,
            "tf.reshape": 1
        },
        "coverage_percentage": 80.0,
        "total_covered": 4,
        "total_in_target": 5,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [
                5
            ],
            [],
            [
                5
            ],
            [],
            [
                5
            ],
            [],
            [
                5
            ],
            [
                5
            ],
            [
                5
            ],
            [],
            [],
            [
                5
            ],
            [],
            [],
            [
                5
            ],
            [],
            [],
            [
                5
            ],
            [],
            [],
            [],
            [
                5
            ],
            [],
            [],
            [],
            [
                0,
                0,
                1
            ],
            [],
            [
                5
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                5
            ],
            []
        ],
        "all_constants": [
            0,
            1,
            5
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 53,
            "shape": 0,
            "tf_bool": 0,
            "provided": 12,
            "common": 3,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 2
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0036496350364963502,
                "tf.add(x, y)": 0.0036496350364963502,
                "tf.add_n(inputs)": 0.0036496350364963502,
                "tf.argmax(input, axis)": 0.0036496350364963502,
                "tf.argmin(input, axis)": 0.0036496350364963502,
                "tf.argsort(values, axis, stable=True)": 0.0036496350364963502,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0036496350364963502,
                "tf.boolean_mask(tensor, mask)": 0.0036496350364963502,
                "tf.broadcast_to(input, shape)": 0.0036496350364963502,
                "tf.cast(x, dtype)": 0.010948905109489052,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0036496350364963502,
                "tf.concat(values, axis)": 0.0036496350364963502,
                "tf.constant(value)": 0.0036496350364963502,
                "tf.constant(value, dtype)": 0.0036496350364963502,
                "tf.divide(x, y)": 0.0036496350364963502,
                "tf.equal(x, y)": 0.0036496350364963502,
                "tf.exp(x)": 0.0036496350364963502,
                "tf.expand_dims(input, axis)": 0.0072992700729927005,
                "tf.eye(num_rows)": 0.0036496350364963502,
                "tf.eye(num_rows, num_columns)": 0.0036496350364963502,
                "tf.eye(num_rows, dtype)": 0.0036496350364963502,
                "tf.fill(dims, value)": 0.0036496350364963502,
                "tf.gather(params, indices)": 0.0036496350364963502,
                "tf.gather(params, indices, axis, batch_dims)": 0.0036496350364963502,
                "tf.gather_nd(params, indices)": 0.0036496350364963502,
                "tf.gather_nd(params, indices, batch_dims)": 0.0036496350364963502,
                "tf.greater(x, y)": 0.0036496350364963502,
                "tf.greater_equal(x, y)": 0.0036496350364963502,
                "tf.math.bincount(arr)": 0.0036496350364963502,
                "tf.math.ceil(x)": 0.0036496350364963502,
                "tf.math.count_nonzero(input)": 0.0036496350364963502,
                "tf.math.count_nonzero(input, axis)": 0.0036496350364963502,
                "tf.math.cumsum(x, axis)": 0.0036496350364963502,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0036496350364963502,
                "tf.math.divide_no_nan(x, y)": 0.0036496350364963502,
                "tf.math.floor(x)": 0.0036496350364963502,
                "tf.math.log(x)": 0.0036496350364963502,
                "tf.math.logical_and(x, y)": 0.0036496350364963502,
                "tf.math.logical_not(x)": 0.0036496350364963502,
                "tf.math.logical_or(x, y)": 0.0036496350364963502,
                "tf.math.logical_xor(x, y)": 0.0036496350364963502,
                "tf.math.negative(x)": 0.0036496350364963502,
                "tf.math.reciprocal(x)": 0.0036496350364963502,
                "tf.math.reciprocal_no_nan(x)": 0.0036496350364963502,
                "tf.math.segment_max(data, segment_ids)": 0.0036496350364963502,
                "tf.math.segment_mean(data, segment_ids)": 0.0036496350364963502,
                "tf.math.segment_min(data, segment_ids)": 0.0036496350364963502,
                "tf.math.segment_prod(data, segment_ids)": 0.0036496350364963502,
                "tf.math.segment_sum(data, segment_ids)": 0.0036496350364963502,
                "tf.math.squared_difference(x, y)": 0.0036496350364963502,
                "tf.math.top_k(input, k)": 0.0036496350364963502,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0036496350364963502,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0036496350364963502,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0036496350364963502,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0036496350364963502,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0036496350364963502,
                "tf.matmul(a, b)": 0.0036496350364963502,
                "tf.maximum(x, y)": 0.0036496350364963502,
                "tf.minimum(x, y)": 0.0036496350364963502,
                "tf.multiply(x, y)": 0.0036496350364963502,
                "tf.not_equal(x, y)": 0.0036496350364963502,
                "tf.one_hot(indices, depth)": 0.0036496350364963502,
                "tf.ones(shape)": 0.0036496350364963502,
                "tf.ones_like(input)": 0.0036496350364963502,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0036496350364963502,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0036496350364963502,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0036496350364963502,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0036496350364963502,
                "tf.range(start)": 0.0072992700729927005,
                "tf.range(start, limit, delta)": 0.0036496350364963502,
                "tf.reduce_any(input_tensor, axis)": 0.0036496350364963502,
                "tf.reduce_all(input_tensor, axis)": 0.0036496350364963502,
                "tf.reduce_max(input_tensor)": 0.021897810218978103,
                "tf.reduce_max(input_tensor, axis)": 0.0036496350364963502,
                "tf.reduce_mean(input_tensor)": 0.0036496350364963502,
                "tf.reduce_mean(input_tensor, axis)": 0.0036496350364963502,
                "tf.reduce_min(input_tensor)": 0.0036496350364963502,
                "tf.reduce_min(input_tensor, axis)": 0.0036496350364963502,
                "tf.reduce_prod(input_tensor, axis)": 0.0036496350364963502,
                "tf.reduce_sum(input_tensor)": 0.0036496350364963502,
                "tf.reduce_sum(input_tensor, axis)": 0.0036496350364963502,
                "tf.repeat(input, repeats)": 0.0036496350364963502,
                "tf.repeat(input, repeats, axis)": 0.0036496350364963502,
                "tf.reshape(tensor, shape)": 0.0072992700729927005,
                "tf.reverse(tensor, axis)": 0.0036496350364963502,
                "tf.roll(input, shift, axis)": 0.0036496350364963502,
                "tf.round(x)": 0.0036496350364963502,
                "tf.scatter_nd(indices, updates, shape)": 0.0036496350364963502,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0036496350364963502,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0036496350364963502,
                "tf.sequence_mask(lengths)": 0.12408759124087591,
                "tf.sequence_mask(lengths, maxlen)": 0.01824817518248175,
                "tf.shape(input)": 0.0072992700729927005,
                "tf.sign(x)": 0.0036496350364963502,
                "tf.sort(values, axis)": 0.0036496350364963502,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0036496350364963502,
                "tf.sqrt(x)": 0.0036496350364963502,
                "tf.square(x)": 0.0036496350364963502,
                "tf.squeeze(input)": 0.0036496350364963502,
                "tf.squeeze(input, axis)": 0.0036496350364963502,
                "tf.stack(values, axis)": 0.0036496350364963502,
                "tf.subtract(x, y)": 0.0036496350364963502,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0036496350364963502,
                "tf.tensordot(a, b, axes)": 0.0036496350364963502,
                "tf.tile(input, multiples)": 0.0036496350364963502,
                "tf.transpose(a)": 0.0036496350364963502,
                "tf.transpose(a, perm)": 0.0036496350364963502,
                "tf.unique_with_counts(x)": 0.0036496350364963502,
                "tf.unstack(value, axis)": 0.0036496350364963502,
                "tf.where(condition)": 0.0036496350364963502,
                "tf.where(condition, x, y)": 0.0036496350364963502,
                "tf.zeros(shape)": 0.0036496350364963502,
                "tf.zeros_like(input)": 0.0036496350364963502,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0036496350364963502,
                "tf.sparse.add(a, b)": 0.0036496350364963502,
                "tf.sparse.concat(axis, sp_inputs)": 0.0036496350364963502,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0036496350364963502,
                "tf.sparse.from_dense(tensor)": 0.0036496350364963502,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0036496350364963502,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0036496350364963502,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0036496350364963502,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0036496350364963502,
                "tf.sparse.reset_shape(sp_input)": 0.0036496350364963502,
                "tf.sparse.reshape(sp_input, shape)": 0.0036496350364963502,
                "tf.sparse.retain(sp_input, to_retain)": 0.0036496350364963502,
                "tf.sparse.slice(sp_input, start, size)": 0.0036496350364963502,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0036496350364963502,
                "tf.sparse.to_dense(sp_input)": 0.0036496350364963502,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0036496350364963502,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0036496350364963502,
                "tf.sparse.transpose(sp_input)": 0.0036496350364963502,
                "tf.sparse.transpose(sp_input, perm)": 0.0036496350364963502,
                "IndexingAxis1Operation": 0.0036496350364963502,
                "IndexingOperation": 0.0072992700729927005,
                "PairCreationOperation": 0.0036496350364963502,
                "SingletonTupleCreationOperation": 0.0036496350364963502,
                "SlicingAxis0BothOperation": 0.0036496350364963502,
                "SlicingAxis0LeftOperation": 0.0036496350364963502,
                "SlicingAxis0RightOperation": 0.0036496350364963502,
                "SlicingAxis1BothOperation": 0.0036496350364963502,
                "SlicingAxis1LeftOperation": 0.0036496350364963502,
                "SlicingAxis1RightOperation": 0.0036496350364963502,
                "TripleCreationOperation": 0.0036496350364963502,
                "PROVIDED_CONSTANT_WEIGHT": 0.04744525547445255,
                "COMMON_CONSTANT_WEIGHT": 0.014598540145985401,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0036496350364963502,
                "INPUT_VARIABLE_WEIGHT": 0.19708029197080293,
                "AXIS_CONSTANT_WEIGHT": 0.0036496350364963502,
                "SHAPE_CONSTANT_WEIGHT": 0.0036496350364963502,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0036496350364963502,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.010948905109489052,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0036496350364963502,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0036496350364963502,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0036496350364963502
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 6,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 3,
                "tf.sequence_mask(lengths, maxlen)": 6,
                "tf.shape(input)": 7,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 7,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 4,
                "COMMON_CONSTANT_WEIGHT": 6,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_09",
        "description": "sort the segments",
        "target_program": "tf.gather(in2, tf.argsort(in1, stable=True))",
        "source": "Real task encountered by Googler, 8/9/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[1, 1, 1, 0, 0, 2],[10, 20, 30, 14, 15, 26],]",
            "outputs": "[14, 15, 10, 20, 30, 26]"
        },
        "completions": [
            "values = tf.gather(params=in2, indices=tf.argsort(in1))\nreturn values\n",
            "return tf.gather(in2, tf.argsort(in1, axis=0))",
            "return tf.math.unsorted_segment_sum(in2, in1, tf.reduce_max(in1) + 1)\n",
            "sorted_indices = tf.argsort(in1)\nreturn tf.gather(in2, sorted_indices)\n",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    sorted_in1 = tf.gather(in1, sorted_indices)\n    sorted_in2 = tf.gather(in2, sorted_indices)\n    return sorted_in2\n",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    out1 = tf.gather(in2, sorted_indices)\n    return out1\n",
            "sorted_indices = tf.argsort(in1)\nreturn tf.gather(in2, sorted_indices)\n",
            "return tf.gather(in2, tf.argsort(in1))",
            "values = tf.gather(in2, tf.argsort(in1))\nreturn values\n",
            "return tf.scatter_nd(tf.expand_dims(tf.searchsorted(tf.math.segment_sum(in2, in1), tf.cast(tf.unique_with_counts(in1).y-1, tf.int32), side='left'), 1), in2, tf.shape(in2))",
            "return tf.gather(in2, tf.argsort(in1))",
            "return tf.gather(in2, tf.argsort(in1))",
            "return tf.gather(in2, tf.argsort(in1))",
            "segmented_data = tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)\nsorted_indices = tf.argsort(in1)\nreturn tf.gather(segmented_data, sorted_indices)\n",
            "indices = tf.argsort(in1)\nreturn tf.gather(in2, indices)\n",
            "sorted_indices = tf.argsort(in1)\nsorted_values = tf.gather(in2, sorted_indices)\nreturn tf.math.segment_sum(sorted_values, in1)\n",
            "return tf.gather(in2, tf.argsort(in1))\n",
            "return tf.gather(in2, tf.argsort(in1))\n",
            "segmented_data = tf.math.unsorted_segment_sum(in2, in1, 3)\nsorted_indices = tf.argsort(in1)\nreturn tf.gather(segmented_data, sorted_indices)\n",
            "return tf.gather(in2, tf.argsort(in1))",
            "return tf.math.unsorted_segment_sum(in2, in1, 3)\n",
            "return tf.gather(in2, tf.argsort(in1))\n",
            "return tf.gather(in2, tf.argsort(in1), axis=0)\n",
            "return tf.gather(in2, tf.argsort(in1))\n",
            "values = tf.stack([in1, in2], axis=1)\nsorted_values = tf.gather(values, tf.argsort(values[:, 0]))\nreturn sorted_values[:, 1]\n",
            "# Sort input values based on segment_ids\nsorted_values, _ = tf.math.top_k(tf.gather(in2, tf.argsort(in1)), k=tf.shape(in2)[0])\nreturn sorted_values\n",
            "def transform(in1, in2):\n    segments = tf.argsort(in1)\n    sorted_values = tf.gather(in2, segments)\n    return sorted_values\n",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    return tf.gather(in2, sorted_indices)\n",
            "return tf.gather(in2, tf.argsort(in1))",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    sorted_in2 = tf.gather(in2, sorted_indices)\n    return sorted_in2",
            "return tf.math.unsorted_segment_sum(in2, in1, tf.reduce_max(in1) + 1)",
            "segments = tf.math.segment_sum(in2, in1)\nsorted_segments = tf.argsort(segments)\nreturn tf.gather(in2, sorted_segments)\n",
            "def transform(in1, in2):\n    segments = tf.argsort(in1)\n    sorted_values = tf.gather(in2, segments)\n    return sorted_values\n",
            "return tf.math.unsorted_segment_sum(in2, in1, tf.reduce_max(in1)+1)\n",
            "sorted_indices = tf.argsort(in1)\nsorted_in2 = tf.gather(in2, sorted_indices)\nreturn sorted_in2\n",
            "return tf.gather(in2, tf.argsort(in1))",
            "return tf.gather(in2, tf.argsort(in1))",
            "sorted_indices = tf.argsort(in1)\nsorted_values = tf.gather(in2, sorted_indices)\nreturn tf.scatter_nd(tf.expand_dims(tf.cast(tf.range(tf.size(in1)), tf.int32), 1), sorted_values, tf.shape(in2))\n",
            "return tf.gather(in2, tf.argsort(in1))\n",
            "return tf.gather(in2, tf.argsort(in1, stable=True))",
            "return tf.math.unsorted_segment_sum(in2, tf.argsort(in1), tf.reduce_max(in1)+1)",
            "values, _ = tf.unique(in1)\nreturn tf.gather(values, tf.argsort(in1))\n",
            "return tf.math.unsorted_segment_max(in2, in1, 3)\n",
            "return tf.math.segment_min(in2, in1)",
            "perm = tf.argsort(in1)\nreturn tf.gather(in2, perm)\n",
            "return tf.gather(in2, tf.argsort(in1))",
            "return tf.gather(in2, tf.argsort(in1))",
            "perm = tf.argsort(in1)\nreturn tf.gather(in2, perm)\n",
            "return tf.gather(in2, tf.argsort(in1))\n",
            "sorted_indices = tf.argsort(in1)\nsorted_values = tf.gather(in2, sorted_indices)\nreturn sorted_values\n"
        ],
        "tf_operators": {
            "tf.gather": 42,
            "tf.argsort": 43,
            "tf.reduce_max": 5,
            "tf.math.unsorted_segment_sum": 6,
            "tf.unique_with_counts": 1,
            "tf.searchsorted": 1,
            "tf.math.segment_sum": 3,
            "tf.shape": 3,
            "tf.scatter_nd": 2,
            "tf.cast": 2,
            "tf.int32": 2,
            "tf.expand_dims": 2,
            "tf.math.unsorted_segment_max": 2,
            "tf.stack": 1,
            "tf.math.top_k": 1,
            "tf.range": 1,
            "tf.size": 1,
            "tf.unique": 1,
            "tf.math.segment_min": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [],
            [
                0
            ],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1,
                1
            ],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [
                3
            ],
            [],
            [
                3
            ],
            [],
            [
                0
            ],
            [],
            [
                1,
                0,
                1
            ],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [],
            [
                3
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [
            0,
            1,
            3
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 118,
            "shape": 0,
            "tf_bool": 0,
            "provided": 3,
            "common": 13,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 2
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.002680965147453083,
                "tf.add(x, y)": 0.002680965147453083,
                "tf.add_n(inputs)": 0.002680965147453083,
                "tf.argmax(input, axis)": 0.002680965147453083,
                "tf.argmin(input, axis)": 0.002680965147453083,
                "tf.argsort(values, axis, stable=True)": 0.00804289544235925,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.002680965147453083,
                "tf.boolean_mask(tensor, mask)": 0.002680965147453083,
                "tf.broadcast_to(input, shape)": 0.002680965147453083,
                "tf.cast(x, dtype)": 0.00804289544235925,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.002680965147453083,
                "tf.concat(values, axis)": 0.002680965147453083,
                "tf.constant(value)": 0.002680965147453083,
                "tf.constant(value, dtype)": 0.002680965147453083,
                "tf.divide(x, y)": 0.002680965147453083,
                "tf.equal(x, y)": 0.002680965147453083,
                "tf.exp(x)": 0.002680965147453083,
                "tf.expand_dims(input, axis)": 0.00804289544235925,
                "tf.eye(num_rows)": 0.002680965147453083,
                "tf.eye(num_rows, num_columns)": 0.002680965147453083,
                "tf.eye(num_rows, dtype)": 0.002680965147453083,
                "tf.fill(dims, value)": 0.002680965147453083,
                "tf.gather(params, indices)": 0.1126005361930295,
                "tf.gather(params, indices, axis, batch_dims)": 0.00804289544235925,
                "tf.gather_nd(params, indices)": 0.002680965147453083,
                "tf.gather_nd(params, indices, batch_dims)": 0.002680965147453083,
                "tf.greater(x, y)": 0.002680965147453083,
                "tf.greater_equal(x, y)": 0.002680965147453083,
                "tf.math.bincount(arr)": 0.002680965147453083,
                "tf.math.ceil(x)": 0.002680965147453083,
                "tf.math.count_nonzero(input)": 0.002680965147453083,
                "tf.math.count_nonzero(input, axis)": 0.002680965147453083,
                "tf.math.cumsum(x, axis)": 0.002680965147453083,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.002680965147453083,
                "tf.math.divide_no_nan(x, y)": 0.002680965147453083,
                "tf.math.floor(x)": 0.002680965147453083,
                "tf.math.log(x)": 0.002680965147453083,
                "tf.math.logical_and(x, y)": 0.002680965147453083,
                "tf.math.logical_not(x)": 0.002680965147453083,
                "tf.math.logical_or(x, y)": 0.002680965147453083,
                "tf.math.logical_xor(x, y)": 0.002680965147453083,
                "tf.math.negative(x)": 0.002680965147453083,
                "tf.math.reciprocal(x)": 0.002680965147453083,
                "tf.math.reciprocal_no_nan(x)": 0.002680965147453083,
                "tf.math.segment_max(data, segment_ids)": 0.002680965147453083,
                "tf.math.segment_mean(data, segment_ids)": 0.002680965147453083,
                "tf.math.segment_min(data, segment_ids)": 0.005361930294906166,
                "tf.math.segment_prod(data, segment_ids)": 0.002680965147453083,
                "tf.math.segment_sum(data, segment_ids)": 0.010723860589812333,
                "tf.math.squared_difference(x, y)": 0.002680965147453083,
                "tf.math.top_k(input, k)": 0.005361930294906166,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.00804289544235925,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.002680965147453083,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.002680965147453083,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.002680965147453083,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.01876675603217158,
                "tf.matmul(a, b)": 0.002680965147453083,
                "tf.maximum(x, y)": 0.002680965147453083,
                "tf.minimum(x, y)": 0.002680965147453083,
                "tf.multiply(x, y)": 0.002680965147453083,
                "tf.not_equal(x, y)": 0.002680965147453083,
                "tf.one_hot(indices, depth)": 0.002680965147453083,
                "tf.ones(shape)": 0.002680965147453083,
                "tf.ones_like(input)": 0.002680965147453083,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.002680965147453083,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.002680965147453083,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.002680965147453083,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.002680965147453083,
                "tf.range(start)": 0.005361930294906166,
                "tf.range(start, limit, delta)": 0.002680965147453083,
                "tf.reduce_any(input_tensor, axis)": 0.002680965147453083,
                "tf.reduce_all(input_tensor, axis)": 0.002680965147453083,
                "tf.reduce_max(input_tensor)": 0.0160857908847185,
                "tf.reduce_max(input_tensor, axis)": 0.002680965147453083,
                "tf.reduce_mean(input_tensor)": 0.002680965147453083,
                "tf.reduce_mean(input_tensor, axis)": 0.002680965147453083,
                "tf.reduce_min(input_tensor)": 0.002680965147453083,
                "tf.reduce_min(input_tensor, axis)": 0.002680965147453083,
                "tf.reduce_prod(input_tensor, axis)": 0.002680965147453083,
                "tf.reduce_sum(input_tensor)": 0.002680965147453083,
                "tf.reduce_sum(input_tensor, axis)": 0.002680965147453083,
                "tf.repeat(input, repeats)": 0.002680965147453083,
                "tf.repeat(input, repeats, axis)": 0.002680965147453083,
                "tf.reshape(tensor, shape)": 0.002680965147453083,
                "tf.reverse(tensor, axis)": 0.002680965147453083,
                "tf.roll(input, shift, axis)": 0.002680965147453083,
                "tf.round(x)": 0.002680965147453083,
                "tf.scatter_nd(indices, updates, shape)": 0.00804289544235925,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.002680965147453083,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.002680965147453083,
                "tf.sequence_mask(lengths)": 0.002680965147453083,
                "tf.sequence_mask(lengths, maxlen)": 0.002680965147453083,
                "tf.shape(input)": 0.010723860589812333,
                "tf.sign(x)": 0.002680965147453083,
                "tf.sort(values, axis)": 0.002680965147453083,
                "tf.sort(values, axis, direction='DESCENDING')": 0.002680965147453083,
                "tf.sqrt(x)": 0.002680965147453083,
                "tf.square(x)": 0.002680965147453083,
                "tf.squeeze(input)": 0.002680965147453083,
                "tf.squeeze(input, axis)": 0.002680965147453083,
                "tf.stack(values, axis)": 0.005361930294906166,
                "tf.subtract(x, y)": 0.002680965147453083,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.002680965147453083,
                "tf.tensordot(a, b, axes)": 0.002680965147453083,
                "tf.tile(input, multiples)": 0.002680965147453083,
                "tf.transpose(a)": 0.002680965147453083,
                "tf.transpose(a, perm)": 0.002680965147453083,
                "tf.unique_with_counts(x)": 0.005361930294906166,
                "tf.unstack(value, axis)": 0.002680965147453083,
                "tf.where(condition)": 0.002680965147453083,
                "tf.where(condition, x, y)": 0.002680965147453083,
                "tf.zeros(shape)": 0.002680965147453083,
                "tf.zeros_like(input)": 0.002680965147453083,
                "tf.SparseTensor(indices, values, dense_shape)": 0.002680965147453083,
                "tf.sparse.add(a, b)": 0.002680965147453083,
                "tf.sparse.concat(axis, sp_inputs)": 0.002680965147453083,
                "tf.sparse.expand_dims(sp_input, axis)": 0.002680965147453083,
                "tf.sparse.from_dense(tensor)": 0.002680965147453083,
                "tf.sparse.maximum(sp_a, sp_b)": 0.002680965147453083,
                "tf.sparse.minimum(sp_a, sp_b)": 0.002680965147453083,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.002680965147453083,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.002680965147453083,
                "tf.sparse.reset_shape(sp_input)": 0.002680965147453083,
                "tf.sparse.reshape(sp_input, shape)": 0.002680965147453083,
                "tf.sparse.retain(sp_input, to_retain)": 0.002680965147453083,
                "tf.sparse.slice(sp_input, start, size)": 0.002680965147453083,
                "tf.sparse.split(sp_input, num_split, axis)": 0.002680965147453083,
                "tf.sparse.to_dense(sp_input)": 0.002680965147453083,
                "tf.sparse.to_dense(sp_input, default_value)": 0.002680965147453083,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.002680965147453083,
                "tf.sparse.transpose(sp_input)": 0.002680965147453083,
                "tf.sparse.transpose(sp_input, perm)": 0.002680965147453083,
                "IndexingAxis1Operation": 0.00804289544235925,
                "IndexingOperation": 0.005361930294906166,
                "PairCreationOperation": 0.013404825737265416,
                "SingletonTupleCreationOperation": 0.002680965147453083,
                "SlicingAxis0BothOperation": 0.002680965147453083,
                "SlicingAxis0LeftOperation": 0.002680965147453083,
                "SlicingAxis0RightOperation": 0.002680965147453083,
                "SlicingAxis1BothOperation": 0.002680965147453083,
                "SlicingAxis1LeftOperation": 0.002680965147453083,
                "SlicingAxis1RightOperation": 0.002680965147453083,
                "TripleCreationOperation": 0.002680965147453083,
                "PROVIDED_CONSTANT_WEIGHT": 0.010723860589812333,
                "COMMON_CONSTANT_WEIGHT": 0.03753351206434316,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.002680965147453083,
                "INPUT_VARIABLE_WEIGHT": 0.3190348525469169,
                "AXIS_CONSTANT_WEIGHT": 0.002680965147453083,
                "SHAPE_CONSTANT_WEIGHT": 0.002680965147453083,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.002680965147453083,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.00804289544235925,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.002680965147453083,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.002680965147453083,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.002680965147453083
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 3,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 6,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 6,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 7,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 7,
                "IndexingOperation": 8,
                "PairCreationOperation": 6,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 7,
                "COMMON_CONSTANT_WEIGHT": 5,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 9,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "google_11",
        "description": "count the number of elements greater than 0 in each row",
        "target_program": "tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)",
        "source": "Real task encountered by Googler, 8/26/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1.0, 0.3, -4.2, 0.0, 2.1, 0.4], [-0.1, 0.0, 1.4, -1.0, 0.4, 0.0], [0.1, 0.0, 0.7, -0.3, 0.5, -0.1], [1.4, 2.5, 0.3, 0.01, 0.0, 1.2]],]",
            "outputs": "[4, 2, 3, 5]"
        },
        "completions": [
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "greater_than_zero = tf.greater(in1, 0)\ncount_per_row = tf.math.count_nonzero(greater_than_zero, axis=1)\nreturn count_per_row\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0.0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.cast(tf.math.count_nonzero(tf.greater(in1, 0), axis=1), tf.int32)\n",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.cast(tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1), tf.int32)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n"
        ],
        "tf_operators": {
            "tf.math.count_nonzero": 28,
            "tf.greater": 50,
            "tf.cast": 23,
            "tf.reduce_sum": 22,
            "tf.int32": 23
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 50,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 99,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 24
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0024875621890547263,
                "tf.add(x, y)": 0.0024875621890547263,
                "tf.add_n(inputs)": 0.0024875621890547263,
                "tf.argmax(input, axis)": 0.0024875621890547263,
                "tf.argmin(input, axis)": 0.0024875621890547263,
                "tf.argsort(values, axis, stable=True)": 0.0024875621890547263,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0024875621890547263,
                "tf.boolean_mask(tensor, mask)": 0.0024875621890547263,
                "tf.broadcast_to(input, shape)": 0.0024875621890547263,
                "tf.cast(x, dtype)": 0.06218905472636816,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0024875621890547263,
                "tf.concat(values, axis)": 0.0024875621890547263,
                "tf.constant(value)": 0.0024875621890547263,
                "tf.constant(value, dtype)": 0.0024875621890547263,
                "tf.divide(x, y)": 0.0024875621890547263,
                "tf.equal(x, y)": 0.0024875621890547263,
                "tf.exp(x)": 0.0024875621890547263,
                "tf.expand_dims(input, axis)": 0.0024875621890547263,
                "tf.eye(num_rows)": 0.0024875621890547263,
                "tf.eye(num_rows, num_columns)": 0.0024875621890547263,
                "tf.eye(num_rows, dtype)": 0.0024875621890547263,
                "tf.fill(dims, value)": 0.0024875621890547263,
                "tf.gather(params, indices)": 0.0024875621890547263,
                "tf.gather(params, indices, axis, batch_dims)": 0.0024875621890547263,
                "tf.gather_nd(params, indices)": 0.0024875621890547263,
                "tf.gather_nd(params, indices, batch_dims)": 0.0024875621890547263,
                "tf.greater(x, y)": 0.12686567164179105,
                "tf.greater_equal(x, y)": 0.0024875621890547263,
                "tf.math.bincount(arr)": 0.0024875621890547263,
                "tf.math.ceil(x)": 0.0024875621890547263,
                "tf.math.count_nonzero(input)": 0.0024875621890547263,
                "tf.math.count_nonzero(input, axis)": 0.0024875621890547263,
                "tf.math.cumsum(x, axis)": 0.0024875621890547263,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0024875621890547263,
                "tf.math.divide_no_nan(x, y)": 0.0024875621890547263,
                "tf.math.floor(x)": 0.0024875621890547263,
                "tf.math.log(x)": 0.0024875621890547263,
                "tf.math.logical_and(x, y)": 0.0024875621890547263,
                "tf.math.logical_not(x)": 0.0024875621890547263,
                "tf.math.logical_or(x, y)": 0.0024875621890547263,
                "tf.math.logical_xor(x, y)": 0.0024875621890547263,
                "tf.math.negative(x)": 0.0024875621890547263,
                "tf.math.reciprocal(x)": 0.0024875621890547263,
                "tf.math.reciprocal_no_nan(x)": 0.0024875621890547263,
                "tf.math.segment_max(data, segment_ids)": 0.0024875621890547263,
                "tf.math.segment_mean(data, segment_ids)": 0.0024875621890547263,
                "tf.math.segment_min(data, segment_ids)": 0.0024875621890547263,
                "tf.math.segment_prod(data, segment_ids)": 0.0024875621890547263,
                "tf.math.segment_sum(data, segment_ids)": 0.0024875621890547263,
                "tf.math.squared_difference(x, y)": 0.0024875621890547263,
                "tf.math.top_k(input, k)": 0.0024875621890547263,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0024875621890547263,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0024875621890547263,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0024875621890547263,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0024875621890547263,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0024875621890547263,
                "tf.matmul(a, b)": 0.0024875621890547263,
                "tf.maximum(x, y)": 0.0024875621890547263,
                "tf.minimum(x, y)": 0.0024875621890547263,
                "tf.multiply(x, y)": 0.0024875621890547263,
                "tf.not_equal(x, y)": 0.0024875621890547263,
                "tf.one_hot(indices, depth)": 0.0024875621890547263,
                "tf.ones(shape)": 0.0024875621890547263,
                "tf.ones_like(input)": 0.0024875621890547263,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0024875621890547263,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0024875621890547263,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0024875621890547263,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0024875621890547263,
                "tf.range(start)": 0.0024875621890547263,
                "tf.range(start, limit, delta)": 0.0024875621890547263,
                "tf.reduce_any(input_tensor, axis)": 0.0024875621890547263,
                "tf.reduce_all(input_tensor, axis)": 0.0024875621890547263,
                "tf.reduce_max(input_tensor)": 0.0024875621890547263,
                "tf.reduce_max(input_tensor, axis)": 0.0024875621890547263,
                "tf.reduce_mean(input_tensor)": 0.0024875621890547263,
                "tf.reduce_mean(input_tensor, axis)": 0.0024875621890547263,
                "tf.reduce_min(input_tensor)": 0.0024875621890547263,
                "tf.reduce_min(input_tensor, axis)": 0.0024875621890547263,
                "tf.reduce_prod(input_tensor, axis)": 0.0024875621890547263,
                "tf.reduce_sum(input_tensor)": 0.0024875621890547263,
                "tf.reduce_sum(input_tensor, axis)": 0.0024875621890547263,
                "tf.repeat(input, repeats)": 0.0024875621890547263,
                "tf.repeat(input, repeats, axis)": 0.0024875621890547263,
                "tf.reshape(tensor, shape)": 0.0024875621890547263,
                "tf.reverse(tensor, axis)": 0.0024875621890547263,
                "tf.roll(input, shift, axis)": 0.0024875621890547263,
                "tf.round(x)": 0.0024875621890547263,
                "tf.scatter_nd(indices, updates, shape)": 0.0024875621890547263,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0024875621890547263,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0024875621890547263,
                "tf.sequence_mask(lengths)": 0.0024875621890547263,
                "tf.sequence_mask(lengths, maxlen)": 0.0024875621890547263,
                "tf.shape(input)": 0.0024875621890547263,
                "tf.sign(x)": 0.0024875621890547263,
                "tf.sort(values, axis)": 0.0024875621890547263,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0024875621890547263,
                "tf.sqrt(x)": 0.0024875621890547263,
                "tf.square(x)": 0.0024875621890547263,
                "tf.squeeze(input)": 0.0024875621890547263,
                "tf.squeeze(input, axis)": 0.0024875621890547263,
                "tf.stack(values, axis)": 0.0024875621890547263,
                "tf.subtract(x, y)": 0.0024875621890547263,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0024875621890547263,
                "tf.tensordot(a, b, axes)": 0.0024875621890547263,
                "tf.tile(input, multiples)": 0.0024875621890547263,
                "tf.transpose(a)": 0.0024875621890547263,
                "tf.transpose(a, perm)": 0.0024875621890547263,
                "tf.unique_with_counts(x)": 0.0024875621890547263,
                "tf.unstack(value, axis)": 0.0024875621890547263,
                "tf.where(condition)": 0.0024875621890547263,
                "tf.where(condition, x, y)": 0.0024875621890547263,
                "tf.zeros(shape)": 0.0024875621890547263,
                "tf.zeros_like(input)": 0.0024875621890547263,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0024875621890547263,
                "tf.sparse.add(a, b)": 0.0024875621890547263,
                "tf.sparse.concat(axis, sp_inputs)": 0.0024875621890547263,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0024875621890547263,
                "tf.sparse.from_dense(tensor)": 0.0024875621890547263,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0024875621890547263,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0024875621890547263,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0024875621890547263,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0024875621890547263,
                "tf.sparse.reset_shape(sp_input)": 0.0024875621890547263,
                "tf.sparse.reshape(sp_input, shape)": 0.0024875621890547263,
                "tf.sparse.retain(sp_input, to_retain)": 0.0024875621890547263,
                "tf.sparse.slice(sp_input, start, size)": 0.0024875621890547263,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0024875621890547263,
                "tf.sparse.to_dense(sp_input)": 0.0024875621890547263,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0024875621890547263,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0024875621890547263,
                "tf.sparse.transpose(sp_input)": 0.0024875621890547263,
                "tf.sparse.transpose(sp_input, perm)": 0.0024875621890547263,
                "IndexingAxis1Operation": 0.0024875621890547263,
                "IndexingOperation": 0.0024875621890547263,
                "PairCreationOperation": 0.0024875621890547263,
                "SingletonTupleCreationOperation": 0.0024875621890547263,
                "SlicingAxis0BothOperation": 0.0024875621890547263,
                "SlicingAxis0LeftOperation": 0.0024875621890547263,
                "SlicingAxis0RightOperation": 0.0024875621890547263,
                "SlicingAxis1BothOperation": 0.0024875621890547263,
                "SlicingAxis1LeftOperation": 0.0024875621890547263,
                "SlicingAxis1RightOperation": 0.0024875621890547263,
                "TripleCreationOperation": 0.0024875621890547263,
                "PROVIDED_CONSTANT_WEIGHT": 0.0024875621890547263,
                "COMMON_CONSTANT_WEIGHT": 0.24875621890547264,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0024875621890547263,
                "INPUT_VARIABLE_WEIGHT": 0.12686567164179105,
                "AXIS_CONSTANT_WEIGHT": 0.0024875621890547263,
                "SHAPE_CONSTANT_WEIGHT": 0.0024875621890547263,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0024875621890547263,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.06218905472636816,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0024875621890547263,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0024875621890547263,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0024875621890547263
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 4,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 9,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 3,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 9,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 9,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 9,
                "PairCreationOperation": 9,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 2,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 9,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 4,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "google_12",
        "description": "identify elements between 0 and 1",
        "target_program": "tf.cast(tf.logical_and(0 <= in1, in1 <= 1), tf.int32)",
        "source": "Real task encountered by Googler, 8/26/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1.0, 0.3, -4.2, 0.0, 2.1], [-0.1, 0.0, 1.4, -1.0, 0.4], [0.1, 0.0, 0.7, -0.3, 0.5], [1.4, 2.5, 0.3, -0.1, 0.0]],]",
            "outputs": "[[1, 1, 0, 1, 0],    [0, 1, 0, 0, 1],    [1, 1, 1, 0, 1],    [0, 0, 1, 0, 1]]"
        },
        "completions": [
            "result = tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\nreturn result\n",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n",
            "return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n",
            "return tf.where(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.ones_like(in1), tf.zeros_like(in1))",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "return tf.cast(tf.math.logical_and(tf.greater_equal(in1, 0), tf.less(in1, 1)), tf.int32)",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less(in1, 1)).numpy().astype(int)\n",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "output = tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), dtype=tf.int32)\n",
            "result = tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\nreturn result\n",
            "return tf.where(tf.logical_and(in1 >= 0, in1 <= 1), 1, 0)",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "out = tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\nreturn out\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.logical_and(in1 >= 0, in1 <= 1)",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)",
            "output = tf.math.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\nreturn tf.cast(output, tf.int32)\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.cast((tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))), tf.int32)",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less(in1, 1)), tf.int32)\n",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.math.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n"
        ],
        "tf_operators": {
            "tf.greater_equal": 43,
            "tf.less_equal": 40,
            "tf.cast": 21,
            "tf.int32": 21,
            "tf.logical_and": 47,
            "tf.where": 2,
            "tf.ones_like": 1,
            "tf.zeros_like": 1,
            "tf.less": 3,
            "tf.math.logical_and": 3
        },
        "coverage_percentage": 100.0,
        "total_covered": 3,
        "total_in_target": 3,
        "parsed_constants": [
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1,
                1,
                0
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 103,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 102,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 21
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0022123893805309734,
                "tf.add(x, y)": 0.0022123893805309734,
                "tf.add_n(inputs)": 0.0022123893805309734,
                "tf.argmax(input, axis)": 0.0022123893805309734,
                "tf.argmin(input, axis)": 0.0022123893805309734,
                "tf.argsort(values, axis, stable=True)": 0.0022123893805309734,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0022123893805309734,
                "tf.boolean_mask(tensor, mask)": 0.0022123893805309734,
                "tf.broadcast_to(input, shape)": 0.0022123893805309734,
                "tf.cast(x, dtype)": 0.048672566371681415,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0022123893805309734,
                "tf.concat(values, axis)": 0.0022123893805309734,
                "tf.constant(value)": 0.0022123893805309734,
                "tf.constant(value, dtype)": 0.0022123893805309734,
                "tf.divide(x, y)": 0.0022123893805309734,
                "tf.equal(x, y)": 0.0022123893805309734,
                "tf.exp(x)": 0.0022123893805309734,
                "tf.expand_dims(input, axis)": 0.0022123893805309734,
                "tf.eye(num_rows)": 0.0022123893805309734,
                "tf.eye(num_rows, num_columns)": 0.0022123893805309734,
                "tf.eye(num_rows, dtype)": 0.0022123893805309734,
                "tf.fill(dims, value)": 0.0022123893805309734,
                "tf.gather(params, indices)": 0.0022123893805309734,
                "tf.gather(params, indices, axis, batch_dims)": 0.0022123893805309734,
                "tf.gather_nd(params, indices)": 0.0022123893805309734,
                "tf.gather_nd(params, indices, batch_dims)": 0.0022123893805309734,
                "tf.greater(x, y)": 0.0022123893805309734,
                "tf.greater_equal(x, y)": 0.09734513274336283,
                "tf.math.bincount(arr)": 0.0022123893805309734,
                "tf.math.ceil(x)": 0.0022123893805309734,
                "tf.math.count_nonzero(input)": 0.0022123893805309734,
                "tf.math.count_nonzero(input, axis)": 0.0022123893805309734,
                "tf.math.cumsum(x, axis)": 0.0022123893805309734,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0022123893805309734,
                "tf.math.divide_no_nan(x, y)": 0.0022123893805309734,
                "tf.math.floor(x)": 0.0022123893805309734,
                "tf.math.log(x)": 0.0022123893805309734,
                "tf.math.logical_and(x, y)": 0.008849557522123894,
                "tf.math.logical_not(x)": 0.0022123893805309734,
                "tf.math.logical_or(x, y)": 0.0022123893805309734,
                "tf.math.logical_xor(x, y)": 0.0022123893805309734,
                "tf.math.negative(x)": 0.0022123893805309734,
                "tf.math.reciprocal(x)": 0.0022123893805309734,
                "tf.math.reciprocal_no_nan(x)": 0.0022123893805309734,
                "tf.math.segment_max(data, segment_ids)": 0.0022123893805309734,
                "tf.math.segment_mean(data, segment_ids)": 0.0022123893805309734,
                "tf.math.segment_min(data, segment_ids)": 0.0022123893805309734,
                "tf.math.segment_prod(data, segment_ids)": 0.0022123893805309734,
                "tf.math.segment_sum(data, segment_ids)": 0.0022123893805309734,
                "tf.math.squared_difference(x, y)": 0.0022123893805309734,
                "tf.math.top_k(input, k)": 0.0022123893805309734,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0022123893805309734,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0022123893805309734,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0022123893805309734,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0022123893805309734,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0022123893805309734,
                "tf.matmul(a, b)": 0.0022123893805309734,
                "tf.maximum(x, y)": 0.0022123893805309734,
                "tf.minimum(x, y)": 0.0022123893805309734,
                "tf.multiply(x, y)": 0.0022123893805309734,
                "tf.not_equal(x, y)": 0.0022123893805309734,
                "tf.one_hot(indices, depth)": 0.0022123893805309734,
                "tf.ones(shape)": 0.0022123893805309734,
                "tf.ones_like(input)": 0.004424778761061947,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0022123893805309734,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0022123893805309734,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0022123893805309734,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0022123893805309734,
                "tf.range(start)": 0.0022123893805309734,
                "tf.range(start, limit, delta)": 0.0022123893805309734,
                "tf.reduce_any(input_tensor, axis)": 0.0022123893805309734,
                "tf.reduce_all(input_tensor, axis)": 0.0022123893805309734,
                "tf.reduce_max(input_tensor)": 0.0022123893805309734,
                "tf.reduce_max(input_tensor, axis)": 0.0022123893805309734,
                "tf.reduce_mean(input_tensor)": 0.0022123893805309734,
                "tf.reduce_mean(input_tensor, axis)": 0.0022123893805309734,
                "tf.reduce_min(input_tensor)": 0.0022123893805309734,
                "tf.reduce_min(input_tensor, axis)": 0.0022123893805309734,
                "tf.reduce_prod(input_tensor, axis)": 0.0022123893805309734,
                "tf.reduce_sum(input_tensor)": 0.0022123893805309734,
                "tf.reduce_sum(input_tensor, axis)": 0.0022123893805309734,
                "tf.repeat(input, repeats)": 0.0022123893805309734,
                "tf.repeat(input, repeats, axis)": 0.0022123893805309734,
                "tf.reshape(tensor, shape)": 0.0022123893805309734,
                "tf.reverse(tensor, axis)": 0.0022123893805309734,
                "tf.roll(input, shift, axis)": 0.0022123893805309734,
                "tf.round(x)": 0.0022123893805309734,
                "tf.scatter_nd(indices, updates, shape)": 0.0022123893805309734,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0022123893805309734,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0022123893805309734,
                "tf.sequence_mask(lengths)": 0.0022123893805309734,
                "tf.sequence_mask(lengths, maxlen)": 0.0022123893805309734,
                "tf.shape(input)": 0.0022123893805309734,
                "tf.sign(x)": 0.0022123893805309734,
                "tf.sort(values, axis)": 0.0022123893805309734,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0022123893805309734,
                "tf.sqrt(x)": 0.0022123893805309734,
                "tf.square(x)": 0.0022123893805309734,
                "tf.squeeze(input)": 0.0022123893805309734,
                "tf.squeeze(input, axis)": 0.0022123893805309734,
                "tf.stack(values, axis)": 0.0022123893805309734,
                "tf.subtract(x, y)": 0.0022123893805309734,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0022123893805309734,
                "tf.tensordot(a, b, axes)": 0.0022123893805309734,
                "tf.tile(input, multiples)": 0.0022123893805309734,
                "tf.transpose(a)": 0.0022123893805309734,
                "tf.transpose(a, perm)": 0.0022123893805309734,
                "tf.unique_with_counts(x)": 0.0022123893805309734,
                "tf.unstack(value, axis)": 0.0022123893805309734,
                "tf.where(condition)": 0.0022123893805309734,
                "tf.where(condition, x, y)": 0.00663716814159292,
                "tf.zeros(shape)": 0.0022123893805309734,
                "tf.zeros_like(input)": 0.004424778761061947,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0022123893805309734,
                "tf.sparse.add(a, b)": 0.0022123893805309734,
                "tf.sparse.concat(axis, sp_inputs)": 0.0022123893805309734,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0022123893805309734,
                "tf.sparse.from_dense(tensor)": 0.0022123893805309734,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0022123893805309734,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0022123893805309734,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0022123893805309734,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0022123893805309734,
                "tf.sparse.reset_shape(sp_input)": 0.0022123893805309734,
                "tf.sparse.reshape(sp_input, shape)": 0.0022123893805309734,
                "tf.sparse.retain(sp_input, to_retain)": 0.0022123893805309734,
                "tf.sparse.slice(sp_input, start, size)": 0.0022123893805309734,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0022123893805309734,
                "tf.sparse.to_dense(sp_input)": 0.0022123893805309734,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0022123893805309734,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0022123893805309734,
                "tf.sparse.transpose(sp_input)": 0.0022123893805309734,
                "tf.sparse.transpose(sp_input, perm)": 0.0022123893805309734,
                "IndexingAxis1Operation": 0.0022123893805309734,
                "IndexingOperation": 0.0022123893805309734,
                "PairCreationOperation": 0.0022123893805309734,
                "SingletonTupleCreationOperation": 0.0022123893805309734,
                "SlicingAxis0BothOperation": 0.0022123893805309734,
                "SlicingAxis0LeftOperation": 0.0022123893805309734,
                "SlicingAxis0RightOperation": 0.0022123893805309734,
                "SlicingAxis1BothOperation": 0.0022123893805309734,
                "SlicingAxis1LeftOperation": 0.0022123893805309734,
                "SlicingAxis1RightOperation": 0.0022123893805309734,
                "TripleCreationOperation": 0.0022123893805309734,
                "PROVIDED_CONSTANT_WEIGHT": 0.0022123893805309734,
                "COMMON_CONSTANT_WEIGHT": 0.22787610619469026,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0022123893805309734,
                "INPUT_VARIABLE_WEIGHT": 0.23008849557522124,
                "AXIS_CONSTANT_WEIGHT": 0.0022123893805309734,
                "SHAPE_CONSTANT_WEIGHT": 0.0022123893805309734,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0022123893805309734,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.048672566371681415,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0022123893805309734,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0022123893805309734,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0022123893805309734
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 4,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 9,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 3,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 9,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 9,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 9,
                "PairCreationOperation": 9,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 2,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 9,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 4,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "google_13",
        "description": "Concatenate batches of sequences",
        "target_program": "tf.concat([in1, in2], axis=1)",
        "source": "Real task encountered by Googler, 9/13/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1, 2], [10, 20]],[[3, 4, 5], [30, 40, 50]],]",
            "outputs": "[[1, 2, 3, 4, 5], [10, 20, 30, 40, 50]]"
        },
        "completions": [
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=-1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=-1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=-1)\n",
            "result = tf.concat([in1, in2], axis=1)\nreturn result\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=-1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)",
            "import tensorflow as tf\n\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=-1)\n"
        ],
        "tf_operators": {
            "tf.concat": 50
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ]
        ],
        "all_constants": [
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 100,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 50,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0028169014084507044,
                "tf.add(x, y)": 0.0028169014084507044,
                "tf.add_n(inputs)": 0.0028169014084507044,
                "tf.argmax(input, axis)": 0.0028169014084507044,
                "tf.argmin(input, axis)": 0.0028169014084507044,
                "tf.argsort(values, axis, stable=True)": 0.0028169014084507044,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0028169014084507044,
                "tf.boolean_mask(tensor, mask)": 0.0028169014084507044,
                "tf.broadcast_to(input, shape)": 0.0028169014084507044,
                "tf.cast(x, dtype)": 0.0028169014084507044,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0028169014084507044,
                "tf.concat(values, axis)": 0.14366197183098592,
                "tf.constant(value)": 0.0028169014084507044,
                "tf.constant(value, dtype)": 0.0028169014084507044,
                "tf.divide(x, y)": 0.0028169014084507044,
                "tf.equal(x, y)": 0.0028169014084507044,
                "tf.exp(x)": 0.0028169014084507044,
                "tf.expand_dims(input, axis)": 0.0028169014084507044,
                "tf.eye(num_rows)": 0.0028169014084507044,
                "tf.eye(num_rows, num_columns)": 0.0028169014084507044,
                "tf.eye(num_rows, dtype)": 0.0028169014084507044,
                "tf.fill(dims, value)": 0.0028169014084507044,
                "tf.gather(params, indices)": 0.0028169014084507044,
                "tf.gather(params, indices, axis, batch_dims)": 0.0028169014084507044,
                "tf.gather_nd(params, indices)": 0.0028169014084507044,
                "tf.gather_nd(params, indices, batch_dims)": 0.0028169014084507044,
                "tf.greater(x, y)": 0.0028169014084507044,
                "tf.greater_equal(x, y)": 0.0028169014084507044,
                "tf.math.bincount(arr)": 0.0028169014084507044,
                "tf.math.ceil(x)": 0.0028169014084507044,
                "tf.math.count_nonzero(input)": 0.0028169014084507044,
                "tf.math.count_nonzero(input, axis)": 0.0028169014084507044,
                "tf.math.cumsum(x, axis)": 0.0028169014084507044,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0028169014084507044,
                "tf.math.divide_no_nan(x, y)": 0.0028169014084507044,
                "tf.math.floor(x)": 0.0028169014084507044,
                "tf.math.log(x)": 0.0028169014084507044,
                "tf.math.logical_and(x, y)": 0.0028169014084507044,
                "tf.math.logical_not(x)": 0.0028169014084507044,
                "tf.math.logical_or(x, y)": 0.0028169014084507044,
                "tf.math.logical_xor(x, y)": 0.0028169014084507044,
                "tf.math.negative(x)": 0.0028169014084507044,
                "tf.math.reciprocal(x)": 0.0028169014084507044,
                "tf.math.reciprocal_no_nan(x)": 0.0028169014084507044,
                "tf.math.segment_max(data, segment_ids)": 0.0028169014084507044,
                "tf.math.segment_mean(data, segment_ids)": 0.0028169014084507044,
                "tf.math.segment_min(data, segment_ids)": 0.0028169014084507044,
                "tf.math.segment_prod(data, segment_ids)": 0.0028169014084507044,
                "tf.math.segment_sum(data, segment_ids)": 0.0028169014084507044,
                "tf.math.squared_difference(x, y)": 0.0028169014084507044,
                "tf.math.top_k(input, k)": 0.0028169014084507044,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0028169014084507044,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0028169014084507044,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0028169014084507044,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0028169014084507044,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0028169014084507044,
                "tf.matmul(a, b)": 0.0028169014084507044,
                "tf.maximum(x, y)": 0.0028169014084507044,
                "tf.minimum(x, y)": 0.0028169014084507044,
                "tf.multiply(x, y)": 0.0028169014084507044,
                "tf.not_equal(x, y)": 0.0028169014084507044,
                "tf.one_hot(indices, depth)": 0.0028169014084507044,
                "tf.ones(shape)": 0.0028169014084507044,
                "tf.ones_like(input)": 0.0028169014084507044,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0028169014084507044,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0028169014084507044,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0028169014084507044,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0028169014084507044,
                "tf.range(start)": 0.0028169014084507044,
                "tf.range(start, limit, delta)": 0.0028169014084507044,
                "tf.reduce_any(input_tensor, axis)": 0.0028169014084507044,
                "tf.reduce_all(input_tensor, axis)": 0.0028169014084507044,
                "tf.reduce_max(input_tensor)": 0.0028169014084507044,
                "tf.reduce_max(input_tensor, axis)": 0.0028169014084507044,
                "tf.reduce_mean(input_tensor)": 0.0028169014084507044,
                "tf.reduce_mean(input_tensor, axis)": 0.0028169014084507044,
                "tf.reduce_min(input_tensor)": 0.0028169014084507044,
                "tf.reduce_min(input_tensor, axis)": 0.0028169014084507044,
                "tf.reduce_prod(input_tensor, axis)": 0.0028169014084507044,
                "tf.reduce_sum(input_tensor)": 0.0028169014084507044,
                "tf.reduce_sum(input_tensor, axis)": 0.0028169014084507044,
                "tf.repeat(input, repeats)": 0.0028169014084507044,
                "tf.repeat(input, repeats, axis)": 0.0028169014084507044,
                "tf.reshape(tensor, shape)": 0.0028169014084507044,
                "tf.reverse(tensor, axis)": 0.0028169014084507044,
                "tf.roll(input, shift, axis)": 0.0028169014084507044,
                "tf.round(x)": 0.0028169014084507044,
                "tf.scatter_nd(indices, updates, shape)": 0.0028169014084507044,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0028169014084507044,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0028169014084507044,
                "tf.sequence_mask(lengths)": 0.0028169014084507044,
                "tf.sequence_mask(lengths, maxlen)": 0.0028169014084507044,
                "tf.shape(input)": 0.0028169014084507044,
                "tf.sign(x)": 0.0028169014084507044,
                "tf.sort(values, axis)": 0.0028169014084507044,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0028169014084507044,
                "tf.sqrt(x)": 0.0028169014084507044,
                "tf.square(x)": 0.0028169014084507044,
                "tf.squeeze(input)": 0.0028169014084507044,
                "tf.squeeze(input, axis)": 0.0028169014084507044,
                "tf.stack(values, axis)": 0.0028169014084507044,
                "tf.subtract(x, y)": 0.0028169014084507044,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0028169014084507044,
                "tf.tensordot(a, b, axes)": 0.0028169014084507044,
                "tf.tile(input, multiples)": 0.0028169014084507044,
                "tf.transpose(a)": 0.0028169014084507044,
                "tf.transpose(a, perm)": 0.0028169014084507044,
                "tf.unique_with_counts(x)": 0.0028169014084507044,
                "tf.unstack(value, axis)": 0.0028169014084507044,
                "tf.where(condition)": 0.0028169014084507044,
                "tf.where(condition, x, y)": 0.0028169014084507044,
                "tf.zeros(shape)": 0.0028169014084507044,
                "tf.zeros_like(input)": 0.0028169014084507044,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0028169014084507044,
                "tf.sparse.add(a, b)": 0.0028169014084507044,
                "tf.sparse.concat(axis, sp_inputs)": 0.0028169014084507044,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0028169014084507044,
                "tf.sparse.from_dense(tensor)": 0.0028169014084507044,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0028169014084507044,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0028169014084507044,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0028169014084507044,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0028169014084507044,
                "tf.sparse.reset_shape(sp_input)": 0.0028169014084507044,
                "tf.sparse.reshape(sp_input, shape)": 0.0028169014084507044,
                "tf.sparse.retain(sp_input, to_retain)": 0.0028169014084507044,
                "tf.sparse.slice(sp_input, start, size)": 0.0028169014084507044,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0028169014084507044,
                "tf.sparse.to_dense(sp_input)": 0.0028169014084507044,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0028169014084507044,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0028169014084507044,
                "tf.sparse.transpose(sp_input)": 0.0028169014084507044,
                "tf.sparse.transpose(sp_input, perm)": 0.0028169014084507044,
                "IndexingAxis1Operation": 0.0028169014084507044,
                "IndexingOperation": 0.0028169014084507044,
                "PairCreationOperation": 0.0028169014084507044,
                "SingletonTupleCreationOperation": 0.0028169014084507044,
                "SlicingAxis0BothOperation": 0.0028169014084507044,
                "SlicingAxis0LeftOperation": 0.0028169014084507044,
                "SlicingAxis0RightOperation": 0.0028169014084507044,
                "SlicingAxis1BothOperation": 0.0028169014084507044,
                "SlicingAxis1LeftOperation": 0.0028169014084507044,
                "SlicingAxis1RightOperation": 0.0028169014084507044,
                "TripleCreationOperation": 0.0028169014084507044,
                "PROVIDED_CONSTANT_WEIGHT": 0.0028169014084507044,
                "COMMON_CONSTANT_WEIGHT": 0.14366197183098592,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0028169014084507044,
                "INPUT_VARIABLE_WEIGHT": 0.28450704225352114,
                "AXIS_CONSTANT_WEIGHT": 0.0028169014084507044,
                "SHAPE_CONSTANT_WEIGHT": 0.0028169014084507044,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0028169014084507044,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0028169014084507044,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0028169014084507044,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0028169014084507044,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0028169014084507044
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 3,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_14",
        "description": "circular buffer",
        "target_program": "tf.roll(in1, 1, 1)",
        "source": "From internal Colab, 10/17/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1, 3, 2, 0, 0], [4, 6, 5, 0, 0], [8, 7, 9, 0, 0]],]",
            "outputs": "[[0, 1, 3, 2, 0], [0, 4, 6, 5, 0], [0, 8, 7, 9, 0]]"
        },
        "completions": [
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)",
            "return tf.roll(in1, shift=-1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=-1, axis=1)\n",
            "return tf.roll(in1, shift=-1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=-1)",
            "return tf.roll(in1, shift=-1, axis=1)\n",
            "return tf.roll(in1, shift=-1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n  ",
            "return tf.roll(in1, shift=1, axis=1)",
            "return tf.roll(in1, 1, axis=1)\n",
            "return tf.roll(in1, shift=-1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)",
            "return tf.roll(in1, shift=1, axis=1)",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n",
            "return tf.roll(in1, shift=-1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, 1, axis=1)",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n",
            "pad_top = tf.constant([[0, 0], [0, 1]])\npad_bottom = tf.constant([[0, 0], [1, 0]])\npad_left = tf.constant([[0, 0], [1, 0]])\npad_right = tf.constant([[0, 0], [0, 1]])\ntop_values = tf.pad(in1[:, :-1], pad_top)\nbottom_values = tf.pad(in1[:, 1:], pad_bottom)\nleft_values = tf.pad(in1[:, 1:], pad_left)\nright_values = tf.pad(in1[:, :-1], pad_right)\ncircular_buffer = tf.concat([top_values, bottom_values, left_values, right_values], axis=1)\nreturn circular_buffer\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)",
            "return tf.roll(in1, shift=-1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=-1)\n",
            "return tf.roll(in1, shift=1, axis=1)",
            "return tf.roll(in1, shift=-1, axis=1)",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=-1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, -1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n"
        ],
        "tf_operators": {
            "tf.roll": 49,
            "tf.concat": 1,
            "tf.constant": 1,
            "tf.pad": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                -1
            ],
            [
                -1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                0,
                0,
                1,
                0,
                0,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                1,
                -1,
                1,
                1,
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                -1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 21,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 53,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 119,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.002570694087403599,
                "tf.add(x, y)": 0.002570694087403599,
                "tf.add_n(inputs)": 0.002570694087403599,
                "tf.argmax(input, axis)": 0.002570694087403599,
                "tf.argmin(input, axis)": 0.002570694087403599,
                "tf.argsort(values, axis, stable=True)": 0.002570694087403599,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.002570694087403599,
                "tf.boolean_mask(tensor, mask)": 0.002570694087403599,
                "tf.broadcast_to(input, shape)": 0.002570694087403599,
                "tf.cast(x, dtype)": 0.002570694087403599,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.002570694087403599,
                "tf.concat(values, axis)": 0.005141388174807198,
                "tf.constant(value)": 0.012853470437017995,
                "tf.constant(value, dtype)": 0.002570694087403599,
                "tf.divide(x, y)": 0.002570694087403599,
                "tf.equal(x, y)": 0.002570694087403599,
                "tf.exp(x)": 0.002570694087403599,
                "tf.expand_dims(input, axis)": 0.002570694087403599,
                "tf.eye(num_rows)": 0.002570694087403599,
                "tf.eye(num_rows, num_columns)": 0.002570694087403599,
                "tf.eye(num_rows, dtype)": 0.002570694087403599,
                "tf.fill(dims, value)": 0.002570694087403599,
                "tf.gather(params, indices)": 0.002570694087403599,
                "tf.gather(params, indices, axis, batch_dims)": 0.002570694087403599,
                "tf.gather_nd(params, indices)": 0.002570694087403599,
                "tf.gather_nd(params, indices, batch_dims)": 0.002570694087403599,
                "tf.greater(x, y)": 0.002570694087403599,
                "tf.greater_equal(x, y)": 0.002570694087403599,
                "tf.math.bincount(arr)": 0.002570694087403599,
                "tf.math.ceil(x)": 0.002570694087403599,
                "tf.math.count_nonzero(input)": 0.002570694087403599,
                "tf.math.count_nonzero(input, axis)": 0.002570694087403599,
                "tf.math.cumsum(x, axis)": 0.002570694087403599,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.002570694087403599,
                "tf.math.divide_no_nan(x, y)": 0.002570694087403599,
                "tf.math.floor(x)": 0.002570694087403599,
                "tf.math.log(x)": 0.002570694087403599,
                "tf.math.logical_and(x, y)": 0.002570694087403599,
                "tf.math.logical_not(x)": 0.002570694087403599,
                "tf.math.logical_or(x, y)": 0.002570694087403599,
                "tf.math.logical_xor(x, y)": 0.002570694087403599,
                "tf.math.negative(x)": 0.002570694087403599,
                "tf.math.reciprocal(x)": 0.002570694087403599,
                "tf.math.reciprocal_no_nan(x)": 0.002570694087403599,
                "tf.math.segment_max(data, segment_ids)": 0.002570694087403599,
                "tf.math.segment_mean(data, segment_ids)": 0.002570694087403599,
                "tf.math.segment_min(data, segment_ids)": 0.002570694087403599,
                "tf.math.segment_prod(data, segment_ids)": 0.002570694087403599,
                "tf.math.segment_sum(data, segment_ids)": 0.002570694087403599,
                "tf.math.squared_difference(x, y)": 0.002570694087403599,
                "tf.math.top_k(input, k)": 0.002570694087403599,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.002570694087403599,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.002570694087403599,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.002570694087403599,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.002570694087403599,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.002570694087403599,
                "tf.matmul(a, b)": 0.002570694087403599,
                "tf.maximum(x, y)": 0.002570694087403599,
                "tf.minimum(x, y)": 0.002570694087403599,
                "tf.multiply(x, y)": 0.002570694087403599,
                "tf.not_equal(x, y)": 0.002570694087403599,
                "tf.one_hot(indices, depth)": 0.002570694087403599,
                "tf.ones(shape)": 0.002570694087403599,
                "tf.ones_like(input)": 0.002570694087403599,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.002570694087403599,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.002570694087403599,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.002570694087403599,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.002570694087403599,
                "tf.range(start)": 0.002570694087403599,
                "tf.range(start, limit, delta)": 0.002570694087403599,
                "tf.reduce_any(input_tensor, axis)": 0.002570694087403599,
                "tf.reduce_all(input_tensor, axis)": 0.002570694087403599,
                "tf.reduce_max(input_tensor)": 0.002570694087403599,
                "tf.reduce_max(input_tensor, axis)": 0.002570694087403599,
                "tf.reduce_mean(input_tensor)": 0.002570694087403599,
                "tf.reduce_mean(input_tensor, axis)": 0.002570694087403599,
                "tf.reduce_min(input_tensor)": 0.002570694087403599,
                "tf.reduce_min(input_tensor, axis)": 0.002570694087403599,
                "tf.reduce_prod(input_tensor, axis)": 0.002570694087403599,
                "tf.reduce_sum(input_tensor)": 0.002570694087403599,
                "tf.reduce_sum(input_tensor, axis)": 0.002570694087403599,
                "tf.repeat(input, repeats)": 0.002570694087403599,
                "tf.repeat(input, repeats, axis)": 0.002570694087403599,
                "tf.reshape(tensor, shape)": 0.002570694087403599,
                "tf.reverse(tensor, axis)": 0.002570694087403599,
                "tf.roll(input, shift, axis)": 0.12853470437017994,
                "tf.round(x)": 0.002570694087403599,
                "tf.scatter_nd(indices, updates, shape)": 0.002570694087403599,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.002570694087403599,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.002570694087403599,
                "tf.sequence_mask(lengths)": 0.002570694087403599,
                "tf.sequence_mask(lengths, maxlen)": 0.002570694087403599,
                "tf.shape(input)": 0.002570694087403599,
                "tf.sign(x)": 0.002570694087403599,
                "tf.sort(values, axis)": 0.002570694087403599,
                "tf.sort(values, axis, direction='DESCENDING')": 0.002570694087403599,
                "tf.sqrt(x)": 0.002570694087403599,
                "tf.square(x)": 0.002570694087403599,
                "tf.squeeze(input)": 0.002570694087403599,
                "tf.squeeze(input, axis)": 0.002570694087403599,
                "tf.stack(values, axis)": 0.002570694087403599,
                "tf.subtract(x, y)": 0.002570694087403599,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.002570694087403599,
                "tf.tensordot(a, b, axes)": 0.002570694087403599,
                "tf.tile(input, multiples)": 0.002570694087403599,
                "tf.transpose(a)": 0.002570694087403599,
                "tf.transpose(a, perm)": 0.002570694087403599,
                "tf.unique_with_counts(x)": 0.002570694087403599,
                "tf.unstack(value, axis)": 0.002570694087403599,
                "tf.where(condition)": 0.002570694087403599,
                "tf.where(condition, x, y)": 0.002570694087403599,
                "tf.zeros(shape)": 0.002570694087403599,
                "tf.zeros_like(input)": 0.002570694087403599,
                "tf.SparseTensor(indices, values, dense_shape)": 0.002570694087403599,
                "tf.sparse.add(a, b)": 0.002570694087403599,
                "tf.sparse.concat(axis, sp_inputs)": 0.002570694087403599,
                "tf.sparse.expand_dims(sp_input, axis)": 0.002570694087403599,
                "tf.sparse.from_dense(tensor)": 0.002570694087403599,
                "tf.sparse.maximum(sp_a, sp_b)": 0.002570694087403599,
                "tf.sparse.minimum(sp_a, sp_b)": 0.002570694087403599,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.002570694087403599,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.002570694087403599,
                "tf.sparse.reset_shape(sp_input)": 0.002570694087403599,
                "tf.sparse.reshape(sp_input, shape)": 0.002570694087403599,
                "tf.sparse.retain(sp_input, to_retain)": 0.002570694087403599,
                "tf.sparse.slice(sp_input, start, size)": 0.002570694087403599,
                "tf.sparse.split(sp_input, num_split, axis)": 0.002570694087403599,
                "tf.sparse.to_dense(sp_input)": 0.002570694087403599,
                "tf.sparse.to_dense(sp_input, default_value)": 0.002570694087403599,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.002570694087403599,
                "tf.sparse.transpose(sp_input)": 0.002570694087403599,
                "tf.sparse.transpose(sp_input, perm)": 0.002570694087403599,
                "IndexingAxis1Operation": 0.002570694087403599,
                "IndexingOperation": 0.002570694087403599,
                "PairCreationOperation": 0.012853470437017995,
                "SingletonTupleCreationOperation": 0.002570694087403599,
                "SlicingAxis0BothOperation": 0.002570694087403599,
                "SlicingAxis0LeftOperation": 0.002570694087403599,
                "SlicingAxis0RightOperation": 0.002570694087403599,
                "SlicingAxis1BothOperation": 0.002570694087403599,
                "SlicingAxis1LeftOperation": 0.007712082262210797,
                "SlicingAxis1RightOperation": 0.007712082262210797,
                "TripleCreationOperation": 0.002570694087403599,
                "PROVIDED_CONSTANT_WEIGHT": 0.002570694087403599,
                "COMMON_CONSTANT_WEIGHT": 0.30848329048843187,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.002570694087403599,
                "INPUT_VARIABLE_WEIGHT": 0.13881748071979436,
                "AXIS_CONSTANT_WEIGHT": 0.002570694087403599,
                "SHAPE_CONSTANT_WEIGHT": 0.002570694087403599,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.002570694087403599,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.002570694087403599,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.002570694087403599,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.002570694087403599,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.002570694087403599
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 9,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 6,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 9,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 9,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 3,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 9,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 9,
                "PairCreationOperation": 6,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 2,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 9,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "google_15",
        "description": "pad a zero column",
        "target_program": "tf.pad(in1, [[0, 0], [0, 1]], 'CONSTANT')",
        "source": "Real task encountered by Googler, 10/23/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1, 3, 5, 7], [2, 4, 6, 8]],]",
            "outputs": "[[1, 3, 5, 7, 0], [2, 4, 6, 8, 0]]"
        },
        "completions": [
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0,0],[0,1]], mode='CONSTANT')",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0,0],[0,1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(input):\n    return tf.pad(input, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n  ",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], 'CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n"
        ],
        "tf_operators": {
            "tf.pad": 50
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1,
                0
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 50,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 201,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0021929824561403508,
                "tf.add(x, y)": 0.0021929824561403508,
                "tf.add_n(inputs)": 0.0021929824561403508,
                "tf.argmax(input, axis)": 0.0021929824561403508,
                "tf.argmin(input, axis)": 0.0021929824561403508,
                "tf.argsort(values, axis, stable=True)": 0.0021929824561403508,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0021929824561403508,
                "tf.boolean_mask(tensor, mask)": 0.0021929824561403508,
                "tf.broadcast_to(input, shape)": 0.0021929824561403508,
                "tf.cast(x, dtype)": 0.0021929824561403508,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0021929824561403508,
                "tf.concat(values, axis)": 0.0021929824561403508,
                "tf.constant(value)": 0.0021929824561403508,
                "tf.constant(value, dtype)": 0.0021929824561403508,
                "tf.divide(x, y)": 0.0021929824561403508,
                "tf.equal(x, y)": 0.0021929824561403508,
                "tf.exp(x)": 0.0021929824561403508,
                "tf.expand_dims(input, axis)": 0.0021929824561403508,
                "tf.eye(num_rows)": 0.0021929824561403508,
                "tf.eye(num_rows, num_columns)": 0.0021929824561403508,
                "tf.eye(num_rows, dtype)": 0.0021929824561403508,
                "tf.fill(dims, value)": 0.0021929824561403508,
                "tf.gather(params, indices)": 0.0021929824561403508,
                "tf.gather(params, indices, axis, batch_dims)": 0.0021929824561403508,
                "tf.gather_nd(params, indices)": 0.0021929824561403508,
                "tf.gather_nd(params, indices, batch_dims)": 0.0021929824561403508,
                "tf.greater(x, y)": 0.0021929824561403508,
                "tf.greater_equal(x, y)": 0.0021929824561403508,
                "tf.math.bincount(arr)": 0.0021929824561403508,
                "tf.math.ceil(x)": 0.0021929824561403508,
                "tf.math.count_nonzero(input)": 0.0021929824561403508,
                "tf.math.count_nonzero(input, axis)": 0.0021929824561403508,
                "tf.math.cumsum(x, axis)": 0.0021929824561403508,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0021929824561403508,
                "tf.math.divide_no_nan(x, y)": 0.0021929824561403508,
                "tf.math.floor(x)": 0.0021929824561403508,
                "tf.math.log(x)": 0.0021929824561403508,
                "tf.math.logical_and(x, y)": 0.0021929824561403508,
                "tf.math.logical_not(x)": 0.0021929824561403508,
                "tf.math.logical_or(x, y)": 0.0021929824561403508,
                "tf.math.logical_xor(x, y)": 0.0021929824561403508,
                "tf.math.negative(x)": 0.0021929824561403508,
                "tf.math.reciprocal(x)": 0.0021929824561403508,
                "tf.math.reciprocal_no_nan(x)": 0.0021929824561403508,
                "tf.math.segment_max(data, segment_ids)": 0.0021929824561403508,
                "tf.math.segment_mean(data, segment_ids)": 0.0021929824561403508,
                "tf.math.segment_min(data, segment_ids)": 0.0021929824561403508,
                "tf.math.segment_prod(data, segment_ids)": 0.0021929824561403508,
                "tf.math.segment_sum(data, segment_ids)": 0.0021929824561403508,
                "tf.math.squared_difference(x, y)": 0.0021929824561403508,
                "tf.math.top_k(input, k)": 0.0021929824561403508,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0021929824561403508,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0021929824561403508,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0021929824561403508,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0021929824561403508,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0021929824561403508,
                "tf.matmul(a, b)": 0.0021929824561403508,
                "tf.maximum(x, y)": 0.0021929824561403508,
                "tf.minimum(x, y)": 0.0021929824561403508,
                "tf.multiply(x, y)": 0.0021929824561403508,
                "tf.not_equal(x, y)": 0.0021929824561403508,
                "tf.one_hot(indices, depth)": 0.0021929824561403508,
                "tf.ones(shape)": 0.0021929824561403508,
                "tf.ones_like(input)": 0.0021929824561403508,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.08114035087719298,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.03289473684210526,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0021929824561403508,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0021929824561403508,
                "tf.range(start)": 0.0021929824561403508,
                "tf.range(start, limit, delta)": 0.0021929824561403508,
                "tf.reduce_any(input_tensor, axis)": 0.0021929824561403508,
                "tf.reduce_all(input_tensor, axis)": 0.0021929824561403508,
                "tf.reduce_max(input_tensor)": 0.0021929824561403508,
                "tf.reduce_max(input_tensor, axis)": 0.0021929824561403508,
                "tf.reduce_mean(input_tensor)": 0.0021929824561403508,
                "tf.reduce_mean(input_tensor, axis)": 0.0021929824561403508,
                "tf.reduce_min(input_tensor)": 0.0021929824561403508,
                "tf.reduce_min(input_tensor, axis)": 0.0021929824561403508,
                "tf.reduce_prod(input_tensor, axis)": 0.0021929824561403508,
                "tf.reduce_sum(input_tensor)": 0.0021929824561403508,
                "tf.reduce_sum(input_tensor, axis)": 0.0021929824561403508,
                "tf.repeat(input, repeats)": 0.0021929824561403508,
                "tf.repeat(input, repeats, axis)": 0.0021929824561403508,
                "tf.reshape(tensor, shape)": 0.0021929824561403508,
                "tf.reverse(tensor, axis)": 0.0021929824561403508,
                "tf.roll(input, shift, axis)": 0.0021929824561403508,
                "tf.round(x)": 0.0021929824561403508,
                "tf.scatter_nd(indices, updates, shape)": 0.0021929824561403508,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0021929824561403508,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0021929824561403508,
                "tf.sequence_mask(lengths)": 0.0021929824561403508,
                "tf.sequence_mask(lengths, maxlen)": 0.0021929824561403508,
                "tf.shape(input)": 0.0021929824561403508,
                "tf.sign(x)": 0.0021929824561403508,
                "tf.sort(values, axis)": 0.0021929824561403508,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0021929824561403508,
                "tf.sqrt(x)": 0.0021929824561403508,
                "tf.square(x)": 0.0021929824561403508,
                "tf.squeeze(input)": 0.0021929824561403508,
                "tf.squeeze(input, axis)": 0.0021929824561403508,
                "tf.stack(values, axis)": 0.0021929824561403508,
                "tf.subtract(x, y)": 0.0021929824561403508,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0021929824561403508,
                "tf.tensordot(a, b, axes)": 0.0021929824561403508,
                "tf.tile(input, multiples)": 0.0021929824561403508,
                "tf.transpose(a)": 0.0021929824561403508,
                "tf.transpose(a, perm)": 0.0021929824561403508,
                "tf.unique_with_counts(x)": 0.0021929824561403508,
                "tf.unstack(value, axis)": 0.0021929824561403508,
                "tf.where(condition)": 0.0021929824561403508,
                "tf.where(condition, x, y)": 0.0021929824561403508,
                "tf.zeros(shape)": 0.0021929824561403508,
                "tf.zeros_like(input)": 0.0021929824561403508,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0021929824561403508,
                "tf.sparse.add(a, b)": 0.0021929824561403508,
                "tf.sparse.concat(axis, sp_inputs)": 0.0021929824561403508,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0021929824561403508,
                "tf.sparse.from_dense(tensor)": 0.0021929824561403508,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0021929824561403508,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0021929824561403508,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0021929824561403508,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0021929824561403508,
                "tf.sparse.reset_shape(sp_input)": 0.0021929824561403508,
                "tf.sparse.reshape(sp_input, shape)": 0.0021929824561403508,
                "tf.sparse.retain(sp_input, to_retain)": 0.0021929824561403508,
                "tf.sparse.slice(sp_input, start, size)": 0.0021929824561403508,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0021929824561403508,
                "tf.sparse.to_dense(sp_input)": 0.0021929824561403508,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0021929824561403508,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0021929824561403508,
                "tf.sparse.transpose(sp_input)": 0.0021929824561403508,
                "tf.sparse.transpose(sp_input, perm)": 0.0021929824561403508,
                "IndexingAxis1Operation": 0.0021929824561403508,
                "IndexingOperation": 0.0021929824561403508,
                "PairCreationOperation": 0.0021929824561403508,
                "SingletonTupleCreationOperation": 0.0021929824561403508,
                "SlicingAxis0BothOperation": 0.0021929824561403508,
                "SlicingAxis0LeftOperation": 0.0021929824561403508,
                "SlicingAxis0RightOperation": 0.0021929824561403508,
                "SlicingAxis1BothOperation": 0.0021929824561403508,
                "SlicingAxis1LeftOperation": 0.0021929824561403508,
                "SlicingAxis1RightOperation": 0.0021929824561403508,
                "TripleCreationOperation": 0.0021929824561403508,
                "PROVIDED_CONSTANT_WEIGHT": 0.0021929824561403508,
                "COMMON_CONSTANT_WEIGHT": 0.44298245614035087,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0021929824561403508,
                "INPUT_VARIABLE_WEIGHT": 0.1118421052631579,
                "AXIS_CONSTANT_WEIGHT": 0.0021929824561403508,
                "SHAPE_CONSTANT_WEIGHT": 0.0021929824561403508,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0021929824561403508,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0021929824561403508,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0021929824561403508,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0021929824561403508,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0021929824561403508
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 9,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 9,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 4,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 5,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 9,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 9,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 9,
                "PairCreationOperation": 9,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 1,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 9,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "google_16",
        "description": "replicate elements a given number of times",
        "target_program": "tf.gather(in1, tf.where(tf.sequence_mask(in2))[:, 0])",
        "source": "From an internal Google forum",
        "constants": "[]",
        "examples": {
            "inputs": "[[1, 2, 0, 3],[2, 1, 2, 3],]",
            "outputs": "[1, 1, 2, 0, 0, 3, 3, 3]"
        },
        "completions": [
            "return tf.repeat(in1, repeats)\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "result = tf.repeat(in1, in2)\nreturn result\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, repeats)",
            "output = tf.repeat(in1, in2)\nreturn output\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "result = tf.repeat(in1, in2)\nreturn result\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "out = tf.repeat(in1, in2)\nreturn out\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "repeated = tf.repeat(in1, in2)\nreturn repeated\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, repeats)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, repeats=in2)\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "output = tf.repeat(in1, in2)\nreturn output\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, repeats=in2)\n",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, repeats)\n"
        ],
        "tf_operators": {
            "tf.repeat": 50
        },
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 3,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 96,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 0,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0033222591362126247,
                "tf.add(x, y)": 0.0033222591362126247,
                "tf.add_n(inputs)": 0.0033222591362126247,
                "tf.argmax(input, axis)": 0.0033222591362126247,
                "tf.argmin(input, axis)": 0.0033222591362126247,
                "tf.argsort(values, axis, stable=True)": 0.0033222591362126247,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0033222591362126247,
                "tf.boolean_mask(tensor, mask)": 0.0033222591362126247,
                "tf.broadcast_to(input, shape)": 0.0033222591362126247,
                "tf.cast(x, dtype)": 0.0033222591362126247,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0033222591362126247,
                "tf.concat(values, axis)": 0.0033222591362126247,
                "tf.constant(value)": 0.0033222591362126247,
                "tf.constant(value, dtype)": 0.0033222591362126247,
                "tf.divide(x, y)": 0.0033222591362126247,
                "tf.equal(x, y)": 0.0033222591362126247,
                "tf.exp(x)": 0.0033222591362126247,
                "tf.expand_dims(input, axis)": 0.0033222591362126247,
                "tf.eye(num_rows)": 0.0033222591362126247,
                "tf.eye(num_rows, num_columns)": 0.0033222591362126247,
                "tf.eye(num_rows, dtype)": 0.0033222591362126247,
                "tf.fill(dims, value)": 0.0033222591362126247,
                "tf.gather(params, indices)": 0.0033222591362126247,
                "tf.gather(params, indices, axis, batch_dims)": 0.0033222591362126247,
                "tf.gather_nd(params, indices)": 0.0033222591362126247,
                "tf.gather_nd(params, indices, batch_dims)": 0.0033222591362126247,
                "tf.greater(x, y)": 0.0033222591362126247,
                "tf.greater_equal(x, y)": 0.0033222591362126247,
                "tf.math.bincount(arr)": 0.0033222591362126247,
                "tf.math.ceil(x)": 0.0033222591362126247,
                "tf.math.count_nonzero(input)": 0.0033222591362126247,
                "tf.math.count_nonzero(input, axis)": 0.0033222591362126247,
                "tf.math.cumsum(x, axis)": 0.0033222591362126247,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0033222591362126247,
                "tf.math.divide_no_nan(x, y)": 0.0033222591362126247,
                "tf.math.floor(x)": 0.0033222591362126247,
                "tf.math.log(x)": 0.0033222591362126247,
                "tf.math.logical_and(x, y)": 0.0033222591362126247,
                "tf.math.logical_not(x)": 0.0033222591362126247,
                "tf.math.logical_or(x, y)": 0.0033222591362126247,
                "tf.math.logical_xor(x, y)": 0.0033222591362126247,
                "tf.math.negative(x)": 0.0033222591362126247,
                "tf.math.reciprocal(x)": 0.0033222591362126247,
                "tf.math.reciprocal_no_nan(x)": 0.0033222591362126247,
                "tf.math.segment_max(data, segment_ids)": 0.0033222591362126247,
                "tf.math.segment_mean(data, segment_ids)": 0.0033222591362126247,
                "tf.math.segment_min(data, segment_ids)": 0.0033222591362126247,
                "tf.math.segment_prod(data, segment_ids)": 0.0033222591362126247,
                "tf.math.segment_sum(data, segment_ids)": 0.0033222591362126247,
                "tf.math.squared_difference(x, y)": 0.0033222591362126247,
                "tf.math.top_k(input, k)": 0.0033222591362126247,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0033222591362126247,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0033222591362126247,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0033222591362126247,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0033222591362126247,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0033222591362126247,
                "tf.matmul(a, b)": 0.0033222591362126247,
                "tf.maximum(x, y)": 0.0033222591362126247,
                "tf.minimum(x, y)": 0.0033222591362126247,
                "tf.multiply(x, y)": 0.0033222591362126247,
                "tf.not_equal(x, y)": 0.0033222591362126247,
                "tf.one_hot(indices, depth)": 0.0033222591362126247,
                "tf.ones(shape)": 0.0033222591362126247,
                "tf.ones_like(input)": 0.0033222591362126247,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0033222591362126247,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0033222591362126247,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0033222591362126247,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0033222591362126247,
                "tf.range(start)": 0.0033222591362126247,
                "tf.range(start, limit, delta)": 0.0033222591362126247,
                "tf.reduce_any(input_tensor, axis)": 0.0033222591362126247,
                "tf.reduce_all(input_tensor, axis)": 0.0033222591362126247,
                "tf.reduce_max(input_tensor)": 0.0033222591362126247,
                "tf.reduce_max(input_tensor, axis)": 0.0033222591362126247,
                "tf.reduce_mean(input_tensor)": 0.0033222591362126247,
                "tf.reduce_mean(input_tensor, axis)": 0.0033222591362126247,
                "tf.reduce_min(input_tensor)": 0.0033222591362126247,
                "tf.reduce_min(input_tensor, axis)": 0.0033222591362126247,
                "tf.reduce_prod(input_tensor, axis)": 0.0033222591362126247,
                "tf.reduce_sum(input_tensor)": 0.0033222591362126247,
                "tf.reduce_sum(input_tensor, axis)": 0.0033222591362126247,
                "tf.repeat(input, repeats)": 0.16279069767441862,
                "tf.repeat(input, repeats, axis)": 0.009966777408637873,
                "tf.reshape(tensor, shape)": 0.0033222591362126247,
                "tf.reverse(tensor, axis)": 0.0033222591362126247,
                "tf.roll(input, shift, axis)": 0.0033222591362126247,
                "tf.round(x)": 0.0033222591362126247,
                "tf.scatter_nd(indices, updates, shape)": 0.0033222591362126247,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0033222591362126247,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0033222591362126247,
                "tf.sequence_mask(lengths)": 0.0033222591362126247,
                "tf.sequence_mask(lengths, maxlen)": 0.0033222591362126247,
                "tf.shape(input)": 0.0033222591362126247,
                "tf.sign(x)": 0.0033222591362126247,
                "tf.sort(values, axis)": 0.0033222591362126247,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0033222591362126247,
                "tf.sqrt(x)": 0.0033222591362126247,
                "tf.square(x)": 0.0033222591362126247,
                "tf.squeeze(input)": 0.0033222591362126247,
                "tf.squeeze(input, axis)": 0.0033222591362126247,
                "tf.stack(values, axis)": 0.0033222591362126247,
                "tf.subtract(x, y)": 0.0033222591362126247,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0033222591362126247,
                "tf.tensordot(a, b, axes)": 0.0033222591362126247,
                "tf.tile(input, multiples)": 0.0033222591362126247,
                "tf.transpose(a)": 0.0033222591362126247,
                "tf.transpose(a, perm)": 0.0033222591362126247,
                "tf.unique_with_counts(x)": 0.0033222591362126247,
                "tf.unstack(value, axis)": 0.0033222591362126247,
                "tf.where(condition)": 0.0033222591362126247,
                "tf.where(condition, x, y)": 0.0033222591362126247,
                "tf.zeros(shape)": 0.0033222591362126247,
                "tf.zeros_like(input)": 0.0033222591362126247,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0033222591362126247,
                "tf.sparse.add(a, b)": 0.0033222591362126247,
                "tf.sparse.concat(axis, sp_inputs)": 0.0033222591362126247,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0033222591362126247,
                "tf.sparse.from_dense(tensor)": 0.0033222591362126247,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0033222591362126247,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0033222591362126247,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0033222591362126247,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0033222591362126247,
                "tf.sparse.reset_shape(sp_input)": 0.0033222591362126247,
                "tf.sparse.reshape(sp_input, shape)": 0.0033222591362126247,
                "tf.sparse.retain(sp_input, to_retain)": 0.0033222591362126247,
                "tf.sparse.slice(sp_input, start, size)": 0.0033222591362126247,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0033222591362126247,
                "tf.sparse.to_dense(sp_input)": 0.0033222591362126247,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0033222591362126247,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0033222591362126247,
                "tf.sparse.transpose(sp_input)": 0.0033222591362126247,
                "tf.sparse.transpose(sp_input, perm)": 0.0033222591362126247,
                "IndexingAxis1Operation": 0.0033222591362126247,
                "IndexingOperation": 0.0033222591362126247,
                "PairCreationOperation": 0.0033222591362126247,
                "SingletonTupleCreationOperation": 0.0033222591362126247,
                "SlicingAxis0BothOperation": 0.0033222591362126247,
                "SlicingAxis0LeftOperation": 0.0033222591362126247,
                "SlicingAxis0RightOperation": 0.0033222591362126247,
                "SlicingAxis1BothOperation": 0.0033222591362126247,
                "SlicingAxis1LeftOperation": 0.0033222591362126247,
                "SlicingAxis1RightOperation": 0.0033222591362126247,
                "TripleCreationOperation": 0.0033222591362126247,
                "PROVIDED_CONSTANT_WEIGHT": 0.0033222591362126247,
                "COMMON_CONSTANT_WEIGHT": 0.0033222591362126247,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0033222591362126247,
                "INPUT_VARIABLE_WEIGHT": 0.3222591362126246,
                "AXIS_CONSTANT_WEIGHT": 0.0033222591362126247,
                "SHAPE_CONSTANT_WEIGHT": 0.0033222591362126247,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0033222591362126247,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0033222591362126247,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0033222591362126247,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0033222591362126247,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0033222591362126247
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 3,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 8,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_17",
        "description": "use bool tensor as condition",
        "target_program": "tf.where(in1, in2, tf.multiply(in2, -10))",
        "source": "From an internal Google forum",
        "constants": "[-10]",
        "examples": {
            "inputs": "[[True, False, False, True, False],[1, 2, 3, 4, 5],]",
            "outputs": "[1, -20, -30, 4, -50]"
        },
        "completions": [
            "return tf.where(in1, in2, -in2)",
            "return tf.multiply(tf.where(in1, in2, -in2), tf.cast(in2, tf.int32))",
            "return tf.where(tf.expand_dims(in1, axis=-1), in2, -10 * in2)",
            "return tf.where(tf.expand_dims(in1, axis=-1), in2, -1*in2)",
            "return tf.where(in1, in2, in2 * -10)",
            "return tf.where(in1, in2, tf.math.negative(in2))",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10*in2)\n",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -10*in2)",
            "return tf.where(in1, in2, -10 * in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -10*in2)",
            "return tf.where(in1, in2, -10 * in2)",
            "return tf.where(in1, in2, tf.negative(in2))\n",
            "return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    result = tf.where(in1, in2, -10*in2)\n    return result\n",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, tf.math.negative(in2))",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "output = tf.where(in1, in2, -10 * in2)\n",
            "return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    result = tf.where(in1, in2, -10*in2)\n    return result\n",
            "def transform(in1, in2):\n    result = tf.where(in1, in2, in2 * -10)\n    return result\n",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, tf.math.negative(in2))",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    result = tf.where(in1, in2, -10 * in2)\n    return result\n",
            "return tf.where(in1, in2, -10*in2)",
            "def transform(in1, in2):\n    result = tf.where(in1, in2, -10 * in2)\n    return result\n",
            "return tf.where(in1, in2, -in2)\n  ",
            "return tf.where(in1, in2, -10*in2)",
            "return tf.where(in1, in2, tf.math.negative(in2))",
            "return tf.where(in1, in2, -1*in2)",
            "return tf.where(in1, in2, -in2)\n",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -1 * in2)",
            "return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10 * in2)\n",
            "return tf.where(in1, in2, tf.math.negative(in2))",
            "return tf.where(in1, in2, -10*in2)",
            "return tf.where(in1, in2, -in2)"
        ],
        "tf_operators": {
            "tf.where": 50,
            "tf.int32": 1,
            "tf.cast": 1,
            "tf.multiply": 1,
            "tf.expand_dims": 2,
            "tf.math.negative": 5,
            "tf.negative": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [],
            [],
            [
                -1,
                -10
            ],
            [
                -1,
                -1
            ],
            [
                -10
            ],
            [],
            [],
            [],
            [
                -10
            ],
            [],
            [],
            [],
            [],
            [
                -10
            ],
            [
                -10
            ],
            [],
            [
                -10
            ],
            [
                -10
            ],
            [],
            [],
            [
                -10
            ],
            [],
            [],
            [],
            [],
            [
                -10
            ],
            [],
            [
                -10
            ],
            [
                -10
            ],
            [],
            [],
            [],
            [],
            [],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [],
            [
                -10
            ],
            [],
            [
                -1
            ],
            [],
            [],
            [],
            [
                -1
            ],
            [],
            [
                -10
            ],
            [],
            [
                -10
            ],
            []
        ],
        "all_constants": [
            -1,
            -10
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 151,
            "shape": 0,
            "tf_bool": 0,
            "provided": 17,
            "common": 5,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 1
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.002577319587628866,
                "tf.add(x, y)": 0.002577319587628866,
                "tf.add_n(inputs)": 0.002577319587628866,
                "tf.argmax(input, axis)": 0.002577319587628866,
                "tf.argmin(input, axis)": 0.002577319587628866,
                "tf.argsort(values, axis, stable=True)": 0.002577319587628866,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.002577319587628866,
                "tf.boolean_mask(tensor, mask)": 0.002577319587628866,
                "tf.broadcast_to(input, shape)": 0.002577319587628866,
                "tf.cast(x, dtype)": 0.005154639175257732,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.002577319587628866,
                "tf.concat(values, axis)": 0.002577319587628866,
                "tf.constant(value)": 0.002577319587628866,
                "tf.constant(value, dtype)": 0.002577319587628866,
                "tf.divide(x, y)": 0.002577319587628866,
                "tf.equal(x, y)": 0.002577319587628866,
                "tf.exp(x)": 0.002577319587628866,
                "tf.expand_dims(input, axis)": 0.007731958762886598,
                "tf.eye(num_rows)": 0.002577319587628866,
                "tf.eye(num_rows, num_columns)": 0.002577319587628866,
                "tf.eye(num_rows, dtype)": 0.002577319587628866,
                "tf.fill(dims, value)": 0.002577319587628866,
                "tf.gather(params, indices)": 0.002577319587628866,
                "tf.gather(params, indices, axis, batch_dims)": 0.002577319587628866,
                "tf.gather_nd(params, indices)": 0.002577319587628866,
                "tf.gather_nd(params, indices, batch_dims)": 0.002577319587628866,
                "tf.greater(x, y)": 0.002577319587628866,
                "tf.greater_equal(x, y)": 0.002577319587628866,
                "tf.math.bincount(arr)": 0.002577319587628866,
                "tf.math.ceil(x)": 0.002577319587628866,
                "tf.math.count_nonzero(input)": 0.002577319587628866,
                "tf.math.count_nonzero(input, axis)": 0.002577319587628866,
                "tf.math.cumsum(x, axis)": 0.002577319587628866,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.002577319587628866,
                "tf.math.divide_no_nan(x, y)": 0.002577319587628866,
                "tf.math.floor(x)": 0.002577319587628866,
                "tf.math.log(x)": 0.002577319587628866,
                "tf.math.logical_and(x, y)": 0.002577319587628866,
                "tf.math.logical_not(x)": 0.002577319587628866,
                "tf.math.logical_or(x, y)": 0.002577319587628866,
                "tf.math.logical_xor(x, y)": 0.002577319587628866,
                "tf.math.negative(x)": 0.015463917525773196,
                "tf.math.reciprocal(x)": 0.002577319587628866,
                "tf.math.reciprocal_no_nan(x)": 0.002577319587628866,
                "tf.math.segment_max(data, segment_ids)": 0.002577319587628866,
                "tf.math.segment_mean(data, segment_ids)": 0.002577319587628866,
                "tf.math.segment_min(data, segment_ids)": 0.002577319587628866,
                "tf.math.segment_prod(data, segment_ids)": 0.002577319587628866,
                "tf.math.segment_sum(data, segment_ids)": 0.002577319587628866,
                "tf.math.squared_difference(x, y)": 0.002577319587628866,
                "tf.math.top_k(input, k)": 0.002577319587628866,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.002577319587628866,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.002577319587628866,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.002577319587628866,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.002577319587628866,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.002577319587628866,
                "tf.matmul(a, b)": 0.002577319587628866,
                "tf.maximum(x, y)": 0.002577319587628866,
                "tf.minimum(x, y)": 0.002577319587628866,
                "tf.multiply(x, y)": 0.005154639175257732,
                "tf.not_equal(x, y)": 0.002577319587628866,
                "tf.one_hot(indices, depth)": 0.002577319587628866,
                "tf.ones(shape)": 0.002577319587628866,
                "tf.ones_like(input)": 0.002577319587628866,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.002577319587628866,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.002577319587628866,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.002577319587628866,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.002577319587628866,
                "tf.range(start)": 0.002577319587628866,
                "tf.range(start, limit, delta)": 0.002577319587628866,
                "tf.reduce_any(input_tensor, axis)": 0.002577319587628866,
                "tf.reduce_all(input_tensor, axis)": 0.002577319587628866,
                "tf.reduce_max(input_tensor)": 0.002577319587628866,
                "tf.reduce_max(input_tensor, axis)": 0.002577319587628866,
                "tf.reduce_mean(input_tensor)": 0.002577319587628866,
                "tf.reduce_mean(input_tensor, axis)": 0.002577319587628866,
                "tf.reduce_min(input_tensor)": 0.002577319587628866,
                "tf.reduce_min(input_tensor, axis)": 0.002577319587628866,
                "tf.reduce_prod(input_tensor, axis)": 0.002577319587628866,
                "tf.reduce_sum(input_tensor)": 0.002577319587628866,
                "tf.reduce_sum(input_tensor, axis)": 0.002577319587628866,
                "tf.repeat(input, repeats)": 0.002577319587628866,
                "tf.repeat(input, repeats, axis)": 0.002577319587628866,
                "tf.reshape(tensor, shape)": 0.002577319587628866,
                "tf.reverse(tensor, axis)": 0.002577319587628866,
                "tf.roll(input, shift, axis)": 0.002577319587628866,
                "tf.round(x)": 0.002577319587628866,
                "tf.scatter_nd(indices, updates, shape)": 0.002577319587628866,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.002577319587628866,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.002577319587628866,
                "tf.sequence_mask(lengths)": 0.002577319587628866,
                "tf.sequence_mask(lengths, maxlen)": 0.002577319587628866,
                "tf.shape(input)": 0.002577319587628866,
                "tf.sign(x)": 0.002577319587628866,
                "tf.sort(values, axis)": 0.002577319587628866,
                "tf.sort(values, axis, direction='DESCENDING')": 0.002577319587628866,
                "tf.sqrt(x)": 0.002577319587628866,
                "tf.square(x)": 0.002577319587628866,
                "tf.squeeze(input)": 0.002577319587628866,
                "tf.squeeze(input, axis)": 0.002577319587628866,
                "tf.stack(values, axis)": 0.002577319587628866,
                "tf.subtract(x, y)": 0.002577319587628866,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.002577319587628866,
                "tf.tensordot(a, b, axes)": 0.002577319587628866,
                "tf.tile(input, multiples)": 0.002577319587628866,
                "tf.transpose(a)": 0.002577319587628866,
                "tf.transpose(a, perm)": 0.002577319587628866,
                "tf.unique_with_counts(x)": 0.002577319587628866,
                "tf.unstack(value, axis)": 0.002577319587628866,
                "tf.where(condition)": 0.002577319587628866,
                "tf.where(condition, x, y)": 0.13144329896907217,
                "tf.zeros(shape)": 0.002577319587628866,
                "tf.zeros_like(input)": 0.002577319587628866,
                "tf.SparseTensor(indices, values, dense_shape)": 0.002577319587628866,
                "tf.sparse.add(a, b)": 0.002577319587628866,
                "tf.sparse.concat(axis, sp_inputs)": 0.002577319587628866,
                "tf.sparse.expand_dims(sp_input, axis)": 0.002577319587628866,
                "tf.sparse.from_dense(tensor)": 0.002577319587628866,
                "tf.sparse.maximum(sp_a, sp_b)": 0.002577319587628866,
                "tf.sparse.minimum(sp_a, sp_b)": 0.002577319587628866,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.002577319587628866,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.002577319587628866,
                "tf.sparse.reset_shape(sp_input)": 0.002577319587628866,
                "tf.sparse.reshape(sp_input, shape)": 0.002577319587628866,
                "tf.sparse.retain(sp_input, to_retain)": 0.002577319587628866,
                "tf.sparse.slice(sp_input, start, size)": 0.002577319587628866,
                "tf.sparse.split(sp_input, num_split, axis)": 0.002577319587628866,
                "tf.sparse.to_dense(sp_input)": 0.002577319587628866,
                "tf.sparse.to_dense(sp_input, default_value)": 0.002577319587628866,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.002577319587628866,
                "tf.sparse.transpose(sp_input)": 0.002577319587628866,
                "tf.sparse.transpose(sp_input, perm)": 0.002577319587628866,
                "IndexingAxis1Operation": 0.002577319587628866,
                "IndexingOperation": 0.002577319587628866,
                "PairCreationOperation": 0.002577319587628866,
                "SingletonTupleCreationOperation": 0.002577319587628866,
                "SlicingAxis0BothOperation": 0.002577319587628866,
                "SlicingAxis0LeftOperation": 0.002577319587628866,
                "SlicingAxis0RightOperation": 0.002577319587628866,
                "SlicingAxis1BothOperation": 0.002577319587628866,
                "SlicingAxis1LeftOperation": 0.002577319587628866,
                "SlicingAxis1RightOperation": 0.002577319587628866,
                "TripleCreationOperation": 0.002577319587628866,
                "PROVIDED_CONSTANT_WEIGHT": 0.04639175257731959,
                "COMMON_CONSTANT_WEIGHT": 0.015463917525773196,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.002577319587628866,
                "INPUT_VARIABLE_WEIGHT": 0.3917525773195876,
                "AXIS_CONSTANT_WEIGHT": 0.002577319587628866,
                "SHAPE_CONSTANT_WEIGHT": 0.002577319587628866,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.002577319587628866,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.005154639175257732,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.002577319587628866,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.002577319587628866,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.002577319587628866
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 6,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 9,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 9,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 3,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 9,
                "PairCreationOperation": 9,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 4,
                "COMMON_CONSTANT_WEIGHT": 6,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 1,
                "AXIS_CONSTANT_WEIGHT": 9,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "google_18",
        "description": "(\\'sum of elements in the first tensor but partitioned by the second tensor\\')",
        "target_program": "tf.linalg.matvec(tf.cast(tf.equal(in2[:, None], in2), tf.int32), in1)",
        "source": "From an internal Google forum",
        "constants": "[]",
        "examples": {
            "inputs": "[[5, 7, -12, 10, 20],[1, 2, 3, 1, 2],]",
            "outputs": "[15, 27, -12, 15, 27]"
        },
        "completions": [
            "return tf.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.segment_sum(in1, in2)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "return tf.math.segment_sum(in1, in2)",
            "return tf.math.segment_sum(in1, in2)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "result = tf.math.segment_sum(in1, in2)\nreturn result\n",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "segmented_sum = tf.math.segment_sum(in1, in2)\nreturn segmented_sum\n",
            "return tf.math.segment_sum(in1, in2)",
            "segment_sum = tf.math.segment_sum(in1, in2)\nreturn segment_sum\n",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.segment_sum(in1, in2)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, 3)",
            "def transform(in1, in2):\n    return tf.math.segment_sum(in1, in2)\n",
            "def transform(in1, in2):\n    segmented_sum = tf.math.segment_sum(in1, in2)\n    return segmented_sum\n",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "return tf.cast(tf.math.segment_sum(in1, in2), tf.int32)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "result = tf.math.segment_sum(in1, in2)\nreturn result\n",
            "result = tf.math.segment_sum(in1, in2)\nreturn result\n",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "return tf.math.segment_sum(in1, in2)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, 3)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "return tf.math.unsorted_segment_sum(in1, in2, 4)",
            "return tf.math.segment_sum(in1, in2)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "# Sum of elements in the first tensor but partitioned by the second tensor\nresult = tf.math.segment_sum(in1, in2)\nreturn result\n",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "sum_segments = tf.math.segment_sum(in1, in2)\nreturn sum_segments\n",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "return tf.math.segment_sum(in1, in2)"
        ],
        "tf_operators": {
            "tf.reduce_max": 29,
            "tf.unsorted_segment_sum": 1,
            "tf.math.segment_sum": 18,
            "tf.math.unsorted_segment_sum": 31,
            "tf.cast": 1,
            "tf.int32": 1
        },
        "coverage_percentage": 50.0,
        "total_covered": 2,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                3
            ],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                3
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                4
            ],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            []
        ],
        "all_constants": [
            1,
            3,
            4
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 129,
            "shape": 0,
            "tf_bool": 0,
            "provided": 3,
            "common": 29,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 1
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0025252525252525255,
                "tf.add(x, y)": 0.0025252525252525255,
                "tf.add_n(inputs)": 0.0025252525252525255,
                "tf.argmax(input, axis)": 0.0025252525252525255,
                "tf.argmin(input, axis)": 0.0025252525252525255,
                "tf.argsort(values, axis, stable=True)": 0.0025252525252525255,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0025252525252525255,
                "tf.boolean_mask(tensor, mask)": 0.0025252525252525255,
                "tf.broadcast_to(input, shape)": 0.0025252525252525255,
                "tf.cast(x, dtype)": 0.005050505050505051,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0025252525252525255,
                "tf.concat(values, axis)": 0.0025252525252525255,
                "tf.constant(value)": 0.0025252525252525255,
                "tf.constant(value, dtype)": 0.0025252525252525255,
                "tf.divide(x, y)": 0.0025252525252525255,
                "tf.equal(x, y)": 0.0025252525252525255,
                "tf.exp(x)": 0.0025252525252525255,
                "tf.expand_dims(input, axis)": 0.0025252525252525255,
                "tf.eye(num_rows)": 0.0025252525252525255,
                "tf.eye(num_rows, num_columns)": 0.0025252525252525255,
                "tf.eye(num_rows, dtype)": 0.0025252525252525255,
                "tf.fill(dims, value)": 0.0025252525252525255,
                "tf.gather(params, indices)": 0.0025252525252525255,
                "tf.gather(params, indices, axis, batch_dims)": 0.0025252525252525255,
                "tf.gather_nd(params, indices)": 0.0025252525252525255,
                "tf.gather_nd(params, indices, batch_dims)": 0.0025252525252525255,
                "tf.greater(x, y)": 0.0025252525252525255,
                "tf.greater_equal(x, y)": 0.0025252525252525255,
                "tf.math.bincount(arr)": 0.0025252525252525255,
                "tf.math.ceil(x)": 0.0025252525252525255,
                "tf.math.count_nonzero(input)": 0.0025252525252525255,
                "tf.math.count_nonzero(input, axis)": 0.0025252525252525255,
                "tf.math.cumsum(x, axis)": 0.0025252525252525255,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0025252525252525255,
                "tf.math.divide_no_nan(x, y)": 0.0025252525252525255,
                "tf.math.floor(x)": 0.0025252525252525255,
                "tf.math.log(x)": 0.0025252525252525255,
                "tf.math.logical_and(x, y)": 0.0025252525252525255,
                "tf.math.logical_not(x)": 0.0025252525252525255,
                "tf.math.logical_or(x, y)": 0.0025252525252525255,
                "tf.math.logical_xor(x, y)": 0.0025252525252525255,
                "tf.math.negative(x)": 0.0025252525252525255,
                "tf.math.reciprocal(x)": 0.0025252525252525255,
                "tf.math.reciprocal_no_nan(x)": 0.0025252525252525255,
                "tf.math.segment_max(data, segment_ids)": 0.0025252525252525255,
                "tf.math.segment_mean(data, segment_ids)": 0.0025252525252525255,
                "tf.math.segment_min(data, segment_ids)": 0.0025252525252525255,
                "tf.math.segment_prod(data, segment_ids)": 0.0025252525252525255,
                "tf.math.segment_sum(data, segment_ids)": 0.047979797979797977,
                "tf.math.squared_difference(x, y)": 0.0025252525252525255,
                "tf.math.top_k(input, k)": 0.0025252525252525255,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0025252525252525255,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0025252525252525255,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0025252525252525255,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0025252525252525255,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.08080808080808081,
                "tf.matmul(a, b)": 0.0025252525252525255,
                "tf.maximum(x, y)": 0.0025252525252525255,
                "tf.minimum(x, y)": 0.0025252525252525255,
                "tf.multiply(x, y)": 0.0025252525252525255,
                "tf.not_equal(x, y)": 0.0025252525252525255,
                "tf.one_hot(indices, depth)": 0.0025252525252525255,
                "tf.ones(shape)": 0.0025252525252525255,
                "tf.ones_like(input)": 0.0025252525252525255,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0025252525252525255,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0025252525252525255,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0025252525252525255,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0025252525252525255,
                "tf.range(start)": 0.0025252525252525255,
                "tf.range(start, limit, delta)": 0.0025252525252525255,
                "tf.reduce_any(input_tensor, axis)": 0.0025252525252525255,
                "tf.reduce_all(input_tensor, axis)": 0.0025252525252525255,
                "tf.reduce_max(input_tensor)": 0.07575757575757576,
                "tf.reduce_max(input_tensor, axis)": 0.0025252525252525255,
                "tf.reduce_mean(input_tensor)": 0.0025252525252525255,
                "tf.reduce_mean(input_tensor, axis)": 0.0025252525252525255,
                "tf.reduce_min(input_tensor)": 0.0025252525252525255,
                "tf.reduce_min(input_tensor, axis)": 0.0025252525252525255,
                "tf.reduce_prod(input_tensor, axis)": 0.0025252525252525255,
                "tf.reduce_sum(input_tensor)": 0.0025252525252525255,
                "tf.reduce_sum(input_tensor, axis)": 0.0025252525252525255,
                "tf.repeat(input, repeats)": 0.0025252525252525255,
                "tf.repeat(input, repeats, axis)": 0.0025252525252525255,
                "tf.reshape(tensor, shape)": 0.0025252525252525255,
                "tf.reverse(tensor, axis)": 0.0025252525252525255,
                "tf.roll(input, shift, axis)": 0.0025252525252525255,
                "tf.round(x)": 0.0025252525252525255,
                "tf.scatter_nd(indices, updates, shape)": 0.0025252525252525255,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0025252525252525255,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0025252525252525255,
                "tf.sequence_mask(lengths)": 0.0025252525252525255,
                "tf.sequence_mask(lengths, maxlen)": 0.0025252525252525255,
                "tf.shape(input)": 0.0025252525252525255,
                "tf.sign(x)": 0.0025252525252525255,
                "tf.sort(values, axis)": 0.0025252525252525255,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0025252525252525255,
                "tf.sqrt(x)": 0.0025252525252525255,
                "tf.square(x)": 0.0025252525252525255,
                "tf.squeeze(input)": 0.0025252525252525255,
                "tf.squeeze(input, axis)": 0.0025252525252525255,
                "tf.stack(values, axis)": 0.0025252525252525255,
                "tf.subtract(x, y)": 0.0025252525252525255,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0025252525252525255,
                "tf.tensordot(a, b, axes)": 0.0025252525252525255,
                "tf.tile(input, multiples)": 0.0025252525252525255,
                "tf.transpose(a)": 0.0025252525252525255,
                "tf.transpose(a, perm)": 0.0025252525252525255,
                "tf.unique_with_counts(x)": 0.0025252525252525255,
                "tf.unstack(value, axis)": 0.0025252525252525255,
                "tf.where(condition)": 0.0025252525252525255,
                "tf.where(condition, x, y)": 0.0025252525252525255,
                "tf.zeros(shape)": 0.0025252525252525255,
                "tf.zeros_like(input)": 0.0025252525252525255,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0025252525252525255,
                "tf.sparse.add(a, b)": 0.0025252525252525255,
                "tf.sparse.concat(axis, sp_inputs)": 0.0025252525252525255,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0025252525252525255,
                "tf.sparse.from_dense(tensor)": 0.0025252525252525255,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0025252525252525255,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0025252525252525255,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0025252525252525255,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0025252525252525255,
                "tf.sparse.reset_shape(sp_input)": 0.0025252525252525255,
                "tf.sparse.reshape(sp_input, shape)": 0.0025252525252525255,
                "tf.sparse.retain(sp_input, to_retain)": 0.0025252525252525255,
                "tf.sparse.slice(sp_input, start, size)": 0.0025252525252525255,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0025252525252525255,
                "tf.sparse.to_dense(sp_input)": 0.0025252525252525255,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0025252525252525255,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0025252525252525255,
                "tf.sparse.transpose(sp_input)": 0.0025252525252525255,
                "tf.sparse.transpose(sp_input, perm)": 0.0025252525252525255,
                "IndexingAxis1Operation": 0.0025252525252525255,
                "IndexingOperation": 0.0025252525252525255,
                "PairCreationOperation": 0.0025252525252525255,
                "SingletonTupleCreationOperation": 0.0025252525252525255,
                "SlicingAxis0BothOperation": 0.0025252525252525255,
                "SlicingAxis0LeftOperation": 0.0025252525252525255,
                "SlicingAxis0RightOperation": 0.0025252525252525255,
                "SlicingAxis1BothOperation": 0.0025252525252525255,
                "SlicingAxis1LeftOperation": 0.0025252525252525255,
                "SlicingAxis1RightOperation": 0.0025252525252525255,
                "TripleCreationOperation": 0.0025252525252525255,
                "PROVIDED_CONSTANT_WEIGHT": 0.010101010101010102,
                "COMMON_CONSTANT_WEIGHT": 0.07575757575757576,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0025252525252525255,
                "INPUT_VARIABLE_WEIGHT": 0.3282828282828283,
                "AXIS_CONSTANT_WEIGHT": 0.0025252525252525255,
                "SHAPE_CONSTANT_WEIGHT": 0.0025252525252525255,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0025252525252525255,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.005050505050505051,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0025252525252525255,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0025252525252525255,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0025252525252525255
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 9,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 4,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 4,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 9,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 4,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 9,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 9,
                "PairCreationOperation": 9,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 7,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 9,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "google_19",
        "description": "scatter a 2-D tensor with indices",
        "target_program": "tf.gather(in1, tf.argsort(in2, axis=1), batch_dims=1)",
        "source": "From an internal Google forum",
        "constants": "[]",
        "examples": {
            "inputs": "[[[11, 12, 13], [30, 20, 10], [77, 88, 99]],[[2, 0, 1], [1, 0, 2], [0, 2, 1]],]",
            "outputs": "[[12, 13, 11],    [20, 30, 10],    [77, 99, 88]]"
        },
        "completions": [
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "return tf.gather_nd(in1, in2)\n",
            "return tf.tensor_scatter_nd_update(in1, indices=tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1), updates=tf.transpose(in1))",
            "return tf.gather_nd(in1, tf.transpose(tf.stack([tf.range(tf.shape(in1)[0]), in2])))",
            "return tf.scatter_nd(indices=tf.transpose(in2), updates=in1, shape=tf.shape(in1))\n",
            "return tf.scatter_nd(indices=tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=-1), updates=in1, shape=tf.shape(in1))",
            "return tf.gather_nd(in1, in2)\n",
            "return tf.scatter_nd(in2, in1, [3, 3])\n",
            "return tf.tensor_scatter_nd_update(in1, tf.argsort(in2[0]), in1)\n",
            "return tf.gather(in1, tf.argsort(tf.argsort(in2, stable=True), stable=True, axis=1), axis=1)\n",
            "\nreturn tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n",
            "return tf.scatter_nd(in2, in1, [3,3])\n",
            "result = tf.scatter_nd(indices=in2, updates=in1, shape=(3, 3))\n",
            "return tf.gather_nd(in1, tf.transpose(tf.stack([tf.range(tf.shape(in2)[0]), in2])))",
            "return tf.gather_nd(in1, tf.stack([tf.range(in1.shape[0]), tf.math.floormod(in2 + 1, 3)], axis=1))\n",
            "output = tf.tensor_scatter_nd_update(in1, in2, tf.gather_nd(in1, in2))\nreturn output\n",
            "output = tf.scatter_nd(in2, in1, [3, 3])\nreturn output\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n",
            "return tf.scatter_nd(in2, in1, tf.shape(in1))\n",
            "return tf.scatter_nd(in2, in1, tf.shape(in1))",
            "return tf.gather_nd(in1, tf.transpose(in2))\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(in1.shape[0]), in2], axis=1))\n",
            "output = tf.tensor_scatter_nd_update(in1, tf.expand_dims(in2, axis=-1), tf.gather_nd(in1, tf.expand_dims(in2, axis=-1)))\n",
            "result = tf.scatter_nd(tf.expand_dims(in2, axis=-1), in1, tf.shape(in1))\n",
            "output = tf.scatter_nd(indices=in2, updates=in1, shape=(3, 3))\nreturn output\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "return tf.gather_nd(in1, tf.transpose(in2))\n",
            "return tf.tensor_scatter_nd_update(in1, tf.transpose(in2), tf.transpose(in1))\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "return tf.gather_nd(in1, tf.transpose(tf.stack([tf.reshape(tf.range(tf.shape(in2)[0]), (-1, 1)), in2], axis=1)))",
            "output = tf.scatter_nd(in2, in1, tf.shape(in1))\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n",
            "return tf.scatter_nd(indices=tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1), updates=in1, shape=tf.shape(in1))",
            "return tf.gather_nd(in1, in2)",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))",
            "return tf.gather_nd(in1, tf.stack(in2, axis=1))",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n",
            "output = tf.scatter_nd(indices=in2, updates=in1, shape=(3,3))\nreturn output\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "return tf.gather_nd(in1, tf.stack([tf.range(in1.shape[0]), in2], axis=1))",
            "return tf.gather_nd(in1, tf.transpose(tf.stack([tf.range(tf.shape(in1)[0]), in2])))",
            "return tf.gather_nd(in1, tf.transpose(in2))\n",
            "return tf.gather_nd(in1, in2)\n",
            "return tf.tensor_scatter_nd_update(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1), tf.transpose(in1, perm=[1, 0]))",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "return tf.gather_nd(in1, in2)",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n"
        ],
        "tf_operators": {
            "tf.range": 25,
            "tf.gather_nd": 32,
            "tf.shape": 27,
            "tf.stack": 26,
            "tf.transpose": 11,
            "tf.tensor_scatter_nd_update": 6,
            "tf.scatter_nd": 13,
            "tf.argsort": 2,
            "tf.gather": 1,
            "tf.math.floormod": 1,
            "tf.expand_dims": 2,
            "tf.reshape": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                0,
                1
            ],
            [],
            [
                0,
                1
            ],
            [
                0
            ],
            [],
            [
                0,
                -1
            ],
            [],
            [
                3,
                3
            ],
            [
                0
            ],
            [
                1,
                1
            ],
            [
                0,
                1
            ],
            [
                3,
                3
            ],
            [
                3,
                3
            ],
            [
                0
            ],
            [
                0,
                1,
                3,
                1
            ],
            [],
            [
                3,
                3
            ],
            [
                0,
                1
            ],
            [],
            [],
            [],
            [
                0,
                1
            ],
            [
                -1,
                -1
            ],
            [
                -1
            ],
            [
                3,
                3
            ],
            [
                0,
                1
            ],
            [],
            [],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                -1,
                1,
                1
            ],
            [],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                3,
                3
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0
            ],
            [],
            [],
            [
                0,
                1,
                1,
                0
            ],
            [
                0,
                1
            ],
            [],
            [
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 2,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 2,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 2,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 137,
            "shape": 7,
            "tf_bool": 0,
            "provided": 0,
            "common": 60,
            "shape_tuple": 3,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.001851851851851852,
                "tf.add(x, y)": 0.001851851851851852,
                "tf.add_n(inputs)": 0.001851851851851852,
                "tf.argmax(input, axis)": 0.001851851851851852,
                "tf.argmin(input, axis)": 0.001851851851851852,
                "tf.argsort(values, axis, stable=True)": 0.003703703703703704,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.001851851851851852,
                "tf.boolean_mask(tensor, mask)": 0.001851851851851852,
                "tf.broadcast_to(input, shape)": 0.001851851851851852,
                "tf.cast(x, dtype)": 0.001851851851851852,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.001851851851851852,
                "tf.concat(values, axis)": 0.001851851851851852,
                "tf.constant(value)": 0.001851851851851852,
                "tf.constant(value, dtype)": 0.001851851851851852,
                "tf.divide(x, y)": 0.001851851851851852,
                "tf.equal(x, y)": 0.001851851851851852,
                "tf.exp(x)": 0.001851851851851852,
                "tf.expand_dims(input, axis)": 0.007407407407407408,
                "tf.eye(num_rows)": 0.001851851851851852,
                "tf.eye(num_rows, num_columns)": 0.001851851851851852,
                "tf.eye(num_rows, dtype)": 0.001851851851851852,
                "tf.fill(dims, value)": 0.001851851851851852,
                "tf.gather(params, indices)": 0.001851851851851852,
                "tf.gather(params, indices, axis, batch_dims)": 0.003703703703703704,
                "tf.gather_nd(params, indices)": 0.06111111111111111,
                "tf.gather_nd(params, indices, batch_dims)": 0.001851851851851852,
                "tf.greater(x, y)": 0.001851851851851852,
                "tf.greater_equal(x, y)": 0.001851851851851852,
                "tf.math.bincount(arr)": 0.001851851851851852,
                "tf.math.ceil(x)": 0.001851851851851852,
                "tf.math.count_nonzero(input)": 0.001851851851851852,
                "tf.math.count_nonzero(input, axis)": 0.001851851851851852,
                "tf.math.cumsum(x, axis)": 0.001851851851851852,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.001851851851851852,
                "tf.math.divide_no_nan(x, y)": 0.001851851851851852,
                "tf.math.floor(x)": 0.001851851851851852,
                "tf.math.log(x)": 0.001851851851851852,
                "tf.math.logical_and(x, y)": 0.001851851851851852,
                "tf.math.logical_not(x)": 0.001851851851851852,
                "tf.math.logical_or(x, y)": 0.001851851851851852,
                "tf.math.logical_xor(x, y)": 0.001851851851851852,
                "tf.math.negative(x)": 0.001851851851851852,
                "tf.math.reciprocal(x)": 0.001851851851851852,
                "tf.math.reciprocal_no_nan(x)": 0.001851851851851852,
                "tf.math.segment_max(data, segment_ids)": 0.001851851851851852,
                "tf.math.segment_mean(data, segment_ids)": 0.001851851851851852,
                "tf.math.segment_min(data, segment_ids)": 0.001851851851851852,
                "tf.math.segment_prod(data, segment_ids)": 0.001851851851851852,
                "tf.math.segment_sum(data, segment_ids)": 0.001851851851851852,
                "tf.math.squared_difference(x, y)": 0.001851851851851852,
                "tf.math.top_k(input, k)": 0.001851851851851852,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.001851851851851852,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.001851851851851852,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.001851851851851852,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.001851851851851852,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.001851851851851852,
                "tf.matmul(a, b)": 0.001851851851851852,
                "tf.maximum(x, y)": 0.001851851851851852,
                "tf.minimum(x, y)": 0.001851851851851852,
                "tf.multiply(x, y)": 0.001851851851851852,
                "tf.not_equal(x, y)": 0.001851851851851852,
                "tf.one_hot(indices, depth)": 0.001851851851851852,
                "tf.ones(shape)": 0.001851851851851852,
                "tf.ones_like(input)": 0.001851851851851852,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.001851851851851852,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.001851851851851852,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.001851851851851852,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.001851851851851852,
                "tf.range(start)": 0.04814814814814815,
                "tf.range(start, limit, delta)": 0.001851851851851852,
                "tf.reduce_any(input_tensor, axis)": 0.001851851851851852,
                "tf.reduce_all(input_tensor, axis)": 0.001851851851851852,
                "tf.reduce_max(input_tensor)": 0.001851851851851852,
                "tf.reduce_max(input_tensor, axis)": 0.001851851851851852,
                "tf.reduce_mean(input_tensor)": 0.001851851851851852,
                "tf.reduce_mean(input_tensor, axis)": 0.001851851851851852,
                "tf.reduce_min(input_tensor)": 0.001851851851851852,
                "tf.reduce_min(input_tensor, axis)": 0.001851851851851852,
                "tf.reduce_prod(input_tensor, axis)": 0.001851851851851852,
                "tf.reduce_sum(input_tensor)": 0.001851851851851852,
                "tf.reduce_sum(input_tensor, axis)": 0.001851851851851852,
                "tf.repeat(input, repeats)": 0.001851851851851852,
                "tf.repeat(input, repeats, axis)": 0.001851851851851852,
                "tf.reshape(tensor, shape)": 0.003703703703703704,
                "tf.reverse(tensor, axis)": 0.001851851851851852,
                "tf.roll(input, shift, axis)": 0.001851851851851852,
                "tf.round(x)": 0.001851851851851852,
                "tf.scatter_nd(indices, updates, shape)": 0.025925925925925925,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.001851851851851852,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.001851851851851852,
                "tf.sequence_mask(lengths)": 0.001851851851851852,
                "tf.sequence_mask(lengths, maxlen)": 0.001851851851851852,
                "tf.shape(input)": 0.05555555555555555,
                "tf.sign(x)": 0.001851851851851852,
                "tf.sort(values, axis)": 0.001851851851851852,
                "tf.sort(values, axis, direction='DESCENDING')": 0.001851851851851852,
                "tf.sqrt(x)": 0.001851851851851852,
                "tf.square(x)": 0.001851851851851852,
                "tf.squeeze(input)": 0.001851851851851852,
                "tf.squeeze(input, axis)": 0.001851851851851852,
                "tf.stack(values, axis)": 0.05,
                "tf.subtract(x, y)": 0.001851851851851852,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.012962962962962963,
                "tf.tensordot(a, b, axes)": 0.001851851851851852,
                "tf.tile(input, multiples)": 0.001851851851851852,
                "tf.transpose(a)": 0.022222222222222223,
                "tf.transpose(a, perm)": 0.001851851851851852,
                "tf.unique_with_counts(x)": 0.001851851851851852,
                "tf.unstack(value, axis)": 0.001851851851851852,
                "tf.where(condition)": 0.001851851851851852,
                "tf.where(condition, x, y)": 0.001851851851851852,
                "tf.zeros(shape)": 0.001851851851851852,
                "tf.zeros_like(input)": 0.001851851851851852,
                "tf.SparseTensor(indices, values, dense_shape)": 0.001851851851851852,
                "tf.sparse.add(a, b)": 0.001851851851851852,
                "tf.sparse.concat(axis, sp_inputs)": 0.001851851851851852,
                "tf.sparse.expand_dims(sp_input, axis)": 0.001851851851851852,
                "tf.sparse.from_dense(tensor)": 0.001851851851851852,
                "tf.sparse.maximum(sp_a, sp_b)": 0.001851851851851852,
                "tf.sparse.minimum(sp_a, sp_b)": 0.001851851851851852,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.001851851851851852,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.001851851851851852,
                "tf.sparse.reset_shape(sp_input)": 0.001851851851851852,
                "tf.sparse.reshape(sp_input, shape)": 0.001851851851851852,
                "tf.sparse.retain(sp_input, to_retain)": 0.001851851851851852,
                "tf.sparse.slice(sp_input, start, size)": 0.001851851851851852,
                "tf.sparse.split(sp_input, num_split, axis)": 0.001851851851851852,
                "tf.sparse.to_dense(sp_input)": 0.001851851851851852,
                "tf.sparse.to_dense(sp_input, default_value)": 0.001851851851851852,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.001851851851851852,
                "tf.sparse.transpose(sp_input)": 0.001851851851851852,
                "tf.sparse.transpose(sp_input, perm)": 0.001851851851851852,
                "IndexingAxis1Operation": 0.001851851851851852,
                "IndexingOperation": 0.05,
                "PairCreationOperation": 0.009259259259259259,
                "SingletonTupleCreationOperation": 0.001851851851851852,
                "SlicingAxis0BothOperation": 0.001851851851851852,
                "SlicingAxis0LeftOperation": 0.001851851851851852,
                "SlicingAxis0RightOperation": 0.001851851851851852,
                "SlicingAxis1BothOperation": 0.001851851851851852,
                "SlicingAxis1LeftOperation": 0.001851851851851852,
                "SlicingAxis1RightOperation": 0.001851851851851852,
                "TripleCreationOperation": 0.001851851851851852,
                "PROVIDED_CONSTANT_WEIGHT": 0.001851851851851852,
                "COMMON_CONSTANT_WEIGHT": 0.11296296296296296,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.001851851851851852,
                "INPUT_VARIABLE_WEIGHT": 0.25555555555555554,
                "AXIS_CONSTANT_WEIGHT": 0.001851851851851852,
                "SHAPE_CONSTANT_WEIGHT": 0.014814814814814815,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.007407407407407408,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.001851851851851852,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.001851851851851852,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.001851851851851852,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.001851851851851852
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 9,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 4,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 4,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 5,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 4,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 4,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 6,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 5,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 4,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 9,
                "SHAPE_CONSTANT_WEIGHT": 6,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "google_20",
        "description": "sort a tensor and return sorted index in original order",
        "target_program": "tf.cast(tf.argsort(tf.argsort(in1)), tf.int32)",
        "source": "From an internal Google forum",
        "constants": "[]",
        "examples": {
            "inputs": "[[10, 7, 4, 3, 2, 8],]",
            "outputs": "[5, 3, 2, 1, 0, 4]"
        },
        "completions": [
            "return tf.argsort(in1)",
            "return tf.argsort(in1)",
            "return tf.argsort(in1)",
            "return tf.argsort(in1, axis=-1)",
            "return tf.argsort(in1)",
            "return tf.argsort(in1)",
            "def transform(in1):\n    sorted_indices = tf.argsort(in1)\n    return sorted_indices\n",
            "return tf.argsort(in1, axis=0)",
            "values, indices = tf.nn.top_k(in1, k=tf.shape(in1)[0])\nreturn indices",
            "return tf.argsort(in1)",
            "return tf.argsort(in1)",
            "return tf.argsort(in1, axis=0)",
            "return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1)\n",
            "return tf.argsort(in1)",
            "return tf.argsort(in1, stable=True)",
            "sorted_indices = tf.argsort(in1)\n",
            "sorted_indices = tf.argsort(in1)\n",
            "return tf.argsort(in1, axis=0)\n",
            "return tf.argsort(in1, direction='ASCENDING')",
            "sorted_indices = tf.argsort(in1)\n",
            "return tf.argsort(in1)",
            "def transform(in1):\n    sorted_indices = tf.argsort(in1)\n    return tf.argsort(sorted_indices)\n",
            "return tf.argsort(in1)",
            "return tf.math.top_k(in1, k=len(in1)).indices",
            "sorted_indices = tf.argsort(in1)\n",
            "return tf.argsort(in1)",
            "return tf.invert_permutation(tf.argsort(in1, direction='ASCENDING'))",
            "return tf.math.top_k(in1, len(in1)).indices",
            "return tf.argsort(in1)",
            "return tf.argsort(in1)",
            "sorted_indices = tf.argsort(in1)\n",
            "return tf.argsort(in1)",
            "return tf.argsort(in1)",
            "return tf.argsort(in1, stable=True)",
            "return tf.argsort(in1, stable=True)",
            "return tf.argsort(in1, axis=-1)",
            "return tf.argsort(in1, direction='ASCENDING')",
            "return tf.gather(tf.argsort(in1), tf.argsort(tf.argsort(in1)))",
            "return tf.argsort(in1)",
            "return tf.argsort(in1)",
            "return tf.argsort(in1)",
            "return tf.argsort(in1, axis=-1)",
            "return tf.argsort(in1, direction='ASCENDING')",
            "return tf.argsort(in1)",
            "return tf.argsort(in1)\n",
            "return tf.gather(tf.argsort(in1), tf.argsort(tf.argsort(in1)))",
            "def transform(in1):\n    sorted_indices = tf.argsort(in1)\n    return tf.argsort(sorted_indices)\n",
            "return tf.argsort(in1)",
            "return tf.argsort(in1, axis=-1)"
        ],
        "tf_operators": {
            "tf.argsort": 47,
            "tf.shape": 1,
            "tf.nn.top_k": 1,
            "tf.math.top_k": 2,
            "tf.invert_permutation": 1,
            "tf.gather": 2
        },
        "coverage_percentage": 33.33333333333333,
        "total_covered": 1,
        "total_in_target": 3,
        "parsed_constants": [
            [],
            [],
            [],
            [
                -1
            ],
            [],
            [],
            [],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                -1
            ],
            [],
            [],
            [],
            [],
            [],
            [
                -1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                -1
            ]
        ],
        "all_constants": [
            0,
            -1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 56,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 11,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.00411522633744856,
                "tf.add(x, y)": 0.00411522633744856,
                "tf.add_n(inputs)": 0.00411522633744856,
                "tf.argmax(input, axis)": 0.00411522633744856,
                "tf.argmin(input, axis)": 0.00411522633744856,
                "tf.argsort(values, axis, stable=True)": 0.06172839506172839,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.00411522633744856,
                "tf.boolean_mask(tensor, mask)": 0.00411522633744856,
                "tf.broadcast_to(input, shape)": 0.00411522633744856,
                "tf.cast(x, dtype)": 0.00411522633744856,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.00411522633744856,
                "tf.concat(values, axis)": 0.00411522633744856,
                "tf.constant(value)": 0.00411522633744856,
                "tf.constant(value, dtype)": 0.00411522633744856,
                "tf.divide(x, y)": 0.00411522633744856,
                "tf.equal(x, y)": 0.00411522633744856,
                "tf.exp(x)": 0.00411522633744856,
                "tf.expand_dims(input, axis)": 0.00411522633744856,
                "tf.eye(num_rows)": 0.00411522633744856,
                "tf.eye(num_rows, num_columns)": 0.00411522633744856,
                "tf.eye(num_rows, dtype)": 0.00411522633744856,
                "tf.fill(dims, value)": 0.00411522633744856,
                "tf.gather(params, indices)": 0.012345679012345678,
                "tf.gather(params, indices, axis, batch_dims)": 0.00411522633744856,
                "tf.gather_nd(params, indices)": 0.00411522633744856,
                "tf.gather_nd(params, indices, batch_dims)": 0.00411522633744856,
                "tf.greater(x, y)": 0.00411522633744856,
                "tf.greater_equal(x, y)": 0.00411522633744856,
                "tf.math.bincount(arr)": 0.00411522633744856,
                "tf.math.ceil(x)": 0.00411522633744856,
                "tf.math.count_nonzero(input)": 0.00411522633744856,
                "tf.math.count_nonzero(input, axis)": 0.00411522633744856,
                "tf.math.cumsum(x, axis)": 0.00411522633744856,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.00411522633744856,
                "tf.math.divide_no_nan(x, y)": 0.00411522633744856,
                "tf.math.floor(x)": 0.00411522633744856,
                "tf.math.log(x)": 0.00411522633744856,
                "tf.math.logical_and(x, y)": 0.00411522633744856,
                "tf.math.logical_not(x)": 0.00411522633744856,
                "tf.math.logical_or(x, y)": 0.00411522633744856,
                "tf.math.logical_xor(x, y)": 0.00411522633744856,
                "tf.math.negative(x)": 0.00411522633744856,
                "tf.math.reciprocal(x)": 0.00411522633744856,
                "tf.math.reciprocal_no_nan(x)": 0.00411522633744856,
                "tf.math.segment_max(data, segment_ids)": 0.00411522633744856,
                "tf.math.segment_mean(data, segment_ids)": 0.00411522633744856,
                "tf.math.segment_min(data, segment_ids)": 0.00411522633744856,
                "tf.math.segment_prod(data, segment_ids)": 0.00411522633744856,
                "tf.math.segment_sum(data, segment_ids)": 0.00411522633744856,
                "tf.math.squared_difference(x, y)": 0.00411522633744856,
                "tf.math.top_k(input, k)": 0.012345679012345678,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.00411522633744856,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.00411522633744856,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.00411522633744856,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.00411522633744856,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.00411522633744856,
                "tf.matmul(a, b)": 0.00411522633744856,
                "tf.maximum(x, y)": 0.00411522633744856,
                "tf.minimum(x, y)": 0.00411522633744856,
                "tf.multiply(x, y)": 0.00411522633744856,
                "tf.not_equal(x, y)": 0.00411522633744856,
                "tf.one_hot(indices, depth)": 0.00411522633744856,
                "tf.ones(shape)": 0.00411522633744856,
                "tf.ones_like(input)": 0.00411522633744856,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.00411522633744856,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.00411522633744856,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.00411522633744856,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.00411522633744856,
                "tf.range(start)": 0.00411522633744856,
                "tf.range(start, limit, delta)": 0.00411522633744856,
                "tf.reduce_any(input_tensor, axis)": 0.00411522633744856,
                "tf.reduce_all(input_tensor, axis)": 0.00411522633744856,
                "tf.reduce_max(input_tensor)": 0.00411522633744856,
                "tf.reduce_max(input_tensor, axis)": 0.00411522633744856,
                "tf.reduce_mean(input_tensor)": 0.00411522633744856,
                "tf.reduce_mean(input_tensor, axis)": 0.00411522633744856,
                "tf.reduce_min(input_tensor)": 0.00411522633744856,
                "tf.reduce_min(input_tensor, axis)": 0.00411522633744856,
                "tf.reduce_prod(input_tensor, axis)": 0.00411522633744856,
                "tf.reduce_sum(input_tensor)": 0.00411522633744856,
                "tf.reduce_sum(input_tensor, axis)": 0.00411522633744856,
                "tf.repeat(input, repeats)": 0.00411522633744856,
                "tf.repeat(input, repeats, axis)": 0.00411522633744856,
                "tf.reshape(tensor, shape)": 0.00411522633744856,
                "tf.reverse(tensor, axis)": 0.00411522633744856,
                "tf.roll(input, shift, axis)": 0.00411522633744856,
                "tf.round(x)": 0.00411522633744856,
                "tf.scatter_nd(indices, updates, shape)": 0.00411522633744856,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.00411522633744856,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.00411522633744856,
                "tf.sequence_mask(lengths)": 0.00411522633744856,
                "tf.sequence_mask(lengths, maxlen)": 0.00411522633744856,
                "tf.shape(input)": 0.00823045267489712,
                "tf.sign(x)": 0.00411522633744856,
                "tf.sort(values, axis)": 0.00411522633744856,
                "tf.sort(values, axis, direction='DESCENDING')": 0.00411522633744856,
                "tf.sqrt(x)": 0.00411522633744856,
                "tf.square(x)": 0.00411522633744856,
                "tf.squeeze(input)": 0.00411522633744856,
                "tf.squeeze(input, axis)": 0.00411522633744856,
                "tf.stack(values, axis)": 0.00411522633744856,
                "tf.subtract(x, y)": 0.00411522633744856,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.00411522633744856,
                "tf.tensordot(a, b, axes)": 0.00411522633744856,
                "tf.tile(input, multiples)": 0.00411522633744856,
                "tf.transpose(a)": 0.00411522633744856,
                "tf.transpose(a, perm)": 0.00411522633744856,
                "tf.unique_with_counts(x)": 0.00411522633744856,
                "tf.unstack(value, axis)": 0.00411522633744856,
                "tf.where(condition)": 0.00411522633744856,
                "tf.where(condition, x, y)": 0.00411522633744856,
                "tf.zeros(shape)": 0.00411522633744856,
                "tf.zeros_like(input)": 0.00411522633744856,
                "tf.SparseTensor(indices, values, dense_shape)": 0.00411522633744856,
                "tf.sparse.add(a, b)": 0.00411522633744856,
                "tf.sparse.concat(axis, sp_inputs)": 0.00411522633744856,
                "tf.sparse.expand_dims(sp_input, axis)": 0.00411522633744856,
                "tf.sparse.from_dense(tensor)": 0.00411522633744856,
                "tf.sparse.maximum(sp_a, sp_b)": 0.00411522633744856,
                "tf.sparse.minimum(sp_a, sp_b)": 0.00411522633744856,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.00411522633744856,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.00411522633744856,
                "tf.sparse.reset_shape(sp_input)": 0.00411522633744856,
                "tf.sparse.reshape(sp_input, shape)": 0.00411522633744856,
                "tf.sparse.retain(sp_input, to_retain)": 0.00411522633744856,
                "tf.sparse.slice(sp_input, start, size)": 0.00411522633744856,
                "tf.sparse.split(sp_input, num_split, axis)": 0.00411522633744856,
                "tf.sparse.to_dense(sp_input)": 0.00411522633744856,
                "tf.sparse.to_dense(sp_input, default_value)": 0.00411522633744856,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.00411522633744856,
                "tf.sparse.transpose(sp_input)": 0.00411522633744856,
                "tf.sparse.transpose(sp_input, perm)": 0.00411522633744856,
                "IndexingAxis1Operation": 0.00411522633744856,
                "IndexingOperation": 0.00823045267489712,
                "PairCreationOperation": 0.00823045267489712,
                "SingletonTupleCreationOperation": 0.00411522633744856,
                "SlicingAxis0BothOperation": 0.00411522633744856,
                "SlicingAxis0LeftOperation": 0.00411522633744856,
                "SlicingAxis0RightOperation": 0.00411522633744856,
                "SlicingAxis1BothOperation": 0.00411522633744856,
                "SlicingAxis1LeftOperation": 0.00411522633744856,
                "SlicingAxis1RightOperation": 0.00411522633744856,
                "TripleCreationOperation": 0.00411522633744856,
                "PROVIDED_CONSTANT_WEIGHT": 0.00411522633744856,
                "COMMON_CONSTANT_WEIGHT": 0.04938271604938271,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.00411522633744856,
                "INPUT_VARIABLE_WEIGHT": 0.2345679012345679,
                "AXIS_CONSTANT_WEIGHT": 0.00411522633744856,
                "SHAPE_CONSTANT_WEIGHT": 0.00411522633744856,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.00411522633744856,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.00411522633744856,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.00411522633744856,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.00411522633744856,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.00411522633744856
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 4,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 6,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 6,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 7,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_21",
        "description": "update a tensor at the given indices",
        "target_program": "tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, (-1,)))",
        "source": "Real task encountered by Googler, 12/15/2020",
        "constants": "[]",
        "examples": {
            "inputs": "{'tensor': [[1, 2, 3, 4, 5], [4, 5, 6, 7, 8], [7, 8, 9, 10, 11]], 'indices': [[0, 0], [0, 2], [1, 1], [1, 3], [2, 2], [2, 4]], 'updates': [[0, -2], [-1, -3], [-2, -4]],}",
            "outputs": "[[0, 2, -2, 4, 5], [4, -1, 6, -3, 8], [7, 8, -2, 10, -4]]"
        },
        "completions": [
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "result = tf.tensor_scatter_nd_update(tensor, indices, updates)\nreturn result\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "\nreturn tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n  ",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n"
        ],
        "tf_operators": {
            "tf.tensor_scatter_nd_update": 50
        },
        "coverage_percentage": 50.0,
        "total_covered": 1,
        "total_in_target": 2,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 150,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 0,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0028169014084507044,
                "tf.add(x, y)": 0.0028169014084507044,
                "tf.add_n(inputs)": 0.0028169014084507044,
                "tf.argmax(input, axis)": 0.0028169014084507044,
                "tf.argmin(input, axis)": 0.0028169014084507044,
                "tf.argsort(values, axis, stable=True)": 0.0028169014084507044,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0028169014084507044,
                "tf.boolean_mask(tensor, mask)": 0.0028169014084507044,
                "tf.broadcast_to(input, shape)": 0.0028169014084507044,
                "tf.cast(x, dtype)": 0.0028169014084507044,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0028169014084507044,
                "tf.concat(values, axis)": 0.0028169014084507044,
                "tf.constant(value)": 0.0028169014084507044,
                "tf.constant(value, dtype)": 0.0028169014084507044,
                "tf.divide(x, y)": 0.0028169014084507044,
                "tf.equal(x, y)": 0.0028169014084507044,
                "tf.exp(x)": 0.0028169014084507044,
                "tf.expand_dims(input, axis)": 0.0028169014084507044,
                "tf.eye(num_rows)": 0.0028169014084507044,
                "tf.eye(num_rows, num_columns)": 0.0028169014084507044,
                "tf.eye(num_rows, dtype)": 0.0028169014084507044,
                "tf.fill(dims, value)": 0.0028169014084507044,
                "tf.gather(params, indices)": 0.0028169014084507044,
                "tf.gather(params, indices, axis, batch_dims)": 0.0028169014084507044,
                "tf.gather_nd(params, indices)": 0.0028169014084507044,
                "tf.gather_nd(params, indices, batch_dims)": 0.0028169014084507044,
                "tf.greater(x, y)": 0.0028169014084507044,
                "tf.greater_equal(x, y)": 0.0028169014084507044,
                "tf.math.bincount(arr)": 0.0028169014084507044,
                "tf.math.ceil(x)": 0.0028169014084507044,
                "tf.math.count_nonzero(input)": 0.0028169014084507044,
                "tf.math.count_nonzero(input, axis)": 0.0028169014084507044,
                "tf.math.cumsum(x, axis)": 0.0028169014084507044,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0028169014084507044,
                "tf.math.divide_no_nan(x, y)": 0.0028169014084507044,
                "tf.math.floor(x)": 0.0028169014084507044,
                "tf.math.log(x)": 0.0028169014084507044,
                "tf.math.logical_and(x, y)": 0.0028169014084507044,
                "tf.math.logical_not(x)": 0.0028169014084507044,
                "tf.math.logical_or(x, y)": 0.0028169014084507044,
                "tf.math.logical_xor(x, y)": 0.0028169014084507044,
                "tf.math.negative(x)": 0.0028169014084507044,
                "tf.math.reciprocal(x)": 0.0028169014084507044,
                "tf.math.reciprocal_no_nan(x)": 0.0028169014084507044,
                "tf.math.segment_max(data, segment_ids)": 0.0028169014084507044,
                "tf.math.segment_mean(data, segment_ids)": 0.0028169014084507044,
                "tf.math.segment_min(data, segment_ids)": 0.0028169014084507044,
                "tf.math.segment_prod(data, segment_ids)": 0.0028169014084507044,
                "tf.math.segment_sum(data, segment_ids)": 0.0028169014084507044,
                "tf.math.squared_difference(x, y)": 0.0028169014084507044,
                "tf.math.top_k(input, k)": 0.0028169014084507044,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0028169014084507044,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0028169014084507044,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0028169014084507044,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0028169014084507044,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0028169014084507044,
                "tf.matmul(a, b)": 0.0028169014084507044,
                "tf.maximum(x, y)": 0.0028169014084507044,
                "tf.minimum(x, y)": 0.0028169014084507044,
                "tf.multiply(x, y)": 0.0028169014084507044,
                "tf.not_equal(x, y)": 0.0028169014084507044,
                "tf.one_hot(indices, depth)": 0.0028169014084507044,
                "tf.ones(shape)": 0.0028169014084507044,
                "tf.ones_like(input)": 0.0028169014084507044,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0028169014084507044,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0028169014084507044,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0028169014084507044,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0028169014084507044,
                "tf.range(start)": 0.0028169014084507044,
                "tf.range(start, limit, delta)": 0.0028169014084507044,
                "tf.reduce_any(input_tensor, axis)": 0.0028169014084507044,
                "tf.reduce_all(input_tensor, axis)": 0.0028169014084507044,
                "tf.reduce_max(input_tensor)": 0.0028169014084507044,
                "tf.reduce_max(input_tensor, axis)": 0.0028169014084507044,
                "tf.reduce_mean(input_tensor)": 0.0028169014084507044,
                "tf.reduce_mean(input_tensor, axis)": 0.0028169014084507044,
                "tf.reduce_min(input_tensor)": 0.0028169014084507044,
                "tf.reduce_min(input_tensor, axis)": 0.0028169014084507044,
                "tf.reduce_prod(input_tensor, axis)": 0.0028169014084507044,
                "tf.reduce_sum(input_tensor)": 0.0028169014084507044,
                "tf.reduce_sum(input_tensor, axis)": 0.0028169014084507044,
                "tf.repeat(input, repeats)": 0.0028169014084507044,
                "tf.repeat(input, repeats, axis)": 0.0028169014084507044,
                "tf.reshape(tensor, shape)": 0.0028169014084507044,
                "tf.reverse(tensor, axis)": 0.0028169014084507044,
                "tf.roll(input, shift, axis)": 0.0028169014084507044,
                "tf.round(x)": 0.0028169014084507044,
                "tf.scatter_nd(indices, updates, shape)": 0.0028169014084507044,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0028169014084507044,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0028169014084507044,
                "tf.sequence_mask(lengths)": 0.0028169014084507044,
                "tf.sequence_mask(lengths, maxlen)": 0.0028169014084507044,
                "tf.shape(input)": 0.0028169014084507044,
                "tf.sign(x)": 0.0028169014084507044,
                "tf.sort(values, axis)": 0.0028169014084507044,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0028169014084507044,
                "tf.sqrt(x)": 0.0028169014084507044,
                "tf.square(x)": 0.0028169014084507044,
                "tf.squeeze(input)": 0.0028169014084507044,
                "tf.squeeze(input, axis)": 0.0028169014084507044,
                "tf.stack(values, axis)": 0.0028169014084507044,
                "tf.subtract(x, y)": 0.0028169014084507044,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.14366197183098592,
                "tf.tensordot(a, b, axes)": 0.0028169014084507044,
                "tf.tile(input, multiples)": 0.0028169014084507044,
                "tf.transpose(a)": 0.0028169014084507044,
                "tf.transpose(a, perm)": 0.0028169014084507044,
                "tf.unique_with_counts(x)": 0.0028169014084507044,
                "tf.unstack(value, axis)": 0.0028169014084507044,
                "tf.where(condition)": 0.0028169014084507044,
                "tf.where(condition, x, y)": 0.0028169014084507044,
                "tf.zeros(shape)": 0.0028169014084507044,
                "tf.zeros_like(input)": 0.0028169014084507044,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0028169014084507044,
                "tf.sparse.add(a, b)": 0.0028169014084507044,
                "tf.sparse.concat(axis, sp_inputs)": 0.0028169014084507044,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0028169014084507044,
                "tf.sparse.from_dense(tensor)": 0.0028169014084507044,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0028169014084507044,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0028169014084507044,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0028169014084507044,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0028169014084507044,
                "tf.sparse.reset_shape(sp_input)": 0.0028169014084507044,
                "tf.sparse.reshape(sp_input, shape)": 0.0028169014084507044,
                "tf.sparse.retain(sp_input, to_retain)": 0.0028169014084507044,
                "tf.sparse.slice(sp_input, start, size)": 0.0028169014084507044,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0028169014084507044,
                "tf.sparse.to_dense(sp_input)": 0.0028169014084507044,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0028169014084507044,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0028169014084507044,
                "tf.sparse.transpose(sp_input)": 0.0028169014084507044,
                "tf.sparse.transpose(sp_input, perm)": 0.0028169014084507044,
                "IndexingAxis1Operation": 0.0028169014084507044,
                "IndexingOperation": 0.0028169014084507044,
                "PairCreationOperation": 0.0028169014084507044,
                "SingletonTupleCreationOperation": 0.0028169014084507044,
                "SlicingAxis0BothOperation": 0.0028169014084507044,
                "SlicingAxis0LeftOperation": 0.0028169014084507044,
                "SlicingAxis0RightOperation": 0.0028169014084507044,
                "SlicingAxis1BothOperation": 0.0028169014084507044,
                "SlicingAxis1LeftOperation": 0.0028169014084507044,
                "SlicingAxis1RightOperation": 0.0028169014084507044,
                "TripleCreationOperation": 0.0028169014084507044,
                "PROVIDED_CONSTANT_WEIGHT": 0.0028169014084507044,
                "COMMON_CONSTANT_WEIGHT": 0.0028169014084507044,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0028169014084507044,
                "INPUT_VARIABLE_WEIGHT": 0.4253521126760563,
                "AXIS_CONSTANT_WEIGHT": 0.0028169014084507044,
                "SHAPE_CONSTANT_WEIGHT": 0.0028169014084507044,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0028169014084507044,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0028169014084507044,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0028169014084507044,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0028169014084507044,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0028169014084507044
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 3,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 8,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 1,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_22",
        "description": "pair with row index",
        "target_program": "tf.cast(tf.where(tf.reduce_max(tf.one_hot(in1, tf.reduce_max(in1) + 1), axis=1)), tf.int32)",
        "source": "Real task encountered by Googler, 12/15/2020",
        "constants": "[]",
        "examples": {
            "inputs": "[[[0, 2], [1, 3], [2, 4]],]",
            "outputs": "[[0, 0], [0, 2], [1, 1], [1, 3], [2, 2], [2, 4]]"
        },
        "completions": [
            "return tf.repeat(in1, 2, axis=1)",
            "row_indices = tf.range(tf.shape(in1)[0])\nreturn tf.repeat(in1, repeats=2, axis=0) + tf.broadcast_to(row_indices, [2, tf.shape(in1)[0]]).transpose()\n",
            "indices = tf.tile(tf.expand_dims(in1, axis=-1), [1, 2])\nrow_indices = tf.repeat(tf.range(tf.shape(in1)[0]), repeats=2)\nreturn tf.stack([row_indices, tf.reshape(indices, [-1])], axis=1)\n",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2, axis=0)\n",
            "return tf.repeat(in1, [1, 2], axis=0)",
            "return tf.repeat(in1, repeats=2, axis=0)\n",
            "def transform(in1):\n    indices = tf.reshape(tf.range(tf.shape(in1)[0]), [-1, 1])\n    result = tf.concat([indices, in1], axis=1)\n    return result\n",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2, axis=0)\n",
            "return tf.cast(tf.repeat(in1, 2, axis=1), tf.int32)",
            "return tf.tile(in1, [2, 1]) // tf.shape(in1)[0]\n",
            "return tf.tile(tf.reshape(in1, (-1, 1)), [1, 2])",
            "def transform(in1):\n    return tf.repeat(in1, 2, axis=0)\n",
            "return tf.repeat(in1, repeats=2, axis=0)\n",
            "return tf.repeat(in1, repeats=2, axis=1)\n",
            "return tf.broadcast_to(tf.range(tf.shape(in1)[0])[:, tf.newaxis], [tf.shape(in1)[0], 2])\n",
            "return tf.repeat(in1, repeats=2, axis=0) - tf.concat([tf.range(tf.shape(in1)[0]), tf.range(tf.shape(in1)[0])], axis=0)\n",
            "return tf.repeat(in1, 2, axis=0)",
            "return tf.repeat(in1, repeats=2)\n",
            "return tf.tile(tf.expand_dims(tf.range(tf.shape(in1)[0]), 1), [1, 2])\n",
            "return tf.repeat(in1, repeats=2, axis=0)\n",
            "return tf.tile(in1, [2, 1])",
            "return tf.repeat(in1, repeats=2, axis=0)\n",
            "return tf.tile(in1, [2, 1])\n",
            "indices = tf.expand_dims(tf.range(tf.shape(in1)[0]), 1)\nreturn tf.concat([tf.repeat(indices, 2, axis=1), in1], axis=1)\n",
            "return tf.repeat(in1, repeats=2, axis=0)\n",
            "def transform(in1):\n    return tf.stack([tf.repeat(in1, 2, axis=0), tf.repeat(tf.range(tf.shape(in1)[0]), 2)])\n",
            "return tf.tile(in1, [2, 1])\n",
            "return tf.tile(tf.expand_dims(in1, 1), [1, 2, 1])\n",
            "idx = tf.range(tf.shape(in1)[0])\nreturn tf.stack([tf.repeat(idx, 2), tf.reshape(in1, [-1])], 1)\n",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2, axis=0)\n",
            "indices = tf.expand_dims(tf.range(tf.shape(in1)[0]), 1)\nind = tf.repeat(indices, tf.reduce_sum(in1, axis=1), axis=1)\nreturn tf.gather_nd(tf.concat([ind, in1], axis=1), tf.argsort(ind[:, 1]))\n",
            "return tf.repeat(in1, repeats=2, axis=0) // tf.shape(in1)[1]\n",
            "return tf.repeat(in1, repeats=2, axis=0)\n",
            "return tf.tile(in1, [2, 1]) + tf.repeat(tf.range(len(in1)), 2)\n",
            "def transform(in1):\n    row_indices = tf.repeat(tf.range(tf.shape(in1)[0]), repeats=2)\n    pair_indices = tf.tile(in1, multiples=[2, 1])\n    return tf.stack([row_indices, pair_indices], axis=1)\n",
            "def transform(in1):\n    indices = tf.argsort(in1[:, 0], stable=True)\n    updates = tf.tensor_scatter_nd_update(in1, tf.expand_dims(indices, 1), tf.zeros_like(in1))\n    result = tf.repeat(updates, [2, 2, 2], axis=0)\n    return result\n",
            "def transform(in1):\n    idx = tf.argsort(in1[:,0])\n    return tf.concat([tf.repeat(tf.expand_dims(idx, 1), repeats=[1, 2], axis=1), in1], axis=0)\n",
            "return tf.tile(in1, [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2, axis=0)  # pair with row index\n",
            "indices = tf.argsort(tf.reshape(tf.range(tf.shape(in1)[0]), [-1, 1]), direction='ASCENDING')\nreturn tf.gather_nd(tf.tile(in1, [2, 1]), indices)\n",
            "indices = tf.tile(tf.expand_dims(in1, 1), [1, 2])\nrow_indices = tf.repeat(tf.range(tf.shape(in1)[0]), 2)\nreturn tf.stack([row_indices, tf.reshape(indices, [-1])], 1)\n",
            "def transform(in1):\n    pairs = tf.expand_dims(in1, axis=1)\n    indices = tf.range(tf.shape(in1)[0], dtype=tf.int32)\n    indices = tf.expand_dims(indices, axis=1)\n    indices = tf.tile(indices, multiples=[1, tf.shape(in1)[1]])\n    output = tf.concat([indices, pairs], axis=1)\n    return output\n",
            "return tf.repeat(in1, 2, axis=1)",
            "indices = tf.reshape(tf.stack([in1, tf.range(tf.shape(in1)[0])], axis=1), [-1, 2])\nreturn indices\n",
            "return tf.repeat(in1, 2, axis=0)",
            "indices = tf.repeat(tf.range(len(in1)), 2)\nupdates = tf.reshape(in1, [-1])\nshape = [len(in1), 2]\nreturn tf.scatter_nd(tf.expand_dims(indices, 1), updates, shape)\n",
            "return tf.repeat(in1, repeats=2, axis=0)\n",
            "indices = tf.range(0, tf.shape(in1)[0])\nreturn tf.repeat(indices, in1[:, 1] - in1[:, 0] + 1) + tf.range(0, in1[:, 1] - in1[:, 0] + 1)\n",
            "return tf.repeat(in1, 2, axis=1)\n",
            "return tf.repeat(in1, repeats=2, axis=0)\n"
        ],
        "tf_operators": {
            "tf.repeat": 37,
            "tf.broadcast_to": 2,
            "tf.range": 18,
            "tf.shape": 18,
            "tf.tile": 14,
            "tf.stack": 6,
            "tf.expand_dims": 10,
            "tf.reshape": 8,
            "tf.concat": 6,
            "tf.cast": 1,
            "tf.int32": 2,
            "tf.newaxis": 1,
            "tf.reduce_sum": 1,
            "tf.gather_nd": 2,
            "tf.argsort": 4,
            "tf.tensor_scatter_nd_update": 1,
            "tf.zeros_like": 1,
            "tf.scatter_nd": 1
        },
        "coverage_percentage": 40.0,
        "total_covered": 2,
        "total_in_target": 5,
        "parsed_constants": [
            [
                2,
                1
            ],
            [
                0,
                2,
                0,
                2,
                0
            ],
            [
                -1,
                1,
                2,
                0,
                2,
                -1,
                1
            ],
            [
                2,
                0
            ],
            [
                1,
                2,
                0
            ],
            [
                2,
                0
            ],
            [
                0,
                -1,
                1,
                1
            ],
            [
                2,
                0
            ],
            [
                2,
                1
            ],
            [
                2,
                1,
                0
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [
                2,
                0
            ],
            [
                2,
                0
            ],
            [
                2,
                1
            ],
            [
                0,
                0,
                2
            ],
            [
                2,
                0,
                0,
                0,
                0
            ],
            [
                2,
                0
            ],
            [
                2
            ],
            [
                0,
                1,
                1,
                2
            ],
            [
                2,
                0
            ],
            [
                2,
                1
            ],
            [
                2,
                0
            ],
            [
                2,
                1
            ],
            [
                0,
                1,
                2,
                1,
                1
            ],
            [
                2,
                0
            ],
            [
                2,
                0,
                0,
                2
            ],
            [
                2,
                1
            ],
            [
                1,
                1,
                2,
                1
            ],
            [
                0,
                2,
                -1,
                1
            ],
            [
                2,
                0
            ],
            [
                0,
                1,
                1,
                1,
                1,
                1
            ],
            [
                2,
                0,
                1
            ],
            [
                2,
                0
            ],
            [
                2,
                1,
                2
            ],
            [
                0,
                2,
                2,
                1,
                1
            ],
            [
                0,
                1,
                2,
                2,
                2,
                0
            ],
            [
                0,
                1,
                1,
                2,
                1,
                0
            ],
            [
                1,
                2
            ],
            [
                2,
                0
            ],
            [
                0,
                -1,
                1,
                2,
                1
            ],
            [
                1,
                1,
                2,
                0,
                2,
                -1,
                1
            ],
            [
                1,
                0,
                1,
                1,
                1,
                1
            ],
            [
                2,
                1
            ],
            [
                0,
                1,
                -1,
                2
            ],
            [
                2,
                0
            ],
            [
                2,
                -1,
                2,
                1
            ],
            [
                2,
                0
            ],
            [
                0,
                0,
                1,
                0,
                1,
                0,
                1,
                0,
                1
            ],
            [
                2,
                1
            ],
            [
                2,
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 8,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 9,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 113,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 106,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 55,
            "tf_int64": 0,
            "tf_int32": 2
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0017421602787456446,
                "tf.add(x, y)": 0.0017421602787456446,
                "tf.add_n(inputs)": 0.0017421602787456446,
                "tf.argmax(input, axis)": 0.0017421602787456446,
                "tf.argmin(input, axis)": 0.0017421602787456446,
                "tf.argsort(values, axis, stable=True)": 0.005226480836236934,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0017421602787456446,
                "tf.boolean_mask(tensor, mask)": 0.0017421602787456446,
                "tf.broadcast_to(input, shape)": 0.005226480836236934,
                "tf.cast(x, dtype)": 0.003484320557491289,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0017421602787456446,
                "tf.concat(values, axis)": 0.012195121951219513,
                "tf.constant(value)": 0.0017421602787456446,
                "tf.constant(value, dtype)": 0.0017421602787456446,
                "tf.divide(x, y)": 0.0017421602787456446,
                "tf.equal(x, y)": 0.0017421602787456446,
                "tf.exp(x)": 0.0017421602787456446,
                "tf.expand_dims(input, axis)": 0.020905923344947737,
                "tf.eye(num_rows)": 0.0017421602787456446,
                "tf.eye(num_rows, num_columns)": 0.0017421602787456446,
                "tf.eye(num_rows, dtype)": 0.0017421602787456446,
                "tf.fill(dims, value)": 0.0017421602787456446,
                "tf.gather(params, indices)": 0.0017421602787456446,
                "tf.gather(params, indices, axis, batch_dims)": 0.0017421602787456446,
                "tf.gather_nd(params, indices)": 0.005226480836236934,
                "tf.gather_nd(params, indices, batch_dims)": 0.0017421602787456446,
                "tf.greater(x, y)": 0.0017421602787456446,
                "tf.greater_equal(x, y)": 0.0017421602787456446,
                "tf.math.bincount(arr)": 0.0017421602787456446,
                "tf.math.ceil(x)": 0.0017421602787456446,
                "tf.math.count_nonzero(input)": 0.0017421602787456446,
                "tf.math.count_nonzero(input, axis)": 0.0017421602787456446,
                "tf.math.cumsum(x, axis)": 0.0017421602787456446,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0017421602787456446,
                "tf.math.divide_no_nan(x, y)": 0.0017421602787456446,
                "tf.math.floor(x)": 0.0017421602787456446,
                "tf.math.log(x)": 0.0017421602787456446,
                "tf.math.logical_and(x, y)": 0.0017421602787456446,
                "tf.math.logical_not(x)": 0.0017421602787456446,
                "tf.math.logical_or(x, y)": 0.0017421602787456446,
                "tf.math.logical_xor(x, y)": 0.0017421602787456446,
                "tf.math.negative(x)": 0.0017421602787456446,
                "tf.math.reciprocal(x)": 0.0017421602787456446,
                "tf.math.reciprocal_no_nan(x)": 0.0017421602787456446,
                "tf.math.segment_max(data, segment_ids)": 0.0017421602787456446,
                "tf.math.segment_mean(data, segment_ids)": 0.0017421602787456446,
                "tf.math.segment_min(data, segment_ids)": 0.0017421602787456446,
                "tf.math.segment_prod(data, segment_ids)": 0.0017421602787456446,
                "tf.math.segment_sum(data, segment_ids)": 0.0017421602787456446,
                "tf.math.squared_difference(x, y)": 0.0017421602787456446,
                "tf.math.top_k(input, k)": 0.0017421602787456446,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0017421602787456446,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0017421602787456446,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0017421602787456446,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0017421602787456446,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0017421602787456446,
                "tf.matmul(a, b)": 0.0017421602787456446,
                "tf.maximum(x, y)": 0.0017421602787456446,
                "tf.minimum(x, y)": 0.0017421602787456446,
                "tf.multiply(x, y)": 0.0017421602787456446,
                "tf.not_equal(x, y)": 0.0017421602787456446,
                "tf.one_hot(indices, depth)": 0.0017421602787456446,
                "tf.ones(shape)": 0.0017421602787456446,
                "tf.ones_like(input)": 0.0017421602787456446,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0017421602787456446,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0017421602787456446,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0017421602787456446,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0017421602787456446,
                "tf.range(start)": 0.0313588850174216,
                "tf.range(start, limit, delta)": 0.003484320557491289,
                "tf.reduce_any(input_tensor, axis)": 0.0017421602787456446,
                "tf.reduce_all(input_tensor, axis)": 0.0017421602787456446,
                "tf.reduce_max(input_tensor)": 0.0017421602787456446,
                "tf.reduce_max(input_tensor, axis)": 0.0017421602787456446,
                "tf.reduce_mean(input_tensor)": 0.0017421602787456446,
                "tf.reduce_mean(input_tensor, axis)": 0.0017421602787456446,
                "tf.reduce_min(input_tensor)": 0.0017421602787456446,
                "tf.reduce_min(input_tensor, axis)": 0.0017421602787456446,
                "tf.reduce_prod(input_tensor, axis)": 0.0017421602787456446,
                "tf.reduce_sum(input_tensor)": 0.0017421602787456446,
                "tf.reduce_sum(input_tensor, axis)": 0.0017421602787456446,
                "tf.repeat(input, repeats)": 0.012195121951219513,
                "tf.repeat(input, repeats, axis)": 0.006968641114982578,
                "tf.reshape(tensor, shape)": 0.0156794425087108,
                "tf.reverse(tensor, axis)": 0.0017421602787456446,
                "tf.roll(input, shift, axis)": 0.0017421602787456446,
                "tf.round(x)": 0.0017421602787456446,
                "tf.scatter_nd(indices, updates, shape)": 0.003484320557491289,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0017421602787456446,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0017421602787456446,
                "tf.sequence_mask(lengths)": 0.0017421602787456446,
                "tf.sequence_mask(lengths, maxlen)": 0.0017421602787456446,
                "tf.shape(input)": 0.04006968641114982,
                "tf.sign(x)": 0.0017421602787456446,
                "tf.sort(values, axis)": 0.0017421602787456446,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0017421602787456446,
                "tf.sqrt(x)": 0.0017421602787456446,
                "tf.square(x)": 0.0017421602787456446,
                "tf.squeeze(input)": 0.0017421602787456446,
                "tf.squeeze(input, axis)": 0.0017421602787456446,
                "tf.stack(values, axis)": 0.012195121951219513,
                "tf.subtract(x, y)": 0.0017421602787456446,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.003484320557491289,
                "tf.tensordot(a, b, axes)": 0.0017421602787456446,
                "tf.tile(input, multiples)": 0.02613240418118467,
                "tf.transpose(a)": 0.0017421602787456446,
                "tf.transpose(a, perm)": 0.0017421602787456446,
                "tf.unique_with_counts(x)": 0.0017421602787456446,
                "tf.unstack(value, axis)": 0.0017421602787456446,
                "tf.where(condition)": 0.0017421602787456446,
                "tf.where(condition, x, y)": 0.0017421602787456446,
                "tf.zeros(shape)": 0.0017421602787456446,
                "tf.zeros_like(input)": 0.003484320557491289,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0017421602787456446,
                "tf.sparse.add(a, b)": 0.0017421602787456446,
                "tf.sparse.concat(axis, sp_inputs)": 0.0017421602787456446,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0017421602787456446,
                "tf.sparse.from_dense(tensor)": 0.0017421602787456446,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0017421602787456446,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0017421602787456446,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0017421602787456446,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0017421602787456446,
                "tf.sparse.reset_shape(sp_input)": 0.0017421602787456446,
                "tf.sparse.reshape(sp_input, shape)": 0.0017421602787456446,
                "tf.sparse.retain(sp_input, to_retain)": 0.0017421602787456446,
                "tf.sparse.slice(sp_input, start, size)": 0.0017421602787456446,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0017421602787456446,
                "tf.sparse.to_dense(sp_input)": 0.0017421602787456446,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0017421602787456446,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0017421602787456446,
                "tf.sparse.transpose(sp_input)": 0.0017421602787456446,
                "tf.sparse.transpose(sp_input, perm)": 0.0017421602787456446,
                "IndexingAxis1Operation": 0.0156794425087108,
                "IndexingOperation": 0.04006968641114982,
                "PairCreationOperation": 0.017421602787456445,
                "SingletonTupleCreationOperation": 0.0017421602787456446,
                "SlicingAxis0BothOperation": 0.0017421602787456446,
                "SlicingAxis0LeftOperation": 0.0017421602787456446,
                "SlicingAxis0RightOperation": 0.0017421602787456446,
                "SlicingAxis1BothOperation": 0.0017421602787456446,
                "SlicingAxis1LeftOperation": 0.0017421602787456446,
                "SlicingAxis1RightOperation": 0.0017421602787456446,
                "TripleCreationOperation": 0.0017421602787456446,
                "PROVIDED_CONSTANT_WEIGHT": 0.0017421602787456446,
                "COMMON_CONSTANT_WEIGHT": 0.18641114982578397,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0017421602787456446,
                "INPUT_VARIABLE_WEIGHT": 0.1986062717770035,
                "AXIS_CONSTANT_WEIGHT": 0.0975609756097561,
                "SHAPE_CONSTANT_WEIGHT": 0.0017421602787456446,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0017421602787456446,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.005226480836236934,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0017421602787456446,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0017421602787456446,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0017421602787456446
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 6,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 6,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 5,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 6,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 6,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 5,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 6,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 5,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 6,
                "IndexingOperation": 5,
                "PairCreationOperation": 6,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 2,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 3,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_01",
        "description": "reshape by separating and duplicating columns",
        "target_program": "tf.transpose(tf.cast((in1, in1), tf.float32))",
        "source": "https://stackoverflow.com/questions/40441503/tensorflow-tensor-reshape",
        "constants": "[]",
        "examples": {
            "inputs": "[[[5., 2.], [1., 3.], [0., -1.]],]",
            "outputs": "[[[5., 5.], [1., 1.], [0., 0.]],    [[2., 2.], [3., 3.], [-1., -1.]]]"
        },
        "completions": [
            "return tf.repeat(tf.expand_dims(in1, axis=2), 2, axis=2)",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.stack([in1, in1], axis=2)",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.stack([in1, in1], axis=2)",
            "return tf.repeat(tf.expand_dims(in1, axis=2), 2, axis=2)",
            "return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 2])\n",
            "return tf.stack([in1, in1], axis=1)",
            "def transform(in1):\n    reshaped = tf.tile(tf.expand_dims(in1, axis=0), [2, 1, 1])\n    return reshaped\n",
            "return tf.stack([in1, in1], axis=-1)\n",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 2])",
            "return tf.repeat(tf.expand_dims(in1, axis=2), 2, axis=2)",
            "return tf.repeat(tf.expand_dims(in1, axis=-1), repeats=2, axis=2)",
            "return tf.stack([in1, in1], axis=2)",
            "return tf.transpose(tf.stack([in1, in1], axis=1), perm=[0, 2, 1])",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=1)\n  ",
            "return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])\n",
            "return tf.reshape(tf.tile(in1, [1, 2]), [-1, 2])",
            "return tf.tile(tf.expand_dims(in1, 2), [1, 1, 2])",
            "return tf.stack([in1, in1], axis=1)\n",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.stack([in1, in1], axis=2)",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, in1], axis=1), perm=[2, 0, 1])\n",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.reshape(tf.tile(in1, [1, 2]), [-1, 2])",
            "result = tf.reshape(in1, [3, 2, 2])\n",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.repeat(tf.expand_dims(in1, axis=2), 2, axis=2)",
            "return tf.stack([in1, in1], axis=1)",
            "return tf.reshape(tf.concat([in1, in1], axis=2), [-1, tf.shape(in1)[1], 2])\n",
            "def transform(in1):\n    return tf.stack([in1[:, 0], in1[:, 0], in1[:, 1], in1[:, 1]], axis=1)\n",
            "return tf.repeat(tf.expand_dims(in1, axis=2), repeats=2, axis=2)",
            "def transform(input_tensor):\n    transposed = tf.transpose(input_tensor)\n    reshaped = tf.stack([transposed, transposed], axis=2)\n    return reshaped\n",
            "import tensorflow as tf\n\ndef transform(in1):\n    col1 = tf.expand_dims(in1[:, 0], axis=1)\n    col2 = tf.expand_dims(in1[:, 1], axis=1)\n    reshaped = tf.concat([col1, col1, col2, col2], axis=1)\n    return tf.reshape(reshaped, [-1, 2, 2])\n",
            "return tf.repeat(tf.expand_dims(in1, axis=2), 2, axis=2)",
            "return tf.stack([in1, in1], axis=2)",
            "return tf.repeat(tf.expand_dims(in1, axis=2), repeats=2, axis=2)\n",
            "return tf.stack([in1, in1], axis=2)",
            "return tf.repeat(tf.expand_dims(in1, axis=-1), 2, axis=-1)\n",
            "return tf.reshape(tf.tile(tf.expand_dims(in1, -1), [1, 1, 2]), [-1, 2])\n",
            "return tf.stack([in1, in1], axis=2)\n",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)\n",
            "return tf.repeat(tf.expand_dims(in1, 2), 2, axis=2)",
            "return tf.stack([in1, in1], axis=1)",
            "def transform(in1):\n    return tf.stack([in1[:,0], in1[:,0]], axis=2), tf.stack([in1[:,1], in1[:,1]], axis=2)\n",
            "return tf.stack([in1, in1], axis=2)\n"
        ],
        "tf_operators": {
            "tf.expand_dims": 17,
            "tf.repeat": 10,
            "tf.stack": 29,
            "tf.tile": 8,
            "tf.transpose": 3,
            "tf.reshape": 6,
            "tf.concat": 2,
            "tf.shape": 1
        },
        "coverage_percentage": 33.33333333333333,
        "total_covered": 1,
        "total_in_target": 3,
        "parsed_constants": [
            [
                2,
                2,
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2,
                2,
                2
            ],
            [
                2,
                1,
                1,
                2
            ],
            [
                1
            ],
            [
                0,
                2,
                1,
                1
            ],
            [
                -1
            ],
            [
                2
            ],
            [
                2,
                1,
                1,
                2
            ],
            [
                2,
                2,
                2
            ],
            [
                -1,
                2,
                2
            ],
            [
                2
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [
                1,
                2,
                -1,
                2
            ],
            [
                2,
                1,
                1,
                2
            ],
            [
                1
            ],
            [
                2
            ],
            [
                2
            ],
            [
                1,
                2,
                0,
                1
            ],
            [
                2
            ],
            [
                1,
                2,
                -1,
                2
            ],
            [
                3,
                2,
                2
            ],
            [
                2
            ],
            [
                2,
                2,
                2
            ],
            [
                1
            ],
            [
                2,
                -1,
                1,
                2
            ],
            [
                0,
                0,
                1,
                1,
                1
            ],
            [
                2,
                2,
                2
            ],
            [
                2
            ],
            [
                0,
                1,
                1,
                1,
                1,
                -1,
                2,
                2
            ],
            [
                2,
                2,
                2
            ],
            [
                2
            ],
            [
                2,
                2,
                2
            ],
            [
                2
            ],
            [
                -1,
                2,
                -1
            ],
            [
                -1,
                1,
                1,
                2,
                -1,
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2,
                2,
                2
            ],
            [
                1
            ],
            [
                0,
                0,
                2,
                1,
                1,
                2
            ],
            [
                2
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 2,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 85,
            "shape": 1,
            "tf_bool": 0,
            "provided": 0,
            "common": 42,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 70,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0022675736961451248,
                "tf.add(x, y)": 0.0022675736961451248,
                "tf.add_n(inputs)": 0.0022675736961451248,
                "tf.argmax(input, axis)": 0.0022675736961451248,
                "tf.argmin(input, axis)": 0.0022675736961451248,
                "tf.argsort(values, axis, stable=True)": 0.0022675736961451248,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0022675736961451248,
                "tf.boolean_mask(tensor, mask)": 0.0022675736961451248,
                "tf.broadcast_to(input, shape)": 0.0022675736961451248,
                "tf.cast(x, dtype)": 0.0022675736961451248,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0022675736961451248,
                "tf.concat(values, axis)": 0.006802721088435374,
                "tf.constant(value)": 0.0022675736961451248,
                "tf.constant(value, dtype)": 0.0022675736961451248,
                "tf.divide(x, y)": 0.0022675736961451248,
                "tf.equal(x, y)": 0.0022675736961451248,
                "tf.exp(x)": 0.0022675736961451248,
                "tf.expand_dims(input, axis)": 0.04308390022675737,
                "tf.eye(num_rows)": 0.0022675736961451248,
                "tf.eye(num_rows, num_columns)": 0.0022675736961451248,
                "tf.eye(num_rows, dtype)": 0.0022675736961451248,
                "tf.fill(dims, value)": 0.0022675736961451248,
                "tf.gather(params, indices)": 0.0022675736961451248,
                "tf.gather(params, indices, axis, batch_dims)": 0.0022675736961451248,
                "tf.gather_nd(params, indices)": 0.0022675736961451248,
                "tf.gather_nd(params, indices, batch_dims)": 0.0022675736961451248,
                "tf.greater(x, y)": 0.0022675736961451248,
                "tf.greater_equal(x, y)": 0.0022675736961451248,
                "tf.math.bincount(arr)": 0.0022675736961451248,
                "tf.math.ceil(x)": 0.0022675736961451248,
                "tf.math.count_nonzero(input)": 0.0022675736961451248,
                "tf.math.count_nonzero(input, axis)": 0.0022675736961451248,
                "tf.math.cumsum(x, axis)": 0.0022675736961451248,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0022675736961451248,
                "tf.math.divide_no_nan(x, y)": 0.0022675736961451248,
                "tf.math.floor(x)": 0.0022675736961451248,
                "tf.math.log(x)": 0.0022675736961451248,
                "tf.math.logical_and(x, y)": 0.0022675736961451248,
                "tf.math.logical_not(x)": 0.0022675736961451248,
                "tf.math.logical_or(x, y)": 0.0022675736961451248,
                "tf.math.logical_xor(x, y)": 0.0022675736961451248,
                "tf.math.negative(x)": 0.0022675736961451248,
                "tf.math.reciprocal(x)": 0.0022675736961451248,
                "tf.math.reciprocal_no_nan(x)": 0.0022675736961451248,
                "tf.math.segment_max(data, segment_ids)": 0.0022675736961451248,
                "tf.math.segment_mean(data, segment_ids)": 0.0022675736961451248,
                "tf.math.segment_min(data, segment_ids)": 0.0022675736961451248,
                "tf.math.segment_prod(data, segment_ids)": 0.0022675736961451248,
                "tf.math.segment_sum(data, segment_ids)": 0.0022675736961451248,
                "tf.math.squared_difference(x, y)": 0.0022675736961451248,
                "tf.math.top_k(input, k)": 0.0022675736961451248,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0022675736961451248,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0022675736961451248,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0022675736961451248,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0022675736961451248,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0022675736961451248,
                "tf.matmul(a, b)": 0.0022675736961451248,
                "tf.maximum(x, y)": 0.0022675736961451248,
                "tf.minimum(x, y)": 0.0022675736961451248,
                "tf.multiply(x, y)": 0.0022675736961451248,
                "tf.not_equal(x, y)": 0.0022675736961451248,
                "tf.one_hot(indices, depth)": 0.0022675736961451248,
                "tf.ones(shape)": 0.0022675736961451248,
                "tf.ones_like(input)": 0.0022675736961451248,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0022675736961451248,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0022675736961451248,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0022675736961451248,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0022675736961451248,
                "tf.range(start)": 0.0022675736961451248,
                "tf.range(start, limit, delta)": 0.0022675736961451248,
                "tf.reduce_any(input_tensor, axis)": 0.0022675736961451248,
                "tf.reduce_all(input_tensor, axis)": 0.0022675736961451248,
                "tf.reduce_max(input_tensor)": 0.0022675736961451248,
                "tf.reduce_max(input_tensor, axis)": 0.0022675736961451248,
                "tf.reduce_mean(input_tensor)": 0.0022675736961451248,
                "tf.reduce_mean(input_tensor, axis)": 0.0022675736961451248,
                "tf.reduce_min(input_tensor)": 0.0022675736961451248,
                "tf.reduce_min(input_tensor, axis)": 0.0022675736961451248,
                "tf.reduce_prod(input_tensor, axis)": 0.0022675736961451248,
                "tf.reduce_sum(input_tensor)": 0.0022675736961451248,
                "tf.reduce_sum(input_tensor, axis)": 0.0022675736961451248,
                "tf.repeat(input, repeats)": 0.0022675736961451248,
                "tf.repeat(input, repeats, axis)": 0.0022675736961451248,
                "tf.reshape(tensor, shape)": 0.015873015873015872,
                "tf.reverse(tensor, axis)": 0.0022675736961451248,
                "tf.roll(input, shift, axis)": 0.0022675736961451248,
                "tf.round(x)": 0.0022675736961451248,
                "tf.scatter_nd(indices, updates, shape)": 0.0022675736961451248,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0022675736961451248,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0022675736961451248,
                "tf.sequence_mask(lengths)": 0.0022675736961451248,
                "tf.sequence_mask(lengths, maxlen)": 0.0022675736961451248,
                "tf.shape(input)": 0.0045351473922902496,
                "tf.sign(x)": 0.0022675736961451248,
                "tf.sort(values, axis)": 0.0022675736961451248,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0022675736961451248,
                "tf.sqrt(x)": 0.0022675736961451248,
                "tf.square(x)": 0.0022675736961451248,
                "tf.squeeze(input)": 0.0022675736961451248,
                "tf.squeeze(input, axis)": 0.0022675736961451248,
                "tf.stack(values, axis)": 0.07029478458049887,
                "tf.subtract(x, y)": 0.0022675736961451248,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0022675736961451248,
                "tf.tensordot(a, b, axes)": 0.0022675736961451248,
                "tf.tile(input, multiples)": 0.02040816326530612,
                "tf.transpose(a)": 0.0045351473922902496,
                "tf.transpose(a, perm)": 0.0022675736961451248,
                "tf.unique_with_counts(x)": 0.0022675736961451248,
                "tf.unstack(value, axis)": 0.0022675736961451248,
                "tf.where(condition)": 0.0022675736961451248,
                "tf.where(condition, x, y)": 0.0022675736961451248,
                "tf.zeros(shape)": 0.0022675736961451248,
                "tf.zeros_like(input)": 0.0022675736961451248,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0022675736961451248,
                "tf.sparse.add(a, b)": 0.0022675736961451248,
                "tf.sparse.concat(axis, sp_inputs)": 0.0022675736961451248,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0022675736961451248,
                "tf.sparse.from_dense(tensor)": 0.0022675736961451248,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0022675736961451248,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0022675736961451248,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0022675736961451248,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0022675736961451248,
                "tf.sparse.reset_shape(sp_input)": 0.0022675736961451248,
                "tf.sparse.reshape(sp_input, shape)": 0.0022675736961451248,
                "tf.sparse.retain(sp_input, to_retain)": 0.0022675736961451248,
                "tf.sparse.slice(sp_input, start, size)": 0.0022675736961451248,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0022675736961451248,
                "tf.sparse.to_dense(sp_input)": 0.0022675736961451248,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0022675736961451248,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0022675736961451248,
                "tf.sparse.transpose(sp_input)": 0.0022675736961451248,
                "tf.sparse.transpose(sp_input, perm)": 0.0022675736961451248,
                "IndexingAxis1Operation": 0.024943310657596373,
                "IndexingOperation": 0.0045351473922902496,
                "PairCreationOperation": 0.027210884353741496,
                "SingletonTupleCreationOperation": 0.0022675736961451248,
                "SlicingAxis0BothOperation": 0.0022675736961451248,
                "SlicingAxis0LeftOperation": 0.0022675736961451248,
                "SlicingAxis0RightOperation": 0.0022675736961451248,
                "SlicingAxis1BothOperation": 0.0022675736961451248,
                "SlicingAxis1LeftOperation": 0.0022675736961451248,
                "SlicingAxis1RightOperation": 0.0022675736961451248,
                "TripleCreationOperation": 0.0022675736961451248,
                "PROVIDED_CONSTANT_WEIGHT": 0.0022675736961451248,
                "COMMON_CONSTANT_WEIGHT": 0.09750566893424037,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0022675736961451248,
                "INPUT_VARIABLE_WEIGHT": 0.19501133786848074,
                "AXIS_CONSTANT_WEIGHT": 0.16099773242630386,
                "SHAPE_CONSTANT_WEIGHT": 0.0045351473922902496,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0022675736961451248,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0022675736961451248,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0022675736961451248,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0022675736961451248,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0022675736961451248
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 9,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 5,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 9,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 6,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 8,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 4,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 6,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 5,
                "IndexingOperation": 8,
                "PairCreationOperation": 5,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 3,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_02",
        "description": "clip values that are greater than 1",
        "target_program": "tf.minimum(in1, tf.constant(1))",
        "source": "https://stackoverflow.com/questions/46408839/tensorflow-trim-values-in-tensor",
        "constants": "[1]",
        "examples": {
            "inputs": "[[5, 1, 0, 3, 0, -1, 2, -10, 2],]",
            "outputs": "[[1, 1, 0, 1, 0, -1, 1, -10, 1]]"
        },
        "completions": [
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n",
            "return tf.minimum(tf.maximum(in1, 0), 1)\n",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=None, clip_value_max=1)\n",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=None, clip_value_max=1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-1, clip_value_max=1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n",
            "def transform(in1):\n    clipped_values = tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n    return clipped_values\n",
            "return tf.clip_by_value(in1, clip_value_min, clip_value_max)\n",
            "return tf.minimum(tf.maximum(in1, -1), 1)\n",
            "return tf.maximum(tf.minimum(in1, 1), -1)\n",
            "return tf.minimum(in1, 1)\n",
            "def transform(in1):\n    clipped_values = tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n    return clipped_values\n",
            "return tf.clip_by_value(in1, clip_value_min=-1000, clip_value_max=1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.minimum(in1, 1)\n",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n",
            "return tf.minimum(in1, 1)\n",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=None, clip_value_max=1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n",
            "return tf.clip_by_value(in1, 0, 1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.minimum(in1, tf.constant(1))\n",
            "return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)",
            "return tf.minimum(in1, 1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)",
            "return tf.clip_by_value(in1, clip_value_min=-99999, clip_value_max=1)\n",
            "return tf.clip_by_value(in1, 0, 1)\n",
            "return tf.clip_by_value(in1, clip_value_min, 1)\n",
            "def transform(in1):\n    clipped_values = tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n    return clipped_values\n",
            "return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n",
            "def transform(in1):\n    clipped_values = tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n    return clipped_values\n",
            "return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-1, clip_value_max=1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.clip_by_value(in1, clip_value_min, 1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-1, clip_value_max=1)",
            "return tf.clip_by_value(in1, clip_value_min, 1)\n"
        ],
        "tf_operators": {
            "tf.clip_by_value": 27,
            "tf.maximum": 3,
            "tf.minimum": 23,
            "tf.constant": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                -1,
                1
            ],
            [
                1,
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1000,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -99999,
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1,
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            -99999,
            -1000,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 50,
            "shape": 0,
            "tf_bool": 0,
            "provided": 2,
            "common": 57,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0031446540880503146,
                "tf.add(x, y)": 0.0031446540880503146,
                "tf.add_n(inputs)": 0.0031446540880503146,
                "tf.argmax(input, axis)": 0.0031446540880503146,
                "tf.argmin(input, axis)": 0.0031446540880503146,
                "tf.argsort(values, axis, stable=True)": 0.0031446540880503146,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0031446540880503146,
                "tf.boolean_mask(tensor, mask)": 0.0031446540880503146,
                "tf.broadcast_to(input, shape)": 0.0031446540880503146,
                "tf.cast(x, dtype)": 0.0031446540880503146,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0880503144654088,
                "tf.concat(values, axis)": 0.0031446540880503146,
                "tf.constant(value)": 0.006289308176100629,
                "tf.constant(value, dtype)": 0.0031446540880503146,
                "tf.divide(x, y)": 0.0031446540880503146,
                "tf.equal(x, y)": 0.0031446540880503146,
                "tf.exp(x)": 0.0031446540880503146,
                "tf.expand_dims(input, axis)": 0.0031446540880503146,
                "tf.eye(num_rows)": 0.0031446540880503146,
                "tf.eye(num_rows, num_columns)": 0.0031446540880503146,
                "tf.eye(num_rows, dtype)": 0.0031446540880503146,
                "tf.fill(dims, value)": 0.0031446540880503146,
                "tf.gather(params, indices)": 0.0031446540880503146,
                "tf.gather(params, indices, axis, batch_dims)": 0.0031446540880503146,
                "tf.gather_nd(params, indices)": 0.0031446540880503146,
                "tf.gather_nd(params, indices, batch_dims)": 0.0031446540880503146,
                "tf.greater(x, y)": 0.0031446540880503146,
                "tf.greater_equal(x, y)": 0.0031446540880503146,
                "tf.math.bincount(arr)": 0.0031446540880503146,
                "tf.math.ceil(x)": 0.0031446540880503146,
                "tf.math.count_nonzero(input)": 0.0031446540880503146,
                "tf.math.count_nonzero(input, axis)": 0.0031446540880503146,
                "tf.math.cumsum(x, axis)": 0.0031446540880503146,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0031446540880503146,
                "tf.math.divide_no_nan(x, y)": 0.0031446540880503146,
                "tf.math.floor(x)": 0.0031446540880503146,
                "tf.math.log(x)": 0.0031446540880503146,
                "tf.math.logical_and(x, y)": 0.0031446540880503146,
                "tf.math.logical_not(x)": 0.0031446540880503146,
                "tf.math.logical_or(x, y)": 0.0031446540880503146,
                "tf.math.logical_xor(x, y)": 0.0031446540880503146,
                "tf.math.negative(x)": 0.0031446540880503146,
                "tf.math.reciprocal(x)": 0.0031446540880503146,
                "tf.math.reciprocal_no_nan(x)": 0.0031446540880503146,
                "tf.math.segment_max(data, segment_ids)": 0.0031446540880503146,
                "tf.math.segment_mean(data, segment_ids)": 0.0031446540880503146,
                "tf.math.segment_min(data, segment_ids)": 0.0031446540880503146,
                "tf.math.segment_prod(data, segment_ids)": 0.0031446540880503146,
                "tf.math.segment_sum(data, segment_ids)": 0.0031446540880503146,
                "tf.math.squared_difference(x, y)": 0.0031446540880503146,
                "tf.math.top_k(input, k)": 0.0031446540880503146,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0031446540880503146,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0031446540880503146,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0031446540880503146,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0031446540880503146,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0031446540880503146,
                "tf.matmul(a, b)": 0.0031446540880503146,
                "tf.maximum(x, y)": 0.012578616352201259,
                "tf.minimum(x, y)": 0.07547169811320754,
                "tf.multiply(x, y)": 0.0031446540880503146,
                "tf.not_equal(x, y)": 0.0031446540880503146,
                "tf.one_hot(indices, depth)": 0.0031446540880503146,
                "tf.ones(shape)": 0.0031446540880503146,
                "tf.ones_like(input)": 0.0031446540880503146,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0031446540880503146,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0031446540880503146,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0031446540880503146,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0031446540880503146,
                "tf.range(start)": 0.0031446540880503146,
                "tf.range(start, limit, delta)": 0.0031446540880503146,
                "tf.reduce_any(input_tensor, axis)": 0.0031446540880503146,
                "tf.reduce_all(input_tensor, axis)": 0.0031446540880503146,
                "tf.reduce_max(input_tensor)": 0.0031446540880503146,
                "tf.reduce_max(input_tensor, axis)": 0.0031446540880503146,
                "tf.reduce_mean(input_tensor)": 0.0031446540880503146,
                "tf.reduce_mean(input_tensor, axis)": 0.0031446540880503146,
                "tf.reduce_min(input_tensor)": 0.0031446540880503146,
                "tf.reduce_min(input_tensor, axis)": 0.0031446540880503146,
                "tf.reduce_prod(input_tensor, axis)": 0.0031446540880503146,
                "tf.reduce_sum(input_tensor)": 0.0031446540880503146,
                "tf.reduce_sum(input_tensor, axis)": 0.0031446540880503146,
                "tf.repeat(input, repeats)": 0.0031446540880503146,
                "tf.repeat(input, repeats, axis)": 0.0031446540880503146,
                "tf.reshape(tensor, shape)": 0.0031446540880503146,
                "tf.reverse(tensor, axis)": 0.0031446540880503146,
                "tf.roll(input, shift, axis)": 0.0031446540880503146,
                "tf.round(x)": 0.0031446540880503146,
                "tf.scatter_nd(indices, updates, shape)": 0.0031446540880503146,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0031446540880503146,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0031446540880503146,
                "tf.sequence_mask(lengths)": 0.0031446540880503146,
                "tf.sequence_mask(lengths, maxlen)": 0.0031446540880503146,
                "tf.shape(input)": 0.0031446540880503146,
                "tf.sign(x)": 0.0031446540880503146,
                "tf.sort(values, axis)": 0.0031446540880503146,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0031446540880503146,
                "tf.sqrt(x)": 0.0031446540880503146,
                "tf.square(x)": 0.0031446540880503146,
                "tf.squeeze(input)": 0.0031446540880503146,
                "tf.squeeze(input, axis)": 0.0031446540880503146,
                "tf.stack(values, axis)": 0.0031446540880503146,
                "tf.subtract(x, y)": 0.0031446540880503146,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0031446540880503146,
                "tf.tensordot(a, b, axes)": 0.0031446540880503146,
                "tf.tile(input, multiples)": 0.0031446540880503146,
                "tf.transpose(a)": 0.0031446540880503146,
                "tf.transpose(a, perm)": 0.0031446540880503146,
                "tf.unique_with_counts(x)": 0.0031446540880503146,
                "tf.unstack(value, axis)": 0.0031446540880503146,
                "tf.where(condition)": 0.0031446540880503146,
                "tf.where(condition, x, y)": 0.0031446540880503146,
                "tf.zeros(shape)": 0.0031446540880503146,
                "tf.zeros_like(input)": 0.0031446540880503146,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0031446540880503146,
                "tf.sparse.add(a, b)": 0.0031446540880503146,
                "tf.sparse.concat(axis, sp_inputs)": 0.0031446540880503146,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0031446540880503146,
                "tf.sparse.from_dense(tensor)": 0.0031446540880503146,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0031446540880503146,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0031446540880503146,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0031446540880503146,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0031446540880503146,
                "tf.sparse.reset_shape(sp_input)": 0.0031446540880503146,
                "tf.sparse.reshape(sp_input, shape)": 0.0031446540880503146,
                "tf.sparse.retain(sp_input, to_retain)": 0.0031446540880503146,
                "tf.sparse.slice(sp_input, start, size)": 0.0031446540880503146,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0031446540880503146,
                "tf.sparse.to_dense(sp_input)": 0.0031446540880503146,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0031446540880503146,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0031446540880503146,
                "tf.sparse.transpose(sp_input)": 0.0031446540880503146,
                "tf.sparse.transpose(sp_input, perm)": 0.0031446540880503146,
                "IndexingAxis1Operation": 0.0031446540880503146,
                "IndexingOperation": 0.0031446540880503146,
                "PairCreationOperation": 0.0031446540880503146,
                "SingletonTupleCreationOperation": 0.0031446540880503146,
                "SlicingAxis0BothOperation": 0.0031446540880503146,
                "SlicingAxis0LeftOperation": 0.0031446540880503146,
                "SlicingAxis0RightOperation": 0.0031446540880503146,
                "SlicingAxis1BothOperation": 0.0031446540880503146,
                "SlicingAxis1LeftOperation": 0.0031446540880503146,
                "SlicingAxis1RightOperation": 0.0031446540880503146,
                "TripleCreationOperation": 0.0031446540880503146,
                "PROVIDED_CONSTANT_WEIGHT": 0.009433962264150943,
                "COMMON_CONSTANT_WEIGHT": 0.18238993710691823,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0031446540880503146,
                "INPUT_VARIABLE_WEIGHT": 0.16037735849056603,
                "AXIS_CONSTANT_WEIGHT": 0.0031446540880503146,
                "SHAPE_CONSTANT_WEIGHT": 0.0031446540880503146,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0031446540880503146,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0031446540880503146,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0031446540880503146,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0031446540880503146,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0031446540880503146
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 4,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 7,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 6,
                "tf.minimum(x, y)": 4,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 7,
                "COMMON_CONSTANT_WEIGHT": 2,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_03",
        "description": "replace certain columns with columns from the other tensor",
        "target_program": "tf.reduce_sum(tf.one_hot(tf.range(3, 5), depth=in1.shape[1], dtype=tf.int32), axis=0) * in2 + (1 - tf.reduce_sum(tf.one_hot(tf.range(3, 5), depth=in1.shape[1], dtype=tf.int32), axis=0)) * in1",
        "source": "https://stackoverflow.com/questions/44657388/how-to-replace-certain-values-in-tensorflow-tensor-with-the-values-of-the-other",
        "constants": "[3, 4, 5]",
        "examples": {
            "inputs": "[[[11, 22, 33, 44, 55, 66, 77], [70, 60, 50, 40, 30, 20, 10]],[[-9, -8, -7, -6, -5, -4, -3], [11, 12, 13, 14, 15, 16, 17]],]",
            "outputs": "[[[11, 22, 33, -6, -5, 66, 77], [70, 60, 50, 14, 15, 20, 10]]]"
        },
        "completions": [
            "return tf.concat([tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1), tf.concat([in2[:,:3], in1[:,3:4], in1[:,-2:]], axis=1)], axis=0)",
            "return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4]], tf.gather(in2, [0, 3], axis=1))",
            "out = tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [1, 3]]), tf.gather(in2, [3, 3]))\nreturn tf.expand_dims(out, axis=0)\n",
            "return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]]))",
            "def transform(in1, in2):\n    in1[:, 3:5] = in2[:, 3:5]\n    return tf.constant(in1)\n",
            "mask = tf.constant([[True, True, True, False, False, True, True], [True, True, True, False, False, True, True]])\nreturn tf.where(mask, in1, in2)\n",
            "return tf.concat([tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1), tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1)], axis=0)",
            "return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4]], tf.gather_nd(in2, [[0, 3], [0, 4]]))",
            "return tf.tensor_scatter_nd_update(in1, [[slice(None), [3, 4]]], tf.gather(in2, [3, 4], axis=1))",
            "return tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1)\n",
            "return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]]))",
            "def transform(in1, in2):\n    return tf.concat([in1[:, :3], in2[:, 3:], in1[:, 5:]], axis=1)\n",
            "updated_columns = tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1)\nreturn tf.expand_dims(updated_columns, axis=0)\n",
            "out = tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [1, 3]]), tf.gather(in2, [3, 3]))\nreturn tf.expand_dims(out, axis=0)\n",
            "return tf.concat([in1[:,:3], in2[:,:3], in1[:,5:]], axis=1)",
            "return tf.concat([tf.slice(in1, [0, 0, 0], [2, 3, 3]), tf.slice(in2, [0, 0, 3], [2, 3, 4])], axis=2)\n",
            "return tf.concat([tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1), tf.concat([in2[:, :3], in1[:, 3:5], in2[:, 5:]], axis=1)], axis=0)",
            "return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1[:,:3], in2[:,3:5], in1[:,-2:]], axis=1)",
            "return tf.concat([tf.slice(in1, [0, 0, 0], [2, 3, 7]), \ntf.slice(in2, [0, 0, 3], [2, 2, 4]), \n                      tf.slice(in1, [0, 2, 5], [2, 1, 2])], axis=2)\n",
            "output = tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [1, 3]]), tf.gather(in2, [3, 3]))\nreturn output\n",
            "return tf.gather(tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1), [0, 1])\n",
            "return tf.concat([tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1),\n                      tf.concat([in2[:,:3], in1[:,3:4], in2[:,5:]], axis=1)], axis=0)",
            "return tf.concat([tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1),\ntf.concat([in2[:, :3], in1[:, 3:5], in2[:, 5:]], axis=1)])",
            "return tf.tensor_scatter_nd_update(in1, [[0, 3], [1, 3], [0, 4], [1, 4]], tf.gather(in2, [[0, 3], [1, 4]]))\n",
            "return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)",
            "return tf.tensor_scatter_nd_update(in1, [[0, 3], [1, 3], [0, 4], [1, 4]], tf.gather_nd(in2, [[0, 3], [1, 3], [0, 4], [1, 4]]))\n  ",
            "return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather(in2, [0, 3, 3, 6], axis=1))",
            "return tf.tensor_scatter_nd_update(in1, indices=[[0, 0, 3], [0, 0, 4], [0, 0, 5]], updates=tf.gather(in2, [0, 0, 3, 4, 5], axis=1))",
            "mask = tf.sequence_mask([3, 4], tf.shape(in1)[1])\nreturn tf.where(mask, in1, in2)\n",
            "return tf.concat([tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1), tf.concat([in2[:, :3], in1[:, 3:5], in2[:, 5:]], axis=1)], axis=0)",
            "updates = tf.gather(in2, [3, 4], axis=1)\nreturn tf.tensor_scatter_nd_update(in1, [[0, 3], [1, 3]], updates)\n",
            "return tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [1, 3]], tf.int32), tf.gather(in2, [0, 3], axis=1))",
            "return tf.concat([tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1), tf.concat([in2[:, :3], in1[:, 3:5], in2[:, 5:]], axis=1)], axis=0)",
            "updates = tf.concat([in2[:, :, :-4], in1[:, :, -3:]], axis=2)\nindices = tf.constant([[0], [3]])\nreturn tf.tensor_scatter_nd_update(in1, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather(in2, [3, 4]))",
            "selected_cols = tf.convert_to_tensor([3, 4])\nupdated_cols = tf.convert_to_tensor([3, 4])\nreturn tf.tensor_scatter_nd_update(in1, selected_cols, tf.gather(in2, updated_cols, axis=1))\n",
            "return tf.tensor_scatter_nd_update(in1, [(0, 3), (0, 4)], tf.gather(in2, [3, 4], axis=1))",
            "return tf.tensor_scatter_nd_update(in1, [[0, 3], [1, 3], [0, 4], [1, 4]], tf.gather(in2, [3, 3, 4, 4], axis=1))\n",
            "return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)\n",
            "return tf.concat([tf.gather(in1[0], [0, 1, 2, 3]), tf.gather(in2[1], [3, 4, 5, 6]), in1[0][5:], in1[0][6:]], axis=0)[tf.newaxis]",
            "in1 = tf.cast(in1, tf.int32)\nin2 = tf.cast(in2, tf.int32)\nindices = tf.constant([[0, 1], [0, 2], [0, 3, 4, 6], [1, 3, 4, 6]])\nupdates = tf.gather(in2, indices, axis=1)\nreturn tf.tensor_scatter_nd_update(in1, indices, updates)\n",
            "return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)",
            "return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4], [1, 5]], tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4], [1, 5]]))",
            "return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)\n",
            "return tf.concat([tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1), tf.concat([in2[:, :3], in1[:, 3:5], in2[:, 5:]], axis=1)], axis=0)",
            "return tf.concat([tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1), \n                     tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)], axis=0)",
            "out = tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4]], tf.gather(in2, [0, 0]))\nout = tf.tensor_scatter_nd_update(out, [[1, 3], [1, 4]], tf.gather(in2, [1, 1]))\nreturn out\n",
            "selected_cols = [2, 3, 4]\nmask = tf.one_hot(selected_cols, depth=tf.shape(in1)[1], dtype=tf.bool)\nmasked_values = tf.boolean_mask(in2, mask)\nupdated_tensor = tf.tensor_scatter_nd_update(in1, [[0], [1]], masked_values)\nreturn updated_tensor\n",
            "indices = tf.constant([[0, 1, 2, -2, -1, 5, 6], [0, 1, 2, 3, 4, 5, 6]])\nreturn tf.tensor_scatter_nd_update(in1, indices, tf.gather(in2, [3, 4, 6, 6, 5, 1], axis=1))\n"
        ],
        "tf_operators": {
            "tf.concat": 24,
            "tf.tensor_scatter_nd_update": 24,
            "tf.gather": 19,
            "tf.expand_dims": 3,
            "tf.constant": 9,
            "tf.gather_nd": 5,
            "tf.where": 2,
            "tf.slice": 2,
            "tf.shape": 2,
            "tf.sequence_mask": 1,
            "tf.int32": 2,
            "tf.convert_to_tensor": 1,
            "tf.newaxis": 1,
            "tf.cast": 1,
            "tf.one_hot": 1,
            "tf.bool": 1,
            "tf.boolean_mask": 1
        },
        "coverage_percentage": 50.0,
        "total_covered": 2,
        "total_in_target": 4,
        "parsed_constants": [
            [
                3,
                3,
                5,
                5,
                1,
                3,
                3,
                4,
                -2,
                1,
                0
            ],
            [
                0,
                3,
                0,
                4,
                0,
                3,
                1
            ],
            [
                0,
                3,
                1,
                3,
                3,
                3,
                0
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4
            ],
            [
                3,
                5,
                3,
                5
            ],
            [],
            [
                3,
                3,
                5,
                5,
                1,
                3,
                3,
                5,
                5,
                1,
                0
            ],
            [
                0,
                3,
                0,
                4,
                0,
                3,
                0,
                4
            ],
            [
                3,
                4,
                3,
                4,
                1
            ],
            [
                3,
                3,
                5,
                5,
                1
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4
            ],
            [
                3,
                3,
                5,
                1
            ],
            [
                3,
                3,
                5,
                5,
                1,
                0
            ],
            [
                0,
                3,
                1,
                3,
                3,
                3,
                0
            ],
            [
                3,
                3,
                5,
                1
            ],
            [
                0,
                0,
                0,
                2,
                3,
                3,
                0,
                0,
                3,
                2,
                3,
                4,
                2
            ],
            [
                3,
                3,
                5,
                5,
                1,
                3,
                3,
                5,
                5,
                1,
                0
            ],
            [
                3,
                3,
                5,
                5,
                1
            ],
            [
                3,
                3,
                5,
                -2,
                1
            ],
            [
                0,
                0,
                0,
                2,
                3,
                7,
                0,
                0,
                3,
                2,
                2,
                4,
                0,
                2,
                5,
                2,
                1,
                2,
                2
            ],
            [
                0,
                3,
                1,
                3,
                3,
                3
            ],
            [
                3,
                3,
                5,
                5,
                1,
                0,
                1
            ],
            [
                3,
                3,
                5,
                5,
                1,
                3,
                3,
                4,
                5,
                1,
                0
            ],
            [
                3,
                3,
                5,
                5,
                1,
                3,
                3,
                5,
                5,
                1
            ],
            [
                0,
                3,
                1,
                3,
                0,
                4,
                1,
                4,
                0,
                3,
                1,
                4
            ],
            [
                3,
                3,
                5,
                5,
                1
            ],
            [
                0,
                3,
                1,
                3,
                0,
                4,
                1,
                4,
                0,
                3,
                1,
                3,
                0,
                4,
                1,
                4
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                0,
                3,
                3,
                6,
                1
            ],
            [
                0,
                0,
                3,
                0,
                0,
                4,
                0,
                0,
                5,
                0,
                0,
                3,
                4,
                5,
                1
            ],
            [
                3,
                4,
                1
            ],
            [
                3,
                3,
                5,
                5,
                1,
                3,
                3,
                5,
                5,
                1,
                0
            ],
            [
                3,
                4,
                1,
                0,
                3,
                1,
                3
            ],
            [
                0,
                3,
                1,
                3,
                0,
                3,
                1
            ],
            [
                3,
                3,
                5,
                5,
                1,
                3,
                3,
                5,
                5,
                1,
                0
            ],
            [
                -4,
                -3,
                2,
                0,
                3
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                3,
                4
            ],
            [
                3,
                4,
                3,
                4,
                1
            ],
            [
                0,
                3,
                0,
                4,
                3,
                4,
                1
            ],
            [
                0,
                3,
                1,
                3,
                0,
                4,
                1,
                4,
                3,
                3,
                4,
                4,
                1
            ],
            [
                3,
                3,
                5,
                5,
                1
            ],
            [
                0,
                0,
                1,
                2,
                3,
                1,
                3,
                4,
                5,
                6,
                0,
                5,
                0,
                6,
                0
            ],
            [
                0,
                1,
                0,
                2,
                0,
                3,
                4,
                6,
                1,
                3,
                4,
                6,
                1
            ],
            [
                3,
                3,
                5,
                5,
                1
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                1,
                5,
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                1,
                5
            ],
            [
                3,
                3,
                5,
                5,
                1
            ],
            [
                3,
                3,
                5,
                5,
                1,
                3,
                3,
                5,
                5,
                1,
                0
            ],
            [
                3,
                3,
                5,
                5,
                1,
                3,
                3,
                5,
                5,
                1,
                0
            ],
            [
                0,
                3,
                0,
                4,
                0,
                0,
                1,
                3,
                1,
                4,
                1,
                1
            ],
            [
                2,
                3,
                4,
                1,
                0,
                1
            ],
            [
                0,
                1,
                2,
                -2,
                -1,
                5,
                6,
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                3,
                4,
                6,
                6,
                5,
                1,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            -1,
            -4,
            -3,
            -2
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 14,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 3,
                "shape": 0,
                "provided": 5,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 7,
                "shape": 1,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 6,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 7,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 9,
                "axis": 0,
                "shape": 0,
                "provided": 6,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 6,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 1,
                "shape": 0,
                "provided": 7,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 1,
                "shape": 0,
                "provided": 6,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 11,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 10,
                "axis": 0,
                "shape": 0,
                "provided": 10,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 2,
                "shape": 0,
                "provided": 12,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 172,
            "shape": 1,
            "tf_bool": 1,
            "provided": 266,
            "common": 189,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 16,
            "tf_int64": 0,
            "tf_int32": 3
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0009025270758122744,
                "tf.add(x, y)": 0.0009025270758122744,
                "tf.add_n(inputs)": 0.0009025270758122744,
                "tf.argmax(input, axis)": 0.0009025270758122744,
                "tf.argmin(input, axis)": 0.0009025270758122744,
                "tf.argsort(values, axis, stable=True)": 0.0009025270758122744,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0009025270758122744,
                "tf.boolean_mask(tensor, mask)": 0.0018050541516245488,
                "tf.broadcast_to(input, shape)": 0.0009025270758122744,
                "tf.cast(x, dtype)": 0.002707581227436823,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0009025270758122744,
                "tf.concat(values, axis)": 0.0388086642599278,
                "tf.constant(value)": 0.008122743682310469,
                "tf.constant(value, dtype)": 0.0018050541516245488,
                "tf.divide(x, y)": 0.0009025270758122744,
                "tf.equal(x, y)": 0.0009025270758122744,
                "tf.exp(x)": 0.0009025270758122744,
                "tf.expand_dims(input, axis)": 0.0036101083032490976,
                "tf.eye(num_rows)": 0.0009025270758122744,
                "tf.eye(num_rows, num_columns)": 0.0009025270758122744,
                "tf.eye(num_rows, dtype)": 0.0009025270758122744,
                "tf.fill(dims, value)": 0.0009025270758122744,
                "tf.gather(params, indices)": 0.009927797833935019,
                "tf.gather(params, indices, axis, batch_dims)": 0.010830324909747292,
                "tf.gather_nd(params, indices)": 0.005415162454873646,
                "tf.gather_nd(params, indices, batch_dims)": 0.0009025270758122744,
                "tf.greater(x, y)": 0.0009025270758122744,
                "tf.greater_equal(x, y)": 0.0009025270758122744,
                "tf.math.bincount(arr)": 0.0009025270758122744,
                "tf.math.ceil(x)": 0.0009025270758122744,
                "tf.math.count_nonzero(input)": 0.0009025270758122744,
                "tf.math.count_nonzero(input, axis)": 0.0009025270758122744,
                "tf.math.cumsum(x, axis)": 0.0009025270758122744,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0009025270758122744,
                "tf.math.divide_no_nan(x, y)": 0.0009025270758122744,
                "tf.math.floor(x)": 0.0009025270758122744,
                "tf.math.log(x)": 0.0009025270758122744,
                "tf.math.logical_and(x, y)": 0.0009025270758122744,
                "tf.math.logical_not(x)": 0.0009025270758122744,
                "tf.math.logical_or(x, y)": 0.0009025270758122744,
                "tf.math.logical_xor(x, y)": 0.0009025270758122744,
                "tf.math.negative(x)": 0.0009025270758122744,
                "tf.math.reciprocal(x)": 0.0009025270758122744,
                "tf.math.reciprocal_no_nan(x)": 0.0009025270758122744,
                "tf.math.segment_max(data, segment_ids)": 0.0009025270758122744,
                "tf.math.segment_mean(data, segment_ids)": 0.0009025270758122744,
                "tf.math.segment_min(data, segment_ids)": 0.0009025270758122744,
                "tf.math.segment_prod(data, segment_ids)": 0.0009025270758122744,
                "tf.math.segment_sum(data, segment_ids)": 0.0009025270758122744,
                "tf.math.squared_difference(x, y)": 0.0009025270758122744,
                "tf.math.top_k(input, k)": 0.0009025270758122744,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0009025270758122744,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0009025270758122744,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0009025270758122744,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0009025270758122744,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0009025270758122744,
                "tf.matmul(a, b)": 0.0009025270758122744,
                "tf.maximum(x, y)": 0.0009025270758122744,
                "tf.minimum(x, y)": 0.0009025270758122744,
                "tf.multiply(x, y)": 0.0009025270758122744,
                "tf.not_equal(x, y)": 0.0009025270758122744,
                "tf.one_hot(indices, depth)": 0.0018050541516245488,
                "tf.ones(shape)": 0.0009025270758122744,
                "tf.ones_like(input)": 0.0009025270758122744,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0009025270758122744,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0009025270758122744,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0009025270758122744,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0009025270758122744,
                "tf.range(start)": 0.0009025270758122744,
                "tf.range(start, limit, delta)": 0.0009025270758122744,
                "tf.reduce_any(input_tensor, axis)": 0.0009025270758122744,
                "tf.reduce_all(input_tensor, axis)": 0.0009025270758122744,
                "tf.reduce_max(input_tensor)": 0.0009025270758122744,
                "tf.reduce_max(input_tensor, axis)": 0.0009025270758122744,
                "tf.reduce_mean(input_tensor)": 0.0009025270758122744,
                "tf.reduce_mean(input_tensor, axis)": 0.0009025270758122744,
                "tf.reduce_min(input_tensor)": 0.0009025270758122744,
                "tf.reduce_min(input_tensor, axis)": 0.0009025270758122744,
                "tf.reduce_prod(input_tensor, axis)": 0.0009025270758122744,
                "tf.reduce_sum(input_tensor)": 0.0009025270758122744,
                "tf.reduce_sum(input_tensor, axis)": 0.0009025270758122744,
                "tf.repeat(input, repeats)": 0.0009025270758122744,
                "tf.repeat(input, repeats, axis)": 0.0009025270758122744,
                "tf.reshape(tensor, shape)": 0.0009025270758122744,
                "tf.reverse(tensor, axis)": 0.0009025270758122744,
                "tf.roll(input, shift, axis)": 0.0009025270758122744,
                "tf.round(x)": 0.0009025270758122744,
                "tf.scatter_nd(indices, updates, shape)": 0.0009025270758122744,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0009025270758122744,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0009025270758122744,
                "tf.sequence_mask(lengths)": 0.0009025270758122744,
                "tf.sequence_mask(lengths, maxlen)": 0.0018050541516245488,
                "tf.shape(input)": 0.002707581227436823,
                "tf.sign(x)": 0.0009025270758122744,
                "tf.sort(values, axis)": 0.0009025270758122744,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0009025270758122744,
                "tf.sqrt(x)": 0.0009025270758122744,
                "tf.square(x)": 0.0009025270758122744,
                "tf.squeeze(input)": 0.0009025270758122744,
                "tf.squeeze(input, axis)": 0.0009025270758122744,
                "tf.stack(values, axis)": 0.0009025270758122744,
                "tf.subtract(x, y)": 0.0009025270758122744,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.023465703971119134,
                "tf.tensordot(a, b, axes)": 0.0009025270758122744,
                "tf.tile(input, multiples)": 0.0009025270758122744,
                "tf.transpose(a)": 0.0009025270758122744,
                "tf.transpose(a, perm)": 0.0009025270758122744,
                "tf.unique_with_counts(x)": 0.0009025270758122744,
                "tf.unstack(value, axis)": 0.0009025270758122744,
                "tf.where(condition)": 0.0009025270758122744,
                "tf.where(condition, x, y)": 0.002707581227436823,
                "tf.zeros(shape)": 0.0009025270758122744,
                "tf.zeros_like(input)": 0.0009025270758122744,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0009025270758122744,
                "tf.sparse.add(a, b)": 0.0009025270758122744,
                "tf.sparse.concat(axis, sp_inputs)": 0.0009025270758122744,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0009025270758122744,
                "tf.sparse.from_dense(tensor)": 0.0009025270758122744,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0009025270758122744,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0009025270758122744,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0009025270758122744,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0009025270758122744,
                "tf.sparse.reset_shape(sp_input)": 0.0009025270758122744,
                "tf.sparse.reshape(sp_input, shape)": 0.0009025270758122744,
                "tf.sparse.retain(sp_input, to_retain)": 0.0009025270758122744,
                "tf.sparse.slice(sp_input, start, size)": 0.0009025270758122744,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0009025270758122744,
                "tf.sparse.to_dense(sp_input)": 0.0009025270758122744,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0009025270758122744,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0009025270758122744,
                "tf.sparse.transpose(sp_input)": 0.0009025270758122744,
                "tf.sparse.transpose(sp_input, perm)": 0.0009025270758122744,
                "IndexingAxis1Operation": 0.0009025270758122744,
                "IndexingOperation": 0.007220216606498195,
                "PairCreationOperation": 0.08303249097472924,
                "SingletonTupleCreationOperation": 0.0009025270758122744,
                "SlicingAxis0BothOperation": 0.0009025270758122744,
                "SlicingAxis0LeftOperation": 0.002707581227436823,
                "SlicingAxis0RightOperation": 0.0009025270758122744,
                "SlicingAxis1BothOperation": 0.02707581227436823,
                "SlicingAxis1LeftOperation": 0.027978339350180504,
                "SlicingAxis1RightOperation": 0.027978339350180504,
                "TripleCreationOperation": 0.002707581227436823,
                "PROVIDED_CONSTANT_WEIGHT": 0.24097472924187727,
                "COMMON_CONSTANT_WEIGHT": 0.17148014440433212,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0009025270758122744,
                "INPUT_VARIABLE_WEIGHT": 0.15613718411552346,
                "AXIS_CONSTANT_WEIGHT": 0.015342960288808664,
                "SHAPE_CONSTANT_WEIGHT": 0.0018050541516245488,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0009025270758122744,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0036101083032490976,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0009025270758122744,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0018050541516245488,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0009025270758122744
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 10,
                "tf.add(x, y)": 10,
                "tf.add_n(inputs)": 10,
                "tf.argmax(input, axis)": 10,
                "tf.argmin(input, axis)": 10,
                "tf.argsort(values, axis, stable=True)": 10,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 10,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 10,
                "tf.cast(x, dtype)": 9,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 10,
                "tf.concat(values, axis)": 5,
                "tf.constant(value)": 7,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 10,
                "tf.equal(x, y)": 10,
                "tf.exp(x)": 10,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 10,
                "tf.eye(num_rows, num_columns)": 10,
                "tf.eye(num_rows, dtype)": 10,
                "tf.fill(dims, value)": 10,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 10,
                "tf.greater(x, y)": 10,
                "tf.greater_equal(x, y)": 10,
                "tf.math.bincount(arr)": 10,
                "tf.math.ceil(x)": 10,
                "tf.math.count_nonzero(input)": 10,
                "tf.math.count_nonzero(input, axis)": 10,
                "tf.math.cumsum(x, axis)": 10,
                "tf.math.cumsum(x, axis, exclusive=True)": 10,
                "tf.math.divide_no_nan(x, y)": 10,
                "tf.math.floor(x)": 10,
                "tf.math.log(x)": 10,
                "tf.math.logical_and(x, y)": 10,
                "tf.math.logical_not(x)": 10,
                "tf.math.logical_or(x, y)": 10,
                "tf.math.logical_xor(x, y)": 10,
                "tf.math.negative(x)": 10,
                "tf.math.reciprocal(x)": 10,
                "tf.math.reciprocal_no_nan(x)": 10,
                "tf.math.segment_max(data, segment_ids)": 10,
                "tf.math.segment_mean(data, segment_ids)": 10,
                "tf.math.segment_min(data, segment_ids)": 10,
                "tf.math.segment_prod(data, segment_ids)": 10,
                "tf.math.segment_sum(data, segment_ids)": 10,
                "tf.math.squared_difference(x, y)": 10,
                "tf.math.top_k(input, k)": 10,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 10,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 10,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 10,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 10,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 10,
                "tf.matmul(a, b)": 10,
                "tf.maximum(x, y)": 10,
                "tf.minimum(x, y)": 10,
                "tf.multiply(x, y)": 10,
                "tf.not_equal(x, y)": 10,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 10,
                "tf.ones_like(input)": 10,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 10,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 10,
                "tf.pad(tensor, paddings, mode='REFLECT')": 10,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 10,
                "tf.range(start)": 10,
                "tf.range(start, limit, delta)": 10,
                "tf.reduce_any(input_tensor, axis)": 10,
                "tf.reduce_all(input_tensor, axis)": 10,
                "tf.reduce_max(input_tensor)": 10,
                "tf.reduce_max(input_tensor, axis)": 10,
                "tf.reduce_mean(input_tensor)": 10,
                "tf.reduce_mean(input_tensor, axis)": 10,
                "tf.reduce_min(input_tensor)": 10,
                "tf.reduce_min(input_tensor, axis)": 10,
                "tf.reduce_prod(input_tensor, axis)": 10,
                "tf.reduce_sum(input_tensor)": 10,
                "tf.reduce_sum(input_tensor, axis)": 10,
                "tf.repeat(input, repeats)": 10,
                "tf.repeat(input, repeats, axis)": 10,
                "tf.reshape(tensor, shape)": 10,
                "tf.reverse(tensor, axis)": 10,
                "tf.roll(input, shift, axis)": 10,
                "tf.round(x)": 10,
                "tf.scatter_nd(indices, updates, shape)": 10,
                "tf.searchsorted(sorted_sequence, values, side='left')": 10,
                "tf.searchsorted(sorted_sequence, values, side='right')": 10,
                "tf.sequence_mask(lengths)": 10,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 9,
                "tf.sign(x)": 10,
                "tf.sort(values, axis)": 10,
                "tf.sort(values, axis, direction='DESCENDING')": 10,
                "tf.sqrt(x)": 10,
                "tf.square(x)": 10,
                "tf.squeeze(input)": 10,
                "tf.squeeze(input, axis)": 10,
                "tf.stack(values, axis)": 10,
                "tf.subtract(x, y)": 10,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 5,
                "tf.tensordot(a, b, axes)": 10,
                "tf.tile(input, multiples)": 10,
                "tf.transpose(a)": 10,
                "tf.transpose(a, perm)": 10,
                "tf.unique_with_counts(x)": 10,
                "tf.unstack(value, axis)": 10,
                "tf.where(condition)": 10,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 10,
                "tf.zeros_like(input)": 10,
                "tf.SparseTensor(indices, values, dense_shape)": 10,
                "tf.sparse.add(a, b)": 10,
                "tf.sparse.concat(axis, sp_inputs)": 10,
                "tf.sparse.expand_dims(sp_input, axis)": 10,
                "tf.sparse.from_dense(tensor)": 10,
                "tf.sparse.maximum(sp_a, sp_b)": 10,
                "tf.sparse.minimum(sp_a, sp_b)": 10,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 10,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 10,
                "tf.sparse.reset_shape(sp_input)": 10,
                "tf.sparse.reshape(sp_input, shape)": 10,
                "tf.sparse.retain(sp_input, to_retain)": 10,
                "tf.sparse.slice(sp_input, start, size)": 10,
                "tf.sparse.split(sp_input, num_split, axis)": 10,
                "tf.sparse.to_dense(sp_input)": 10,
                "tf.sparse.to_dense(sp_input, default_value)": 10,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 10,
                "tf.sparse.transpose(sp_input)": 10,
                "tf.sparse.transpose(sp_input, perm)": 10,
                "IndexingAxis1Operation": 10,
                "IndexingOperation": 7,
                "PairCreationOperation": 4,
                "SingletonTupleCreationOperation": 10,
                "SlicingAxis0BothOperation": 10,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 10,
                "SlicingAxis1BothOperation": 5,
                "SlicingAxis1LeftOperation": 5,
                "SlicingAxis1RightOperation": 5,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 2,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 10,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 6,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 10,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 10,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 10
            }
        }
    },
    {
        "name": "stackoverflow_04",
        "description": "index into the tensor",
        "target_program": "tf.gather_nd(in1, tf.stack((in2, in3), axis=-1))",
        "source": "https://stackoverflow.com/questions/33736795/tensorflow-numpy-like-tensor-indexing",
        "constants": "[]",
        "examples": {
            "inputs": "[  [[5., 2.], [1., 3.], [0., -1.]]]",
            "outputs": "[[[5., 5.], [1., 1.], [0., 0.]],  [[2., 2.], [3., 3.], [-1., -1.]]]"
        },
        "completions": [
            "return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 2])",
            "return tf.expand_dims(in1, axis=1)\n",
            "indices = [[i, i] for i in range(in1.shape[0])]\nreturn tf.gather_nd(in1, indices)\n  ",
            "return tf.tile(tf.expand_dims(in1, 2), [1, 1, 2])",
            "return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])",
            "return tf.stack([in1]*2, axis=2)",
            "indices = tf.stack([tf.range(tf.shape(in1)[0]), tf.argmax(in1, axis=1)], axis=1)\nupdates = tf.gather_nd(in1, indices)\nreturn tf.tile(tf.expand_dims(updates, axis=1), [1, tf.shape(in1)[1]])\n",
            "return tf.stack([in1, in1], axis=2)",
            "def transform(in1):\n    return tf.gather_nd(in1, tf.constant([[0],[1]]))\n ",
            "return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])\n",
            "return tf.stack([in1, in1], axis=2)\n",
            "def transform(in1):\n    return tf.gather_nd(in1, tf.constant([[0],[2]]))\n",
            "return tf.repeat(tf.expand_dims(in1, axis=2), 2, axis=2)",
            "def transform(in1):\n    return tf.gather_nd(in1, indices=[[0],[0]])[:,:,tf.newaxis]\n",
            "return tf.repeat(tf.expand_dims(in1, -1), 2, axis=2)\n",
            "return tf.gather(tf.tile(in1, [2, 1]), [[0, 0], [1, 1], [2, 2]])",
            "return tf.tile(tf.expand_dims(in1, 1), [1, 2, 2])\n",
            "return tf.tile(tf.expand_dims(in1, axis=1), [1, 2, 1])\n",
            "return tf.expand_dims(in1, axis=-1)\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=0), 2, axis=0)\n",
            "return tf.expand_dims(in1, axis=-1) * tf.ones([1, 1, 2], dtype=tf.float32)",
            "return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])\n",
            "indices = tf.stack([tf.range(tf.shape(in1)[0]), tf.cast(in1, tf.int32)], axis=1)\nreturn tf.gather_nd(in1, indices)\n",
            "return tf.tile(tf.expand_dims(in1, axis=1), [1, 2, 1])",
            "return tf.repeat(tf.expand_dims(in1, 2), 2, axis=2)",
            "return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 2])\n",
            "def transform(in1):\n    return tf.gather_nd(in1, [[0], [1]])\n",
            "def transform(in1):\n    return tf.gather_nd(in1, [[0], [1], [2]])\n",
            "indices = tf.stack([tf.range(in1.shape[0]), tf.cast(in1, tf.int32)], axis=1)\nreturn tf.gather_nd(in1, indices)\n",
            "indices = tf.stack([tf.range(tf.shape(in1)[0]), tf.argmax(in1, axis=1)], axis=1)\nreturn tf.expand_dims(tf.gather_nd(in1, indices), axis=1)\n",
            "return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 2])\n",
            "return tf.gather(in1, [0, 0], axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=0)\n",
            "return tf.tile(tf.expand_dims(in1, 1), [1, 2, 1])\n",
            "stacked = tf.stack([in1]*2, axis=2)\nreturn tf.unstack(stacked, axis=0)\n",
            "return tf.expand_dims(in1, axis=2) * tf.one_hot(tf.range(2), in1.shape[1])\n",
            "return tf.concat([tf.expand_dims(in1, axis=-1)] * 2, axis=2)",
            "return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])",
            "return tf.stack([in1, in1], axis=2)",
            "return tf.tile(tf.expand_dims(in1, axis=-1), [1, 1, 2])\n",
            "return tf.broadcast_to(tf.expand_dims(in1, axis=-1), [in1.shape[0], in1.shape[1], 2])",
            "return tf.repeat(tf.expand_dims(in1, axis=-1), repeats=2, axis=-1)",
            "return tf.repeat(tf.expand_dims(in1, axis=2), 2, axis=2)",
            "def transform(in1):\n    return tf.gather_nd(in1, [[0], [1], [2]])\n",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.repeat(tf.expand_dims(in1, axis=2), 2, axis=2)",
            "return tf.gather_nd(tf.expand_dims(in1, axis=2), [[[0]], [[1]]])",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])",
            "return tf.tile(tf.expand_dims(in1, axis=-1), [1, 1, 2])"
        ],
        "tf_operators": {
            "tf.tile": 17,
            "tf.expand_dims": 31,
            "tf.gather_nd": 12,
            "tf.stack": 11,
            "tf.shape": 3,
            "tf.range": 5,
            "tf.argmax": 2,
            "tf.constant": 2,
            "tf.repeat": 7,
            "tf.newaxis": 1,
            "tf.gather": 2,
            "tf.float32": 1,
            "tf.ones": 1,
            "tf.cast": 2,
            "tf.int32": 2,
            "tf.roll": 1,
            "tf.unstack": 1,
            "tf.one_hot": 1,
            "tf.concat": 1,
            "tf.broadcast_to": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                2,
                1,
                1,
                2
            ],
            [
                1
            ],
            [
                0
            ],
            [
                2,
                1,
                1,
                2
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [
                2,
                2
            ],
            [
                0,
                1,
                1,
                1,
                1,
                1
            ],
            [
                2
            ],
            [
                0,
                1
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [
                2
            ],
            [
                0,
                2
            ],
            [
                2,
                2,
                2
            ],
            [
                0,
                0
            ],
            [
                -1,
                2,
                2
            ],
            [
                2,
                1,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            [
                1,
                1,
                2,
                2
            ],
            [
                1,
                1,
                2,
                1
            ],
            [
                -1
            ],
            [
                0,
                2,
                0
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [
                0,
                1
            ],
            [
                1,
                1,
                2,
                1
            ],
            [
                2,
                2,
                2
            ],
            [
                2,
                1,
                1,
                2
            ],
            [
                0,
                1
            ],
            [
                0,
                1,
                2
            ],
            [
                0,
                1
            ],
            [
                0,
                1,
                1,
                1
            ],
            [
                2,
                1,
                1,
                2
            ],
            [
                0,
                0,
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                1,
                2,
                1
            ],
            [
                2,
                2,
                0
            ],
            [
                2,
                2,
                1
            ],
            [
                -1,
                2,
                2
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [
                2
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [
                -1,
                0,
                1,
                2
            ],
            [
                -1,
                2,
                -1
            ],
            [
                2,
                2,
                2
            ],
            [
                0,
                1,
                2
            ],
            [
                2
            ],
            [
                2,
                2,
                2
            ],
            [
                2,
                0,
                1
            ],
            [
                2
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [
                -1,
                1,
                1,
                2
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 8,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 75,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 94,
            "shape_tuple": 0,
            "tf_float32": 1,
            "axis": 58,
            "tf_int64": 0,
            "tf_int32": 2
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.002044989775051125,
                "tf.add(x, y)": 0.002044989775051125,
                "tf.add_n(inputs)": 0.002044989775051125,
                "tf.argmax(input, axis)": 0.006134969325153374,
                "tf.argmin(input, axis)": 0.002044989775051125,
                "tf.argsort(values, axis, stable=True)": 0.002044989775051125,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.002044989775051125,
                "tf.boolean_mask(tensor, mask)": 0.002044989775051125,
                "tf.broadcast_to(input, shape)": 0.00408997955010225,
                "tf.cast(x, dtype)": 0.006134969325153374,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.002044989775051125,
                "tf.concat(values, axis)": 0.00408997955010225,
                "tf.constant(value)": 0.006134969325153374,
                "tf.constant(value, dtype)": 0.002044989775051125,
                "tf.divide(x, y)": 0.002044989775051125,
                "tf.equal(x, y)": 0.002044989775051125,
                "tf.exp(x)": 0.002044989775051125,
                "tf.expand_dims(input, axis)": 0.065439672801636,
                "tf.eye(num_rows)": 0.002044989775051125,
                "tf.eye(num_rows, num_columns)": 0.002044989775051125,
                "tf.eye(num_rows, dtype)": 0.002044989775051125,
                "tf.fill(dims, value)": 0.002044989775051125,
                "tf.gather(params, indices)": 0.00408997955010225,
                "tf.gather(params, indices, axis, batch_dims)": 0.00408997955010225,
                "tf.gather_nd(params, indices)": 0.024539877300613498,
                "tf.gather_nd(params, indices, batch_dims)": 0.00408997955010225,
                "tf.greater(x, y)": 0.002044989775051125,
                "tf.greater_equal(x, y)": 0.002044989775051125,
                "tf.math.bincount(arr)": 0.002044989775051125,
                "tf.math.ceil(x)": 0.002044989775051125,
                "tf.math.count_nonzero(input)": 0.002044989775051125,
                "tf.math.count_nonzero(input, axis)": 0.002044989775051125,
                "tf.math.cumsum(x, axis)": 0.002044989775051125,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.002044989775051125,
                "tf.math.divide_no_nan(x, y)": 0.002044989775051125,
                "tf.math.floor(x)": 0.002044989775051125,
                "tf.math.log(x)": 0.002044989775051125,
                "tf.math.logical_and(x, y)": 0.002044989775051125,
                "tf.math.logical_not(x)": 0.002044989775051125,
                "tf.math.logical_or(x, y)": 0.002044989775051125,
                "tf.math.logical_xor(x, y)": 0.002044989775051125,
                "tf.math.negative(x)": 0.002044989775051125,
                "tf.math.reciprocal(x)": 0.002044989775051125,
                "tf.math.reciprocal_no_nan(x)": 0.002044989775051125,
                "tf.math.segment_max(data, segment_ids)": 0.002044989775051125,
                "tf.math.segment_mean(data, segment_ids)": 0.002044989775051125,
                "tf.math.segment_min(data, segment_ids)": 0.002044989775051125,
                "tf.math.segment_prod(data, segment_ids)": 0.002044989775051125,
                "tf.math.segment_sum(data, segment_ids)": 0.002044989775051125,
                "tf.math.squared_difference(x, y)": 0.002044989775051125,
                "tf.math.top_k(input, k)": 0.002044989775051125,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.002044989775051125,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.002044989775051125,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.002044989775051125,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.002044989775051125,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.002044989775051125,
                "tf.matmul(a, b)": 0.002044989775051125,
                "tf.maximum(x, y)": 0.002044989775051125,
                "tf.minimum(x, y)": 0.002044989775051125,
                "tf.multiply(x, y)": 0.002044989775051125,
                "tf.not_equal(x, y)": 0.002044989775051125,
                "tf.one_hot(indices, depth)": 0.00408997955010225,
                "tf.ones(shape)": 0.00408997955010225,
                "tf.ones_like(input)": 0.002044989775051125,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.002044989775051125,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.002044989775051125,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.002044989775051125,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.002044989775051125,
                "tf.range(start)": 0.012269938650306749,
                "tf.range(start, limit, delta)": 0.002044989775051125,
                "tf.reduce_any(input_tensor, axis)": 0.002044989775051125,
                "tf.reduce_all(input_tensor, axis)": 0.002044989775051125,
                "tf.reduce_max(input_tensor)": 0.002044989775051125,
                "tf.reduce_max(input_tensor, axis)": 0.002044989775051125,
                "tf.reduce_mean(input_tensor)": 0.002044989775051125,
                "tf.reduce_mean(input_tensor, axis)": 0.002044989775051125,
                "tf.reduce_min(input_tensor)": 0.002044989775051125,
                "tf.reduce_min(input_tensor, axis)": 0.002044989775051125,
                "tf.reduce_prod(input_tensor, axis)": 0.002044989775051125,
                "tf.reduce_sum(input_tensor)": 0.002044989775051125,
                "tf.reduce_sum(input_tensor, axis)": 0.002044989775051125,
                "tf.repeat(input, repeats)": 0.002044989775051125,
                "tf.repeat(input, repeats, axis)": 0.002044989775051125,
                "tf.reshape(tensor, shape)": 0.002044989775051125,
                "tf.reverse(tensor, axis)": 0.002044989775051125,
                "tf.roll(input, shift, axis)": 0.00408997955010225,
                "tf.round(x)": 0.002044989775051125,
                "tf.scatter_nd(indices, updates, shape)": 0.002044989775051125,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.002044989775051125,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.002044989775051125,
                "tf.sequence_mask(lengths)": 0.002044989775051125,
                "tf.sequence_mask(lengths, maxlen)": 0.002044989775051125,
                "tf.shape(input)": 0.010224948875255624,
                "tf.sign(x)": 0.002044989775051125,
                "tf.sort(values, axis)": 0.002044989775051125,
                "tf.sort(values, axis, direction='DESCENDING')": 0.002044989775051125,
                "tf.sqrt(x)": 0.002044989775051125,
                "tf.square(x)": 0.002044989775051125,
                "tf.squeeze(input)": 0.002044989775051125,
                "tf.squeeze(input, axis)": 0.002044989775051125,
                "tf.stack(values, axis)": 0.024539877300613498,
                "tf.subtract(x, y)": 0.002044989775051125,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.002044989775051125,
                "tf.tensordot(a, b, axes)": 0.002044989775051125,
                "tf.tile(input, multiples)": 0.03680981595092025,
                "tf.transpose(a)": 0.002044989775051125,
                "tf.transpose(a, perm)": 0.002044989775051125,
                "tf.unique_with_counts(x)": 0.002044989775051125,
                "tf.unstack(value, axis)": 0.00408997955010225,
                "tf.where(condition)": 0.002044989775051125,
                "tf.where(condition, x, y)": 0.002044989775051125,
                "tf.zeros(shape)": 0.002044989775051125,
                "tf.zeros_like(input)": 0.002044989775051125,
                "tf.SparseTensor(indices, values, dense_shape)": 0.002044989775051125,
                "tf.sparse.add(a, b)": 0.002044989775051125,
                "tf.sparse.concat(axis, sp_inputs)": 0.002044989775051125,
                "tf.sparse.expand_dims(sp_input, axis)": 0.002044989775051125,
                "tf.sparse.from_dense(tensor)": 0.002044989775051125,
                "tf.sparse.maximum(sp_a, sp_b)": 0.002044989775051125,
                "tf.sparse.minimum(sp_a, sp_b)": 0.002044989775051125,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.002044989775051125,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.002044989775051125,
                "tf.sparse.reset_shape(sp_input)": 0.002044989775051125,
                "tf.sparse.reshape(sp_input, shape)": 0.002044989775051125,
                "tf.sparse.retain(sp_input, to_retain)": 0.002044989775051125,
                "tf.sparse.slice(sp_input, start, size)": 0.002044989775051125,
                "tf.sparse.split(sp_input, num_split, axis)": 0.002044989775051125,
                "tf.sparse.to_dense(sp_input)": 0.002044989775051125,
                "tf.sparse.to_dense(sp_input, default_value)": 0.002044989775051125,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.002044989775051125,
                "tf.sparse.transpose(sp_input)": 0.002044989775051125,
                "tf.sparse.transpose(sp_input, perm)": 0.002044989775051125,
                "IndexingAxis1Operation": 0.002044989775051125,
                "IndexingOperation": 0.02044989775051125,
                "PairCreationOperation": 0.002044989775051125,
                "SingletonTupleCreationOperation": 0.002044989775051125,
                "SlicingAxis0BothOperation": 0.002044989775051125,
                "SlicingAxis0LeftOperation": 0.002044989775051125,
                "SlicingAxis0RightOperation": 0.002044989775051125,
                "SlicingAxis1BothOperation": 0.002044989775051125,
                "SlicingAxis1LeftOperation": 0.002044989775051125,
                "SlicingAxis1RightOperation": 0.002044989775051125,
                "TripleCreationOperation": 0.00408997955010225,
                "PROVIDED_CONSTANT_WEIGHT": 0.002044989775051125,
                "COMMON_CONSTANT_WEIGHT": 0.19427402862985685,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.002044989775051125,
                "INPUT_VARIABLE_WEIGHT": 0.1554192229038855,
                "AXIS_CONSTANT_WEIGHT": 0.12065439672801637,
                "SHAPE_CONSTANT_WEIGHT": 0.002044989775051125,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.002044989775051125,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.006134969325153374,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.00408997955010225,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.002044989775051125,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.002044989775051125
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 7,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 4,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 5,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 6,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 7,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 5,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 5,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 6,
                "PairCreationOperation": 9,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 2,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 3,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_05",
        "description": "tensor multiplication like np.tensordot",
        "target_program": "tf.tensordot(in1, in2, 1)",
        "source": "https://stackoverflow.com/questions/43067338/tensor-multiplication-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[4, 3, 1], [6, 5, 2]],[[[5, 5]], [[1, 5]], [[6, 0]]],]",
            "outputs": "[[[29, 35]], [[47, 55]]]"
        },
        "completions": [
            "output = tf.tensordot(in1, in2, axes=1)\nreturn output\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "\nreturn tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "result = tf.tensordot(in1, in2, axes=1)\nreturn result\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "\nreturn tf.matmul(in1, in2)\n",
            "output = tf.tensordot(in1, in2, axes=1)\nreturn output\n",
            "return tf.tensordot(in1, in2, [[1], [0]])\n  ",
            "result = tf.tensordot(in1, in2, axes=[[1],[0]])\nreturn result\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "result = tf.tensordot(in1, in2, axes=1)\nreturn result\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=[[1], [0]])",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)",
            "output = tf.tensordot(in1, in2, axes=1)\nreturn output\n",
            "return tf.tensordot(in1, in2, axes=[[1], [0]])\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=2, keepdims=True)\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "output = tf.tensordot(in1, in2, axes=1)\nreturn output\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.matmul(in1, in2)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "result = tf.tensordot(in1, in2, axes=1)\nreturn result\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, [[1], [0]])",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=[[1], [0]])",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=[[1], [0]])\n",
            "return tf.tensordot(in1, in2, axes=1)\n"
        ],
        "tf_operators": {
            "tf.tensordot": 47,
            "tf.matmul": 2,
            "tf.reduce_sum": 1,
            "tf.multiply": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 100,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 55,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 1,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.002770083102493075,
                "tf.add(x, y)": 0.002770083102493075,
                "tf.add_n(inputs)": 0.002770083102493075,
                "tf.argmax(input, axis)": 0.002770083102493075,
                "tf.argmin(input, axis)": 0.002770083102493075,
                "tf.argsort(values, axis, stable=True)": 0.002770083102493075,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.002770083102493075,
                "tf.boolean_mask(tensor, mask)": 0.002770083102493075,
                "tf.broadcast_to(input, shape)": 0.002770083102493075,
                "tf.cast(x, dtype)": 0.002770083102493075,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.002770083102493075,
                "tf.concat(values, axis)": 0.002770083102493075,
                "tf.constant(value)": 0.002770083102493075,
                "tf.constant(value, dtype)": 0.002770083102493075,
                "tf.divide(x, y)": 0.002770083102493075,
                "tf.equal(x, y)": 0.002770083102493075,
                "tf.exp(x)": 0.002770083102493075,
                "tf.expand_dims(input, axis)": 0.002770083102493075,
                "tf.eye(num_rows)": 0.002770083102493075,
                "tf.eye(num_rows, num_columns)": 0.002770083102493075,
                "tf.eye(num_rows, dtype)": 0.002770083102493075,
                "tf.fill(dims, value)": 0.002770083102493075,
                "tf.gather(params, indices)": 0.002770083102493075,
                "tf.gather(params, indices, axis, batch_dims)": 0.002770083102493075,
                "tf.gather_nd(params, indices)": 0.002770083102493075,
                "tf.gather_nd(params, indices, batch_dims)": 0.002770083102493075,
                "tf.greater(x, y)": 0.002770083102493075,
                "tf.greater_equal(x, y)": 0.002770083102493075,
                "tf.math.bincount(arr)": 0.002770083102493075,
                "tf.math.ceil(x)": 0.002770083102493075,
                "tf.math.count_nonzero(input)": 0.002770083102493075,
                "tf.math.count_nonzero(input, axis)": 0.002770083102493075,
                "tf.math.cumsum(x, axis)": 0.002770083102493075,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.002770083102493075,
                "tf.math.divide_no_nan(x, y)": 0.002770083102493075,
                "tf.math.floor(x)": 0.002770083102493075,
                "tf.math.log(x)": 0.002770083102493075,
                "tf.math.logical_and(x, y)": 0.002770083102493075,
                "tf.math.logical_not(x)": 0.002770083102493075,
                "tf.math.logical_or(x, y)": 0.002770083102493075,
                "tf.math.logical_xor(x, y)": 0.002770083102493075,
                "tf.math.negative(x)": 0.002770083102493075,
                "tf.math.reciprocal(x)": 0.002770083102493075,
                "tf.math.reciprocal_no_nan(x)": 0.002770083102493075,
                "tf.math.segment_max(data, segment_ids)": 0.002770083102493075,
                "tf.math.segment_mean(data, segment_ids)": 0.002770083102493075,
                "tf.math.segment_min(data, segment_ids)": 0.002770083102493075,
                "tf.math.segment_prod(data, segment_ids)": 0.002770083102493075,
                "tf.math.segment_sum(data, segment_ids)": 0.002770083102493075,
                "tf.math.squared_difference(x, y)": 0.002770083102493075,
                "tf.math.top_k(input, k)": 0.002770083102493075,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.002770083102493075,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.002770083102493075,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.002770083102493075,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.002770083102493075,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.002770083102493075,
                "tf.matmul(a, b)": 0.008310249307479225,
                "tf.maximum(x, y)": 0.002770083102493075,
                "tf.minimum(x, y)": 0.002770083102493075,
                "tf.multiply(x, y)": 0.00554016620498615,
                "tf.not_equal(x, y)": 0.002770083102493075,
                "tf.one_hot(indices, depth)": 0.002770083102493075,
                "tf.ones(shape)": 0.002770083102493075,
                "tf.ones_like(input)": 0.002770083102493075,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.002770083102493075,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.002770083102493075,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.002770083102493075,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.002770083102493075,
                "tf.range(start)": 0.002770083102493075,
                "tf.range(start, limit, delta)": 0.002770083102493075,
                "tf.reduce_any(input_tensor, axis)": 0.002770083102493075,
                "tf.reduce_all(input_tensor, axis)": 0.002770083102493075,
                "tf.reduce_max(input_tensor)": 0.002770083102493075,
                "tf.reduce_max(input_tensor, axis)": 0.002770083102493075,
                "tf.reduce_mean(input_tensor)": 0.002770083102493075,
                "tf.reduce_mean(input_tensor, axis)": 0.002770083102493075,
                "tf.reduce_min(input_tensor)": 0.002770083102493075,
                "tf.reduce_min(input_tensor, axis)": 0.002770083102493075,
                "tf.reduce_prod(input_tensor, axis)": 0.002770083102493075,
                "tf.reduce_sum(input_tensor)": 0.002770083102493075,
                "tf.reduce_sum(input_tensor, axis)": 0.002770083102493075,
                "tf.repeat(input, repeats)": 0.002770083102493075,
                "tf.repeat(input, repeats, axis)": 0.002770083102493075,
                "tf.reshape(tensor, shape)": 0.002770083102493075,
                "tf.reverse(tensor, axis)": 0.002770083102493075,
                "tf.roll(input, shift, axis)": 0.002770083102493075,
                "tf.round(x)": 0.002770083102493075,
                "tf.scatter_nd(indices, updates, shape)": 0.002770083102493075,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.002770083102493075,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.002770083102493075,
                "tf.sequence_mask(lengths)": 0.002770083102493075,
                "tf.sequence_mask(lengths, maxlen)": 0.002770083102493075,
                "tf.shape(input)": 0.002770083102493075,
                "tf.sign(x)": 0.002770083102493075,
                "tf.sort(values, axis)": 0.002770083102493075,
                "tf.sort(values, axis, direction='DESCENDING')": 0.002770083102493075,
                "tf.sqrt(x)": 0.002770083102493075,
                "tf.square(x)": 0.002770083102493075,
                "tf.squeeze(input)": 0.002770083102493075,
                "tf.squeeze(input, axis)": 0.002770083102493075,
                "tf.stack(values, axis)": 0.002770083102493075,
                "tf.subtract(x, y)": 0.002770083102493075,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.002770083102493075,
                "tf.tensordot(a, b, axes)": 0.1329639889196676,
                "tf.tile(input, multiples)": 0.002770083102493075,
                "tf.transpose(a)": 0.002770083102493075,
                "tf.transpose(a, perm)": 0.002770083102493075,
                "tf.unique_with_counts(x)": 0.002770083102493075,
                "tf.unstack(value, axis)": 0.002770083102493075,
                "tf.where(condition)": 0.002770083102493075,
                "tf.where(condition, x, y)": 0.002770083102493075,
                "tf.zeros(shape)": 0.002770083102493075,
                "tf.zeros_like(input)": 0.002770083102493075,
                "tf.SparseTensor(indices, values, dense_shape)": 0.002770083102493075,
                "tf.sparse.add(a, b)": 0.002770083102493075,
                "tf.sparse.concat(axis, sp_inputs)": 0.002770083102493075,
                "tf.sparse.expand_dims(sp_input, axis)": 0.002770083102493075,
                "tf.sparse.from_dense(tensor)": 0.002770083102493075,
                "tf.sparse.maximum(sp_a, sp_b)": 0.002770083102493075,
                "tf.sparse.minimum(sp_a, sp_b)": 0.002770083102493075,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.002770083102493075,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.002770083102493075,
                "tf.sparse.reset_shape(sp_input)": 0.002770083102493075,
                "tf.sparse.reshape(sp_input, shape)": 0.002770083102493075,
                "tf.sparse.retain(sp_input, to_retain)": 0.002770083102493075,
                "tf.sparse.slice(sp_input, start, size)": 0.002770083102493075,
                "tf.sparse.split(sp_input, num_split, axis)": 0.002770083102493075,
                "tf.sparse.to_dense(sp_input)": 0.002770083102493075,
                "tf.sparse.to_dense(sp_input, default_value)": 0.002770083102493075,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.002770083102493075,
                "tf.sparse.transpose(sp_input)": 0.002770083102493075,
                "tf.sparse.transpose(sp_input, perm)": 0.002770083102493075,
                "IndexingAxis1Operation": 0.002770083102493075,
                "IndexingOperation": 0.002770083102493075,
                "PairCreationOperation": 0.002770083102493075,
                "SingletonTupleCreationOperation": 0.002770083102493075,
                "SlicingAxis0BothOperation": 0.002770083102493075,
                "SlicingAxis0LeftOperation": 0.002770083102493075,
                "SlicingAxis0RightOperation": 0.002770083102493075,
                "SlicingAxis1BothOperation": 0.002770083102493075,
                "SlicingAxis1LeftOperation": 0.002770083102493075,
                "SlicingAxis1RightOperation": 0.002770083102493075,
                "TripleCreationOperation": 0.002770083102493075,
                "PROVIDED_CONSTANT_WEIGHT": 0.002770083102493075,
                "COMMON_CONSTANT_WEIGHT": 0.15512465373961218,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.002770083102493075,
                "INPUT_VARIABLE_WEIGHT": 0.27977839335180055,
                "AXIS_CONSTANT_WEIGHT": 0.00554016620498615,
                "SHAPE_CONSTANT_WEIGHT": 0.002770083102493075,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.002770083102493075,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.002770083102493075,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.002770083102493075,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.002770083102493075,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.002770083102493075
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 3,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 7,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_06",
        "description": "binary tensor from vector indicating if elements are equal",
        "target_program": "tf.cast(tf.equal(in1, tf.expand_dims(in1, 1)), tf.float32)",
        "source": "https://stackoverflow.com/questions/47816231/create-binary-tensor-from-vector-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[3, 5, 0, 2, 3, 3, 0],]",
            "outputs": "[[1., 0., 0., 0., 1., 1., 0.],    [0., 1., 0., 0., 0., 0., 0.],    [0., 0., 1., 0., 0., 0., 1.],    [0., 0., 0., 1., 0., 0., 0.],    [1., 0., 0., 0., 1., 1., 0.],    [1., 0., 0., 0., 1., 1., 0.],    [0., 0., 1., 0., 0., 0., 1.]]"
        },
        "completions": [
            "return tf.math.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "equal_matrix = tf.equal(tf.expand_dims(in1, 1), in1)\nreturn tf.cast(equal_matrix, dtype=tf.float32)\n",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)\n",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "def transform(in1):\n    equal_matrix = tf.cast(tf.math.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n    return equal_matrix\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)).astype(tf.float32)",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.math.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.transpose(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), perm=[2, 0, 1])",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "return tf.equal(tf.expand_dims(in1, 1), in1)",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, -1), tf.expand_dims(in1, 0))\n",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)",
            "return tf.math.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1))\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, axis=1), in1)\n",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, axis=1), tf.expand_dims(in1, axis=0)), tf.float32)\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "equal_matrix = tf.equal(tf.expand_dims(in1, axis=-1), tf.expand_dims(in1, axis=0))\nreturn tf.cast(equal_matrix, tf.float32)\n",
            "def transform(in1):\n    equal_tensor = tf.equal(tf.expand_dims(in1, 1), in1)\n    return tf.cast(equal_tensor, tf.float32)\n",
            "return tf.equal(tf.expand_dims(in1, 1), in1)",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.equal(tf.expand_dims(in1, axis=1), tf.expand_dims(in1, axis=0))\n",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, axis=1), tf.expand_dims(in1, axis=0))\n",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)",
            "return tf.equal(tf.reshape(in1, [-1, 1]), in1)",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "return tf.equal(tf.expand_dims(in1, 1), in1)",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "def transform(in1):\n    return tf.cast(tf.math.logical_and(tf.expand_dims(in1, axis=1), tf.expand_dims(in1, axis=0)), tf.float32)\n",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), in1)\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)\n",
            "return tf.math.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))"
        ],
        "tf_operators": {
            "tf.expand_dims": 49,
            "tf.math.equal": 5,
            "tf.float32": 17,
            "tf.cast": 16,
            "tf.equal": 44,
            "tf.transpose": 1,
            "tf.reshape": 1,
            "tf.math.logical_and": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0,
                2,
                0,
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                0,
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 100,
            "shape": 0,
            "tf_bool": 0,
            "provided": 1,
            "common": 94,
            "shape_tuple": 0,
            "tf_float32": 17,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0019267822736030828,
                "tf.add(x, y)": 0.0019267822736030828,
                "tf.add_n(inputs)": 0.0019267822736030828,
                "tf.argmax(input, axis)": 0.0019267822736030828,
                "tf.argmin(input, axis)": 0.0019267822736030828,
                "tf.argsort(values, axis, stable=True)": 0.0019267822736030828,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0019267822736030828,
                "tf.boolean_mask(tensor, mask)": 0.0019267822736030828,
                "tf.broadcast_to(input, shape)": 0.0019267822736030828,
                "tf.cast(x, dtype)": 0.03275529865125241,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0019267822736030828,
                "tf.concat(values, axis)": 0.0019267822736030828,
                "tf.constant(value)": 0.0019267822736030828,
                "tf.constant(value, dtype)": 0.0019267822736030828,
                "tf.divide(x, y)": 0.0019267822736030828,
                "tf.equal(x, y)": 0.08670520231213873,
                "tf.exp(x)": 0.0019267822736030828,
                "tf.expand_dims(input, axis)": 0.17533718689788053,
                "tf.eye(num_rows)": 0.0019267822736030828,
                "tf.eye(num_rows, num_columns)": 0.0019267822736030828,
                "tf.eye(num_rows, dtype)": 0.0019267822736030828,
                "tf.fill(dims, value)": 0.0019267822736030828,
                "tf.gather(params, indices)": 0.0019267822736030828,
                "tf.gather(params, indices, axis, batch_dims)": 0.0019267822736030828,
                "tf.gather_nd(params, indices)": 0.0019267822736030828,
                "tf.gather_nd(params, indices, batch_dims)": 0.0019267822736030828,
                "tf.greater(x, y)": 0.0019267822736030828,
                "tf.greater_equal(x, y)": 0.0019267822736030828,
                "tf.math.bincount(arr)": 0.0019267822736030828,
                "tf.math.ceil(x)": 0.0019267822736030828,
                "tf.math.count_nonzero(input)": 0.0019267822736030828,
                "tf.math.count_nonzero(input, axis)": 0.0019267822736030828,
                "tf.math.cumsum(x, axis)": 0.0019267822736030828,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0019267822736030828,
                "tf.math.divide_no_nan(x, y)": 0.0019267822736030828,
                "tf.math.floor(x)": 0.0019267822736030828,
                "tf.math.log(x)": 0.0019267822736030828,
                "tf.math.logical_and(x, y)": 0.0038535645472061657,
                "tf.math.logical_not(x)": 0.0019267822736030828,
                "tf.math.logical_or(x, y)": 0.0019267822736030828,
                "tf.math.logical_xor(x, y)": 0.0019267822736030828,
                "tf.math.negative(x)": 0.0019267822736030828,
                "tf.math.reciprocal(x)": 0.0019267822736030828,
                "tf.math.reciprocal_no_nan(x)": 0.0019267822736030828,
                "tf.math.segment_max(data, segment_ids)": 0.0019267822736030828,
                "tf.math.segment_mean(data, segment_ids)": 0.0019267822736030828,
                "tf.math.segment_min(data, segment_ids)": 0.0019267822736030828,
                "tf.math.segment_prod(data, segment_ids)": 0.0019267822736030828,
                "tf.math.segment_sum(data, segment_ids)": 0.0019267822736030828,
                "tf.math.squared_difference(x, y)": 0.0019267822736030828,
                "tf.math.top_k(input, k)": 0.0019267822736030828,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0019267822736030828,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0019267822736030828,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0019267822736030828,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0019267822736030828,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0019267822736030828,
                "tf.matmul(a, b)": 0.0019267822736030828,
                "tf.maximum(x, y)": 0.0019267822736030828,
                "tf.minimum(x, y)": 0.0019267822736030828,
                "tf.multiply(x, y)": 0.0019267822736030828,
                "tf.not_equal(x, y)": 0.0019267822736030828,
                "tf.one_hot(indices, depth)": 0.0019267822736030828,
                "tf.ones(shape)": 0.0019267822736030828,
                "tf.ones_like(input)": 0.0019267822736030828,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0019267822736030828,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0019267822736030828,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0019267822736030828,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0019267822736030828,
                "tf.range(start)": 0.0019267822736030828,
                "tf.range(start, limit, delta)": 0.0019267822736030828,
                "tf.reduce_any(input_tensor, axis)": 0.0019267822736030828,
                "tf.reduce_all(input_tensor, axis)": 0.0019267822736030828,
                "tf.reduce_max(input_tensor)": 0.0019267822736030828,
                "tf.reduce_max(input_tensor, axis)": 0.0019267822736030828,
                "tf.reduce_mean(input_tensor)": 0.0019267822736030828,
                "tf.reduce_mean(input_tensor, axis)": 0.0019267822736030828,
                "tf.reduce_min(input_tensor)": 0.0019267822736030828,
                "tf.reduce_min(input_tensor, axis)": 0.0019267822736030828,
                "tf.reduce_prod(input_tensor, axis)": 0.0019267822736030828,
                "tf.reduce_sum(input_tensor)": 0.0019267822736030828,
                "tf.reduce_sum(input_tensor, axis)": 0.0019267822736030828,
                "tf.repeat(input, repeats)": 0.0019267822736030828,
                "tf.repeat(input, repeats, axis)": 0.0019267822736030828,
                "tf.reshape(tensor, shape)": 0.0038535645472061657,
                "tf.reverse(tensor, axis)": 0.0019267822736030828,
                "tf.roll(input, shift, axis)": 0.0019267822736030828,
                "tf.round(x)": 0.0019267822736030828,
                "tf.scatter_nd(indices, updates, shape)": 0.0019267822736030828,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0019267822736030828,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0019267822736030828,
                "tf.sequence_mask(lengths)": 0.0019267822736030828,
                "tf.sequence_mask(lengths, maxlen)": 0.0019267822736030828,
                "tf.shape(input)": 0.0019267822736030828,
                "tf.sign(x)": 0.0019267822736030828,
                "tf.sort(values, axis)": 0.0019267822736030828,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0019267822736030828,
                "tf.sqrt(x)": 0.0019267822736030828,
                "tf.square(x)": 0.0019267822736030828,
                "tf.squeeze(input)": 0.0019267822736030828,
                "tf.squeeze(input, axis)": 0.0019267822736030828,
                "tf.stack(values, axis)": 0.0019267822736030828,
                "tf.subtract(x, y)": 0.0019267822736030828,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0019267822736030828,
                "tf.tensordot(a, b, axes)": 0.0019267822736030828,
                "tf.tile(input, multiples)": 0.0019267822736030828,
                "tf.transpose(a)": 0.0019267822736030828,
                "tf.transpose(a, perm)": 0.0019267822736030828,
                "tf.unique_with_counts(x)": 0.0019267822736030828,
                "tf.unstack(value, axis)": 0.0019267822736030828,
                "tf.where(condition)": 0.0019267822736030828,
                "tf.where(condition, x, y)": 0.0019267822736030828,
                "tf.zeros(shape)": 0.0019267822736030828,
                "tf.zeros_like(input)": 0.0019267822736030828,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0019267822736030828,
                "tf.sparse.add(a, b)": 0.0019267822736030828,
                "tf.sparse.concat(axis, sp_inputs)": 0.0019267822736030828,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0019267822736030828,
                "tf.sparse.from_dense(tensor)": 0.0019267822736030828,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0019267822736030828,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0019267822736030828,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0019267822736030828,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0019267822736030828,
                "tf.sparse.reset_shape(sp_input)": 0.0019267822736030828,
                "tf.sparse.reshape(sp_input, shape)": 0.0019267822736030828,
                "tf.sparse.retain(sp_input, to_retain)": 0.0019267822736030828,
                "tf.sparse.slice(sp_input, start, size)": 0.0019267822736030828,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0019267822736030828,
                "tf.sparse.to_dense(sp_input)": 0.0019267822736030828,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0019267822736030828,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0019267822736030828,
                "tf.sparse.transpose(sp_input)": 0.0019267822736030828,
                "tf.sparse.transpose(sp_input, perm)": 0.0019267822736030828,
                "IndexingAxis1Operation": 0.0019267822736030828,
                "IndexingOperation": 0.0019267822736030828,
                "PairCreationOperation": 0.0019267822736030828,
                "SingletonTupleCreationOperation": 0.0019267822736030828,
                "SlicingAxis0BothOperation": 0.0019267822736030828,
                "SlicingAxis0LeftOperation": 0.0019267822736030828,
                "SlicingAxis0RightOperation": 0.0019267822736030828,
                "SlicingAxis1BothOperation": 0.0019267822736030828,
                "SlicingAxis1LeftOperation": 0.0019267822736030828,
                "SlicingAxis1RightOperation": 0.0019267822736030828,
                "TripleCreationOperation": 0.0019267822736030828,
                "PROVIDED_CONSTANT_WEIGHT": 0.0038535645472061657,
                "COMMON_CONSTANT_WEIGHT": 0.18304431599229287,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0019267822736030828,
                "INPUT_VARIABLE_WEIGHT": 0.19460500963391136,
                "AXIS_CONSTANT_WEIGHT": 0.0019267822736030828,
                "SHAPE_CONSTANT_WEIGHT": 0.0019267822736030828,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0019267822736030828,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0019267822736030828,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.03468208092485549,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0019267822736030828,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0019267822736030828
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 5,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 4,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 3,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 9,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 9,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 9,
                "PairCreationOperation": 9,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 2,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 9,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 5,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_08",
        "description": "(\\'select the values in the second tensor where the first tensor is greater than 1\\')",
        "target_program": "tf.boolean_mask(in2, tf.greater(in1, tf.constant(1)))",
        "source": "https://stackoverflow.com/questions/33769041/tensorflow-indexing-with-boolean-tensor",
        "constants": "[1]",
        "examples": {
            "inputs": "[[-1, 0, -3, 2, 1, 3, 5, -1, -9, 2, 10],[12, 3, 45, 6, 7, 8, 9, 87, 65, 4, 32],]",
            "outputs": "[6, 8, 9, 4, 32]"
        },
        "completions": [
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.gather(in2, tf.boolean_mask(tf.range(tf.size(in1)), tf.greater(in1, 1)))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1))[:, 0])\n",
            "output = tf.boolean_mask(in2, tf.greater(in1, 1))\nreturn output\n",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "return tf.boolean_mask(in2, tf.math.greater(in1, 1))",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "out = tf.boolean_mask(in2, tf.greater(in1, 1))\nreturn out\n",
            "return tf.gather(in2, tf.squeeze(tf.where(tf.greater(in1, 1))))\n",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "return tf.gather(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1))[:, 0])\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, in1 > 1)",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))"
        ],
        "tf_operators": {
            "tf.boolean_mask": 35,
            "tf.greater": 48,
            "tf.gather": 16,
            "tf.range": 1,
            "tf.size": 1,
            "tf.where": 14,
            "tf.math.greater": 1,
            "tf.squeeze": 1
        },
        "coverage_percentage": 66.66666666666666,
        "total_covered": 2,
        "total_in_target": 3,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 101,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 50,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.002352941176470588,
                "tf.add(x, y)": 0.002352941176470588,
                "tf.add_n(inputs)": 0.002352941176470588,
                "tf.argmax(input, axis)": 0.002352941176470588,
                "tf.argmin(input, axis)": 0.002352941176470588,
                "tf.argsort(values, axis, stable=True)": 0.002352941176470588,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.002352941176470588,
                "tf.boolean_mask(tensor, mask)": 0.08470588235294117,
                "tf.broadcast_to(input, shape)": 0.002352941176470588,
                "tf.cast(x, dtype)": 0.002352941176470588,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.002352941176470588,
                "tf.concat(values, axis)": 0.002352941176470588,
                "tf.constant(value)": 0.002352941176470588,
                "tf.constant(value, dtype)": 0.002352941176470588,
                "tf.divide(x, y)": 0.002352941176470588,
                "tf.equal(x, y)": 0.002352941176470588,
                "tf.exp(x)": 0.002352941176470588,
                "tf.expand_dims(input, axis)": 0.002352941176470588,
                "tf.eye(num_rows)": 0.002352941176470588,
                "tf.eye(num_rows, num_columns)": 0.002352941176470588,
                "tf.eye(num_rows, dtype)": 0.002352941176470588,
                "tf.fill(dims, value)": 0.002352941176470588,
                "tf.gather(params, indices)": 0.04,
                "tf.gather(params, indices, axis, batch_dims)": 0.002352941176470588,
                "tf.gather_nd(params, indices)": 0.002352941176470588,
                "tf.gather_nd(params, indices, batch_dims)": 0.002352941176470588,
                "tf.greater(x, y)": 0.11529411764705882,
                "tf.greater_equal(x, y)": 0.002352941176470588,
                "tf.math.bincount(arr)": 0.002352941176470588,
                "tf.math.ceil(x)": 0.002352941176470588,
                "tf.math.count_nonzero(input)": 0.002352941176470588,
                "tf.math.count_nonzero(input, axis)": 0.002352941176470588,
                "tf.math.cumsum(x, axis)": 0.002352941176470588,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.002352941176470588,
                "tf.math.divide_no_nan(x, y)": 0.002352941176470588,
                "tf.math.floor(x)": 0.002352941176470588,
                "tf.math.log(x)": 0.002352941176470588,
                "tf.math.logical_and(x, y)": 0.002352941176470588,
                "tf.math.logical_not(x)": 0.002352941176470588,
                "tf.math.logical_or(x, y)": 0.002352941176470588,
                "tf.math.logical_xor(x, y)": 0.002352941176470588,
                "tf.math.negative(x)": 0.002352941176470588,
                "tf.math.reciprocal(x)": 0.002352941176470588,
                "tf.math.reciprocal_no_nan(x)": 0.002352941176470588,
                "tf.math.segment_max(data, segment_ids)": 0.002352941176470588,
                "tf.math.segment_mean(data, segment_ids)": 0.002352941176470588,
                "tf.math.segment_min(data, segment_ids)": 0.002352941176470588,
                "tf.math.segment_prod(data, segment_ids)": 0.002352941176470588,
                "tf.math.segment_sum(data, segment_ids)": 0.002352941176470588,
                "tf.math.squared_difference(x, y)": 0.002352941176470588,
                "tf.math.top_k(input, k)": 0.002352941176470588,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.002352941176470588,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.002352941176470588,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.002352941176470588,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.002352941176470588,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.002352941176470588,
                "tf.matmul(a, b)": 0.002352941176470588,
                "tf.maximum(x, y)": 0.002352941176470588,
                "tf.minimum(x, y)": 0.002352941176470588,
                "tf.multiply(x, y)": 0.002352941176470588,
                "tf.not_equal(x, y)": 0.002352941176470588,
                "tf.one_hot(indices, depth)": 0.002352941176470588,
                "tf.ones(shape)": 0.002352941176470588,
                "tf.ones_like(input)": 0.002352941176470588,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.002352941176470588,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.002352941176470588,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.002352941176470588,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.002352941176470588,
                "tf.range(start)": 0.004705882352941176,
                "tf.range(start, limit, delta)": 0.002352941176470588,
                "tf.reduce_any(input_tensor, axis)": 0.002352941176470588,
                "tf.reduce_all(input_tensor, axis)": 0.002352941176470588,
                "tf.reduce_max(input_tensor)": 0.002352941176470588,
                "tf.reduce_max(input_tensor, axis)": 0.002352941176470588,
                "tf.reduce_mean(input_tensor)": 0.002352941176470588,
                "tf.reduce_mean(input_tensor, axis)": 0.002352941176470588,
                "tf.reduce_min(input_tensor)": 0.002352941176470588,
                "tf.reduce_min(input_tensor, axis)": 0.002352941176470588,
                "tf.reduce_prod(input_tensor, axis)": 0.002352941176470588,
                "tf.reduce_sum(input_tensor)": 0.002352941176470588,
                "tf.reduce_sum(input_tensor, axis)": 0.002352941176470588,
                "tf.repeat(input, repeats)": 0.002352941176470588,
                "tf.repeat(input, repeats, axis)": 0.002352941176470588,
                "tf.reshape(tensor, shape)": 0.002352941176470588,
                "tf.reverse(tensor, axis)": 0.002352941176470588,
                "tf.roll(input, shift, axis)": 0.002352941176470588,
                "tf.round(x)": 0.002352941176470588,
                "tf.scatter_nd(indices, updates, shape)": 0.002352941176470588,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.002352941176470588,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.002352941176470588,
                "tf.sequence_mask(lengths)": 0.002352941176470588,
                "tf.sequence_mask(lengths, maxlen)": 0.002352941176470588,
                "tf.shape(input)": 0.002352941176470588,
                "tf.sign(x)": 0.002352941176470588,
                "tf.sort(values, axis)": 0.002352941176470588,
                "tf.sort(values, axis, direction='DESCENDING')": 0.002352941176470588,
                "tf.sqrt(x)": 0.002352941176470588,
                "tf.square(x)": 0.002352941176470588,
                "tf.squeeze(input)": 0.004705882352941176,
                "tf.squeeze(input, axis)": 0.002352941176470588,
                "tf.stack(values, axis)": 0.002352941176470588,
                "tf.subtract(x, y)": 0.002352941176470588,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.002352941176470588,
                "tf.tensordot(a, b, axes)": 0.002352941176470588,
                "tf.tile(input, multiples)": 0.002352941176470588,
                "tf.transpose(a)": 0.002352941176470588,
                "tf.transpose(a, perm)": 0.002352941176470588,
                "tf.unique_with_counts(x)": 0.002352941176470588,
                "tf.unstack(value, axis)": 0.002352941176470588,
                "tf.where(condition)": 0.03529411764705882,
                "tf.where(condition, x, y)": 0.002352941176470588,
                "tf.zeros(shape)": 0.002352941176470588,
                "tf.zeros_like(input)": 0.002352941176470588,
                "tf.SparseTensor(indices, values, dense_shape)": 0.002352941176470588,
                "tf.sparse.add(a, b)": 0.002352941176470588,
                "tf.sparse.concat(axis, sp_inputs)": 0.002352941176470588,
                "tf.sparse.expand_dims(sp_input, axis)": 0.002352941176470588,
                "tf.sparse.from_dense(tensor)": 0.002352941176470588,
                "tf.sparse.maximum(sp_a, sp_b)": 0.002352941176470588,
                "tf.sparse.minimum(sp_a, sp_b)": 0.002352941176470588,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.002352941176470588,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.002352941176470588,
                "tf.sparse.reset_shape(sp_input)": 0.002352941176470588,
                "tf.sparse.reshape(sp_input, shape)": 0.002352941176470588,
                "tf.sparse.retain(sp_input, to_retain)": 0.002352941176470588,
                "tf.sparse.slice(sp_input, start, size)": 0.002352941176470588,
                "tf.sparse.split(sp_input, num_split, axis)": 0.002352941176470588,
                "tf.sparse.to_dense(sp_input)": 0.002352941176470588,
                "tf.sparse.to_dense(sp_input, default_value)": 0.002352941176470588,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.002352941176470588,
                "tf.sparse.transpose(sp_input)": 0.002352941176470588,
                "tf.sparse.transpose(sp_input, perm)": 0.002352941176470588,
                "IndexingAxis1Operation": 0.007058823529411765,
                "IndexingOperation": 0.002352941176470588,
                "PairCreationOperation": 0.007058823529411765,
                "SingletonTupleCreationOperation": 0.002352941176470588,
                "SlicingAxis0BothOperation": 0.002352941176470588,
                "SlicingAxis0LeftOperation": 0.002352941176470588,
                "SlicingAxis0RightOperation": 0.002352941176470588,
                "SlicingAxis1BothOperation": 0.002352941176470588,
                "SlicingAxis1LeftOperation": 0.002352941176470588,
                "SlicingAxis1RightOperation": 0.002352941176470588,
                "TripleCreationOperation": 0.002352941176470588,
                "PROVIDED_CONSTANT_WEIGHT": 0.002352941176470588,
                "COMMON_CONSTANT_WEIGHT": 0.12,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.002352941176470588,
                "INPUT_VARIABLE_WEIGHT": 0.24,
                "AXIS_CONSTANT_WEIGHT": 0.002352941176470588,
                "SHAPE_CONSTANT_WEIGHT": 0.002352941176470588,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.002352941176470588,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.002352941176470588,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.002352941176470588,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.002352941176470588,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.002352941176470588
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 4,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 9,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 9,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 5,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 3,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 9,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 5,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 7,
                "IndexingOperation": 9,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 9,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_09",
        "description": "group items by value and get the group indices",
        "target_program": "tf.unique_with_counts(in1)[1]",
        "source": "https://stackoverflow.com/questions/53054668/assign-values-between-0-and-n-1-for-a-vector-of-length-l-with-n-different-eleme",
        "constants": "[]",
        "examples": {
            "inputs": "[[37, 42, 42, 37, 28, 15, 42, 15],]",
            "outputs": "[0, 1, 1, 0, 2, 3, 1, 3]"
        },
        "completions": [
            "def transform(in1):\n    unique_values, unique_idx = tf.unique(in1)\n    return tf.gather(unique_idx, tf.argsort(in1))",
            "def transform(in1):\n    return tf.math.segment_mean(tf.argsort(in1), tf.argsort(in1))\n",
            "values, _ = tf.unique(in1)\nreturn tf.math.unsorted_segment_max(tf.range(tf.size(values)), tf.argsort(values), tf.size(values))\n",
            "def transform(in1):\n    group_indices = tf.argmax(tf.math.segment_max(in1, tf.range(tf.size(in1))), axis=0)\n    return group_indices\n",
            "return tf.unique(in1).indices",
            "_, idx = tf.unique(in1)\nreturn idx\n",
            "values, _ = tf.unique(in1)\nreturn tf.argsort(tf.argsort(in1) + tf.cumsum(tf.ones_like(in1)) * (in1 // values), axis=-1, stable=True)\n",
            "return tf.unique(in1)[2]\n",
            "return tf.searchsorted(tf.math.segment_max(in1, in1), in1, side='left')\n",
            "return tf.unique_with_counts(in1).y\n",
            "def transform(in1):\n    return tf.unsorted_segment_max(tf.range(tf.shape(in1)[0]), in1, tf.reduce_max(in1) + 1)\n",
            "def transform(in1):\n    unique_values, idx = tf.unique(in1)\n    group_indices = tf.map_fn(lambda x: tf.argmax(tf.cast(tf.equal(in1, x), tf.int64)), unique_values)\n    group_indices = tf.gather(group_indices, idx)\n    return group_indices\n",
            "return tf.unique_with_counts(in1).idx\n",
            "_, idx = tf.unique(in1)\nreturn tf.gather(idx, tf.argsort(idx))\n",
            "return tf.cast(tf.unique_with_counts(in1).y, tf.int32)\n",
            "def transform(in1):\n    unique_vals, idx = tf.unique(in1)\n    return idx\n",
            "return tf.math.unsorted_segment_max(tf.range(tf.size(in1)), in1, tf.reduce_max(in1)+1)\n",
            "def transform(in1):\n    return tf.math.segment_max(in1, in1)\n",
            "values, _ = tf.unique(in1)\nreturn tf.searchsorted(values, in1)\n",
            "_, unique_idx, _ = tf.unique_with_counts(in1)\nreturn tf.gather(unique_idx - 1, tf.argsort(unique_idx))\n",
            "def transform(in1):\n    segment_ids = tf.argsort(in1, stable=True)\n    _, unique_indices = tf.unique(in1)\n    group_indices = tf.searchsorted(unique_indices, in1, side='left')\n    return group_indices\n",
            "return tf.unique(in1)",
            "_, idx = tf.unique(in1)\nreturn idx\n",
            "return tf.unique_with_counts(in1).idx\n",
            "values, _ = tf.unique(in1)\nreturn tf.argsort(values)\n",
            "return tf.math.segment_sum(tf.argsort(in1), tf.argsort(in1))\n",
            "return tf.unique_with_counts(in1).y",
            "def transform(in1):\n    return tf.math.unsorted_segment_max(tf.range(tf.size(in1)), in1, tf.reduce_max(in1) + 1)\n  ",
            "values, _ = tf.unique_with_counts(in1)\nreturn tf.searchsorted(values, in1)\n",
            "values, _ = tf.unique(in1)\nreturn tf.searchsorted(values, in1, side='left')\n",
            "return tf.argsort(in1, stable=True)\n",
            "def transform(in1):\n    unique_values, unique_idx, counts = tf.unique_with_counts(in1)\n    return tf.gather(unique_idx, tf.argsort(counts))",
            "def transform(in1):\n    return tf.math.segment_max(in1, tf.range(tf.size(in1)))\n",
            "return tf.argmax(tf.unique_with_counts(in1).y, axis=0)\n",
            "def transform(in1):\n    return tf.argsort(in1, stable=True)\n",
            "values, idx, count = tf.unique_with_counts(in1)\nreturn idx\n",
            "values, _ = tf.unique(in1)\nreturn tf.searchsorted(values, in1)\n",
            "return tf.unique(in1)[2]",
            "return tf.unique(in1).idices",
            "return tf.unique(in1).indices\n",
            "return tf.argsort(tf.unique_with_counts(in1).y, stable=True)\n",
            "def transform(in1):\n    return tf.argmax(tf.math.unsorted_segment_max(tf.range(tf.size(in1)), in1, tf.reduce_max(in1)+1), axis=0)\n",
            "return tf.unique(in1).idx[tf.unique(in1).idx]",
            "return tf.unique(in1).indices",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=1)",
            "values, _ = tf.unique(in1)\nreturn tf.searchsorted(values, in1)\n",
            "return tf.unique_with_counts(in1).y\n",
            "return tf.unique_with_counts(in1).y\n",
            "def transform(in1):\n    group_indices = tf.math.segment_max(tf.argsort(in1), tf.argsort(in1))\n    return group_indices\n",
            "return tf.unique(in1).indices"
        ],
        "tf_operators": {
            "tf.gather": 5,
            "tf.unique": 23,
            "tf.argsort": 14,
            "tf.math.segment_mean": 1,
            "tf.range": 7,
            "tf.math.unsorted_segment_max": 4,
            "tf.size": 6,
            "tf.argmax": 4,
            "tf.math.segment_max": 5,
            "tf.ones_like": 1,
            "tf.cumsum": 1,
            "tf.searchsorted": 7,
            "tf.unique_with_counts": 13,
            "tf.reduce_max": 4,
            "tf.shape": 1,
            "tf.unsorted_segment_max": 1,
            "tf.int64": 1,
            "tf.cast": 2,
            "tf.equal": 1,
            "tf.map_fn": 1,
            "tf.int32": 1,
            "tf.math.segment_sum": 1,
            "tf.reduce_sum": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [
                -1
            ],
            [
                2
            ],
            [],
            [],
            [
                0,
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [
                2
            ],
            [],
            [],
            [],
            [
                1,
                0
            ],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 79,
            "shape": 0,
            "tf_bool": 0,
            "provided": 2,
            "common": 16,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 1,
            "tf_int32": 1
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.00303951367781155,
                "tf.add(x, y)": 0.00303951367781155,
                "tf.add_n(inputs)": 0.00303951367781155,
                "tf.argmax(input, axis)": 0.015197568389057751,
                "tf.argmin(input, axis)": 0.00303951367781155,
                "tf.argsort(values, axis, stable=True)": 0.015197568389057751,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.00303951367781155,
                "tf.boolean_mask(tensor, mask)": 0.00303951367781155,
                "tf.broadcast_to(input, shape)": 0.00303951367781155,
                "tf.cast(x, dtype)": 0.00911854103343465,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.00303951367781155,
                "tf.concat(values, axis)": 0.00303951367781155,
                "tf.constant(value)": 0.00303951367781155,
                "tf.constant(value, dtype)": 0.00303951367781155,
                "tf.divide(x, y)": 0.00303951367781155,
                "tf.equal(x, y)": 0.0060790273556231,
                "tf.exp(x)": 0.00303951367781155,
                "tf.expand_dims(input, axis)": 0.00303951367781155,
                "tf.eye(num_rows)": 0.00303951367781155,
                "tf.eye(num_rows, num_columns)": 0.00303951367781155,
                "tf.eye(num_rows, dtype)": 0.00303951367781155,
                "tf.fill(dims, value)": 0.00303951367781155,
                "tf.gather(params, indices)": 0.0182370820668693,
                "tf.gather(params, indices, axis, batch_dims)": 0.00303951367781155,
                "tf.gather_nd(params, indices)": 0.00303951367781155,
                "tf.gather_nd(params, indices, batch_dims)": 0.00303951367781155,
                "tf.greater(x, y)": 0.00303951367781155,
                "tf.greater_equal(x, y)": 0.00303951367781155,
                "tf.math.bincount(arr)": 0.00303951367781155,
                "tf.math.ceil(x)": 0.00303951367781155,
                "tf.math.count_nonzero(input)": 0.00303951367781155,
                "tf.math.count_nonzero(input, axis)": 0.00303951367781155,
                "tf.math.cumsum(x, axis)": 0.00303951367781155,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.00303951367781155,
                "tf.math.divide_no_nan(x, y)": 0.00303951367781155,
                "tf.math.floor(x)": 0.00303951367781155,
                "tf.math.log(x)": 0.00303951367781155,
                "tf.math.logical_and(x, y)": 0.00303951367781155,
                "tf.math.logical_not(x)": 0.00303951367781155,
                "tf.math.logical_or(x, y)": 0.00303951367781155,
                "tf.math.logical_xor(x, y)": 0.00303951367781155,
                "tf.math.negative(x)": 0.00303951367781155,
                "tf.math.reciprocal(x)": 0.00303951367781155,
                "tf.math.reciprocal_no_nan(x)": 0.00303951367781155,
                "tf.math.segment_max(data, segment_ids)": 0.0182370820668693,
                "tf.math.segment_mean(data, segment_ids)": 0.0060790273556231,
                "tf.math.segment_min(data, segment_ids)": 0.00303951367781155,
                "tf.math.segment_prod(data, segment_ids)": 0.00303951367781155,
                "tf.math.segment_sum(data, segment_ids)": 0.0060790273556231,
                "tf.math.squared_difference(x, y)": 0.00303951367781155,
                "tf.math.top_k(input, k)": 0.00303951367781155,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.015197568389057751,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.00303951367781155,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.00303951367781155,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.00303951367781155,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.00303951367781155,
                "tf.matmul(a, b)": 0.00303951367781155,
                "tf.maximum(x, y)": 0.00303951367781155,
                "tf.minimum(x, y)": 0.00303951367781155,
                "tf.multiply(x, y)": 0.00303951367781155,
                "tf.not_equal(x, y)": 0.00303951367781155,
                "tf.one_hot(indices, depth)": 0.00303951367781155,
                "tf.ones(shape)": 0.00303951367781155,
                "tf.ones_like(input)": 0.0060790273556231,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.00303951367781155,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.00303951367781155,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.00303951367781155,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.00303951367781155,
                "tf.range(start)": 0.0243161094224924,
                "tf.range(start, limit, delta)": 0.00303951367781155,
                "tf.reduce_any(input_tensor, axis)": 0.00303951367781155,
                "tf.reduce_all(input_tensor, axis)": 0.00303951367781155,
                "tf.reduce_max(input_tensor)": 0.015197568389057751,
                "tf.reduce_max(input_tensor, axis)": 0.00303951367781155,
                "tf.reduce_mean(input_tensor)": 0.00303951367781155,
                "tf.reduce_mean(input_tensor, axis)": 0.00303951367781155,
                "tf.reduce_min(input_tensor)": 0.00303951367781155,
                "tf.reduce_min(input_tensor, axis)": 0.00303951367781155,
                "tf.reduce_prod(input_tensor, axis)": 0.00303951367781155,
                "tf.reduce_sum(input_tensor)": 0.00303951367781155,
                "tf.reduce_sum(input_tensor, axis)": 0.00303951367781155,
                "tf.repeat(input, repeats)": 0.00303951367781155,
                "tf.repeat(input, repeats, axis)": 0.00303951367781155,
                "tf.reshape(tensor, shape)": 0.00303951367781155,
                "tf.reverse(tensor, axis)": 0.00303951367781155,
                "tf.roll(input, shift, axis)": 0.00303951367781155,
                "tf.round(x)": 0.00303951367781155,
                "tf.scatter_nd(indices, updates, shape)": 0.00303951367781155,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.00303951367781155,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.00303951367781155,
                "tf.sequence_mask(lengths)": 0.00303951367781155,
                "tf.sequence_mask(lengths, maxlen)": 0.00303951367781155,
                "tf.shape(input)": 0.0060790273556231,
                "tf.sign(x)": 0.00303951367781155,
                "tf.sort(values, axis)": 0.00303951367781155,
                "tf.sort(values, axis, direction='DESCENDING')": 0.00303951367781155,
                "tf.sqrt(x)": 0.00303951367781155,
                "tf.square(x)": 0.00303951367781155,
                "tf.squeeze(input)": 0.00303951367781155,
                "tf.squeeze(input, axis)": 0.00303951367781155,
                "tf.stack(values, axis)": 0.00303951367781155,
                "tf.subtract(x, y)": 0.00303951367781155,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.00303951367781155,
                "tf.tensordot(a, b, axes)": 0.00303951367781155,
                "tf.tile(input, multiples)": 0.00303951367781155,
                "tf.transpose(a)": 0.00303951367781155,
                "tf.transpose(a, perm)": 0.00303951367781155,
                "tf.unique_with_counts(x)": 0.0425531914893617,
                "tf.unstack(value, axis)": 0.00303951367781155,
                "tf.where(condition)": 0.00303951367781155,
                "tf.where(condition, x, y)": 0.00303951367781155,
                "tf.zeros(shape)": 0.00303951367781155,
                "tf.zeros_like(input)": 0.00303951367781155,
                "tf.SparseTensor(indices, values, dense_shape)": 0.00303951367781155,
                "tf.sparse.add(a, b)": 0.00303951367781155,
                "tf.sparse.concat(axis, sp_inputs)": 0.00303951367781155,
                "tf.sparse.expand_dims(sp_input, axis)": 0.00303951367781155,
                "tf.sparse.from_dense(tensor)": 0.00303951367781155,
                "tf.sparse.maximum(sp_a, sp_b)": 0.00303951367781155,
                "tf.sparse.minimum(sp_a, sp_b)": 0.00303951367781155,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.00303951367781155,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.00303951367781155,
                "tf.sparse.reset_shape(sp_input)": 0.00303951367781155,
                "tf.sparse.reshape(sp_input, shape)": 0.00303951367781155,
                "tf.sparse.retain(sp_input, to_retain)": 0.00303951367781155,
                "tf.sparse.slice(sp_input, start, size)": 0.00303951367781155,
                "tf.sparse.split(sp_input, num_split, axis)": 0.00303951367781155,
                "tf.sparse.to_dense(sp_input)": 0.00303951367781155,
                "tf.sparse.to_dense(sp_input, default_value)": 0.00303951367781155,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.00303951367781155,
                "tf.sparse.transpose(sp_input)": 0.00303951367781155,
                "tf.sparse.transpose(sp_input, perm)": 0.00303951367781155,
                "IndexingAxis1Operation": 0.00303951367781155,
                "IndexingOperation": 0.015197568389057751,
                "PairCreationOperation": 0.0486322188449848,
                "SingletonTupleCreationOperation": 0.00303951367781155,
                "SlicingAxis0BothOperation": 0.00303951367781155,
                "SlicingAxis0LeftOperation": 0.00303951367781155,
                "SlicingAxis0RightOperation": 0.00303951367781155,
                "SlicingAxis1BothOperation": 0.00303951367781155,
                "SlicingAxis1LeftOperation": 0.00303951367781155,
                "SlicingAxis1RightOperation": 0.00303951367781155,
                "TripleCreationOperation": 0.0121580547112462,
                "PROVIDED_CONSTANT_WEIGHT": 0.00911854103343465,
                "COMMON_CONSTANT_WEIGHT": 0.05167173252279635,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.00303951367781155,
                "INPUT_VARIABLE_WEIGHT": 0.24316109422492402,
                "AXIS_CONSTANT_WEIGHT": 0.00303951367781155,
                "SHAPE_CONSTANT_WEIGHT": 0.00303951367781155,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.00303951367781155,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0060790273556231,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.00303951367781155,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.00303951367781155,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0060790273556231
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 6,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 6,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 6,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 6,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 6,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 5,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 6,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 7,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 5,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 6,
                "PairCreationOperation": 4,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 6,
                "PROVIDED_CONSTANT_WEIGHT": 7,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 7
            }
        }
    },
    {
        "name": "stackoverflow_10",
        "description": "perform matrix multiplication",
        "target_program": "tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 1))",
        "source": "https://stackoverflow.com/questions/53094212/tensorflow-sxn-matrix-multiply-with-sxd-matrix-to-output-sxnxd-array",
        "constants": "[]",
        "examples": {
            "inputs": "[[[15, 10], [20, -5]],[[2, 3, 1], [-2, 5, 0]],]",
            "outputs": "[[[30, 45, 15], [20, 30, 10]],[[-40, 100, 0], [10, -25, 0]]]"
        },
        "completions": [
            "return tf.matmul(in1, in2)\n",
            "return tf.transpose(tf.tensordot(in1, in2, axes=1), perm=[0, 2, 1])",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)\n",
            "return tf.expand_dims(tf.tensordot(in1, in2, axes=1), axis=0)",
            "return tf.reshape(tf.matmul(tf.reshape(in1, [-1, 1, 2]), tf.reshape(in2, [1, 2, 3])), [-1, 2, 3])",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in1, in2)\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.matmul(tf.expand_dims(in1, 0), tf.expand_dims(in2, -1))",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, tf.expand_dims(in2, axis=0))",
            "return tf.transpose(tf.tensordot(in1, in2, axes=1), perm=[0, 2, 1])",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n  ",
            "return tf.reshape(tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0)), [-1, tf.shape(in2)[1]])",
            "return tf.transpose(tf.cast(tf.unstack(tf.matmul(in1, in2), axis=2), tf.int32))",
            "return tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in1, in2)",
            "return tf.transpose(tf.matmul(in1, in2))\n",
            "return tf.matmul(in1, in2)\n",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)\n",
            "return tf.transpose(tf.tensordot(tf.transpose(in1), tf.transpose(in2), axes=1), perm=[2, 0, 1])",
            "return tf.matmul(in1, in2)",
            "return tf.reshape(tf.transpose(tf.matmul(tf.transpose(in1), tf.transpose(in2))), [2, 2, 3])",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)\n",
            "return tf.transpose(tf.matmul(in1, in2), perm=[0, 2, 1])",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=0))",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "return tf.matmul(in1, in2)\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)\n"
        ],
        "tf_operators": {
            "tf.matmul": 42,
            "tf.tensordot": 8,
            "tf.transpose": 7,
            "tf.expand_dims": 7,
            "tf.reshape": 3,
            "tf.shape": 1,
            "tf.unstack": 1,
            "tf.cast": 1,
            "tf.int32": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [],
            [
                1,
                0,
                2,
                1
            ],
            [],
            [],
            [
                1,
                0
            ],
            [
                -1,
                1,
                2,
                1,
                2,
                3,
                -1,
                2,
                3
            ],
            [],
            [],
            [
                1
            ],
            [
                0,
                -1
            ],
            [],
            [
                0
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1
            ],
            [],
            [],
            [],
            [
                1,
                0,
                -1,
                1
            ],
            [
                2
            ],
            [
                -1,
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1,
                2,
                0,
                1
            ],
            [],
            [
                2,
                2,
                3
            ],
            [
                1
            ],
            [],
            [],
            [
                0,
                2,
                1
            ],
            [],
            [],
            [],
            [],
            [
                2,
                0
            ],
            [],
            [],
            [],
            [],
            [
                1,
                0
            ],
            [],
            [
                1
            ],
            [],
            [],
            []
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 3,
                "shape": 2,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 2,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 101,
            "shape": 3,
            "tf_bool": 0,
            "provided": 0,
            "common": 33,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 11,
            "tf_int64": 0,
            "tf_int32": 1
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.002617801047120419,
                "tf.add(x, y)": 0.002617801047120419,
                "tf.add_n(inputs)": 0.002617801047120419,
                "tf.argmax(input, axis)": 0.002617801047120419,
                "tf.argmin(input, axis)": 0.002617801047120419,
                "tf.argsort(values, axis, stable=True)": 0.002617801047120419,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.002617801047120419,
                "tf.boolean_mask(tensor, mask)": 0.002617801047120419,
                "tf.broadcast_to(input, shape)": 0.002617801047120419,
                "tf.cast(x, dtype)": 0.005235602094240838,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.002617801047120419,
                "tf.concat(values, axis)": 0.002617801047120419,
                "tf.constant(value)": 0.002617801047120419,
                "tf.constant(value, dtype)": 0.002617801047120419,
                "tf.divide(x, y)": 0.002617801047120419,
                "tf.equal(x, y)": 0.002617801047120419,
                "tf.exp(x)": 0.002617801047120419,
                "tf.expand_dims(input, axis)": 0.034031413612565446,
                "tf.eye(num_rows)": 0.002617801047120419,
                "tf.eye(num_rows, num_columns)": 0.002617801047120419,
                "tf.eye(num_rows, dtype)": 0.002617801047120419,
                "tf.fill(dims, value)": 0.002617801047120419,
                "tf.gather(params, indices)": 0.002617801047120419,
                "tf.gather(params, indices, axis, batch_dims)": 0.002617801047120419,
                "tf.gather_nd(params, indices)": 0.002617801047120419,
                "tf.gather_nd(params, indices, batch_dims)": 0.002617801047120419,
                "tf.greater(x, y)": 0.002617801047120419,
                "tf.greater_equal(x, y)": 0.002617801047120419,
                "tf.math.bincount(arr)": 0.002617801047120419,
                "tf.math.ceil(x)": 0.002617801047120419,
                "tf.math.count_nonzero(input)": 0.002617801047120419,
                "tf.math.count_nonzero(input, axis)": 0.002617801047120419,
                "tf.math.cumsum(x, axis)": 0.002617801047120419,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.002617801047120419,
                "tf.math.divide_no_nan(x, y)": 0.002617801047120419,
                "tf.math.floor(x)": 0.002617801047120419,
                "tf.math.log(x)": 0.002617801047120419,
                "tf.math.logical_and(x, y)": 0.002617801047120419,
                "tf.math.logical_not(x)": 0.002617801047120419,
                "tf.math.logical_or(x, y)": 0.002617801047120419,
                "tf.math.logical_xor(x, y)": 0.002617801047120419,
                "tf.math.negative(x)": 0.002617801047120419,
                "tf.math.reciprocal(x)": 0.002617801047120419,
                "tf.math.reciprocal_no_nan(x)": 0.002617801047120419,
                "tf.math.segment_max(data, segment_ids)": 0.002617801047120419,
                "tf.math.segment_mean(data, segment_ids)": 0.002617801047120419,
                "tf.math.segment_min(data, segment_ids)": 0.002617801047120419,
                "tf.math.segment_prod(data, segment_ids)": 0.002617801047120419,
                "tf.math.segment_sum(data, segment_ids)": 0.002617801047120419,
                "tf.math.squared_difference(x, y)": 0.002617801047120419,
                "tf.math.top_k(input, k)": 0.002617801047120419,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.002617801047120419,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.002617801047120419,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.002617801047120419,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.002617801047120419,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.002617801047120419,
                "tf.matmul(a, b)": 0.112565445026178,
                "tf.maximum(x, y)": 0.002617801047120419,
                "tf.minimum(x, y)": 0.002617801047120419,
                "tf.multiply(x, y)": 0.002617801047120419,
                "tf.not_equal(x, y)": 0.002617801047120419,
                "tf.one_hot(indices, depth)": 0.002617801047120419,
                "tf.ones(shape)": 0.002617801047120419,
                "tf.ones_like(input)": 0.002617801047120419,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.002617801047120419,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.002617801047120419,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.002617801047120419,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.002617801047120419,
                "tf.range(start)": 0.002617801047120419,
                "tf.range(start, limit, delta)": 0.002617801047120419,
                "tf.reduce_any(input_tensor, axis)": 0.002617801047120419,
                "tf.reduce_all(input_tensor, axis)": 0.002617801047120419,
                "tf.reduce_max(input_tensor)": 0.002617801047120419,
                "tf.reduce_max(input_tensor, axis)": 0.002617801047120419,
                "tf.reduce_mean(input_tensor)": 0.002617801047120419,
                "tf.reduce_mean(input_tensor, axis)": 0.002617801047120419,
                "tf.reduce_min(input_tensor)": 0.002617801047120419,
                "tf.reduce_min(input_tensor, axis)": 0.002617801047120419,
                "tf.reduce_prod(input_tensor, axis)": 0.002617801047120419,
                "tf.reduce_sum(input_tensor)": 0.002617801047120419,
                "tf.reduce_sum(input_tensor, axis)": 0.002617801047120419,
                "tf.repeat(input, repeats)": 0.002617801047120419,
                "tf.repeat(input, repeats, axis)": 0.002617801047120419,
                "tf.reshape(tensor, shape)": 0.015706806282722512,
                "tf.reverse(tensor, axis)": 0.002617801047120419,
                "tf.roll(input, shift, axis)": 0.002617801047120419,
                "tf.round(x)": 0.002617801047120419,
                "tf.scatter_nd(indices, updates, shape)": 0.002617801047120419,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.002617801047120419,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.002617801047120419,
                "tf.sequence_mask(lengths)": 0.002617801047120419,
                "tf.sequence_mask(lengths, maxlen)": 0.002617801047120419,
                "tf.shape(input)": 0.005235602094240838,
                "tf.sign(x)": 0.002617801047120419,
                "tf.sort(values, axis)": 0.002617801047120419,
                "tf.sort(values, axis, direction='DESCENDING')": 0.002617801047120419,
                "tf.sqrt(x)": 0.002617801047120419,
                "tf.square(x)": 0.002617801047120419,
                "tf.squeeze(input)": 0.002617801047120419,
                "tf.squeeze(input, axis)": 0.002617801047120419,
                "tf.stack(values, axis)": 0.002617801047120419,
                "tf.subtract(x, y)": 0.002617801047120419,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.002617801047120419,
                "tf.tensordot(a, b, axes)": 0.02356020942408377,
                "tf.tile(input, multiples)": 0.002617801047120419,
                "tf.transpose(a)": 0.020942408376963352,
                "tf.transpose(a, perm)": 0.002617801047120419,
                "tf.unique_with_counts(x)": 0.002617801047120419,
                "tf.unstack(value, axis)": 0.005235602094240838,
                "tf.where(condition)": 0.002617801047120419,
                "tf.where(condition, x, y)": 0.002617801047120419,
                "tf.zeros(shape)": 0.002617801047120419,
                "tf.zeros_like(input)": 0.002617801047120419,
                "tf.SparseTensor(indices, values, dense_shape)": 0.002617801047120419,
                "tf.sparse.add(a, b)": 0.002617801047120419,
                "tf.sparse.concat(axis, sp_inputs)": 0.002617801047120419,
                "tf.sparse.expand_dims(sp_input, axis)": 0.002617801047120419,
                "tf.sparse.from_dense(tensor)": 0.002617801047120419,
                "tf.sparse.maximum(sp_a, sp_b)": 0.002617801047120419,
                "tf.sparse.minimum(sp_a, sp_b)": 0.002617801047120419,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.002617801047120419,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.002617801047120419,
                "tf.sparse.reset_shape(sp_input)": 0.002617801047120419,
                "tf.sparse.reshape(sp_input, shape)": 0.002617801047120419,
                "tf.sparse.retain(sp_input, to_retain)": 0.002617801047120419,
                "tf.sparse.slice(sp_input, start, size)": 0.002617801047120419,
                "tf.sparse.split(sp_input, num_split, axis)": 0.002617801047120419,
                "tf.sparse.to_dense(sp_input)": 0.002617801047120419,
                "tf.sparse.to_dense(sp_input, default_value)": 0.002617801047120419,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.002617801047120419,
                "tf.sparse.transpose(sp_input)": 0.002617801047120419,
                "tf.sparse.transpose(sp_input, perm)": 0.002617801047120419,
                "IndexingAxis1Operation": 0.002617801047120419,
                "IndexingOperation": 0.005235602094240838,
                "PairCreationOperation": 0.002617801047120419,
                "SingletonTupleCreationOperation": 0.002617801047120419,
                "SlicingAxis0BothOperation": 0.002617801047120419,
                "SlicingAxis0LeftOperation": 0.002617801047120419,
                "SlicingAxis0RightOperation": 0.002617801047120419,
                "SlicingAxis1BothOperation": 0.002617801047120419,
                "SlicingAxis1LeftOperation": 0.002617801047120419,
                "SlicingAxis1RightOperation": 0.002617801047120419,
                "TripleCreationOperation": 0.002617801047120419,
                "PROVIDED_CONSTANT_WEIGHT": 0.002617801047120419,
                "COMMON_CONSTANT_WEIGHT": 0.08900523560209424,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.002617801047120419,
                "INPUT_VARIABLE_WEIGHT": 0.2670157068062827,
                "AXIS_CONSTANT_WEIGHT": 0.031413612565445025,
                "SHAPE_CONSTANT_WEIGHT": 0.010471204188481676,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.002617801047120419,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.005235602094240838,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.002617801047120419,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.002617801047120419,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.002617801047120419
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 5,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 3,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 9,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 6,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 8,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 5,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 6,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 8,
                "PairCreationOperation": 9,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 5,
                "SHAPE_CONSTANT_WEIGHT": 7,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_11",
        "description": "count the number of occurences of each distinct number",
        "target_program": "tf.math.bincount(in1)",
        "source": "https://stackoverflow.com/questions/45194672/how-to-count-elements-in-tensorflow-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[4, 0, 1, 1, 0, 4, 0, 0, 3, 4, 1],]",
            "outputs": "[4, 3, 0, 1, 3]"
        },
        "completions": [
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.segment_sum(tf.ones_like(in1, dtype=tf.int32), in1)\n",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)\n",
            "return tf.math.bincount(in1)",
            "def transform(in1):\n    unique_values, _ = tf.unique_with_counts(in1)\n    return unique_values\n",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "def transform(in1):\n    count = tf.math.bincount(in1)\n    return tf.boolean_mask(count, tf.not_equal(count, 0))\n",
            "counts = tf.math.bincount(in1)\nreturn tf.boolean_mask(counts, tf.not_equal(counts, 0))\n",
            "return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)\n",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)\n",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.unsorted_segment_sum(tf.ones_like(in1), in1, tf.reduce_max(in1)+1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)\n",
            "result = tf.math.bincount(in1)\nreturn result[result > 0]\n",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)\n",
            "return tf.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "counts = tf.math.unsorted_segment_sum(tf.ones_like(in1), in1, tf.reduce_max(in1)+1)\nreturn tf.boolean_mask(counts, tf.not_equal(counts, 0))\n"
        ],
        "tf_operators": {
            "tf.math.bincount": 45,
            "tf.math.segment_sum": 1,
            "tf.ones_like": 3,
            "tf.int32": 1,
            "tf.unique_with_counts": 1,
            "tf.boolean_mask": 3,
            "tf.not_equal": 3,
            "tf.reduce_max": 2,
            "tf.math.unsorted_segment_sum": 2,
            "tf.bincount": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1,
                0
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 55,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 6,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 1
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0035842293906810036,
                "tf.add(x, y)": 0.0035842293906810036,
                "tf.add_n(inputs)": 0.0035842293906810036,
                "tf.argmax(input, axis)": 0.0035842293906810036,
                "tf.argmin(input, axis)": 0.0035842293906810036,
                "tf.argsort(values, axis, stable=True)": 0.0035842293906810036,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0035842293906810036,
                "tf.boolean_mask(tensor, mask)": 0.014336917562724014,
                "tf.broadcast_to(input, shape)": 0.0035842293906810036,
                "tf.cast(x, dtype)": 0.0035842293906810036,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0035842293906810036,
                "tf.concat(values, axis)": 0.0035842293906810036,
                "tf.constant(value)": 0.0035842293906810036,
                "tf.constant(value, dtype)": 0.0035842293906810036,
                "tf.divide(x, y)": 0.0035842293906810036,
                "tf.equal(x, y)": 0.0035842293906810036,
                "tf.exp(x)": 0.0035842293906810036,
                "tf.expand_dims(input, axis)": 0.0035842293906810036,
                "tf.eye(num_rows)": 0.0035842293906810036,
                "tf.eye(num_rows, num_columns)": 0.0035842293906810036,
                "tf.eye(num_rows, dtype)": 0.0035842293906810036,
                "tf.fill(dims, value)": 0.0035842293906810036,
                "tf.gather(params, indices)": 0.0035842293906810036,
                "tf.gather(params, indices, axis, batch_dims)": 0.0035842293906810036,
                "tf.gather_nd(params, indices)": 0.0035842293906810036,
                "tf.gather_nd(params, indices, batch_dims)": 0.0035842293906810036,
                "tf.greater(x, y)": 0.0035842293906810036,
                "tf.greater_equal(x, y)": 0.0035842293906810036,
                "tf.math.bincount(arr)": 0.16487455197132617,
                "tf.math.ceil(x)": 0.0035842293906810036,
                "tf.math.count_nonzero(input)": 0.0035842293906810036,
                "tf.math.count_nonzero(input, axis)": 0.0035842293906810036,
                "tf.math.cumsum(x, axis)": 0.0035842293906810036,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0035842293906810036,
                "tf.math.divide_no_nan(x, y)": 0.0035842293906810036,
                "tf.math.floor(x)": 0.0035842293906810036,
                "tf.math.log(x)": 0.0035842293906810036,
                "tf.math.logical_and(x, y)": 0.0035842293906810036,
                "tf.math.logical_not(x)": 0.0035842293906810036,
                "tf.math.logical_or(x, y)": 0.0035842293906810036,
                "tf.math.logical_xor(x, y)": 0.0035842293906810036,
                "tf.math.negative(x)": 0.0035842293906810036,
                "tf.math.reciprocal(x)": 0.0035842293906810036,
                "tf.math.reciprocal_no_nan(x)": 0.0035842293906810036,
                "tf.math.segment_max(data, segment_ids)": 0.0035842293906810036,
                "tf.math.segment_mean(data, segment_ids)": 0.0035842293906810036,
                "tf.math.segment_min(data, segment_ids)": 0.0035842293906810036,
                "tf.math.segment_prod(data, segment_ids)": 0.0035842293906810036,
                "tf.math.segment_sum(data, segment_ids)": 0.007168458781362007,
                "tf.math.squared_difference(x, y)": 0.0035842293906810036,
                "tf.math.top_k(input, k)": 0.0035842293906810036,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0035842293906810036,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0035842293906810036,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0035842293906810036,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0035842293906810036,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.010752688172043012,
                "tf.matmul(a, b)": 0.0035842293906810036,
                "tf.maximum(x, y)": 0.0035842293906810036,
                "tf.minimum(x, y)": 0.0035842293906810036,
                "tf.multiply(x, y)": 0.0035842293906810036,
                "tf.not_equal(x, y)": 0.014336917562724014,
                "tf.one_hot(indices, depth)": 0.0035842293906810036,
                "tf.ones(shape)": 0.0035842293906810036,
                "tf.ones_like(input)": 0.014336917562724014,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0035842293906810036,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0035842293906810036,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0035842293906810036,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0035842293906810036,
                "tf.range(start)": 0.0035842293906810036,
                "tf.range(start, limit, delta)": 0.0035842293906810036,
                "tf.reduce_any(input_tensor, axis)": 0.0035842293906810036,
                "tf.reduce_all(input_tensor, axis)": 0.0035842293906810036,
                "tf.reduce_max(input_tensor)": 0.010752688172043012,
                "tf.reduce_max(input_tensor, axis)": 0.0035842293906810036,
                "tf.reduce_mean(input_tensor)": 0.0035842293906810036,
                "tf.reduce_mean(input_tensor, axis)": 0.0035842293906810036,
                "tf.reduce_min(input_tensor)": 0.0035842293906810036,
                "tf.reduce_min(input_tensor, axis)": 0.0035842293906810036,
                "tf.reduce_prod(input_tensor, axis)": 0.0035842293906810036,
                "tf.reduce_sum(input_tensor)": 0.0035842293906810036,
                "tf.reduce_sum(input_tensor, axis)": 0.0035842293906810036,
                "tf.repeat(input, repeats)": 0.0035842293906810036,
                "tf.repeat(input, repeats, axis)": 0.0035842293906810036,
                "tf.reshape(tensor, shape)": 0.0035842293906810036,
                "tf.reverse(tensor, axis)": 0.0035842293906810036,
                "tf.roll(input, shift, axis)": 0.0035842293906810036,
                "tf.round(x)": 0.0035842293906810036,
                "tf.scatter_nd(indices, updates, shape)": 0.0035842293906810036,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0035842293906810036,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0035842293906810036,
                "tf.sequence_mask(lengths)": 0.0035842293906810036,
                "tf.sequence_mask(lengths, maxlen)": 0.0035842293906810036,
                "tf.shape(input)": 0.0035842293906810036,
                "tf.sign(x)": 0.0035842293906810036,
                "tf.sort(values, axis)": 0.0035842293906810036,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0035842293906810036,
                "tf.sqrt(x)": 0.0035842293906810036,
                "tf.square(x)": 0.0035842293906810036,
                "tf.squeeze(input)": 0.0035842293906810036,
                "tf.squeeze(input, axis)": 0.0035842293906810036,
                "tf.stack(values, axis)": 0.0035842293906810036,
                "tf.subtract(x, y)": 0.0035842293906810036,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0035842293906810036,
                "tf.tensordot(a, b, axes)": 0.0035842293906810036,
                "tf.tile(input, multiples)": 0.0035842293906810036,
                "tf.transpose(a)": 0.0035842293906810036,
                "tf.transpose(a, perm)": 0.0035842293906810036,
                "tf.unique_with_counts(x)": 0.007168458781362007,
                "tf.unstack(value, axis)": 0.0035842293906810036,
                "tf.where(condition)": 0.0035842293906810036,
                "tf.where(condition, x, y)": 0.0035842293906810036,
                "tf.zeros(shape)": 0.0035842293906810036,
                "tf.zeros_like(input)": 0.0035842293906810036,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0035842293906810036,
                "tf.sparse.add(a, b)": 0.0035842293906810036,
                "tf.sparse.concat(axis, sp_inputs)": 0.0035842293906810036,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0035842293906810036,
                "tf.sparse.from_dense(tensor)": 0.0035842293906810036,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0035842293906810036,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0035842293906810036,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0035842293906810036,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0035842293906810036,
                "tf.sparse.reset_shape(sp_input)": 0.0035842293906810036,
                "tf.sparse.reshape(sp_input, shape)": 0.0035842293906810036,
                "tf.sparse.retain(sp_input, to_retain)": 0.0035842293906810036,
                "tf.sparse.slice(sp_input, start, size)": 0.0035842293906810036,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0035842293906810036,
                "tf.sparse.to_dense(sp_input)": 0.0035842293906810036,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0035842293906810036,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0035842293906810036,
                "tf.sparse.transpose(sp_input)": 0.0035842293906810036,
                "tf.sparse.transpose(sp_input, perm)": 0.0035842293906810036,
                "IndexingAxis1Operation": 0.0035842293906810036,
                "IndexingOperation": 0.007168458781362007,
                "PairCreationOperation": 0.007168458781362007,
                "SingletonTupleCreationOperation": 0.0035842293906810036,
                "SlicingAxis0BothOperation": 0.0035842293906810036,
                "SlicingAxis0LeftOperation": 0.0035842293906810036,
                "SlicingAxis0RightOperation": 0.0035842293906810036,
                "SlicingAxis1BothOperation": 0.0035842293906810036,
                "SlicingAxis1LeftOperation": 0.0035842293906810036,
                "SlicingAxis1RightOperation": 0.0035842293906810036,
                "TripleCreationOperation": 0.0035842293906810036,
                "PROVIDED_CONSTANT_WEIGHT": 0.0035842293906810036,
                "COMMON_CONSTANT_WEIGHT": 0.025089605734767026,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0035842293906810036,
                "INPUT_VARIABLE_WEIGHT": 0.2007168458781362,
                "AXIS_CONSTANT_WEIGHT": 0.0035842293906810036,
                "SHAPE_CONSTANT_WEIGHT": 0.0035842293906810036,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0035842293906810036,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.007168458781362007,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0035842293906810036,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0035842293906810036,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0035842293906810036
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 6,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 3,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 6,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 6,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 5,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_12",
        "description": "remove a column from the tensor",
        "target_program": "tf.gather(in1, (0, 2), axis=1, batch_dims=0)",
        "source": "https://stackoverflow.com/questions/47447183/remove-a-set-of-tensors-from-a-tensor-in-tensorflow",
        "constants": "[0, 1, 2]",
        "examples": {
            "inputs": "[[[12, 34, 56], [33, 22, 11]]]",
            "outputs": "[[12, 56], [33, 11]]"
        },
        "completions": [
            "return tf.gather(in1, [0, 2], axis=1)\n",
            "return tf.slice(in1, [0, 0], [-1, 1]), tf.slice(in1, [0, 2], [-1, 1])\n",
            "return in1[:, [0, 2]]\n",
            "return tf.slice(in1, [0, 0], [2, 1] + [2, 2])",
            "return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\n",
            "result = tf.concat([in1[:, 0:1], in1[:, 2:3]], axis=1)\nreturn result\n",
            "return tf.slice(in1, [0, 0], [2, 1])\n",
            "return tf.slice(in1, [0, 0], [2, 1])",
            "return tf.boolean_mask(in1, [True, False, True], axis=1)",
            "return tf.gather(in1, [0, 2], axis=1)\n",
            "return tf.gather(in1, [0, 2], axis=1)\n",
            "return tf.gather(in1, [0, 2], axis=1)\n",
            "result = tf.concat([in1[:,0:1], in1[:,2:3]], axis=1)\nreturn result\n",
            "return tf.gather(in1, [0, 2], axis=1)\n",
            "result = tf.gather(in1, [0, 2], axis=1)\nreturn result\n",
            "return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)",
            "return tf.slice(in1, [0, 0], [2, 1]), tf.slice(in1, [0, 2], [2, 1])\n",
            "result = tf.gather(in1, [0, 2], axis=1)\nreturn result\n",
            "return tf.slice(in1, [0, 0], [-1, 1])\n",
            "return in1[:, [0, 2]]\n",
            "return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\n",
            "return tf.gather(in1, [0, 2], axis=1)",
            "return tf.slice(in1, [0, 0], [2, 1])\n",
            "return tf.gather(in1, [0, 2], axis=1)\n",
            "def transform(in1):\n    return tf.concat([in1[:,0:1], in1[:,2:3]], axis=1)\n",
            "return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)",
            "out = tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\nreturn out\n",
            "return tf.boolean_mask(in1, [True, False, True], axis=1)\n",
            "return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)",
            "result = tf.concat([in1[:,0:1], in1[:,2:3]], axis=1)\nreturn result\n",
            "return tf.slice(in1, [0, 0], [-1, 1])+','+tf.slice(in1, [0, 2], [-1, -1])",
            "return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\n",
            "return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\n",
            "return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)",
            "return tf.slice(in1, [0, 0], [2, 1])\n",
            "return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\n",
            "return tf.gather(in1, [0, 2], axis=1)\n",
            "return tf.concat([in1[:,:1], in1[:,2:]], axis=1)\n",
            "result = tf.gather(in1, [0, 2], axis=1)\nreturn result\n",
            "return tf.slice(in1, [0, 0], [2, 1])\n",
            "return tf.unsorted_segment_max(in1, tf.range(in1.shape[1]), in1.shape[1])\n",
            "return tf.gather(in1, [0, 2], axis=1)",
            "return tf.gather(in1, [0, 2], axis=1)\n",
            "def transform(in1):\n    return in1[:, [0, 2]]\n",
            "return tf.boolean_mask(in1, tf.constant([True, False, True], dtype=tf.bool), axis=1)\n",
            "return tf.unstack(in1, axis=1)[0], tf.unstack(in1, axis=1)[2]",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n",
            "return tf.boolean_mask(in1, [True, False, True], axis=1)\n",
            "return tf.slice(in1, [0, 0], [2, 1])\n",
            "return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\n"
        ],
        "tf_operators": {
            "tf.gather": 14,
            "tf.slice": 11,
            "tf.concat": 16,
            "tf.boolean_mask": 4,
            "tf.range": 1,
            "tf.unsorted_segment_max": 1,
            "tf.constant": 1,
            "tf.bool": 1,
            "tf.unstack": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                0,
                2,
                1
            ],
            [
                0,
                0,
                -1,
                1,
                0,
                2,
                -1,
                1
            ],
            [
                0,
                2
            ],
            [
                0,
                0,
                2,
                1,
                2,
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                0,
                0,
                2,
                1
            ],
            [
                0,
                0,
                2,
                1
            ],
            [
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                0,
                0,
                2,
                1,
                0,
                2,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                0,
                -1,
                1
            ],
            [
                0,
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                0,
                0,
                -1,
                1,
                0,
                2,
                -1,
                -1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                0,
                0,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                0,
                2,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2
            ],
            [
                1
            ],
            [
                1,
                0,
                1,
                2
            ],
            [
                0,
                2,
                1
            ],
            [
                1
            ],
            [
                0,
                0,
                2,
                1
            ],
            [
                1,
                2,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 70,
            "shape": 4,
            "tf_bool": 1,
            "provided": 0,
            "common": 132,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 48,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0019083969465648854,
                "tf.add(x, y)": 0.0019083969465648854,
                "tf.add_n(inputs)": 0.0019083969465648854,
                "tf.argmax(input, axis)": 0.0019083969465648854,
                "tf.argmin(input, axis)": 0.0019083969465648854,
                "tf.argsort(values, axis, stable=True)": 0.0019083969465648854,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0019083969465648854,
                "tf.boolean_mask(tensor, mask)": 0.009541984732824428,
                "tf.broadcast_to(input, shape)": 0.0019083969465648854,
                "tf.cast(x, dtype)": 0.0019083969465648854,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0019083969465648854,
                "tf.concat(values, axis)": 0.03244274809160305,
                "tf.constant(value)": 0.0019083969465648854,
                "tf.constant(value, dtype)": 0.0019083969465648854,
                "tf.divide(x, y)": 0.0019083969465648854,
                "tf.equal(x, y)": 0.0019083969465648854,
                "tf.exp(x)": 0.0019083969465648854,
                "tf.expand_dims(input, axis)": 0.0019083969465648854,
                "tf.eye(num_rows)": 0.0019083969465648854,
                "tf.eye(num_rows, num_columns)": 0.0019083969465648854,
                "tf.eye(num_rows, dtype)": 0.0019083969465648854,
                "tf.fill(dims, value)": 0.0019083969465648854,
                "tf.gather(params, indices)": 0.0019083969465648854,
                "tf.gather(params, indices, axis, batch_dims)": 0.02862595419847328,
                "tf.gather_nd(params, indices)": 0.0019083969465648854,
                "tf.gather_nd(params, indices, batch_dims)": 0.0019083969465648854,
                "tf.greater(x, y)": 0.0019083969465648854,
                "tf.greater_equal(x, y)": 0.0019083969465648854,
                "tf.math.bincount(arr)": 0.0019083969465648854,
                "tf.math.ceil(x)": 0.0019083969465648854,
                "tf.math.count_nonzero(input)": 0.0019083969465648854,
                "tf.math.count_nonzero(input, axis)": 0.0019083969465648854,
                "tf.math.cumsum(x, axis)": 0.0019083969465648854,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0019083969465648854,
                "tf.math.divide_no_nan(x, y)": 0.0019083969465648854,
                "tf.math.floor(x)": 0.0019083969465648854,
                "tf.math.log(x)": 0.0019083969465648854,
                "tf.math.logical_and(x, y)": 0.0019083969465648854,
                "tf.math.logical_not(x)": 0.0019083969465648854,
                "tf.math.logical_or(x, y)": 0.0019083969465648854,
                "tf.math.logical_xor(x, y)": 0.0019083969465648854,
                "tf.math.negative(x)": 0.0019083969465648854,
                "tf.math.reciprocal(x)": 0.0019083969465648854,
                "tf.math.reciprocal_no_nan(x)": 0.0019083969465648854,
                "tf.math.segment_max(data, segment_ids)": 0.0019083969465648854,
                "tf.math.segment_mean(data, segment_ids)": 0.0019083969465648854,
                "tf.math.segment_min(data, segment_ids)": 0.0019083969465648854,
                "tf.math.segment_prod(data, segment_ids)": 0.0019083969465648854,
                "tf.math.segment_sum(data, segment_ids)": 0.0019083969465648854,
                "tf.math.squared_difference(x, y)": 0.0019083969465648854,
                "tf.math.top_k(input, k)": 0.0019083969465648854,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0019083969465648854,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0019083969465648854,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0019083969465648854,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0019083969465648854,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0019083969465648854,
                "tf.matmul(a, b)": 0.0019083969465648854,
                "tf.maximum(x, y)": 0.0019083969465648854,
                "tf.minimum(x, y)": 0.0019083969465648854,
                "tf.multiply(x, y)": 0.0019083969465648854,
                "tf.not_equal(x, y)": 0.0019083969465648854,
                "tf.one_hot(indices, depth)": 0.0019083969465648854,
                "tf.ones(shape)": 0.0019083969465648854,
                "tf.ones_like(input)": 0.0019083969465648854,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0019083969465648854,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0019083969465648854,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0019083969465648854,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0019083969465648854,
                "tf.range(start)": 0.003816793893129771,
                "tf.range(start, limit, delta)": 0.0019083969465648854,
                "tf.reduce_any(input_tensor, axis)": 0.0019083969465648854,
                "tf.reduce_all(input_tensor, axis)": 0.0019083969465648854,
                "tf.reduce_max(input_tensor)": 0.0019083969465648854,
                "tf.reduce_max(input_tensor, axis)": 0.0019083969465648854,
                "tf.reduce_mean(input_tensor)": 0.0019083969465648854,
                "tf.reduce_mean(input_tensor, axis)": 0.0019083969465648854,
                "tf.reduce_min(input_tensor)": 0.0019083969465648854,
                "tf.reduce_min(input_tensor, axis)": 0.0019083969465648854,
                "tf.reduce_prod(input_tensor, axis)": 0.0019083969465648854,
                "tf.reduce_sum(input_tensor)": 0.0019083969465648854,
                "tf.reduce_sum(input_tensor, axis)": 0.0019083969465648854,
                "tf.repeat(input, repeats)": 0.0019083969465648854,
                "tf.repeat(input, repeats, axis)": 0.0019083969465648854,
                "tf.reshape(tensor, shape)": 0.0019083969465648854,
                "tf.reverse(tensor, axis)": 0.0019083969465648854,
                "tf.roll(input, shift, axis)": 0.0019083969465648854,
                "tf.round(x)": 0.0019083969465648854,
                "tf.scatter_nd(indices, updates, shape)": 0.0019083969465648854,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0019083969465648854,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0019083969465648854,
                "tf.sequence_mask(lengths)": 0.0019083969465648854,
                "tf.sequence_mask(lengths, maxlen)": 0.0019083969465648854,
                "tf.shape(input)": 0.0019083969465648854,
                "tf.sign(x)": 0.0019083969465648854,
                "tf.sort(values, axis)": 0.0019083969465648854,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0019083969465648854,
                "tf.sqrt(x)": 0.0019083969465648854,
                "tf.square(x)": 0.0019083969465648854,
                "tf.squeeze(input)": 0.0019083969465648854,
                "tf.squeeze(input, axis)": 0.0019083969465648854,
                "tf.stack(values, axis)": 0.0019083969465648854,
                "tf.subtract(x, y)": 0.0019083969465648854,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0019083969465648854,
                "tf.tensordot(a, b, axes)": 0.0019083969465648854,
                "tf.tile(input, multiples)": 0.0019083969465648854,
                "tf.transpose(a)": 0.0019083969465648854,
                "tf.transpose(a, perm)": 0.0019083969465648854,
                "tf.unique_with_counts(x)": 0.0019083969465648854,
                "tf.unstack(value, axis)": 0.0057251908396946565,
                "tf.where(condition)": 0.0019083969465648854,
                "tf.where(condition, x, y)": 0.0019083969465648854,
                "tf.zeros(shape)": 0.0019083969465648854,
                "tf.zeros_like(input)": 0.0019083969465648854,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0019083969465648854,
                "tf.sparse.add(a, b)": 0.0019083969465648854,
                "tf.sparse.concat(axis, sp_inputs)": 0.0019083969465648854,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0019083969465648854,
                "tf.sparse.from_dense(tensor)": 0.0019083969465648854,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0019083969465648854,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0019083969465648854,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0019083969465648854,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0019083969465648854,
                "tf.sparse.reset_shape(sp_input)": 0.0019083969465648854,
                "tf.sparse.reshape(sp_input, shape)": 0.0019083969465648854,
                "tf.sparse.retain(sp_input, to_retain)": 0.0019083969465648854,
                "tf.sparse.slice(sp_input, start, size)": 0.0019083969465648854,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0019083969465648854,
                "tf.sparse.to_dense(sp_input)": 0.0019083969465648854,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0019083969465648854,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0019083969465648854,
                "tf.sparse.transpose(sp_input)": 0.0019083969465648854,
                "tf.sparse.transpose(sp_input, perm)": 0.0019083969465648854,
                "IndexingAxis1Operation": 0.007633587786259542,
                "IndexingOperation": 0.009541984732824428,
                "PairCreationOperation": 0.07442748091603053,
                "SingletonTupleCreationOperation": 0.0019083969465648854,
                "SlicingAxis0BothOperation": 0.0019083969465648854,
                "SlicingAxis0LeftOperation": 0.0019083969465648854,
                "SlicingAxis0RightOperation": 0.0019083969465648854,
                "SlicingAxis1BothOperation": 0.01717557251908397,
                "SlicingAxis1LeftOperation": 0.02480916030534351,
                "SlicingAxis1RightOperation": 0.02480916030534351,
                "TripleCreationOperation": 0.0019083969465648854,
                "PROVIDED_CONSTANT_WEIGHT": 0.0019083969465648854,
                "COMMON_CONSTANT_WEIGHT": 0.2538167938931298,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0019083969465648854,
                "INPUT_VARIABLE_WEIGHT": 0.13549618320610687,
                "AXIS_CONSTANT_WEIGHT": 0.09351145038167939,
                "SHAPE_CONSTANT_WEIGHT": 0.009541984732824428,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0019083969465648854,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0019083969465648854,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0019083969465648854,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.003816793893129771,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0019083969465648854
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 9,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 5,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 9,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 5,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 9,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 4,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 6,
                "SlicingAxis1LeftOperation": 5,
                "SlicingAxis1RightOperation": 5,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 2,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 3,
                "SHAPE_CONSTANT_WEIGHT": 7,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_13",
        "description": "multiply vectors by tensor",
        "target_program": "tf.tensordot(in1, in2, (1, 1))",
        "source": "https://stackoverflow.com/questions/50777704/n-d-tensor-matrix-multiplication-with-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[3, 5], [10, 2]],[[[1, 0], [5, 4]], [[3, 10], [2, -2]]],]",
            "outputs": "[[[28, 20], [19, 20]], [[20, 8], [34, 96]]]"
        },
        "completions": [
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.matmul(tf.expand_dims(in1, -1), in2)[:, :, 0]\n",
            "return tf.matmul(in2, tf.reshape(in1, [2, 1, 2]))\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "result = tf.tensordot(in2, in1, axes=1)\nreturn result\n",
            "return tf.matmul(in2, in1)\n",
            "return tf.tensordot(in2, in1, axes=[[1], [1]])\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in2, in1, 1)",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.matmul(in2, in1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.matmul(in2, in1)\n",
            "return tf.matmul(in2, in1, transpose_b=True)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in2, in1, axes=1)",
            "return tf.matmul(in2, in1)\n",
            "return tf.matmul(in2, tf.expand_dims(in1, 2))",
            "return tf.matmul(in2, in1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "result = tf.tensordot(in2, in1, axes=1)\nresult = tf.transpose(result, perm=[0, 2, 1])\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in2, in1, 1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in2, in1, axes=1)",
            "result = tf.tensordot(in1, in2, axes=1)\nreturn result\n",
            "return tf.matmul(in1, in2)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in2, in1, axes=1)",
            "def transform(in1, in2):\n    return tf.matmul(in2, in1[..., tf.newaxis])\n",
            "return tf.matmul(in1, in2)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in2, in1, axes=1)",
            "return tf.matmul(in2, in1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.matmul(in2, in1)\n",
            "return tf.matmul(in2, tf.expand_dims(in1, -1))",
            "return tf.tensordot(in2, in1, axes=1)",
            "return tf.matmul(in2, in1)\n",
            "return tf.math.multiply(in1, in2)\n",
            "return tf.matmul(in2, in1)\n",
            "return tf.matmul(in2, in1)\n",
            "return tf.tensordot(in2, in1, axes=1)",
            "result = tf.tensordot(tf.expand_dims(in1, axis=-1), in2, axes=[[-1], [-1]])\nresult = tf.squeeze(result, axis=-1)\nreturn result\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.matmul(in2, in1, transpose_a=True)\n"
        ],
        "tf_operators": {
            "tf.tensordot": 30,
            "tf.expand_dims": 4,
            "tf.matmul": 19,
            "tf.reshape": 1,
            "tf.transpose": 1,
            "tf.newaxis": 1,
            "tf.math.multiply": 1,
            "tf.squeeze": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                2,
                1,
                2
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                2
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [
                -1
            ],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [
                -1,
                -1,
                -1,
                -1
            ],
            [
                1
            ],
            []
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 100,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 41,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 4,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0028089887640449437,
                "tf.add(x, y)": 0.0028089887640449437,
                "tf.add_n(inputs)": 0.0028089887640449437,
                "tf.argmax(input, axis)": 0.0028089887640449437,
                "tf.argmin(input, axis)": 0.0028089887640449437,
                "tf.argsort(values, axis, stable=True)": 0.0028089887640449437,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0028089887640449437,
                "tf.boolean_mask(tensor, mask)": 0.0028089887640449437,
                "tf.broadcast_to(input, shape)": 0.0028089887640449437,
                "tf.cast(x, dtype)": 0.0028089887640449437,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0028089887640449437,
                "tf.concat(values, axis)": 0.0028089887640449437,
                "tf.constant(value)": 0.0028089887640449437,
                "tf.constant(value, dtype)": 0.0028089887640449437,
                "tf.divide(x, y)": 0.0028089887640449437,
                "tf.equal(x, y)": 0.0028089887640449437,
                "tf.exp(x)": 0.0028089887640449437,
                "tf.expand_dims(input, axis)": 0.014044943820224719,
                "tf.eye(num_rows)": 0.0028089887640449437,
                "tf.eye(num_rows, num_columns)": 0.0028089887640449437,
                "tf.eye(num_rows, dtype)": 0.0028089887640449437,
                "tf.fill(dims, value)": 0.0028089887640449437,
                "tf.gather(params, indices)": 0.0028089887640449437,
                "tf.gather(params, indices, axis, batch_dims)": 0.0028089887640449437,
                "tf.gather_nd(params, indices)": 0.0028089887640449437,
                "tf.gather_nd(params, indices, batch_dims)": 0.0028089887640449437,
                "tf.greater(x, y)": 0.0028089887640449437,
                "tf.greater_equal(x, y)": 0.0028089887640449437,
                "tf.math.bincount(arr)": 0.0028089887640449437,
                "tf.math.ceil(x)": 0.0028089887640449437,
                "tf.math.count_nonzero(input)": 0.0028089887640449437,
                "tf.math.count_nonzero(input, axis)": 0.0028089887640449437,
                "tf.math.cumsum(x, axis)": 0.0028089887640449437,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0028089887640449437,
                "tf.math.divide_no_nan(x, y)": 0.0028089887640449437,
                "tf.math.floor(x)": 0.0028089887640449437,
                "tf.math.log(x)": 0.0028089887640449437,
                "tf.math.logical_and(x, y)": 0.0028089887640449437,
                "tf.math.logical_not(x)": 0.0028089887640449437,
                "tf.math.logical_or(x, y)": 0.0028089887640449437,
                "tf.math.logical_xor(x, y)": 0.0028089887640449437,
                "tf.math.negative(x)": 0.0028089887640449437,
                "tf.math.reciprocal(x)": 0.0028089887640449437,
                "tf.math.reciprocal_no_nan(x)": 0.0028089887640449437,
                "tf.math.segment_max(data, segment_ids)": 0.0028089887640449437,
                "tf.math.segment_mean(data, segment_ids)": 0.0028089887640449437,
                "tf.math.segment_min(data, segment_ids)": 0.0028089887640449437,
                "tf.math.segment_prod(data, segment_ids)": 0.0028089887640449437,
                "tf.math.segment_sum(data, segment_ids)": 0.0028089887640449437,
                "tf.math.squared_difference(x, y)": 0.0028089887640449437,
                "tf.math.top_k(input, k)": 0.0028089887640449437,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0028089887640449437,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0028089887640449437,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0028089887640449437,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0028089887640449437,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0028089887640449437,
                "tf.matmul(a, b)": 0.056179775280898875,
                "tf.maximum(x, y)": 0.0028089887640449437,
                "tf.minimum(x, y)": 0.0028089887640449437,
                "tf.multiply(x, y)": 0.0028089887640449437,
                "tf.not_equal(x, y)": 0.0028089887640449437,
                "tf.one_hot(indices, depth)": 0.0028089887640449437,
                "tf.ones(shape)": 0.0028089887640449437,
                "tf.ones_like(input)": 0.0028089887640449437,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0028089887640449437,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0028089887640449437,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0028089887640449437,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0028089887640449437,
                "tf.range(start)": 0.0028089887640449437,
                "tf.range(start, limit, delta)": 0.0028089887640449437,
                "tf.reduce_any(input_tensor, axis)": 0.0028089887640449437,
                "tf.reduce_all(input_tensor, axis)": 0.0028089887640449437,
                "tf.reduce_max(input_tensor)": 0.0028089887640449437,
                "tf.reduce_max(input_tensor, axis)": 0.0028089887640449437,
                "tf.reduce_mean(input_tensor)": 0.0028089887640449437,
                "tf.reduce_mean(input_tensor, axis)": 0.0028089887640449437,
                "tf.reduce_min(input_tensor)": 0.0028089887640449437,
                "tf.reduce_min(input_tensor, axis)": 0.0028089887640449437,
                "tf.reduce_prod(input_tensor, axis)": 0.0028089887640449437,
                "tf.reduce_sum(input_tensor)": 0.0028089887640449437,
                "tf.reduce_sum(input_tensor, axis)": 0.0028089887640449437,
                "tf.repeat(input, repeats)": 0.0028089887640449437,
                "tf.repeat(input, repeats, axis)": 0.0028089887640449437,
                "tf.reshape(tensor, shape)": 0.0056179775280898875,
                "tf.reverse(tensor, axis)": 0.0028089887640449437,
                "tf.roll(input, shift, axis)": 0.0028089887640449437,
                "tf.round(x)": 0.0028089887640449437,
                "tf.scatter_nd(indices, updates, shape)": 0.0028089887640449437,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0028089887640449437,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0028089887640449437,
                "tf.sequence_mask(lengths)": 0.0028089887640449437,
                "tf.sequence_mask(lengths, maxlen)": 0.0028089887640449437,
                "tf.shape(input)": 0.0028089887640449437,
                "tf.sign(x)": 0.0028089887640449437,
                "tf.sort(values, axis)": 0.0028089887640449437,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0028089887640449437,
                "tf.sqrt(x)": 0.0028089887640449437,
                "tf.square(x)": 0.0028089887640449437,
                "tf.squeeze(input)": 0.0028089887640449437,
                "tf.squeeze(input, axis)": 0.0028089887640449437,
                "tf.stack(values, axis)": 0.0028089887640449437,
                "tf.subtract(x, y)": 0.0028089887640449437,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0028089887640449437,
                "tf.tensordot(a, b, axes)": 0.08707865168539326,
                "tf.tile(input, multiples)": 0.0028089887640449437,
                "tf.transpose(a)": 0.0028089887640449437,
                "tf.transpose(a, perm)": 0.0028089887640449437,
                "tf.unique_with_counts(x)": 0.0028089887640449437,
                "tf.unstack(value, axis)": 0.0028089887640449437,
                "tf.where(condition)": 0.0028089887640449437,
                "tf.where(condition, x, y)": 0.0028089887640449437,
                "tf.zeros(shape)": 0.0028089887640449437,
                "tf.zeros_like(input)": 0.0028089887640449437,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0028089887640449437,
                "tf.sparse.add(a, b)": 0.0028089887640449437,
                "tf.sparse.concat(axis, sp_inputs)": 0.0028089887640449437,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0028089887640449437,
                "tf.sparse.from_dense(tensor)": 0.0028089887640449437,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0028089887640449437,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0028089887640449437,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0028089887640449437,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0028089887640449437,
                "tf.sparse.reset_shape(sp_input)": 0.0028089887640449437,
                "tf.sparse.reshape(sp_input, shape)": 0.0028089887640449437,
                "tf.sparse.retain(sp_input, to_retain)": 0.0028089887640449437,
                "tf.sparse.slice(sp_input, start, size)": 0.0028089887640449437,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0028089887640449437,
                "tf.sparse.to_dense(sp_input)": 0.0028089887640449437,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0028089887640449437,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0028089887640449437,
                "tf.sparse.transpose(sp_input)": 0.0028089887640449437,
                "tf.sparse.transpose(sp_input, perm)": 0.0028089887640449437,
                "IndexingAxis1Operation": 0.0028089887640449437,
                "IndexingOperation": 0.0028089887640449437,
                "PairCreationOperation": 0.0056179775280898875,
                "SingletonTupleCreationOperation": 0.0028089887640449437,
                "SlicingAxis0BothOperation": 0.0028089887640449437,
                "SlicingAxis0LeftOperation": 0.0028089887640449437,
                "SlicingAxis0RightOperation": 0.0028089887640449437,
                "SlicingAxis1BothOperation": 0.0028089887640449437,
                "SlicingAxis1LeftOperation": 0.0028089887640449437,
                "SlicingAxis1RightOperation": 0.0028089887640449437,
                "TripleCreationOperation": 0.0056179775280898875,
                "PROVIDED_CONSTANT_WEIGHT": 0.0028089887640449437,
                "COMMON_CONSTANT_WEIGHT": 0.11797752808988764,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0028089887640449437,
                "INPUT_VARIABLE_WEIGHT": 0.28370786516853935,
                "AXIS_CONSTANT_WEIGHT": 0.014044943820224719,
                "SHAPE_CONSTANT_WEIGHT": 0.0028089887640449437,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0028089887640449437,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0028089887640449437,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0028089887640449437,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0028089887640449437,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0028089887640449437
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 6,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 4,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 4,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 7,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 6,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_14",
        "description": "choose True if any value in a row is True, False otherwise",
        "target_program": "tf.reduce_any(in1, axis=-1)",
        "source": "https://stackoverflow.com/questions/35657003/aggregate-each-element-of-tensor-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[False, False, True],  [False, False, False],  [True, False, True],  [False, True, False],  [False, False, False],  [True, True, True],  [True, True, False]]],]",
            "outputs": "[[True, False, True, True, False, True, True]]"
        },
        "completions": [
            "def transform(in1):\n    return tf.reduce_any(in1, axis=-1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "result = tf.reduce_any(in1, axis=2)\nreturn result\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=-1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "import tensorflow as tf\n\ndef transform(in1):\n    return tf.reduce_any(in1, axis=2)\n",
            "return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)\n",
            "return tf.reduce_any(tf.cast(in1, tf.bool), axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=0)",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=-1)\n",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=2)\n",
            "return tf.reduce_any(in1, axis=-1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=-1)",
            "row_any_true = tf.reduce_any(in1, axis=2)\nreturn row_any_true\n",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n"
        ],
        "tf_operators": {
            "tf.reduce_any": 50,
            "tf.cast": 1,
            "tf.bool": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 50,
            "shape": 0,
            "tf_bool": 1,
            "provided": 0,
            "common": 45,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 5,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.003257328990228013,
                "tf.add(x, y)": 0.003257328990228013,
                "tf.add_n(inputs)": 0.003257328990228013,
                "tf.argmax(input, axis)": 0.003257328990228013,
                "tf.argmin(input, axis)": 0.003257328990228013,
                "tf.argsort(values, axis, stable=True)": 0.003257328990228013,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.003257328990228013,
                "tf.boolean_mask(tensor, mask)": 0.003257328990228013,
                "tf.broadcast_to(input, shape)": 0.003257328990228013,
                "tf.cast(x, dtype)": 0.006514657980456026,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.003257328990228013,
                "tf.concat(values, axis)": 0.003257328990228013,
                "tf.constant(value)": 0.003257328990228013,
                "tf.constant(value, dtype)": 0.003257328990228013,
                "tf.divide(x, y)": 0.003257328990228013,
                "tf.equal(x, y)": 0.003257328990228013,
                "tf.exp(x)": 0.003257328990228013,
                "tf.expand_dims(input, axis)": 0.003257328990228013,
                "tf.eye(num_rows)": 0.003257328990228013,
                "tf.eye(num_rows, num_columns)": 0.003257328990228013,
                "tf.eye(num_rows, dtype)": 0.003257328990228013,
                "tf.fill(dims, value)": 0.003257328990228013,
                "tf.gather(params, indices)": 0.003257328990228013,
                "tf.gather(params, indices, axis, batch_dims)": 0.003257328990228013,
                "tf.gather_nd(params, indices)": 0.003257328990228013,
                "tf.gather_nd(params, indices, batch_dims)": 0.003257328990228013,
                "tf.greater(x, y)": 0.003257328990228013,
                "tf.greater_equal(x, y)": 0.003257328990228013,
                "tf.math.bincount(arr)": 0.003257328990228013,
                "tf.math.ceil(x)": 0.003257328990228013,
                "tf.math.count_nonzero(input)": 0.003257328990228013,
                "tf.math.count_nonzero(input, axis)": 0.003257328990228013,
                "tf.math.cumsum(x, axis)": 0.003257328990228013,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.003257328990228013,
                "tf.math.divide_no_nan(x, y)": 0.003257328990228013,
                "tf.math.floor(x)": 0.003257328990228013,
                "tf.math.log(x)": 0.003257328990228013,
                "tf.math.logical_and(x, y)": 0.003257328990228013,
                "tf.math.logical_not(x)": 0.003257328990228013,
                "tf.math.logical_or(x, y)": 0.003257328990228013,
                "tf.math.logical_xor(x, y)": 0.003257328990228013,
                "tf.math.negative(x)": 0.003257328990228013,
                "tf.math.reciprocal(x)": 0.003257328990228013,
                "tf.math.reciprocal_no_nan(x)": 0.003257328990228013,
                "tf.math.segment_max(data, segment_ids)": 0.003257328990228013,
                "tf.math.segment_mean(data, segment_ids)": 0.003257328990228013,
                "tf.math.segment_min(data, segment_ids)": 0.003257328990228013,
                "tf.math.segment_prod(data, segment_ids)": 0.003257328990228013,
                "tf.math.segment_sum(data, segment_ids)": 0.003257328990228013,
                "tf.math.squared_difference(x, y)": 0.003257328990228013,
                "tf.math.top_k(input, k)": 0.003257328990228013,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.003257328990228013,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.003257328990228013,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.003257328990228013,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.003257328990228013,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.003257328990228013,
                "tf.matmul(a, b)": 0.003257328990228013,
                "tf.maximum(x, y)": 0.003257328990228013,
                "tf.minimum(x, y)": 0.003257328990228013,
                "tf.multiply(x, y)": 0.003257328990228013,
                "tf.not_equal(x, y)": 0.003257328990228013,
                "tf.one_hot(indices, depth)": 0.003257328990228013,
                "tf.ones(shape)": 0.003257328990228013,
                "tf.ones_like(input)": 0.003257328990228013,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.003257328990228013,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.003257328990228013,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.003257328990228013,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.003257328990228013,
                "tf.range(start)": 0.003257328990228013,
                "tf.range(start, limit, delta)": 0.003257328990228013,
                "tf.reduce_any(input_tensor, axis)": 0.16612377850162866,
                "tf.reduce_all(input_tensor, axis)": 0.003257328990228013,
                "tf.reduce_max(input_tensor)": 0.003257328990228013,
                "tf.reduce_max(input_tensor, axis)": 0.003257328990228013,
                "tf.reduce_mean(input_tensor)": 0.003257328990228013,
                "tf.reduce_mean(input_tensor, axis)": 0.003257328990228013,
                "tf.reduce_min(input_tensor)": 0.003257328990228013,
                "tf.reduce_min(input_tensor, axis)": 0.003257328990228013,
                "tf.reduce_prod(input_tensor, axis)": 0.003257328990228013,
                "tf.reduce_sum(input_tensor)": 0.003257328990228013,
                "tf.reduce_sum(input_tensor, axis)": 0.003257328990228013,
                "tf.repeat(input, repeats)": 0.003257328990228013,
                "tf.repeat(input, repeats, axis)": 0.003257328990228013,
                "tf.reshape(tensor, shape)": 0.003257328990228013,
                "tf.reverse(tensor, axis)": 0.003257328990228013,
                "tf.roll(input, shift, axis)": 0.003257328990228013,
                "tf.round(x)": 0.003257328990228013,
                "tf.scatter_nd(indices, updates, shape)": 0.003257328990228013,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.003257328990228013,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.003257328990228013,
                "tf.sequence_mask(lengths)": 0.003257328990228013,
                "tf.sequence_mask(lengths, maxlen)": 0.003257328990228013,
                "tf.shape(input)": 0.003257328990228013,
                "tf.sign(x)": 0.003257328990228013,
                "tf.sort(values, axis)": 0.003257328990228013,
                "tf.sort(values, axis, direction='DESCENDING')": 0.003257328990228013,
                "tf.sqrt(x)": 0.003257328990228013,
                "tf.square(x)": 0.003257328990228013,
                "tf.squeeze(input)": 0.003257328990228013,
                "tf.squeeze(input, axis)": 0.003257328990228013,
                "tf.stack(values, axis)": 0.003257328990228013,
                "tf.subtract(x, y)": 0.003257328990228013,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.003257328990228013,
                "tf.tensordot(a, b, axes)": 0.003257328990228013,
                "tf.tile(input, multiples)": 0.003257328990228013,
                "tf.transpose(a)": 0.003257328990228013,
                "tf.transpose(a, perm)": 0.003257328990228013,
                "tf.unique_with_counts(x)": 0.003257328990228013,
                "tf.unstack(value, axis)": 0.003257328990228013,
                "tf.where(condition)": 0.003257328990228013,
                "tf.where(condition, x, y)": 0.003257328990228013,
                "tf.zeros(shape)": 0.003257328990228013,
                "tf.zeros_like(input)": 0.003257328990228013,
                "tf.SparseTensor(indices, values, dense_shape)": 0.003257328990228013,
                "tf.sparse.add(a, b)": 0.003257328990228013,
                "tf.sparse.concat(axis, sp_inputs)": 0.003257328990228013,
                "tf.sparse.expand_dims(sp_input, axis)": 0.003257328990228013,
                "tf.sparse.from_dense(tensor)": 0.003257328990228013,
                "tf.sparse.maximum(sp_a, sp_b)": 0.003257328990228013,
                "tf.sparse.minimum(sp_a, sp_b)": 0.003257328990228013,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.003257328990228013,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.003257328990228013,
                "tf.sparse.reset_shape(sp_input)": 0.003257328990228013,
                "tf.sparse.reshape(sp_input, shape)": 0.003257328990228013,
                "tf.sparse.retain(sp_input, to_retain)": 0.003257328990228013,
                "tf.sparse.slice(sp_input, start, size)": 0.003257328990228013,
                "tf.sparse.split(sp_input, num_split, axis)": 0.003257328990228013,
                "tf.sparse.to_dense(sp_input)": 0.003257328990228013,
                "tf.sparse.to_dense(sp_input, default_value)": 0.003257328990228013,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.003257328990228013,
                "tf.sparse.transpose(sp_input)": 0.003257328990228013,
                "tf.sparse.transpose(sp_input, perm)": 0.003257328990228013,
                "IndexingAxis1Operation": 0.003257328990228013,
                "IndexingOperation": 0.003257328990228013,
                "PairCreationOperation": 0.003257328990228013,
                "SingletonTupleCreationOperation": 0.003257328990228013,
                "SlicingAxis0BothOperation": 0.003257328990228013,
                "SlicingAxis0LeftOperation": 0.003257328990228013,
                "SlicingAxis0RightOperation": 0.003257328990228013,
                "SlicingAxis1BothOperation": 0.003257328990228013,
                "SlicingAxis1LeftOperation": 0.003257328990228013,
                "SlicingAxis1RightOperation": 0.003257328990228013,
                "TripleCreationOperation": 0.003257328990228013,
                "PROVIDED_CONSTANT_WEIGHT": 0.003257328990228013,
                "COMMON_CONSTANT_WEIGHT": 0.1498371335504886,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.003257328990228013,
                "INPUT_VARIABLE_WEIGHT": 0.16612377850162866,
                "AXIS_CONSTANT_WEIGHT": 0.019543973941368076,
                "SHAPE_CONSTANT_WEIGHT": 0.003257328990228013,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.003257328990228013,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.003257328990228013,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.003257328990228013,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.006514657980456026,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.003257328990228013
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 3,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 6,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_15",
        "description": "set all instances of 1 to 0",
        "target_program": "tf.subtract(in1, tf.cast(tf.equal(in1, tf.constant(1)), tf.int32))",
        "source": "https://stackoverflow.com/questions/39045797/conditional-assignment-of-tensor-values-in-tensorflow",
        "constants": "[0, 1]",
        "examples": {
            "inputs": "[[3, 1, 2, 0, 1, -1, 10, 1, -10],]",
            "outputs": "[3, 0, 2, 0, 0, -1, 10, 0, -10]"
        },
        "completions": [
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.multiply(in1, tf.not_equal(in1, 1))\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.math.logical_not(tf.equal(in1, 1)) * in1\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.not_equal(in1, 1) * in1\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.where(in1 == 1, 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "out = tf.where(tf.equal(in1, 1), 0, in1)\nreturn out\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)"
        ],
        "tf_operators": {
            "tf.where": 47,
            "tf.zeros_like": 27,
            "tf.equal": 47,
            "tf.not_equal": 2,
            "tf.multiply": 1,
            "tf.math.logical_not": 1
        },
        "coverage_percentage": 20.0,
        "total_covered": 1,
        "total_in_target": 5,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 127,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 70,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0020964360587002098,
                "tf.add(x, y)": 0.0020964360587002098,
                "tf.add_n(inputs)": 0.0020964360587002098,
                "tf.argmax(input, axis)": 0.0020964360587002098,
                "tf.argmin(input, axis)": 0.0020964360587002098,
                "tf.argsort(values, axis, stable=True)": 0.0020964360587002098,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0020964360587002098,
                "tf.boolean_mask(tensor, mask)": 0.0020964360587002098,
                "tf.broadcast_to(input, shape)": 0.0020964360587002098,
                "tf.cast(x, dtype)": 0.0020964360587002098,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0020964360587002098,
                "tf.concat(values, axis)": 0.0020964360587002098,
                "tf.constant(value)": 0.0020964360587002098,
                "tf.constant(value, dtype)": 0.0020964360587002098,
                "tf.divide(x, y)": 0.0020964360587002098,
                "tf.equal(x, y)": 0.10062893081761007,
                "tf.exp(x)": 0.0020964360587002098,
                "tf.expand_dims(input, axis)": 0.0020964360587002098,
                "tf.eye(num_rows)": 0.0020964360587002098,
                "tf.eye(num_rows, num_columns)": 0.0020964360587002098,
                "tf.eye(num_rows, dtype)": 0.0020964360587002098,
                "tf.fill(dims, value)": 0.0020964360587002098,
                "tf.gather(params, indices)": 0.0020964360587002098,
                "tf.gather(params, indices, axis, batch_dims)": 0.0020964360587002098,
                "tf.gather_nd(params, indices)": 0.0020964360587002098,
                "tf.gather_nd(params, indices, batch_dims)": 0.0020964360587002098,
                "tf.greater(x, y)": 0.0020964360587002098,
                "tf.greater_equal(x, y)": 0.0020964360587002098,
                "tf.math.bincount(arr)": 0.0020964360587002098,
                "tf.math.ceil(x)": 0.0020964360587002098,
                "tf.math.count_nonzero(input)": 0.0020964360587002098,
                "tf.math.count_nonzero(input, axis)": 0.0020964360587002098,
                "tf.math.cumsum(x, axis)": 0.0020964360587002098,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0020964360587002098,
                "tf.math.divide_no_nan(x, y)": 0.0020964360587002098,
                "tf.math.floor(x)": 0.0020964360587002098,
                "tf.math.log(x)": 0.0020964360587002098,
                "tf.math.logical_and(x, y)": 0.0020964360587002098,
                "tf.math.logical_not(x)": 0.0041928721174004195,
                "tf.math.logical_or(x, y)": 0.0020964360587002098,
                "tf.math.logical_xor(x, y)": 0.0020964360587002098,
                "tf.math.negative(x)": 0.0020964360587002098,
                "tf.math.reciprocal(x)": 0.0020964360587002098,
                "tf.math.reciprocal_no_nan(x)": 0.0020964360587002098,
                "tf.math.segment_max(data, segment_ids)": 0.0020964360587002098,
                "tf.math.segment_mean(data, segment_ids)": 0.0020964360587002098,
                "tf.math.segment_min(data, segment_ids)": 0.0020964360587002098,
                "tf.math.segment_prod(data, segment_ids)": 0.0020964360587002098,
                "tf.math.segment_sum(data, segment_ids)": 0.0020964360587002098,
                "tf.math.squared_difference(x, y)": 0.0020964360587002098,
                "tf.math.top_k(input, k)": 0.0020964360587002098,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0020964360587002098,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0020964360587002098,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0020964360587002098,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0020964360587002098,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0020964360587002098,
                "tf.matmul(a, b)": 0.0020964360587002098,
                "tf.maximum(x, y)": 0.0020964360587002098,
                "tf.minimum(x, y)": 0.0020964360587002098,
                "tf.multiply(x, y)": 0.0041928721174004195,
                "tf.not_equal(x, y)": 0.006289308176100629,
                "tf.one_hot(indices, depth)": 0.0020964360587002098,
                "tf.ones(shape)": 0.0020964360587002098,
                "tf.ones_like(input)": 0.0020964360587002098,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0020964360587002098,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0020964360587002098,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0020964360587002098,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0020964360587002098,
                "tf.range(start)": 0.0020964360587002098,
                "tf.range(start, limit, delta)": 0.0020964360587002098,
                "tf.reduce_any(input_tensor, axis)": 0.0020964360587002098,
                "tf.reduce_all(input_tensor, axis)": 0.0020964360587002098,
                "tf.reduce_max(input_tensor)": 0.0020964360587002098,
                "tf.reduce_max(input_tensor, axis)": 0.0020964360587002098,
                "tf.reduce_mean(input_tensor)": 0.0020964360587002098,
                "tf.reduce_mean(input_tensor, axis)": 0.0020964360587002098,
                "tf.reduce_min(input_tensor)": 0.0020964360587002098,
                "tf.reduce_min(input_tensor, axis)": 0.0020964360587002098,
                "tf.reduce_prod(input_tensor, axis)": 0.0020964360587002098,
                "tf.reduce_sum(input_tensor)": 0.0020964360587002098,
                "tf.reduce_sum(input_tensor, axis)": 0.0020964360587002098,
                "tf.repeat(input, repeats)": 0.0020964360587002098,
                "tf.repeat(input, repeats, axis)": 0.0020964360587002098,
                "tf.reshape(tensor, shape)": 0.0020964360587002098,
                "tf.reverse(tensor, axis)": 0.0020964360587002098,
                "tf.roll(input, shift, axis)": 0.0020964360587002098,
                "tf.round(x)": 0.0020964360587002098,
                "tf.scatter_nd(indices, updates, shape)": 0.0020964360587002098,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0020964360587002098,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0020964360587002098,
                "tf.sequence_mask(lengths)": 0.0020964360587002098,
                "tf.sequence_mask(lengths, maxlen)": 0.0020964360587002098,
                "tf.shape(input)": 0.0020964360587002098,
                "tf.sign(x)": 0.0020964360587002098,
                "tf.sort(values, axis)": 0.0020964360587002098,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0020964360587002098,
                "tf.sqrt(x)": 0.0020964360587002098,
                "tf.square(x)": 0.0020964360587002098,
                "tf.squeeze(input)": 0.0020964360587002098,
                "tf.squeeze(input, axis)": 0.0020964360587002098,
                "tf.stack(values, axis)": 0.0020964360587002098,
                "tf.subtract(x, y)": 0.0020964360587002098,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0020964360587002098,
                "tf.tensordot(a, b, axes)": 0.0020964360587002098,
                "tf.tile(input, multiples)": 0.0020964360587002098,
                "tf.transpose(a)": 0.0020964360587002098,
                "tf.transpose(a, perm)": 0.0020964360587002098,
                "tf.unique_with_counts(x)": 0.0020964360587002098,
                "tf.unstack(value, axis)": 0.0020964360587002098,
                "tf.where(condition)": 0.0020964360587002098,
                "tf.where(condition, x, y)": 0.10062893081761007,
                "tf.zeros(shape)": 0.0020964360587002098,
                "tf.zeros_like(input)": 0.05870020964360587,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0020964360587002098,
                "tf.sparse.add(a, b)": 0.0020964360587002098,
                "tf.sparse.concat(axis, sp_inputs)": 0.0020964360587002098,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0020964360587002098,
                "tf.sparse.from_dense(tensor)": 0.0020964360587002098,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0020964360587002098,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0020964360587002098,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0020964360587002098,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0020964360587002098,
                "tf.sparse.reset_shape(sp_input)": 0.0020964360587002098,
                "tf.sparse.reshape(sp_input, shape)": 0.0020964360587002098,
                "tf.sparse.retain(sp_input, to_retain)": 0.0020964360587002098,
                "tf.sparse.slice(sp_input, start, size)": 0.0020964360587002098,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0020964360587002098,
                "tf.sparse.to_dense(sp_input)": 0.0020964360587002098,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0020964360587002098,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0020964360587002098,
                "tf.sparse.transpose(sp_input)": 0.0020964360587002098,
                "tf.sparse.transpose(sp_input, perm)": 0.0020964360587002098,
                "IndexingAxis1Operation": 0.0020964360587002098,
                "IndexingOperation": 0.0020964360587002098,
                "PairCreationOperation": 0.0020964360587002098,
                "SingletonTupleCreationOperation": 0.0020964360587002098,
                "SlicingAxis0BothOperation": 0.0020964360587002098,
                "SlicingAxis0LeftOperation": 0.0020964360587002098,
                "SlicingAxis0RightOperation": 0.0020964360587002098,
                "SlicingAxis1BothOperation": 0.0020964360587002098,
                "SlicingAxis1LeftOperation": 0.0020964360587002098,
                "SlicingAxis1RightOperation": 0.0020964360587002098,
                "TripleCreationOperation": 0.0020964360587002098,
                "PROVIDED_CONSTANT_WEIGHT": 0.0020964360587002098,
                "COMMON_CONSTANT_WEIGHT": 0.1488469601677149,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0020964360587002098,
                "INPUT_VARIABLE_WEIGHT": 0.26834381551362685,
                "AXIS_CONSTANT_WEIGHT": 0.0020964360587002098,
                "SHAPE_CONSTANT_WEIGHT": 0.0020964360587002098,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0020964360587002098,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0020964360587002098,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0020964360587002098,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0020964360587002098,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0020964360587002098
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 9,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 3,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 9,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 9,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 9,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 3,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 4,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 9,
                "PairCreationOperation": 9,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 9,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_16",
        "description": "multiply tensors across the first axis",
        "target_program": "tf.multiply(in1, tf.expand_dims(in2, 1))",
        "source": "https://stackoverflow.com/questions/46240646/tensor-multiply-along-axis-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[2, 5], [3, 0], [8, -7]],[4, 10, -6],]",
            "outputs": "[[8, 20], [30, 0], [-48, 42]]"
        },
        "completions": [
            "return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "return tf.multiply(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=1))",
            "return tf.multiply(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))\n",
            "return tf.multiply(tf.expand_dims(in1, 2), in2)\n",
            "return tf.matmul(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=1))",
            "return tf.multiply(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))\n",
            "return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "return tf.expand_dims(in1, -1) * tf.expand_dims(in2, 1)\n",
            "result = tf.multiply(in1, tf.expand_dims(in2, axis=1))\n",
            "return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "output = tf.multiply(in1, tf.expand_dims(in2, axis=1))\n",
            "result = tf.multiply(in1, tf.expand_dims(in2, axis=1))\nreturn result\n",
            "return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "return tf.matmul(tf.cast(tf.expand_dims(in1, axis=2), tf.int32), tf.cast(tf.expand_dims(in2, axis=1), tf.int32))",
            "return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "return tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))",
            "return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))\n",
            "return tf.multiply(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=1))",
            "return tf.matmul(in1, tf.expand_dims(in2, 1))",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "output = tf.multiply(in1, tf.expand_dims(in2, axis=1))\n",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n",
            "return tf.matmul(in1, tf.expand_dims(in2, 1))\n",
            "return tf.multiply(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))\n",
            "result = tf.multiply(in1, tf.expand_dims(in2, axis=1))\n",
            "return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "return tf.multiply(tf.expand_dims(in1, -1), in2)",
            "return tf.multiply(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))\n",
            "return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "return tf.multiply(tf.expand_dims(in1, axis=0), tf.expand_dims(in2, axis=1))",
            "return tf.multiply(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=1))\n",
            "return tf.tensordot(in1, in2, 1)\n",
            "return tf.multiply(tf.expand_dims(in1, 2), in2)\n",
            "return tf.multiply(in1, tf.expand_dims(in2, 1))\n  ",
            "return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))\n",
            "result = tf.multiply(in1, tf.expand_dims(in2, axis=1))\nreturn result\n",
            "return tf.expand_dims(in1, 2) * tf.expand_dims(in2, 1)",
            "return tf.matmul(in1, tf.expand_dims(in2, 1))",
            "result = tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))\n",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))\n                                                                                                                                          ",
            "return tf.matmul(in1, tf.reshape(in2, (-1, 1))).numpy()",
            "return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))\n",
            "return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "return tf.multiply(tf.expand_dims(in1, 2), in2)\n",
            "return tf.matmul(tf.cast(in1, tf.int32), tf.reshape(tf.cast(in2, tf.int32), [-1, 1]))",
            "return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))"
        ],
        "tf_operators": {
            "tf.expand_dims": 46,
            "tf.multiply": 38,
            "tf.matmul": 8,
            "tf.cast": 2,
            "tf.int32": 2,
            "tf.tensordot": 2,
            "tf.reshape": 2
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                2,
                1
            ],
            [
                -1,
                0
            ],
            [
                2
            ],
            [
                2,
                1
            ],
            [
                -1,
                0
            ],
            [
                2,
                1
            ],
            [
                -1,
                1
            ],
            [
                1
            ],
            [
                2,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2,
                1
            ],
            [
                2,
                1
            ],
            [
                2,
                1
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                2,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                2,
                1
            ],
            [
                1,
                0
            ],
            [
                -1
            ],
            [
                -1,
                0
            ],
            [
                2,
                1
            ],
            [
                0,
                1
            ],
            [
                2,
                1
            ],
            [
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                2,
                1
            ],
            [
                2,
                1
            ],
            [
                1
            ],
            [
                2,
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                1
            ],
            [
                2,
                1
            ],
            [
                1,
                0
            ],
            [
                2
            ],
            [
                -1,
                1
            ],
            [
                1,
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 100,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 64,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 18,
            "tf_int64": 0,
            "tf_int32": 4
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0021141649048625794,
                "tf.add(x, y)": 0.0021141649048625794,
                "tf.add_n(inputs)": 0.0021141649048625794,
                "tf.argmax(input, axis)": 0.0021141649048625794,
                "tf.argmin(input, axis)": 0.0021141649048625794,
                "tf.argsort(values, axis, stable=True)": 0.0021141649048625794,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0021141649048625794,
                "tf.boolean_mask(tensor, mask)": 0.0021141649048625794,
                "tf.broadcast_to(input, shape)": 0.0021141649048625794,
                "tf.cast(x, dtype)": 0.010570824524312896,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0021141649048625794,
                "tf.concat(values, axis)": 0.0021141649048625794,
                "tf.constant(value)": 0.0021141649048625794,
                "tf.constant(value, dtype)": 0.0021141649048625794,
                "tf.divide(x, y)": 0.0021141649048625794,
                "tf.equal(x, y)": 0.0021141649048625794,
                "tf.exp(x)": 0.0021141649048625794,
                "tf.expand_dims(input, axis)": 0.1649048625792812,
                "tf.eye(num_rows)": 0.0021141649048625794,
                "tf.eye(num_rows, num_columns)": 0.0021141649048625794,
                "tf.eye(num_rows, dtype)": 0.0021141649048625794,
                "tf.fill(dims, value)": 0.0021141649048625794,
                "tf.gather(params, indices)": 0.0021141649048625794,
                "tf.gather(params, indices, axis, batch_dims)": 0.0021141649048625794,
                "tf.gather_nd(params, indices)": 0.0021141649048625794,
                "tf.gather_nd(params, indices, batch_dims)": 0.0021141649048625794,
                "tf.greater(x, y)": 0.0021141649048625794,
                "tf.greater_equal(x, y)": 0.0021141649048625794,
                "tf.math.bincount(arr)": 0.0021141649048625794,
                "tf.math.ceil(x)": 0.0021141649048625794,
                "tf.math.count_nonzero(input)": 0.0021141649048625794,
                "tf.math.count_nonzero(input, axis)": 0.0021141649048625794,
                "tf.math.cumsum(x, axis)": 0.0021141649048625794,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0021141649048625794,
                "tf.math.divide_no_nan(x, y)": 0.0021141649048625794,
                "tf.math.floor(x)": 0.0021141649048625794,
                "tf.math.log(x)": 0.0021141649048625794,
                "tf.math.logical_and(x, y)": 0.0021141649048625794,
                "tf.math.logical_not(x)": 0.0021141649048625794,
                "tf.math.logical_or(x, y)": 0.0021141649048625794,
                "tf.math.logical_xor(x, y)": 0.0021141649048625794,
                "tf.math.negative(x)": 0.0021141649048625794,
                "tf.math.reciprocal(x)": 0.0021141649048625794,
                "tf.math.reciprocal_no_nan(x)": 0.0021141649048625794,
                "tf.math.segment_max(data, segment_ids)": 0.0021141649048625794,
                "tf.math.segment_mean(data, segment_ids)": 0.0021141649048625794,
                "tf.math.segment_min(data, segment_ids)": 0.0021141649048625794,
                "tf.math.segment_prod(data, segment_ids)": 0.0021141649048625794,
                "tf.math.segment_sum(data, segment_ids)": 0.0021141649048625794,
                "tf.math.squared_difference(x, y)": 0.0021141649048625794,
                "tf.math.top_k(input, k)": 0.0021141649048625794,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0021141649048625794,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0021141649048625794,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0021141649048625794,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0021141649048625794,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0021141649048625794,
                "tf.matmul(a, b)": 0.019027484143763214,
                "tf.maximum(x, y)": 0.0021141649048625794,
                "tf.minimum(x, y)": 0.0021141649048625794,
                "tf.multiply(x, y)": 0.0824524312896406,
                "tf.not_equal(x, y)": 0.0021141649048625794,
                "tf.one_hot(indices, depth)": 0.0021141649048625794,
                "tf.ones(shape)": 0.0021141649048625794,
                "tf.ones_like(input)": 0.0021141649048625794,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0021141649048625794,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0021141649048625794,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0021141649048625794,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0021141649048625794,
                "tf.range(start)": 0.0021141649048625794,
                "tf.range(start, limit, delta)": 0.0021141649048625794,
                "tf.reduce_any(input_tensor, axis)": 0.0021141649048625794,
                "tf.reduce_all(input_tensor, axis)": 0.0021141649048625794,
                "tf.reduce_max(input_tensor)": 0.0021141649048625794,
                "tf.reduce_max(input_tensor, axis)": 0.0021141649048625794,
                "tf.reduce_mean(input_tensor)": 0.0021141649048625794,
                "tf.reduce_mean(input_tensor, axis)": 0.0021141649048625794,
                "tf.reduce_min(input_tensor)": 0.0021141649048625794,
                "tf.reduce_min(input_tensor, axis)": 0.0021141649048625794,
                "tf.reduce_prod(input_tensor, axis)": 0.0021141649048625794,
                "tf.reduce_sum(input_tensor)": 0.0021141649048625794,
                "tf.reduce_sum(input_tensor, axis)": 0.0021141649048625794,
                "tf.repeat(input, repeats)": 0.0021141649048625794,
                "tf.repeat(input, repeats, axis)": 0.0021141649048625794,
                "tf.reshape(tensor, shape)": 0.006342494714587738,
                "tf.reverse(tensor, axis)": 0.0021141649048625794,
                "tf.roll(input, shift, axis)": 0.0021141649048625794,
                "tf.round(x)": 0.0021141649048625794,
                "tf.scatter_nd(indices, updates, shape)": 0.0021141649048625794,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0021141649048625794,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0021141649048625794,
                "tf.sequence_mask(lengths)": 0.0021141649048625794,
                "tf.sequence_mask(lengths, maxlen)": 0.0021141649048625794,
                "tf.shape(input)": 0.0021141649048625794,
                "tf.sign(x)": 0.0021141649048625794,
                "tf.sort(values, axis)": 0.0021141649048625794,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0021141649048625794,
                "tf.sqrt(x)": 0.0021141649048625794,
                "tf.square(x)": 0.0021141649048625794,
                "tf.squeeze(input)": 0.0021141649048625794,
                "tf.squeeze(input, axis)": 0.0021141649048625794,
                "tf.stack(values, axis)": 0.0021141649048625794,
                "tf.subtract(x, y)": 0.0021141649048625794,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0021141649048625794,
                "tf.tensordot(a, b, axes)": 0.006342494714587738,
                "tf.tile(input, multiples)": 0.0021141649048625794,
                "tf.transpose(a)": 0.0021141649048625794,
                "tf.transpose(a, perm)": 0.0021141649048625794,
                "tf.unique_with_counts(x)": 0.0021141649048625794,
                "tf.unstack(value, axis)": 0.0021141649048625794,
                "tf.where(condition)": 0.0021141649048625794,
                "tf.where(condition, x, y)": 0.0021141649048625794,
                "tf.zeros(shape)": 0.0021141649048625794,
                "tf.zeros_like(input)": 0.0021141649048625794,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0021141649048625794,
                "tf.sparse.add(a, b)": 0.0021141649048625794,
                "tf.sparse.concat(axis, sp_inputs)": 0.0021141649048625794,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0021141649048625794,
                "tf.sparse.from_dense(tensor)": 0.0021141649048625794,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0021141649048625794,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0021141649048625794,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0021141649048625794,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0021141649048625794,
                "tf.sparse.reset_shape(sp_input)": 0.0021141649048625794,
                "tf.sparse.reshape(sp_input, shape)": 0.0021141649048625794,
                "tf.sparse.retain(sp_input, to_retain)": 0.0021141649048625794,
                "tf.sparse.slice(sp_input, start, size)": 0.0021141649048625794,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0021141649048625794,
                "tf.sparse.to_dense(sp_input)": 0.0021141649048625794,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0021141649048625794,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0021141649048625794,
                "tf.sparse.transpose(sp_input)": 0.0021141649048625794,
                "tf.sparse.transpose(sp_input, perm)": 0.0021141649048625794,
                "IndexingAxis1Operation": 0.0021141649048625794,
                "IndexingOperation": 0.0021141649048625794,
                "PairCreationOperation": 0.004228329809725159,
                "SingletonTupleCreationOperation": 0.0021141649048625794,
                "SlicingAxis0BothOperation": 0.0021141649048625794,
                "SlicingAxis0LeftOperation": 0.0021141649048625794,
                "SlicingAxis0RightOperation": 0.0021141649048625794,
                "SlicingAxis1BothOperation": 0.0021141649048625794,
                "SlicingAxis1LeftOperation": 0.0021141649048625794,
                "SlicingAxis1RightOperation": 0.0021141649048625794,
                "TripleCreationOperation": 0.0021141649048625794,
                "PROVIDED_CONSTANT_WEIGHT": 0.0021141649048625794,
                "COMMON_CONSTANT_WEIGHT": 0.13742071881606766,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0021141649048625794,
                "INPUT_VARIABLE_WEIGHT": 0.2135306553911205,
                "AXIS_CONSTANT_WEIGHT": 0.040169133192389,
                "SHAPE_CONSTANT_WEIGHT": 0.0021141649048625794,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0021141649048625794,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.010570824524312896,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0021141649048625794,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0021141649048625794,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0021141649048625794
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 3,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 6,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 4,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 9,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 9,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 9,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 5,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_17",
        "description": "duplicate each element of a tensor",
        "target_program": "tf.stack((in1, in1), axis=1)",
        "source": "https://stackoverflow.com/questions/51761353/about-tensor-of-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[17, -32, 99],]",
            "outputs": "[[17, 17], [-32, -32], [99, 99]]"
        },
        "completions": [
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "return tf.repeat(tf.expand_dims(in1, axis=1), repeats=2, axis=1)\n",
            "return tf.repeat(in1, 2)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.expand_dims(in1, axis=-1)\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n",
            "return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "return tf.repeat(in1, 2, axis=1)\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), repeats=2, axis=1)\n",
            "return tf.repeat(in1, 2)\n",
            "def transform(in1):\n    return tf.expand_dims(in1, 1)\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=1), repeats=2, axis=1)\n",
            "return tf.repeat(in1, repeats=2)\n",
            "return tf.repeat(tf.expand_dims(in1, axis=1), 2, axis=1)\n",
            "def transform(in1):\n    return tf.reshape(tf.tile(tf.expand_dims(in1, 1), [1, 2]), [-1, 2])\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), repeats=2, axis=1)\n",
            "return tf.repeat(in1, repeats=2)\n",
            "return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n",
            "return tf.repeat(tf.expand_dims(in1, -1), 2, -1)\n",
            "return tf.repeat(tf.expand_dims(in1, 1), repeats=2, axis=1)\n",
            "return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, -1), [1, 2])\n",
            "return tf.repeat(in1, 2)\n",
            "return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2)\n",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=1)\n",
            "return tf.repeat(in1, 2)",
            "return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.expand_dims(in1, 1)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n",
            "return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n",
            "return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)",
            "return tf.repeat(in1, 2)\n",
            "def transform(in1):\n    return tf.repeat(in1, 2, axis=1)\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "return tf.repeat(in1, 2)\n",
            "return tf.repeat(in1, repeats=2)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "return tf.repeat(in1, 2)\n"
        ],
        "tf_operators": {
            "tf.tile": 11,
            "tf.expand_dims": 30,
            "tf.repeat": 35,
            "tf.reshape": 1,
            "tf.stack": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1,
                1,
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                -1
            ],
            [
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                2
            ],
            [
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                1,
                2
            ],
            [
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                1,
                2,
                -1,
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                -1,
                2,
                -1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                -1,
                1,
                2
            ],
            [
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                1,
                2
            ],
            [
                1
            ],
            [
                1,
                1,
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                2
            ],
            [
                2,
                1
            ],
            [
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                2
            ]
        ],
        "all_constants": [
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 51,
            "shape": 0,
            "tf_bool": 0,
            "provided": 47,
            "common": 61,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0026666666666666666,
                "tf.add(x, y)": 0.0026666666666666666,
                "tf.add_n(inputs)": 0.0026666666666666666,
                "tf.argmax(input, axis)": 0.0026666666666666666,
                "tf.argmin(input, axis)": 0.0026666666666666666,
                "tf.argsort(values, axis, stable=True)": 0.0026666666666666666,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0026666666666666666,
                "tf.boolean_mask(tensor, mask)": 0.0026666666666666666,
                "tf.broadcast_to(input, shape)": 0.0026666666666666666,
                "tf.cast(x, dtype)": 0.0026666666666666666,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0026666666666666666,
                "tf.concat(values, axis)": 0.0026666666666666666,
                "tf.constant(value)": 0.0026666666666666666,
                "tf.constant(value, dtype)": 0.0026666666666666666,
                "tf.divide(x, y)": 0.0026666666666666666,
                "tf.equal(x, y)": 0.0026666666666666666,
                "tf.exp(x)": 0.0026666666666666666,
                "tf.expand_dims(input, axis)": 0.08266666666666667,
                "tf.eye(num_rows)": 0.0026666666666666666,
                "tf.eye(num_rows, num_columns)": 0.0026666666666666666,
                "tf.eye(num_rows, dtype)": 0.0026666666666666666,
                "tf.fill(dims, value)": 0.0026666666666666666,
                "tf.gather(params, indices)": 0.0026666666666666666,
                "tf.gather(params, indices, axis, batch_dims)": 0.0026666666666666666,
                "tf.gather_nd(params, indices)": 0.0026666666666666666,
                "tf.gather_nd(params, indices, batch_dims)": 0.0026666666666666666,
                "tf.greater(x, y)": 0.0026666666666666666,
                "tf.greater_equal(x, y)": 0.0026666666666666666,
                "tf.math.bincount(arr)": 0.0026666666666666666,
                "tf.math.ceil(x)": 0.0026666666666666666,
                "tf.math.count_nonzero(input)": 0.0026666666666666666,
                "tf.math.count_nonzero(input, axis)": 0.0026666666666666666,
                "tf.math.cumsum(x, axis)": 0.0026666666666666666,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0026666666666666666,
                "tf.math.divide_no_nan(x, y)": 0.0026666666666666666,
                "tf.math.floor(x)": 0.0026666666666666666,
                "tf.math.log(x)": 0.0026666666666666666,
                "tf.math.logical_and(x, y)": 0.0026666666666666666,
                "tf.math.logical_not(x)": 0.0026666666666666666,
                "tf.math.logical_or(x, y)": 0.0026666666666666666,
                "tf.math.logical_xor(x, y)": 0.0026666666666666666,
                "tf.math.negative(x)": 0.0026666666666666666,
                "tf.math.reciprocal(x)": 0.0026666666666666666,
                "tf.math.reciprocal_no_nan(x)": 0.0026666666666666666,
                "tf.math.segment_max(data, segment_ids)": 0.0026666666666666666,
                "tf.math.segment_mean(data, segment_ids)": 0.0026666666666666666,
                "tf.math.segment_min(data, segment_ids)": 0.0026666666666666666,
                "tf.math.segment_prod(data, segment_ids)": 0.0026666666666666666,
                "tf.math.segment_sum(data, segment_ids)": 0.0026666666666666666,
                "tf.math.squared_difference(x, y)": 0.0026666666666666666,
                "tf.math.top_k(input, k)": 0.0026666666666666666,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0026666666666666666,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0026666666666666666,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0026666666666666666,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0026666666666666666,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0026666666666666666,
                "tf.matmul(a, b)": 0.0026666666666666666,
                "tf.maximum(x, y)": 0.0026666666666666666,
                "tf.minimum(x, y)": 0.0026666666666666666,
                "tf.multiply(x, y)": 0.0026666666666666666,
                "tf.not_equal(x, y)": 0.0026666666666666666,
                "tf.one_hot(indices, depth)": 0.0026666666666666666,
                "tf.ones(shape)": 0.0026666666666666666,
                "tf.ones_like(input)": 0.0026666666666666666,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0026666666666666666,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0026666666666666666,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0026666666666666666,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0026666666666666666,
                "tf.range(start)": 0.0026666666666666666,
                "tf.range(start, limit, delta)": 0.0026666666666666666,
                "tf.reduce_any(input_tensor, axis)": 0.0026666666666666666,
                "tf.reduce_all(input_tensor, axis)": 0.0026666666666666666,
                "tf.reduce_max(input_tensor)": 0.0026666666666666666,
                "tf.reduce_max(input_tensor, axis)": 0.0026666666666666666,
                "tf.reduce_mean(input_tensor)": 0.0026666666666666666,
                "tf.reduce_mean(input_tensor, axis)": 0.0026666666666666666,
                "tf.reduce_min(input_tensor)": 0.0026666666666666666,
                "tf.reduce_min(input_tensor, axis)": 0.0026666666666666666,
                "tf.reduce_prod(input_tensor, axis)": 0.0026666666666666666,
                "tf.reduce_sum(input_tensor)": 0.0026666666666666666,
                "tf.reduce_sum(input_tensor, axis)": 0.0026666666666666666,
                "tf.repeat(input, repeats)": 0.034666666666666665,
                "tf.repeat(input, repeats, axis)": 0.018666666666666668,
                "tf.reshape(tensor, shape)": 0.005333333333333333,
                "tf.reverse(tensor, axis)": 0.0026666666666666666,
                "tf.roll(input, shift, axis)": 0.0026666666666666666,
                "tf.round(x)": 0.0026666666666666666,
                "tf.scatter_nd(indices, updates, shape)": 0.0026666666666666666,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0026666666666666666,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0026666666666666666,
                "tf.sequence_mask(lengths)": 0.0026666666666666666,
                "tf.sequence_mask(lengths, maxlen)": 0.0026666666666666666,
                "tf.shape(input)": 0.0026666666666666666,
                "tf.sign(x)": 0.0026666666666666666,
                "tf.sort(values, axis)": 0.0026666666666666666,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0026666666666666666,
                "tf.sqrt(x)": 0.0026666666666666666,
                "tf.square(x)": 0.0026666666666666666,
                "tf.squeeze(input)": 0.0026666666666666666,
                "tf.squeeze(input, axis)": 0.0026666666666666666,
                "tf.stack(values, axis)": 0.005333333333333333,
                "tf.subtract(x, y)": 0.0026666666666666666,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0026666666666666666,
                "tf.tensordot(a, b, axes)": 0.0026666666666666666,
                "tf.tile(input, multiples)": 0.032,
                "tf.transpose(a)": 0.0026666666666666666,
                "tf.transpose(a, perm)": 0.0026666666666666666,
                "tf.unique_with_counts(x)": 0.0026666666666666666,
                "tf.unstack(value, axis)": 0.0026666666666666666,
                "tf.where(condition)": 0.0026666666666666666,
                "tf.where(condition, x, y)": 0.0026666666666666666,
                "tf.zeros(shape)": 0.0026666666666666666,
                "tf.zeros_like(input)": 0.0026666666666666666,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0026666666666666666,
                "tf.sparse.add(a, b)": 0.0026666666666666666,
                "tf.sparse.concat(axis, sp_inputs)": 0.0026666666666666666,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0026666666666666666,
                "tf.sparse.from_dense(tensor)": 0.0026666666666666666,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0026666666666666666,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0026666666666666666,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0026666666666666666,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0026666666666666666,
                "tf.sparse.reset_shape(sp_input)": 0.0026666666666666666,
                "tf.sparse.reshape(sp_input, shape)": 0.0026666666666666666,
                "tf.sparse.retain(sp_input, to_retain)": 0.0026666666666666666,
                "tf.sparse.slice(sp_input, start, size)": 0.0026666666666666666,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0026666666666666666,
                "tf.sparse.to_dense(sp_input)": 0.0026666666666666666,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0026666666666666666,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0026666666666666666,
                "tf.sparse.transpose(sp_input)": 0.0026666666666666666,
                "tf.sparse.transpose(sp_input, perm)": 0.0026666666666666666,
                "IndexingAxis1Operation": 0.0026666666666666666,
                "IndexingOperation": 0.0026666666666666666,
                "PairCreationOperation": 0.0026666666666666666,
                "SingletonTupleCreationOperation": 0.0026666666666666666,
                "SlicingAxis0BothOperation": 0.0026666666666666666,
                "SlicingAxis0LeftOperation": 0.0026666666666666666,
                "SlicingAxis0RightOperation": 0.0026666666666666666,
                "SlicingAxis1BothOperation": 0.0026666666666666666,
                "SlicingAxis1LeftOperation": 0.0026666666666666666,
                "SlicingAxis1RightOperation": 0.0026666666666666666,
                "TripleCreationOperation": 0.0026666666666666666,
                "PROVIDED_CONSTANT_WEIGHT": 0.128,
                "COMMON_CONSTANT_WEIGHT": 0.16533333333333333,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0026666666666666666,
                "INPUT_VARIABLE_WEIGHT": 0.13866666666666666,
                "AXIS_CONSTANT_WEIGHT": 0.0026666666666666666,
                "SHAPE_CONSTANT_WEIGHT": 0.0026666666666666666,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0026666666666666666,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0026666666666666666,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0026666666666666666,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0026666666666666666,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0026666666666666666
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 9,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 4,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 9,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 5,
                "tf.repeat(input, repeats, axis)": 6,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 9,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 5,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 9,
                "PairCreationOperation": 9,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 3,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 9,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_18",
        "description": "multiply 3D tensor and 2D tensor and add another tensor",
        "target_program": "tf.add(in3, tf.matmul(in1, in2))",
        "source": "https://stackoverflow.com/questions/38222126/tensorflow-efficient-way-for-tensor-multiplication",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[1, 1, 1], [1, 0, 1]], [[1, 2, 3], [4, 5, 6]]], [[1, 1, 1, 1], [1, 2, 3, 4], [5, 6, 7, 8]], [100, 200, 300, 400],]",
            "outputs": "[[[107, 209, 311, 413], [106, 207, 308, 409]], [[118, 223, 328, 433], [139, 250, 361, 472]]]"
        },
        "completions": [
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), tf.reshape(in3, [1, 2, 4]))\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), tf.reshape(in3, (1, 2, 4)))\n",
            "return tf.math.add(tf.tensordot(tf.cast(in1, tf.int32), in2, axes=1), tf.constant(in3))\n",
            "return tf.add(tf.tensordot(in1, in2, 1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=[[2],[0]]), in3)\n",
            "return tf.add(tf.multiply(in1, tf.expand_dims(in2, -2)), in3)\n",
            "result = tf.add(tf.multiply(in1, in2), in3)\nreturn result\n",
            "result = tf.add(tf.matmul(in1, in2), in3)\nreturn result\n",
            "return tf.add(tf.tensordot(in1, in2, 1), in3)\n",
            "return tf.transpose(tf.tensordot(in1, in2, axes=1), perm=[0, 2, 1]) + in3\n",
            "return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), tf.reshape(in3, (1, 2, 4)))\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, 1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, 1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), tf.reshape(in3, [1, 2, 4]))\n",
            "return tf.add(tf.tensordot(in1, in2, 1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=2), in3)\n",
            "result = tf.add(tf.matmul(in1, in2), in3)\nreturn result\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), tf.reshape(in3, [1, 2, 4]))\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), tf.expand_dims(in3, axis=0))\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 2) + in3\n",
            "return tf.add(tf.tensordot(in1, in2, 1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, 1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.matmul(in1, in2) + in3\n",
            "return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), tf.reshape(in3, [1, 2, 4]))\n",
            "res = tf.add(tf.matmul(in1, in2), in3)\nreturn res\n",
            "result = tf.add(tf.matmul(in1, in2), in3)\nreturn result\n",
            "return tf.add(tf.matmul(in1, in2), in3)\n\n",
            "temp = tf.matmul(in1, in2)\ntemp = tf.add(temp, tf.expand_dims(in3, 0))\nreturn temp\n",
            "result = tf.add(tf.matmul(in1, in2), in3)\nreturn result\n",
            "result = tf.add(tf.multiply(in1, in2), in3)\nreturn result\n",
            "result = tf.add(tf.multiply(in1, in2), in3)\nreturn result\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.add(tf.matmul(in1, in2), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=[[2], [1]]), tf.reshape(in3, [2, 2, 4]))\n",
            "return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n"
        ],
        "tf_operators": {
            "tf.tensordot": 36,
            "tf.add": 46,
            "tf.reshape": 7,
            "tf.cast": 1,
            "tf.int32": 1,
            "tf.math.add": 1,
            "tf.constant": 1,
            "tf.expand_dims": 4,
            "tf.multiply": 5,
            "tf.matmul": 9,
            "tf.transpose": 1,
            "tf.reduce_sum": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1,
                2,
                4
            ],
            [
                1
            ],
            [
                1,
                1,
                2,
                4
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2,
                0
            ],
            [
                -2
            ],
            [],
            [],
            [
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                2,
                0
            ],
            [
                1
            ],
            [
                1,
                1,
                2,
                4
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1,
                2,
                4
            ],
            [
                1
            ],
            [
                2,
                0
            ],
            [
                2
            ],
            [],
            [
                1,
                1,
                2,
                4
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                2
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2,
                0
            ],
            [
                1
            ],
            [],
            [
                2,
                0,
                1,
                2,
                4
            ],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                2,
                1,
                2,
                2,
                4
            ],
            [
                2,
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            4,
            -2
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 3,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 150,
            "shape": 5,
            "tf_bool": 0,
            "provided": 1,
            "common": 44,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 16,
            "tf_int64": 0,
            "tf_int32": 1
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.002066115702479339,
                "tf.add(x, y)": 0.09710743801652892,
                "tf.add_n(inputs)": 0.002066115702479339,
                "tf.argmax(input, axis)": 0.002066115702479339,
                "tf.argmin(input, axis)": 0.002066115702479339,
                "tf.argsort(values, axis, stable=True)": 0.002066115702479339,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.002066115702479339,
                "tf.boolean_mask(tensor, mask)": 0.002066115702479339,
                "tf.broadcast_to(input, shape)": 0.002066115702479339,
                "tf.cast(x, dtype)": 0.004132231404958678,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.002066115702479339,
                "tf.concat(values, axis)": 0.002066115702479339,
                "tf.constant(value)": 0.004132231404958678,
                "tf.constant(value, dtype)": 0.002066115702479339,
                "tf.divide(x, y)": 0.002066115702479339,
                "tf.equal(x, y)": 0.002066115702479339,
                "tf.exp(x)": 0.002066115702479339,
                "tf.expand_dims(input, axis)": 0.010330578512396695,
                "tf.eye(num_rows)": 0.002066115702479339,
                "tf.eye(num_rows, num_columns)": 0.002066115702479339,
                "tf.eye(num_rows, dtype)": 0.002066115702479339,
                "tf.fill(dims, value)": 0.002066115702479339,
                "tf.gather(params, indices)": 0.002066115702479339,
                "tf.gather(params, indices, axis, batch_dims)": 0.002066115702479339,
                "tf.gather_nd(params, indices)": 0.002066115702479339,
                "tf.gather_nd(params, indices, batch_dims)": 0.002066115702479339,
                "tf.greater(x, y)": 0.002066115702479339,
                "tf.greater_equal(x, y)": 0.002066115702479339,
                "tf.math.bincount(arr)": 0.002066115702479339,
                "tf.math.ceil(x)": 0.002066115702479339,
                "tf.math.count_nonzero(input)": 0.002066115702479339,
                "tf.math.count_nonzero(input, axis)": 0.002066115702479339,
                "tf.math.cumsum(x, axis)": 0.002066115702479339,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.002066115702479339,
                "tf.math.divide_no_nan(x, y)": 0.002066115702479339,
                "tf.math.floor(x)": 0.002066115702479339,
                "tf.math.log(x)": 0.002066115702479339,
                "tf.math.logical_and(x, y)": 0.002066115702479339,
                "tf.math.logical_not(x)": 0.002066115702479339,
                "tf.math.logical_or(x, y)": 0.002066115702479339,
                "tf.math.logical_xor(x, y)": 0.002066115702479339,
                "tf.math.negative(x)": 0.002066115702479339,
                "tf.math.reciprocal(x)": 0.002066115702479339,
                "tf.math.reciprocal_no_nan(x)": 0.002066115702479339,
                "tf.math.segment_max(data, segment_ids)": 0.002066115702479339,
                "tf.math.segment_mean(data, segment_ids)": 0.002066115702479339,
                "tf.math.segment_min(data, segment_ids)": 0.002066115702479339,
                "tf.math.segment_prod(data, segment_ids)": 0.002066115702479339,
                "tf.math.segment_sum(data, segment_ids)": 0.002066115702479339,
                "tf.math.squared_difference(x, y)": 0.002066115702479339,
                "tf.math.top_k(input, k)": 0.002066115702479339,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.002066115702479339,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.002066115702479339,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.002066115702479339,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.002066115702479339,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.002066115702479339,
                "tf.matmul(a, b)": 0.02066115702479339,
                "tf.maximum(x, y)": 0.002066115702479339,
                "tf.minimum(x, y)": 0.002066115702479339,
                "tf.multiply(x, y)": 0.012396694214876033,
                "tf.not_equal(x, y)": 0.002066115702479339,
                "tf.one_hot(indices, depth)": 0.002066115702479339,
                "tf.ones(shape)": 0.002066115702479339,
                "tf.ones_like(input)": 0.002066115702479339,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.002066115702479339,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.002066115702479339,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.002066115702479339,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.002066115702479339,
                "tf.range(start)": 0.002066115702479339,
                "tf.range(start, limit, delta)": 0.002066115702479339,
                "tf.reduce_any(input_tensor, axis)": 0.002066115702479339,
                "tf.reduce_all(input_tensor, axis)": 0.002066115702479339,
                "tf.reduce_max(input_tensor)": 0.002066115702479339,
                "tf.reduce_max(input_tensor, axis)": 0.002066115702479339,
                "tf.reduce_mean(input_tensor)": 0.002066115702479339,
                "tf.reduce_mean(input_tensor, axis)": 0.002066115702479339,
                "tf.reduce_min(input_tensor)": 0.002066115702479339,
                "tf.reduce_min(input_tensor, axis)": 0.002066115702479339,
                "tf.reduce_prod(input_tensor, axis)": 0.002066115702479339,
                "tf.reduce_sum(input_tensor)": 0.002066115702479339,
                "tf.reduce_sum(input_tensor, axis)": 0.004132231404958678,
                "tf.repeat(input, repeats)": 0.002066115702479339,
                "tf.repeat(input, repeats, axis)": 0.002066115702479339,
                "tf.reshape(tensor, shape)": 0.01652892561983471,
                "tf.reverse(tensor, axis)": 0.002066115702479339,
                "tf.roll(input, shift, axis)": 0.002066115702479339,
                "tf.round(x)": 0.002066115702479339,
                "tf.scatter_nd(indices, updates, shape)": 0.002066115702479339,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.002066115702479339,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.002066115702479339,
                "tf.sequence_mask(lengths)": 0.002066115702479339,
                "tf.sequence_mask(lengths, maxlen)": 0.002066115702479339,
                "tf.shape(input)": 0.002066115702479339,
                "tf.sign(x)": 0.002066115702479339,
                "tf.sort(values, axis)": 0.002066115702479339,
                "tf.sort(values, axis, direction='DESCENDING')": 0.002066115702479339,
                "tf.sqrt(x)": 0.002066115702479339,
                "tf.square(x)": 0.002066115702479339,
                "tf.squeeze(input)": 0.002066115702479339,
                "tf.squeeze(input, axis)": 0.002066115702479339,
                "tf.stack(values, axis)": 0.002066115702479339,
                "tf.subtract(x, y)": 0.002066115702479339,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.002066115702479339,
                "tf.tensordot(a, b, axes)": 0.07644628099173553,
                "tf.tile(input, multiples)": 0.002066115702479339,
                "tf.transpose(a)": 0.002066115702479339,
                "tf.transpose(a, perm)": 0.002066115702479339,
                "tf.unique_with_counts(x)": 0.002066115702479339,
                "tf.unstack(value, axis)": 0.002066115702479339,
                "tf.where(condition)": 0.002066115702479339,
                "tf.where(condition, x, y)": 0.002066115702479339,
                "tf.zeros(shape)": 0.002066115702479339,
                "tf.zeros_like(input)": 0.002066115702479339,
                "tf.SparseTensor(indices, values, dense_shape)": 0.002066115702479339,
                "tf.sparse.add(a, b)": 0.002066115702479339,
                "tf.sparse.concat(axis, sp_inputs)": 0.002066115702479339,
                "tf.sparse.expand_dims(sp_input, axis)": 0.002066115702479339,
                "tf.sparse.from_dense(tensor)": 0.002066115702479339,
                "tf.sparse.maximum(sp_a, sp_b)": 0.002066115702479339,
                "tf.sparse.minimum(sp_a, sp_b)": 0.002066115702479339,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.002066115702479339,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.002066115702479339,
                "tf.sparse.reset_shape(sp_input)": 0.002066115702479339,
                "tf.sparse.reshape(sp_input, shape)": 0.002066115702479339,
                "tf.sparse.retain(sp_input, to_retain)": 0.002066115702479339,
                "tf.sparse.slice(sp_input, start, size)": 0.002066115702479339,
                "tf.sparse.split(sp_input, num_split, axis)": 0.002066115702479339,
                "tf.sparse.to_dense(sp_input)": 0.002066115702479339,
                "tf.sparse.to_dense(sp_input, default_value)": 0.002066115702479339,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.002066115702479339,
                "tf.sparse.transpose(sp_input)": 0.002066115702479339,
                "tf.sparse.transpose(sp_input, perm)": 0.002066115702479339,
                "IndexingAxis1Operation": 0.002066115702479339,
                "IndexingOperation": 0.002066115702479339,
                "PairCreationOperation": 0.002066115702479339,
                "SingletonTupleCreationOperation": 0.002066115702479339,
                "SlicingAxis0BothOperation": 0.002066115702479339,
                "SlicingAxis0LeftOperation": 0.002066115702479339,
                "SlicingAxis0RightOperation": 0.002066115702479339,
                "SlicingAxis1BothOperation": 0.002066115702479339,
                "SlicingAxis1LeftOperation": 0.002066115702479339,
                "SlicingAxis1RightOperation": 0.002066115702479339,
                "TripleCreationOperation": 0.006198347107438017,
                "PROVIDED_CONSTANT_WEIGHT": 0.004132231404958678,
                "COMMON_CONSTANT_WEIGHT": 0.09297520661157024,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.002066115702479339,
                "INPUT_VARIABLE_WEIGHT": 0.3119834710743802,
                "AXIS_CONSTANT_WEIGHT": 0.03512396694214876,
                "SHAPE_CONSTANT_WEIGHT": 0.012396694214876033,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.002066115702479339,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.004132231404958678,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.002066115702479339,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.002066115702479339,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.002066115702479339
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 3,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 6,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 6,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 9,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 6,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 9,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 4,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 9,
                "PairCreationOperation": 9,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 7,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 5,
                "SHAPE_CONSTANT_WEIGHT": 6,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_19",
        "description": "(\\'sort a tensor considering the first column, breaking ties using the second column\\')",
        "target_program": "tf.gather(tf.gather(in1, tf.argsort(in1[:, 1], stable=True)), tf.argsort(tf.gather(in1, tf.argsort(in1[:, 1], stable=True))[:, 0], stable=True))",
        "source": "https://stackoverflow.com/questions/49399198/sort-a-tensor-based-on-two-columns-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[3, 1, 2], [1, 0, 4], [1, 2, 3], [0, 5, 1], [1, 1, 2], [2, 3, 1], [2, 1, 0]],]",
            "outputs": "[[0, 5, 1],    [1, 0, 4],    [1, 1, 2],    [1, 2, 3],    [2, 1, 0],    [2, 3, 1],    [3, 1, 2]]"
        },
        "completions": [
            "return tf.gather(in1, tf.argsort(tf.transpose(in1), axis=1, stable=True)[:,0])",
            "result = tf.gather(in1, tf.argsort(in1[:, 0]*1000 + in1[:, 1]))\nreturn result\n",
            "return tf.gather(in1, tf.argsort(in1[:, 0]), axis=0)",
            "return tf.gather(in1, tf.argsort(in1[:, 1], axis=0))",
            "return tf.gather(in1, tf.argsort(in1[:, 1]), batch_dims=1)",
            "return tf.gather(in1, tf.argsort(in1[:, 1]*1000 + in1[:, 0]))",
            "return tf.gather(params=in1, indices=tf.argsort(in1[:, 1]), axis=0)",
            "return tf.gather(in1, tf.argsort(in1[:, 1:], stable=True)[:, 0])",
            "return tf.argsort(tf.reverse(in1, axis=1), direction='ASCENDING')\n",
            "result = tf.gather(params=in1, indices=tf.argsort(values=in1[:, 1]*10 + in1[:, 2], stable=True), axis=0)\nreturn result\n",
            "return tf.gather(in1, tf.argsort(tf.stack([in1[:, 0], in1[:, 1]], axis=1)))",
            "return tf.gather(tf.argsort(in1, axis=0, stable=True), tf.argsort(in1[:,1], stable=True))\n",
            "sorted_indices = tf.argsort(in1[:, 0])\nsorted_in1 = tf.gather(in1, sorted_indices)\nsecond_indices = tf.argsort(sorted_in1[:, 1])\nout = tf.gather(sorted_in1, second_indices)\nreturn out\n",
            "return tf.argsort(in1[:, 1:], axis=0, stable=True, direction='ASCENDING') + tf.math.cumsum(tf.ones_like(in1[:, 1:]), axis=0)\n",
            "return tf.argsort(in1, axis=0, direction='ASCENDING', stable=True)\n",
            "return tf.gather(in1, tf.argsort(tf.reverse(in1, axis=1), axis=0)[:,0])\n  ",
            "return tf.gather(in1, tf.argsort(in1[:, 1], axis=0), axis=0)\n",
            "return tf.gather(in1, tf.argsort(tf.stack([in1[:, 0], in1[:, 1]]), axis=1))",
            "return tf.gather(params=tf.gather_nd(params=in1, indices=tf.argsort(values=in1[:, :2], axis=0)), indices=tf.argsort(values=in1[:, 0], axis=0))\n",
            "return tf.gather(in1, tf.argsort(in1[:, 1], axis=0), axis=0)\n",
            "return tf.gather(in1, tf.argsort(in1[:, 1], axis=0, stable=True))\n",
            "out = tf.gather(in1, tf.argsort(tf.stack([in1[:, 0], in1[:, 1]], axis=1)))\nreturn out\n",
            "return tf.gather(in1, tf.argsort(in1[:, 0], stable=True))\n",
            "return tf.gather(in1, tf.argsort(in1[:,0], stable=True))",
            "return tf.gather(params=in1, indices=tf.argsort(in1[:, 1]), axis=0)\n",
            "return tf.gather(in1, tf.argsort(tf.stack([in1[:,0], in1[:,1]], axis=1)))",
            "return tf.gather(in1, tf.argsort(in1[:, 0], axis=0, stable=True), axis=0)\n",
            "return tf.gather(in1, tf.argsort(in1[:, 1], axis=0))",
            "indices = tf.argsort(in1[:, 0])\nsorted_in1 = tf.gather(in1, indices)\nstart_idx = tf.reduce_min(tf.where(tf.not_equal(sorted_in1[1:], sorted_in1[:-1])))+1\nsorted_in1 = tf.concat([sorted_in1[start_idx:], sorted_in1[:start_idx]], axis=0)\nreturn sorted_in1\n",
            "return tf.gather(in1, tf.argsort(tf.stack([tf.gather(in1[:, 0], tf.argsort(in1[:, 1])), tf.range(7)], axis=1)[:, 0]))",
            "return tf.argsort(in1, axis=0, direction='ASCENDING', stable=True)\n",
            "return tf.gather(in1, tf.argsort(tf.stack([in1[:, 0], in1[:, 1]]), axis=1))\n",
            "indices = tf.argsort(in1[:,1], axis=0, stable=True)\nsorted_in1 = tf.gather(in1, indices)\nindices_ties = tf.argsort(sorted_in1[:,0], axis=0, stable=True)\nreturn tf.gather(sorted_in1, indices_ties)\n",
            "return tf.gather(in1, tf.argsort(in1[:,1], stable=True), axis=0)",
            "return tf.gather(in1, tf.argsort(tf.stack([in1[:,0], in1[:,1]], axis=1)), axis=0)",
            "return tf.gather(in1, tf.argsort(in1[:, 1]), axis=0)",
            "return tf.gather(in1, tf.argsort(in1[:, 1]*10 + in1[:, 2], stable=True))",
            "return tf.gather(params=in1, indices=tf.argsort(tf.transpose(in1), axis=1))\n",
            "return tf.gather(in1, tf.argsort(tf.stack([in1[:, 0], in1[:, 1]]), axis=1))\n",
            "return tf.gather(in1, tf.argsort(in1[:, 1]), axis=0)",
            "return tf.gather(in1, tf.argsort(in1[:, 1]), axis=0)",
            "sorted_indices = tf.argsort(in1[:, 0])\nsorted_in1 = tf.gather(in1, sorted_indices)\nfinal_sorted_indices = tf.argsort(sorted_in1[:, 1])\noutput = tf.gather(sorted_in1, final_sorted_indices)\nreturn output\n",
            "return tf.gather(params=in1, indices=tf.argsort(in1[:, 1], axis=0, stable=True))\n",
            "return tf.gather(in1, tf.argsort(in1[:, 1], stable=True))",
            "return tf.gather(in1, tf.argsort(in1[:, 0], axis=0))\n",
            "return tf.gather_nd(in1, tf.argsort(in1[:, 0], axis=0, stable=True))\n",
            "return tf.gather(in1, tf.argsort(in1[:,1]*10 + in1[:,2], stable=True), axis=0)\n",
            "result = tf.gather(in1, tf.argsort(in1[:, 0], stable=True))\nsorted_result = tf.gather_nd(result, tf.argsort(result[:, 1]))\nreturn sorted_result\n",
            "return tf.gather(in1, tf.argsort(in1[:, 1]*1000 + in1[:, 0]))\n",
            "return tf.gather(in1, tf.argsort(in1[:, 1]), axis=0)\n"
        ],
        "tf_operators": {
            "tf.transpose": 2,
            "tf.gather": 45,
            "tf.argsort": 50,
            "tf.reverse": 2,
            "tf.stack": 8,
            "tf.math.cumsum": 1,
            "tf.ones_like": 1,
            "tf.gather_nd": 3,
            "tf.where": 1,
            "tf.not_equal": 1,
            "tf.concat": 1,
            "tf.reduce_min": 1,
            "tf.range": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                1,
                0
            ],
            [
                0,
                1000,
                1
            ],
            [
                0,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                1
            ],
            [
                1,
                1000,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                10,
                2,
                0
            ],
            [
                0,
                1,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                1,
                0,
                1,
                0
            ],
            [
                0
            ],
            [
                1,
                0,
                0
            ],
            [
                1,
                0,
                0
            ],
            [
                0,
                1,
                1
            ],
            [
                2,
                0,
                0,
                0
            ],
            [
                1,
                0,
                0
            ],
            [
                1,
                0
            ],
            [
                0,
                1,
                1
            ],
            [
                0
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                0,
                1,
                1
            ],
            [
                0,
                0,
                0
            ],
            [
                1,
                0
            ],
            [
                0,
                1,
                -1,
                1,
                0
            ],
            [
                0,
                1,
                7,
                1,
                0
            ],
            [
                0
            ],
            [
                0,
                1,
                1
            ],
            [
                1,
                0,
                0,
                0
            ],
            [
                1,
                0
            ],
            [
                0,
                1,
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                10,
                2
            ],
            [
                1
            ],
            [
                0,
                1,
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                0,
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                0,
                0
            ],
            [
                0,
                0
            ],
            [
                1,
                10,
                2,
                0
            ],
            [
                0,
                1
            ],
            [
                1,
                1000,
                0
            ],
            [
                1,
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            7,
            1000,
            10,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 118,
            "shape": 1,
            "tf_bool": 0,
            "provided": 6,
            "common": 74,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 1,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0017094017094017094,
                "tf.add(x, y)": 0.0017094017094017094,
                "tf.add_n(inputs)": 0.0017094017094017094,
                "tf.argmax(input, axis)": 0.0017094017094017094,
                "tf.argmin(input, axis)": 0.0017094017094017094,
                "tf.argsort(values, axis, stable=True)": 0.035897435897435895,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.006837606837606838,
                "tf.boolean_mask(tensor, mask)": 0.0017094017094017094,
                "tf.broadcast_to(input, shape)": 0.0017094017094017094,
                "tf.cast(x, dtype)": 0.0017094017094017094,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0017094017094017094,
                "tf.concat(values, axis)": 0.003418803418803419,
                "tf.constant(value)": 0.0017094017094017094,
                "tf.constant(value, dtype)": 0.0017094017094017094,
                "tf.divide(x, y)": 0.0017094017094017094,
                "tf.equal(x, y)": 0.0017094017094017094,
                "tf.exp(x)": 0.0017094017094017094,
                "tf.expand_dims(input, axis)": 0.0017094017094017094,
                "tf.eye(num_rows)": 0.0017094017094017094,
                "tf.eye(num_rows, num_columns)": 0.0017094017094017094,
                "tf.eye(num_rows, dtype)": 0.0017094017094017094,
                "tf.fill(dims, value)": 0.0017094017094017094,
                "tf.gather(params, indices)": 0.0547008547008547,
                "tf.gather(params, indices, axis, batch_dims)": 0.02735042735042735,
                "tf.gather_nd(params, indices)": 0.005128205128205128,
                "tf.gather_nd(params, indices, batch_dims)": 0.0017094017094017094,
                "tf.greater(x, y)": 0.0017094017094017094,
                "tf.greater_equal(x, y)": 0.0017094017094017094,
                "tf.math.bincount(arr)": 0.0017094017094017094,
                "tf.math.ceil(x)": 0.0017094017094017094,
                "tf.math.count_nonzero(input)": 0.0017094017094017094,
                "tf.math.count_nonzero(input, axis)": 0.0017094017094017094,
                "tf.math.cumsum(x, axis)": 0.0017094017094017094,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.003418803418803419,
                "tf.math.divide_no_nan(x, y)": 0.0017094017094017094,
                "tf.math.floor(x)": 0.0017094017094017094,
                "tf.math.log(x)": 0.0017094017094017094,
                "tf.math.logical_and(x, y)": 0.0017094017094017094,
                "tf.math.logical_not(x)": 0.0017094017094017094,
                "tf.math.logical_or(x, y)": 0.0017094017094017094,
                "tf.math.logical_xor(x, y)": 0.0017094017094017094,
                "tf.math.negative(x)": 0.0017094017094017094,
                "tf.math.reciprocal(x)": 0.0017094017094017094,
                "tf.math.reciprocal_no_nan(x)": 0.0017094017094017094,
                "tf.math.segment_max(data, segment_ids)": 0.0017094017094017094,
                "tf.math.segment_mean(data, segment_ids)": 0.0017094017094017094,
                "tf.math.segment_min(data, segment_ids)": 0.0017094017094017094,
                "tf.math.segment_prod(data, segment_ids)": 0.0017094017094017094,
                "tf.math.segment_sum(data, segment_ids)": 0.0017094017094017094,
                "tf.math.squared_difference(x, y)": 0.0017094017094017094,
                "tf.math.top_k(input, k)": 0.0017094017094017094,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0017094017094017094,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0017094017094017094,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0017094017094017094,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0017094017094017094,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0017094017094017094,
                "tf.matmul(a, b)": 0.0017094017094017094,
                "tf.maximum(x, y)": 0.0017094017094017094,
                "tf.minimum(x, y)": 0.0017094017094017094,
                "tf.multiply(x, y)": 0.0017094017094017094,
                "tf.not_equal(x, y)": 0.003418803418803419,
                "tf.one_hot(indices, depth)": 0.0017094017094017094,
                "tf.ones(shape)": 0.0017094017094017094,
                "tf.ones_like(input)": 0.003418803418803419,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0017094017094017094,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0017094017094017094,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0017094017094017094,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0017094017094017094,
                "tf.range(start)": 0.003418803418803419,
                "tf.range(start, limit, delta)": 0.0017094017094017094,
                "tf.reduce_any(input_tensor, axis)": 0.0017094017094017094,
                "tf.reduce_all(input_tensor, axis)": 0.0017094017094017094,
                "tf.reduce_max(input_tensor)": 0.0017094017094017094,
                "tf.reduce_max(input_tensor, axis)": 0.0017094017094017094,
                "tf.reduce_mean(input_tensor)": 0.0017094017094017094,
                "tf.reduce_mean(input_tensor, axis)": 0.0017094017094017094,
                "tf.reduce_min(input_tensor)": 0.003418803418803419,
                "tf.reduce_min(input_tensor, axis)": 0.0017094017094017094,
                "tf.reduce_prod(input_tensor, axis)": 0.0017094017094017094,
                "tf.reduce_sum(input_tensor)": 0.0017094017094017094,
                "tf.reduce_sum(input_tensor, axis)": 0.0017094017094017094,
                "tf.repeat(input, repeats)": 0.0017094017094017094,
                "tf.repeat(input, repeats, axis)": 0.0017094017094017094,
                "tf.reshape(tensor, shape)": 0.0017094017094017094,
                "tf.reverse(tensor, axis)": 0.005128205128205128,
                "tf.roll(input, shift, axis)": 0.0017094017094017094,
                "tf.round(x)": 0.0017094017094017094,
                "tf.scatter_nd(indices, updates, shape)": 0.0017094017094017094,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0017094017094017094,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0017094017094017094,
                "tf.sequence_mask(lengths)": 0.0017094017094017094,
                "tf.sequence_mask(lengths, maxlen)": 0.0017094017094017094,
                "tf.shape(input)": 0.0017094017094017094,
                "tf.sign(x)": 0.0017094017094017094,
                "tf.sort(values, axis)": 0.0017094017094017094,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0017094017094017094,
                "tf.sqrt(x)": 0.0017094017094017094,
                "tf.square(x)": 0.0017094017094017094,
                "tf.squeeze(input)": 0.0017094017094017094,
                "tf.squeeze(input, axis)": 0.0017094017094017094,
                "tf.stack(values, axis)": 0.015384615384615385,
                "tf.subtract(x, y)": 0.0017094017094017094,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0017094017094017094,
                "tf.tensordot(a, b, axes)": 0.0017094017094017094,
                "tf.tile(input, multiples)": 0.0017094017094017094,
                "tf.transpose(a)": 0.005128205128205128,
                "tf.transpose(a, perm)": 0.0017094017094017094,
                "tf.unique_with_counts(x)": 0.0017094017094017094,
                "tf.unstack(value, axis)": 0.0017094017094017094,
                "tf.where(condition)": 0.003418803418803419,
                "tf.where(condition, x, y)": 0.0017094017094017094,
                "tf.zeros(shape)": 0.0017094017094017094,
                "tf.zeros_like(input)": 0.0017094017094017094,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0017094017094017094,
                "tf.sparse.add(a, b)": 0.0017094017094017094,
                "tf.sparse.concat(axis, sp_inputs)": 0.0017094017094017094,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0017094017094017094,
                "tf.sparse.from_dense(tensor)": 0.0017094017094017094,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0017094017094017094,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0017094017094017094,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0017094017094017094,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0017094017094017094,
                "tf.sparse.reset_shape(sp_input)": 0.0017094017094017094,
                "tf.sparse.reshape(sp_input, shape)": 0.0017094017094017094,
                "tf.sparse.retain(sp_input, to_retain)": 0.0017094017094017094,
                "tf.sparse.slice(sp_input, start, size)": 0.0017094017094017094,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0017094017094017094,
                "tf.sparse.to_dense(sp_input)": 0.0017094017094017094,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0017094017094017094,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0017094017094017094,
                "tf.sparse.transpose(sp_input)": 0.0017094017094017094,
                "tf.sparse.transpose(sp_input, perm)": 0.0017094017094017094,
                "IndexingAxis1Operation": 0.1111111111111111,
                "IndexingOperation": 0.0017094017094017094,
                "PairCreationOperation": 0.11794871794871795,
                "SingletonTupleCreationOperation": 0.0017094017094017094,
                "SlicingAxis0BothOperation": 0.0017094017094017094,
                "SlicingAxis0LeftOperation": 0.005128205128205128,
                "SlicingAxis0RightOperation": 0.005128205128205128,
                "SlicingAxis1BothOperation": 0.0017094017094017094,
                "SlicingAxis1LeftOperation": 0.006837606837606838,
                "SlicingAxis1RightOperation": 0.003418803418803419,
                "TripleCreationOperation": 0.0017094017094017094,
                "PROVIDED_CONSTANT_WEIGHT": 0.011965811965811967,
                "COMMON_CONSTANT_WEIGHT": 0.1282051282051282,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0017094017094017094,
                "INPUT_VARIABLE_WEIGHT": 0.20341880341880342,
                "AXIS_CONSTANT_WEIGHT": 0.003418803418803419,
                "SHAPE_CONSTANT_WEIGHT": 0.003418803418803419,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0017094017094017094,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0017094017094017094,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0017094017094017094,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0017094017094017094,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0017094017094017094
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 5,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 9,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 9,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 4,
                "tf.gather(params, indices, axis, batch_dims)": 5,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 9,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 6,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 3,
                "IndexingOperation": 9,
                "PairCreationOperation": 3,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 6,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_20",
        "description": "compute argmax in each tensor and set it to 1",
        "target_program": "tf.cast(tf.one_hot(tf.argmax(in1, axis=1), 3), tf.int32)",
        "source": "https://stackoverflow.com/questions/44834739/argmax-on-a-tensor-and-ceiling-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[0.7, 0.2, 0.1], [0.4, 0.5, 0.1], [0.4, 0.4, 0.2], [0.3, 0.4, 0.3], [0.0, 0.0, 1.0]],]",
            "outputs": "[[1, 0, 0],    [0, 1, 0],    [1, 0, 0],    [0, 1, 0],    [0, 0, 1]]"
        },
        "completions": [
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1]), dtype=tf.int32)\n",
            "return tf.cast(tf.equal(in1, tf.expand_dims(tf.reduce_max(in1, axis=1), 1)), tf.int32)",
            "max_indices = tf.cast(tf.argmax(in1, axis=1), tf.float32)\nreturn tf.one_hot(max_indices, depth=tf.shape(in1)[1])\n",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1]), tf.int32)\n",
            "def transform(in1):\n    argmax_indices = tf.argmax(in1, axis=1)\n    one_hot = tf.one_hot(argmax_indices, in1.shape[1])\n    return one_hot\n",
            "max_indices = tf.argmax(in1, axis=1)\nreturn tf.one_hot(max_indices, depth=tf.shape(in1)[1])\n",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1]), tf.int32)\n",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1])\n",
            "indices = tf.argmax(in1, axis=1)\none_hot = tf.one_hot(indices, tf.shape(in1)[1])\nreturn tf.cast(one_hot, tf.int32)\n",
            "max_indices = tf.argmax(in1, axis=1)\nresult = tf.one_hot(max_indices, tf.shape(in1)[1])\nreturn result\n",
            "return tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True))\n",
            "max_indices = tf.argmax(in1, axis=1)\nreturn tf.one_hot(max_indices, depth=tf.shape(in1)[1])\n",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1])",
            "return tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True))",
            "return tf.cast(tf.eye(tf.argmax(in1, axis=1) + 1, depth=in1.shape[1]), tf.int32)\n",
            "index_max = tf.argmax(in1, axis=1)\nresult = tf.one_hot(index_max, tf.shape(in1)[1])\nreturn result\n",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1]), tf.int32)\n",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n",
            "indices = tf.argmax(in1, axis=-1)\nupdates = tf.ones_like(indices)\noutput = tf.tensor_scatter_nd_update(tf.zeros_like(in1), indices, updates)\nreturn output\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)\n",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), in1.shape[1]), tf.int32)\n",
            "max_indices = tf.expand_dims(tf.argmax(in1, axis=1), 1)\nreturn tf.cast(tf.equal(tf.range(tf.shape(in1)[1]), max_indices), tf.int32)\n",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n",
            "max_indices = tf.argmax(in1, axis=1)\nresult = tf.one_hot(max_indices, tf.shape(in1)[1])\nreturn result\n",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), tf.shape(in1)[1]), tf.int32)",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1]), tf.int32)\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)\n",
            "values, indices = tf.math.top_k(in1, k=1)\nreturn tf.one_hot(indices, depth=tf.shape(in1)[-1])\n",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1]), tf.int32)\n",
            "return tf.cast(tf.equal(in1, tf.expand_dims(tf.reduce_max(in1, axis=1), 1)), tf.int32)\n",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), in1.shape[1]), in1.dtype)",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)\n",
            "return tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)) * 1",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), tf.shape(in1)[1]), tf.int32)\n",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n",
            "max_indices = tf.argmax(in1, axis=1)\nreturn tf.one_hot(max_indices, depth=tf.shape(in1)[1])\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)\n",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1]), tf.int32)",
            "indices = tf.cast(tf.argmax(in1, axis=1), tf.int32)\ndepth = tf.shape(in1)[1]\nreturn tf.one_hot(indices, depth)\n",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), tf.shape(in1)[1]), tf.int32)\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)\n",
            "return tf.equal(in1, tf.expand_dims(tf.reduce_max(in1, axis=1), 1))",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), 3), tf.int32)",
            "max_indices = tf.argmax(in1, axis=1)\nreturn tf.one_hot(max_indices, depth=tf.shape(in1)[1])\n"
        ],
        "tf_operators": {
            "tf.one_hot": 35,
            "tf.shape": 23,
            "tf.cast": 26,
            "tf.int32": 24,
            "tf.argmax": 37,
            "tf.reduce_max": 12,
            "tf.equal": 13,
            "tf.expand_dims": 4,
            "tf.float32": 1,
            "tf.eye": 1,
            "tf.tensor_scatter_nd_update": 1,
            "tf.zeros_like": 1,
            "tf.ones_like": 1,
            "tf.range": 1,
            "tf.math.top_k": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                -1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                3
            ],
            [
                1,
                1
            ]
        ],
        "all_constants": [
            1,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 98,
            "shape": 1,
            "tf_bool": 0,
            "provided": 0,
            "common": 101,
            "shape_tuple": 0,
            "tf_float32": 1,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 24
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0017825311942959,
                "tf.add(x, y)": 0.0017825311942959,
                "tf.add_n(inputs)": 0.0017825311942959,
                "tf.argmax(input, axis)": 0.0677361853832442,
                "tf.argmin(input, axis)": 0.0017825311942959,
                "tf.argsort(values, axis, stable=True)": 0.0017825311942959,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0017825311942959,
                "tf.boolean_mask(tensor, mask)": 0.0017825311942959,
                "tf.broadcast_to(input, shape)": 0.0017825311942959,
                "tf.cast(x, dtype)": 0.0481283422459893,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0017825311942959,
                "tf.concat(values, axis)": 0.0017825311942959,
                "tf.constant(value)": 0.0017825311942959,
                "tf.constant(value, dtype)": 0.0017825311942959,
                "tf.divide(x, y)": 0.0017825311942959,
                "tf.equal(x, y)": 0.024955436720142603,
                "tf.exp(x)": 0.0017825311942959,
                "tf.expand_dims(input, axis)": 0.008912655971479501,
                "tf.eye(num_rows)": 0.0017825311942959,
                "tf.eye(num_rows, num_columns)": 0.0035650623885918,
                "tf.eye(num_rows, dtype)": 0.0017825311942959,
                "tf.fill(dims, value)": 0.0017825311942959,
                "tf.gather(params, indices)": 0.0017825311942959,
                "tf.gather(params, indices, axis, batch_dims)": 0.0017825311942959,
                "tf.gather_nd(params, indices)": 0.0017825311942959,
                "tf.gather_nd(params, indices, batch_dims)": 0.0017825311942959,
                "tf.greater(x, y)": 0.0017825311942959,
                "tf.greater_equal(x, y)": 0.0017825311942959,
                "tf.math.bincount(arr)": 0.0017825311942959,
                "tf.math.ceil(x)": 0.0017825311942959,
                "tf.math.count_nonzero(input)": 0.0017825311942959,
                "tf.math.count_nonzero(input, axis)": 0.0017825311942959,
                "tf.math.cumsum(x, axis)": 0.0017825311942959,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0017825311942959,
                "tf.math.divide_no_nan(x, y)": 0.0017825311942959,
                "tf.math.floor(x)": 0.0017825311942959,
                "tf.math.log(x)": 0.0017825311942959,
                "tf.math.logical_and(x, y)": 0.0017825311942959,
                "tf.math.logical_not(x)": 0.0017825311942959,
                "tf.math.logical_or(x, y)": 0.0017825311942959,
                "tf.math.logical_xor(x, y)": 0.0017825311942959,
                "tf.math.negative(x)": 0.0017825311942959,
                "tf.math.reciprocal(x)": 0.0017825311942959,
                "tf.math.reciprocal_no_nan(x)": 0.0017825311942959,
                "tf.math.segment_max(data, segment_ids)": 0.0017825311942959,
                "tf.math.segment_mean(data, segment_ids)": 0.0017825311942959,
                "tf.math.segment_min(data, segment_ids)": 0.0017825311942959,
                "tf.math.segment_prod(data, segment_ids)": 0.0017825311942959,
                "tf.math.segment_sum(data, segment_ids)": 0.0017825311942959,
                "tf.math.squared_difference(x, y)": 0.0017825311942959,
                "tf.math.top_k(input, k)": 0.0035650623885918,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0017825311942959,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0017825311942959,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0017825311942959,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0017825311942959,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0017825311942959,
                "tf.matmul(a, b)": 0.0017825311942959,
                "tf.maximum(x, y)": 0.0017825311942959,
                "tf.minimum(x, y)": 0.0017825311942959,
                "tf.multiply(x, y)": 0.0017825311942959,
                "tf.not_equal(x, y)": 0.0017825311942959,
                "tf.one_hot(indices, depth)": 0.06417112299465241,
                "tf.ones(shape)": 0.0017825311942959,
                "tf.ones_like(input)": 0.0035650623885918,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0017825311942959,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0017825311942959,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0017825311942959,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0017825311942959,
                "tf.range(start)": 0.0035650623885918,
                "tf.range(start, limit, delta)": 0.0017825311942959,
                "tf.reduce_any(input_tensor, axis)": 0.0017825311942959,
                "tf.reduce_all(input_tensor, axis)": 0.0017825311942959,
                "tf.reduce_max(input_tensor)": 0.0017825311942959,
                "tf.reduce_max(input_tensor, axis)": 0.0017825311942959,
                "tf.reduce_mean(input_tensor)": 0.0017825311942959,
                "tf.reduce_mean(input_tensor, axis)": 0.0017825311942959,
                "tf.reduce_min(input_tensor)": 0.0017825311942959,
                "tf.reduce_min(input_tensor, axis)": 0.0017825311942959,
                "tf.reduce_prod(input_tensor, axis)": 0.0017825311942959,
                "tf.reduce_sum(input_tensor)": 0.0017825311942959,
                "tf.reduce_sum(input_tensor, axis)": 0.0017825311942959,
                "tf.repeat(input, repeats)": 0.0017825311942959,
                "tf.repeat(input, repeats, axis)": 0.0017825311942959,
                "tf.reshape(tensor, shape)": 0.0017825311942959,
                "tf.reverse(tensor, axis)": 0.0017825311942959,
                "tf.roll(input, shift, axis)": 0.0017825311942959,
                "tf.round(x)": 0.0017825311942959,
                "tf.scatter_nd(indices, updates, shape)": 0.0017825311942959,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0017825311942959,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0017825311942959,
                "tf.sequence_mask(lengths)": 0.0017825311942959,
                "tf.sequence_mask(lengths, maxlen)": 0.0017825311942959,
                "tf.shape(input)": 0.0427807486631016,
                "tf.sign(x)": 0.0017825311942959,
                "tf.sort(values, axis)": 0.0017825311942959,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0017825311942959,
                "tf.sqrt(x)": 0.0017825311942959,
                "tf.square(x)": 0.0017825311942959,
                "tf.squeeze(input)": 0.0017825311942959,
                "tf.squeeze(input, axis)": 0.0017825311942959,
                "tf.stack(values, axis)": 0.0017825311942959,
                "tf.subtract(x, y)": 0.0017825311942959,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0035650623885918,
                "tf.tensordot(a, b, axes)": 0.0017825311942959,
                "tf.tile(input, multiples)": 0.0017825311942959,
                "tf.transpose(a)": 0.0017825311942959,
                "tf.transpose(a, perm)": 0.0017825311942959,
                "tf.unique_with_counts(x)": 0.0017825311942959,
                "tf.unstack(value, axis)": 0.0017825311942959,
                "tf.where(condition)": 0.0017825311942959,
                "tf.where(condition, x, y)": 0.0017825311942959,
                "tf.zeros(shape)": 0.0017825311942959,
                "tf.zeros_like(input)": 0.0035650623885918,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0017825311942959,
                "tf.sparse.add(a, b)": 0.0017825311942959,
                "tf.sparse.concat(axis, sp_inputs)": 0.0017825311942959,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0017825311942959,
                "tf.sparse.from_dense(tensor)": 0.0017825311942959,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0017825311942959,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0017825311942959,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0017825311942959,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0017825311942959,
                "tf.sparse.reset_shape(sp_input)": 0.0017825311942959,
                "tf.sparse.reshape(sp_input, shape)": 0.0017825311942959,
                "tf.sparse.retain(sp_input, to_retain)": 0.0017825311942959,
                "tf.sparse.slice(sp_input, start, size)": 0.0017825311942959,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0017825311942959,
                "tf.sparse.to_dense(sp_input)": 0.0017825311942959,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0017825311942959,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0017825311942959,
                "tf.sparse.transpose(sp_input)": 0.0017825311942959,
                "tf.sparse.transpose(sp_input, perm)": 0.0017825311942959,
                "IndexingAxis1Operation": 0.0017825311942959,
                "IndexingOperation": 0.0659536541889483,
                "PairCreationOperation": 0.0035650623885918,
                "SingletonTupleCreationOperation": 0.0017825311942959,
                "SlicingAxis0BothOperation": 0.0017825311942959,
                "SlicingAxis0LeftOperation": 0.0017825311942959,
                "SlicingAxis0RightOperation": 0.0017825311942959,
                "SlicingAxis1BothOperation": 0.0017825311942959,
                "SlicingAxis1LeftOperation": 0.0017825311942959,
                "SlicingAxis1RightOperation": 0.0017825311942959,
                "TripleCreationOperation": 0.0017825311942959,
                "PROVIDED_CONSTANT_WEIGHT": 0.0017825311942959,
                "COMMON_CONSTANT_WEIGHT": 0.18181818181818182,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0017825311942959,
                "INPUT_VARIABLE_WEIGHT": 0.17647058823529413,
                "AXIS_CONSTANT_WEIGHT": 0.0017825311942959,
                "SHAPE_CONSTANT_WEIGHT": 0.0035650623885918,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0017825311942959,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.044563279857397504,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0035650623885918,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0017825311942959,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0017825311942959
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 4,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 4,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 5,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 4,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 5,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 4,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 2,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 9,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 4,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_21",
        "description": "gather elements in a tensor along axis 1",
        "target_program": "tf.gather(in2, in1, axis=1, batch_dims=1)",
        "source": "https://stackoverflow.com/questions/51690095/how-to-gather-element-with-index-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[2], [0], [1], [0]],[[0.2, 0.5, 0.3], [0.1, 0.3, 0.6], [0.1, 0.6, 0.3], [0.7, 0.0, 0.3]],]",
            "outputs": "[[0.3], [0.1], [0.6], [0.7]]"
        },
        "completions": [
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather(in2, in1, axis=1)\n",
            "result = tf.gather_nd(in2, in1)\nreturn result\n",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "return tf.gather(in2, tf.squeeze(in1, axis=1), axis=1)\n",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1, batch_dims=1)",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "return tf.gather_nd(in2, tf.stack([tf.range(tf.shape(in2)[0]), tf.squeeze(in1)], axis=1))\n",
            "indices = tf.stack([tf.range(tf.shape(in1)[0]), tf.squeeze(in1)], axis=1)\nreturn tf.gather_nd(in2, indices)\n",
            "return tf.gather_nd(in2, tf.expand_dims(in1, axis=1))",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather_nd(in2, tf.stack([tf.range(tf.shape(in1)[0]), tf.squeeze(in1)], axis=1))\n",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))\n",
            "return tf.gather_nd(in2, in1)\n",
            "indices = tf.expand_dims(in1, 2)\nreturn tf.gather_nd(in2, indices)\n",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))\n",
            "return tf.cast(tf.gather_nd(in2, in1), tf.float32)",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "return tf.gather_nd(in2, tf.stack([tf.range(tf.shape(in1)[0]), tf.squeeze(in1)], axis=1))",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather_nd(in2, in1)",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "return tf.gather_nd(in2, in1)",
            "return tf.gather(in2, in1, axis=1)\n",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather(in2, tf.cast(in1, tf.int32), axis=1)\n",
            "return tf.gather_nd(in2, tf.stack([tf.range(tf.shape(in1)[0]), tf.squeeze(in1)], axis=1))",
            "output = tf.gather_nd(in2, in1, batch_dims=1)\nreturn output\n",
            "return tf.gather_nd(in2, tf.stack([tf.range(tf.shape(in1)[0]), tf.squeeze(in1)], axis=1))\n",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))\n",
            "return tf.gather_nd(in2, in1)",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))\n",
            "return tf.gather_nd(in2, in1)\n",
            "output = tf.gather_nd(in2, in1)\nreturn output\n",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))\n",
            "output = tf.gather(in2, in1, axis=1)\nreturn output\n",
            "return tf.gather_nd(in2, in1)",
            "return tf.gather_nd(in2, tf.stack([tf.range(tf.shape(in1)[0]), tf.squeeze(in1, axis=1)], axis=1))\n"
        ],
        "tf_operators": {
            "tf.expand_dims": 16,
            "tf.gather_nd": 45,
            "tf.gather": 5,
            "tf.squeeze": 8,
            "tf.shape": 7,
            "tf.range": 7,
            "tf.stack": 7,
            "tf.float32": 1,
            "tf.cast": 2,
            "tf.int32": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [],
            [
                0,
                1
            ],
            [
                1
            ],
            [],
            [
                2
            ],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                0,
                1,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 111,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 38,
            "shape_tuple": 0,
            "tf_float32": 1,
            "axis": 1,
            "tf_int64": 0,
            "tf_int32": 1
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.002457002457002457,
                "tf.add(x, y)": 0.002457002457002457,
                "tf.add_n(inputs)": 0.002457002457002457,
                "tf.argmax(input, axis)": 0.002457002457002457,
                "tf.argmin(input, axis)": 0.002457002457002457,
                "tf.argsort(values, axis, stable=True)": 0.002457002457002457,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.002457002457002457,
                "tf.boolean_mask(tensor, mask)": 0.002457002457002457,
                "tf.broadcast_to(input, shape)": 0.002457002457002457,
                "tf.cast(x, dtype)": 0.007371007371007371,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.002457002457002457,
                "tf.concat(values, axis)": 0.002457002457002457,
                "tf.constant(value)": 0.002457002457002457,
                "tf.constant(value, dtype)": 0.002457002457002457,
                "tf.divide(x, y)": 0.002457002457002457,
                "tf.equal(x, y)": 0.002457002457002457,
                "tf.exp(x)": 0.002457002457002457,
                "tf.expand_dims(input, axis)": 0.04176904176904177,
                "tf.eye(num_rows)": 0.002457002457002457,
                "tf.eye(num_rows, num_columns)": 0.002457002457002457,
                "tf.eye(num_rows, dtype)": 0.002457002457002457,
                "tf.fill(dims, value)": 0.002457002457002457,
                "tf.gather(params, indices)": 0.002457002457002457,
                "tf.gather(params, indices, axis, batch_dims)": 0.014742014742014743,
                "tf.gather_nd(params, indices)": 0.10810810810810811,
                "tf.gather_nd(params, indices, batch_dims)": 0.002457002457002457,
                "tf.greater(x, y)": 0.002457002457002457,
                "tf.greater_equal(x, y)": 0.002457002457002457,
                "tf.math.bincount(arr)": 0.002457002457002457,
                "tf.math.ceil(x)": 0.002457002457002457,
                "tf.math.count_nonzero(input)": 0.002457002457002457,
                "tf.math.count_nonzero(input, axis)": 0.002457002457002457,
                "tf.math.cumsum(x, axis)": 0.002457002457002457,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.002457002457002457,
                "tf.math.divide_no_nan(x, y)": 0.002457002457002457,
                "tf.math.floor(x)": 0.002457002457002457,
                "tf.math.log(x)": 0.002457002457002457,
                "tf.math.logical_and(x, y)": 0.002457002457002457,
                "tf.math.logical_not(x)": 0.002457002457002457,
                "tf.math.logical_or(x, y)": 0.002457002457002457,
                "tf.math.logical_xor(x, y)": 0.002457002457002457,
                "tf.math.negative(x)": 0.002457002457002457,
                "tf.math.reciprocal(x)": 0.002457002457002457,
                "tf.math.reciprocal_no_nan(x)": 0.002457002457002457,
                "tf.math.segment_max(data, segment_ids)": 0.002457002457002457,
                "tf.math.segment_mean(data, segment_ids)": 0.002457002457002457,
                "tf.math.segment_min(data, segment_ids)": 0.002457002457002457,
                "tf.math.segment_prod(data, segment_ids)": 0.002457002457002457,
                "tf.math.segment_sum(data, segment_ids)": 0.002457002457002457,
                "tf.math.squared_difference(x, y)": 0.002457002457002457,
                "tf.math.top_k(input, k)": 0.002457002457002457,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.002457002457002457,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.002457002457002457,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.002457002457002457,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.002457002457002457,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.002457002457002457,
                "tf.matmul(a, b)": 0.002457002457002457,
                "tf.maximum(x, y)": 0.002457002457002457,
                "tf.minimum(x, y)": 0.002457002457002457,
                "tf.multiply(x, y)": 0.002457002457002457,
                "tf.not_equal(x, y)": 0.002457002457002457,
                "tf.one_hot(indices, depth)": 0.002457002457002457,
                "tf.ones(shape)": 0.002457002457002457,
                "tf.ones_like(input)": 0.002457002457002457,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.002457002457002457,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.002457002457002457,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.002457002457002457,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.002457002457002457,
                "tf.range(start)": 0.019656019656019656,
                "tf.range(start, limit, delta)": 0.002457002457002457,
                "tf.reduce_any(input_tensor, axis)": 0.002457002457002457,
                "tf.reduce_all(input_tensor, axis)": 0.002457002457002457,
                "tf.reduce_max(input_tensor)": 0.002457002457002457,
                "tf.reduce_max(input_tensor, axis)": 0.002457002457002457,
                "tf.reduce_mean(input_tensor)": 0.002457002457002457,
                "tf.reduce_mean(input_tensor, axis)": 0.002457002457002457,
                "tf.reduce_min(input_tensor)": 0.002457002457002457,
                "tf.reduce_min(input_tensor, axis)": 0.002457002457002457,
                "tf.reduce_prod(input_tensor, axis)": 0.002457002457002457,
                "tf.reduce_sum(input_tensor)": 0.002457002457002457,
                "tf.reduce_sum(input_tensor, axis)": 0.002457002457002457,
                "tf.repeat(input, repeats)": 0.002457002457002457,
                "tf.repeat(input, repeats, axis)": 0.002457002457002457,
                "tf.reshape(tensor, shape)": 0.002457002457002457,
                "tf.reverse(tensor, axis)": 0.002457002457002457,
                "tf.roll(input, shift, axis)": 0.002457002457002457,
                "tf.round(x)": 0.002457002457002457,
                "tf.scatter_nd(indices, updates, shape)": 0.002457002457002457,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.002457002457002457,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.002457002457002457,
                "tf.sequence_mask(lengths)": 0.002457002457002457,
                "tf.sequence_mask(lengths, maxlen)": 0.002457002457002457,
                "tf.shape(input)": 0.019656019656019656,
                "tf.sign(x)": 0.002457002457002457,
                "tf.sort(values, axis)": 0.002457002457002457,
                "tf.sort(values, axis, direction='DESCENDING')": 0.002457002457002457,
                "tf.sqrt(x)": 0.002457002457002457,
                "tf.square(x)": 0.002457002457002457,
                "tf.squeeze(input)": 0.0171990171990172,
                "tf.squeeze(input, axis)": 0.002457002457002457,
                "tf.stack(values, axis)": 0.019656019656019656,
                "tf.subtract(x, y)": 0.002457002457002457,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.002457002457002457,
                "tf.tensordot(a, b, axes)": 0.002457002457002457,
                "tf.tile(input, multiples)": 0.002457002457002457,
                "tf.transpose(a)": 0.002457002457002457,
                "tf.transpose(a, perm)": 0.002457002457002457,
                "tf.unique_with_counts(x)": 0.002457002457002457,
                "tf.unstack(value, axis)": 0.002457002457002457,
                "tf.where(condition)": 0.002457002457002457,
                "tf.where(condition, x, y)": 0.002457002457002457,
                "tf.zeros(shape)": 0.002457002457002457,
                "tf.zeros_like(input)": 0.002457002457002457,
                "tf.SparseTensor(indices, values, dense_shape)": 0.002457002457002457,
                "tf.sparse.add(a, b)": 0.002457002457002457,
                "tf.sparse.concat(axis, sp_inputs)": 0.002457002457002457,
                "tf.sparse.expand_dims(sp_input, axis)": 0.002457002457002457,
                "tf.sparse.from_dense(tensor)": 0.002457002457002457,
                "tf.sparse.maximum(sp_a, sp_b)": 0.002457002457002457,
                "tf.sparse.minimum(sp_a, sp_b)": 0.002457002457002457,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.002457002457002457,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.002457002457002457,
                "tf.sparse.reset_shape(sp_input)": 0.002457002457002457,
                "tf.sparse.reshape(sp_input, shape)": 0.002457002457002457,
                "tf.sparse.retain(sp_input, to_retain)": 0.002457002457002457,
                "tf.sparse.slice(sp_input, start, size)": 0.002457002457002457,
                "tf.sparse.split(sp_input, num_split, axis)": 0.002457002457002457,
                "tf.sparse.to_dense(sp_input)": 0.002457002457002457,
                "tf.sparse.to_dense(sp_input, default_value)": 0.002457002457002457,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.002457002457002457,
                "tf.sparse.transpose(sp_input)": 0.002457002457002457,
                "tf.sparse.transpose(sp_input, perm)": 0.002457002457002457,
                "IndexingAxis1Operation": 0.002457002457002457,
                "IndexingOperation": 0.019656019656019656,
                "PairCreationOperation": 0.002457002457002457,
                "SingletonTupleCreationOperation": 0.002457002457002457,
                "SlicingAxis0BothOperation": 0.002457002457002457,
                "SlicingAxis0LeftOperation": 0.002457002457002457,
                "SlicingAxis0RightOperation": 0.002457002457002457,
                "SlicingAxis1BothOperation": 0.002457002457002457,
                "SlicingAxis1LeftOperation": 0.002457002457002457,
                "SlicingAxis1RightOperation": 0.002457002457002457,
                "TripleCreationOperation": 0.002457002457002457,
                "PROVIDED_CONSTANT_WEIGHT": 0.002457002457002457,
                "COMMON_CONSTANT_WEIGHT": 0.09582309582309582,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.002457002457002457,
                "INPUT_VARIABLE_WEIGHT": 0.2751842751842752,
                "AXIS_CONSTANT_WEIGHT": 0.004914004914004914,
                "SHAPE_CONSTANT_WEIGHT": 0.002457002457002457,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.002457002457002457,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.004914004914004914,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004914004914004914,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.002457002457002457,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.002457002457002457
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 5,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 6,
                "tf.gather_nd(params, indices)": 3,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 6,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 6,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 6,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 6,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 6,
                "PairCreationOperation": 9,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_22",
        "description": "multiply a vector with a matrix without reshaping the vector",
        "target_program": "tf.tensordot(tf.cast(in1, tf.float32), in2, 1)",
        "source": "https://stackoverflow.com/questions/43284897/how-can-i-multiply-a-vector-and-a-matrix-in-tensorflow-without-reshaping",
        "constants": "[]",
        "examples": {
            "inputs": "[[3, 1, 10],[[0.6, 0.4], [0.5, 1.0], [3.0, 4.0]],]",
            "outputs": "[32.3, 42.2]"
        },
        "completions": [
            "output = tf.tensordot(in2, in1, axes=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "return tf.matmul(in1, tf.expand_dims(in2, 1))[-1]",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "return tf.reduce_sum(tf.multiply(tf.expand_dims(in1, 1), in2), axis=1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 0)), axis=1)",
            "def transform(in1, in2):\n    return tf.squeeze(tf.tensordot(in2, in1, axes=1))\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.matmul(in1, in2, transpose_b=True)\n",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "return tf.matmul(tf.expand_dims(in1, 0), in2)[0]\n",
            "return tf.matmul(in1, in2)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.matmul(tf.expand_dims(in1, 0), in2)",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.reduce_sum(tf.multiply(in2, tf.expand_dims(in1, 1)), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "return tf.matmul(in2, tf.expand_dims(in1, 1))\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "out = tf.matmul(tf.expand_dims(in1, axis=0), in2)\nreturn out[0]\n",
            "return tf.tensordot(in2, in1, 1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)\n",
            "output = tf.tensordot(in2, in1, axes=1)\n",
            "return tf.reduce_sum(in1 * in2, axis=1)\n",
            "output = tf.tensordot(tf.expand_dims(in1, 0), in2, axes=1)\nreturn output[0]\n",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "return tf.reduce_sum(tf.multiply(in2, tf.expand_dims(in1, 1)), axis=1)",
            "return tf.reduce_sum(tf.multiply(tf.transpose(in2), in1), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "return tf.reduce_sum(tf.multiply(tf.expand_dims(in1, 1), in2), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "return tf.tensordot(in2, in1, 1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "result = tf.tensordot(in1, in2, axes=1)\n",
            "return tf.reduce_sum(tf.multiply(in2, tf.expand_dims(in1, 1)), axis=1)"
        ],
        "tf_operators": {
            "tf.tensordot": 21,
            "tf.reduce_sum": 22,
            "tf.multiply": 21,
            "tf.expand_dims": 12,
            "tf.matmul": 7,
            "tf.squeeze": 1,
            "tf.transpose": 1
        },
        "coverage_percentage": 33.33333333333333,
        "total_covered": 1,
        "total_in_target": 3,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                -1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                0,
                0
            ],
            [],
            [
                1
            ],
            [
                0
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 100,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 60,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.002617801047120419,
                "tf.add(x, y)": 0.002617801047120419,
                "tf.add_n(inputs)": 0.002617801047120419,
                "tf.argmax(input, axis)": 0.002617801047120419,
                "tf.argmin(input, axis)": 0.002617801047120419,
                "tf.argsort(values, axis, stable=True)": 0.002617801047120419,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.002617801047120419,
                "tf.boolean_mask(tensor, mask)": 0.002617801047120419,
                "tf.broadcast_to(input, shape)": 0.002617801047120419,
                "tf.cast(x, dtype)": 0.002617801047120419,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.002617801047120419,
                "tf.concat(values, axis)": 0.002617801047120419,
                "tf.constant(value)": 0.002617801047120419,
                "tf.constant(value, dtype)": 0.002617801047120419,
                "tf.divide(x, y)": 0.002617801047120419,
                "tf.equal(x, y)": 0.002617801047120419,
                "tf.exp(x)": 0.002617801047120419,
                "tf.expand_dims(input, axis)": 0.034031413612565446,
                "tf.eye(num_rows)": 0.002617801047120419,
                "tf.eye(num_rows, num_columns)": 0.002617801047120419,
                "tf.eye(num_rows, dtype)": 0.002617801047120419,
                "tf.fill(dims, value)": 0.002617801047120419,
                "tf.gather(params, indices)": 0.002617801047120419,
                "tf.gather(params, indices, axis, batch_dims)": 0.002617801047120419,
                "tf.gather_nd(params, indices)": 0.002617801047120419,
                "tf.gather_nd(params, indices, batch_dims)": 0.002617801047120419,
                "tf.greater(x, y)": 0.002617801047120419,
                "tf.greater_equal(x, y)": 0.002617801047120419,
                "tf.math.bincount(arr)": 0.002617801047120419,
                "tf.math.ceil(x)": 0.002617801047120419,
                "tf.math.count_nonzero(input)": 0.002617801047120419,
                "tf.math.count_nonzero(input, axis)": 0.002617801047120419,
                "tf.math.cumsum(x, axis)": 0.002617801047120419,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.002617801047120419,
                "tf.math.divide_no_nan(x, y)": 0.002617801047120419,
                "tf.math.floor(x)": 0.002617801047120419,
                "tf.math.log(x)": 0.002617801047120419,
                "tf.math.logical_and(x, y)": 0.002617801047120419,
                "tf.math.logical_not(x)": 0.002617801047120419,
                "tf.math.logical_or(x, y)": 0.002617801047120419,
                "tf.math.logical_xor(x, y)": 0.002617801047120419,
                "tf.math.negative(x)": 0.002617801047120419,
                "tf.math.reciprocal(x)": 0.002617801047120419,
                "tf.math.reciprocal_no_nan(x)": 0.002617801047120419,
                "tf.math.segment_max(data, segment_ids)": 0.002617801047120419,
                "tf.math.segment_mean(data, segment_ids)": 0.002617801047120419,
                "tf.math.segment_min(data, segment_ids)": 0.002617801047120419,
                "tf.math.segment_prod(data, segment_ids)": 0.002617801047120419,
                "tf.math.segment_sum(data, segment_ids)": 0.002617801047120419,
                "tf.math.squared_difference(x, y)": 0.002617801047120419,
                "tf.math.top_k(input, k)": 0.002617801047120419,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.002617801047120419,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.002617801047120419,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.002617801047120419,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.002617801047120419,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.002617801047120419,
                "tf.matmul(a, b)": 0.020942408376963352,
                "tf.maximum(x, y)": 0.002617801047120419,
                "tf.minimum(x, y)": 0.002617801047120419,
                "tf.multiply(x, y)": 0.05759162303664921,
                "tf.not_equal(x, y)": 0.002617801047120419,
                "tf.one_hot(indices, depth)": 0.002617801047120419,
                "tf.ones(shape)": 0.002617801047120419,
                "tf.ones_like(input)": 0.002617801047120419,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.002617801047120419,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.002617801047120419,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.002617801047120419,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.002617801047120419,
                "tf.range(start)": 0.002617801047120419,
                "tf.range(start, limit, delta)": 0.002617801047120419,
                "tf.reduce_any(input_tensor, axis)": 0.002617801047120419,
                "tf.reduce_all(input_tensor, axis)": 0.002617801047120419,
                "tf.reduce_max(input_tensor)": 0.002617801047120419,
                "tf.reduce_max(input_tensor, axis)": 0.002617801047120419,
                "tf.reduce_mean(input_tensor)": 0.002617801047120419,
                "tf.reduce_mean(input_tensor, axis)": 0.002617801047120419,
                "tf.reduce_min(input_tensor)": 0.002617801047120419,
                "tf.reduce_min(input_tensor, axis)": 0.002617801047120419,
                "tf.reduce_prod(input_tensor, axis)": 0.002617801047120419,
                "tf.reduce_sum(input_tensor)": 0.002617801047120419,
                "tf.reduce_sum(input_tensor, axis)": 0.002617801047120419,
                "tf.repeat(input, repeats)": 0.002617801047120419,
                "tf.repeat(input, repeats, axis)": 0.002617801047120419,
                "tf.reshape(tensor, shape)": 0.002617801047120419,
                "tf.reverse(tensor, axis)": 0.002617801047120419,
                "tf.roll(input, shift, axis)": 0.002617801047120419,
                "tf.round(x)": 0.002617801047120419,
                "tf.scatter_nd(indices, updates, shape)": 0.002617801047120419,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.002617801047120419,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.002617801047120419,
                "tf.sequence_mask(lengths)": 0.002617801047120419,
                "tf.sequence_mask(lengths, maxlen)": 0.002617801047120419,
                "tf.shape(input)": 0.002617801047120419,
                "tf.sign(x)": 0.002617801047120419,
                "tf.sort(values, axis)": 0.002617801047120419,
                "tf.sort(values, axis, direction='DESCENDING')": 0.002617801047120419,
                "tf.sqrt(x)": 0.002617801047120419,
                "tf.square(x)": 0.002617801047120419,
                "tf.squeeze(input)": 0.005235602094240838,
                "tf.squeeze(input, axis)": 0.002617801047120419,
                "tf.stack(values, axis)": 0.002617801047120419,
                "tf.subtract(x, y)": 0.002617801047120419,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.002617801047120419,
                "tf.tensordot(a, b, axes)": 0.05759162303664921,
                "tf.tile(input, multiples)": 0.002617801047120419,
                "tf.transpose(a)": 0.005235602094240838,
                "tf.transpose(a, perm)": 0.002617801047120419,
                "tf.unique_with_counts(x)": 0.002617801047120419,
                "tf.unstack(value, axis)": 0.002617801047120419,
                "tf.where(condition)": 0.002617801047120419,
                "tf.where(condition, x, y)": 0.002617801047120419,
                "tf.zeros(shape)": 0.002617801047120419,
                "tf.zeros_like(input)": 0.002617801047120419,
                "tf.SparseTensor(indices, values, dense_shape)": 0.002617801047120419,
                "tf.sparse.add(a, b)": 0.002617801047120419,
                "tf.sparse.concat(axis, sp_inputs)": 0.002617801047120419,
                "tf.sparse.expand_dims(sp_input, axis)": 0.002617801047120419,
                "tf.sparse.from_dense(tensor)": 0.002617801047120419,
                "tf.sparse.maximum(sp_a, sp_b)": 0.002617801047120419,
                "tf.sparse.minimum(sp_a, sp_b)": 0.002617801047120419,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.002617801047120419,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.002617801047120419,
                "tf.sparse.reset_shape(sp_input)": 0.002617801047120419,
                "tf.sparse.reshape(sp_input, shape)": 0.002617801047120419,
                "tf.sparse.retain(sp_input, to_retain)": 0.002617801047120419,
                "tf.sparse.slice(sp_input, start, size)": 0.002617801047120419,
                "tf.sparse.split(sp_input, num_split, axis)": 0.002617801047120419,
                "tf.sparse.to_dense(sp_input)": 0.002617801047120419,
                "tf.sparse.to_dense(sp_input, default_value)": 0.002617801047120419,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.002617801047120419,
                "tf.sparse.transpose(sp_input)": 0.002617801047120419,
                "tf.sparse.transpose(sp_input, perm)": 0.002617801047120419,
                "IndexingAxis1Operation": 0.002617801047120419,
                "IndexingOperation": 0.013089005235602094,
                "PairCreationOperation": 0.002617801047120419,
                "SingletonTupleCreationOperation": 0.002617801047120419,
                "SlicingAxis0BothOperation": 0.002617801047120419,
                "SlicingAxis0LeftOperation": 0.002617801047120419,
                "SlicingAxis0RightOperation": 0.002617801047120419,
                "SlicingAxis1BothOperation": 0.002617801047120419,
                "SlicingAxis1LeftOperation": 0.002617801047120419,
                "SlicingAxis1RightOperation": 0.002617801047120419,
                "TripleCreationOperation": 0.002617801047120419,
                "PROVIDED_CONSTANT_WEIGHT": 0.002617801047120419,
                "COMMON_CONSTANT_WEIGHT": 0.15968586387434555,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.002617801047120419,
                "INPUT_VARIABLE_WEIGHT": 0.2643979057591623,
                "AXIS_CONSTANT_WEIGHT": 0.002617801047120419,
                "SHAPE_CONSTANT_WEIGHT": 0.002617801047120419,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.002617801047120419,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.002617801047120419,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.002617801047120419,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.002617801047120419,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.002617801047120419
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 9,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 5,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 6,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 4,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 9,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 9,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 4,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 6,
                "PairCreationOperation": 9,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 9,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_23",
        "description": "place 1 at the indices in the input tensor",
        "target_program": "tf.cast(tf.reduce_max(tf.one_hot(in1, 9), axis=1), tf.int32)",
        "source": "https://stackoverflow.com/questions/53414433/tensorflow-tensor-binarization",
        "constants": "[]",
        "examples": {
            "inputs": "[[[0, 5, 2], [3, 1, 4], [5, 1, 5]],]",
            "outputs": "[[1, 0, 1, 0, 0, 1, 0, 0, 0],    [0, 1, 0, 1, 1, 0, 0, 0, 0],    [0, 1, 0, 0, 0, 1, 0, 0, 0]]"
        },
        "completions": [
            "indices = tf.where(tf.not_equal(in1, 0))\nupdates = tf.ones(tf.shape(indices)[0])\nreturn tf.scatter_nd(indices, updates, [3, 9])\n",
            "indices = tf.where(tf.equal(in1, 1))\nupdates = tf.ones(tf.shape(indices)[0], dtype=tf.int32)\nreturn tf.scatter_nd(indices, updates, [3, 9])\n",
            "indices = tf.cast(tf.where(in1), tf.int64)\nindices = tf.transpose(indices)\nupdates = tf.ones(tf.shape(tf.squeeze(indices)))\nshape = tf.cast(tf.reduce_max(in1) + 1, tf.int64)\nreturn tf.scatter_nd(indices, updates, shape=[tf.shape(in1)[0], shape])\n",
            "indices = tf.where(in1)\nshape = tf.shape(in1, out_type=tf.int64)\nreturn tf.cast(tf.scatter_nd(indices, tf.ones_like(indices[:, 0], dtype=tf.int32), shape), tf.int32)\n",
            "return tf.one_hot(tf.cast(in1, tf.int32), depth=9)\n",
            "indices = tf.where(in1)\nupdates = tf.ones(tf.shape(indices)[0], dtype=tf.int32)\nshape = tf.constant([in1.shape[0], in1.shape[1]+1])\nreturn tf.scatter_nd(indices, updates, shape)\n",
            "return tf.scatter_nd(tf.reshape(in1, [-1, 1]), tf.ones_like(tf.reshape(in1, [-1, 1])), [3, 9])",
            "indices = tf.where(tf.equal(in1, 0))\nupdates = tf.ones(tf.shape(indices)[0])\nreturn tf.scatter_nd(indices, updates, tf.constant([3, 9]))\n",
            "indices = tf.where(in1)\nupdates = tf.ones(tf.shape(indices)[0], dtype=tf.int32)\nreturn tf.scatter_nd(indices, updates, [in1.shape[0], 9])\n",
            "return tf.one_hot(tf.cast(in1, tf.int32), depth=9)\n",
            "indices = tf.cast(tf.where(tf.not_equal(in1, 0)), tf.int32)\nupdates = tf.ones(tf.shape(indices)[0], dtype=tf.int32)\nreturn tf.tensor_scatter_nd_update(tf.zeros([tf.shape(in1)[0], 9], dtype=tf.int32), indices, updates)\n",
            "indices = tf.where(in1)\nshape = tf.shape(in1, out_type=tf.dtypes.int64)\nreturn tf.tensor_scatter_nd_update(tf.zeros(tf.constant([tf.reduce_prod(shape)]), dtype=tf.dtypes.int64), indices, tf.ones(tf.shape(indices)[0], dtype=tf.dtypes.int64))\n",
            "return tf.tensor_scatter_nd_update(tf.zeros([3, 9], dtype=tf.int32), [[0, 1], [0, 3], [0, 5], [1, 0], [1, 2], [1, 3], [1, 4], [2, 1], [2, 5], [2, 8]], tf.ones(9, dtype=tf.int32))\n",
            "indices = tf.where(tf.equal(in1, 1))\nreturn tf.scatter_nd(indices, tf.ones_like(indices[:, 0]), [3, 9])\n",
            "indices = tf.where(tf.equal(in1, 1))\nreturn tf.scatter_nd(indices, tf.ones_like(indices[:, 0], dtype=tf.int32), [3, 9])\n",
            "indices = tf.cast(tf.where(tf.equal(in1, 1)), tf.int64)\nupdates = tf.ones_like(indices[:, 0], dtype=tf.int64)\nreturn tf.scatter_nd(indices, updates, tf.shape(in1))\n",
            "indices = tf.where(tf.cast(in1, tf.bool))\nupdates = tf.ones(tf.shape(indices)[0], dtype=tf.int32)\nreturn tf.scatter_nd(indices, updates, [3, 9])\n",
            "indices = tf.where(in1)\nupdates = tf.ones_like(indices)\nshape = tf.shape(in1, out_type=tf.int64)\nreturn tf.tensor_scatter_nd_update(tf.zeros(shape, dtype=tf.int32), indices, updates)\n",
            "indices = tf.where(tf.not_equal(in1, 0))\nupdates = tf.ones(tf.shape(indices)[0])\nreturn tf.scatter_nd(indices, updates, tf.cast(tf.shape(in1), tf.int32))\n",
            "output = tf.one_hot(in1, tf.reduce_max(in1) + 1)\nreturn output\n",
            "return tf.scatter_nd(tf.where(in1)[:, tf.newaxis], tf.where(in1)[:, tf.newaxis][:, 0], tf.shape(in1))\n",
            "return tf.one_hot(in1, 6)\n",
            "return tf.one_hot(tf.reshape(in1, [-1]), depth=tf.reduce_max(in1)+1)\n",
            "updates = tf.ones_like(in1)\nindices = tf.where(tf.equal(in1, 1))\nshape = tf.cast(tf.fill([tf.shape(in1)[0]], 9), tf.int64)\nreturn tf.scatter_nd(indices, updates, shape)\n",
            "def transform(in1):\n    return tf.one_hot(in1, depth=2)\n  ",
            "indices = tf.where(in1)\nupdates = tf.ones(tf.shape(indices)[0])\nreturn tf.scatter_nd(indices, updates, [3, 9])\n",
            "indices = tf.cast(tf.where(in1)[:, 1], tf.int64)\nupdates = tf.ones_like(indices, dtype=tf.int64)\nshape = tf.cast(tf.reduce_max(in1) + 1, tf.int64)\nreturn tf.scatter_nd(tf.expand_dims(indices, axis=1), updates, [tf.shape(in1)[0], shape])\n",
            "return tf.tensor_scatter_nd_update(tf.zeros([tf.reduce_max(in1) + 1, tf.shape(in1)[1]], tf.int32), tf.stack([tf.range(tf.shape(in1)[0])[:, tf.newaxis], in1], axis=1), tf.ones([tf.size(in1)], tf.int32))",
            "indices = tf.where(in1)\nupdates = tf.ones_like(indices[:, 0])\nshape = tf.shape(in1, out_type=tf.int64)\nreturn tf.scatter_nd(indices, updates, shape)\n",
            "indices = tf.where(tf.not_equal(in1, 0))\nupdates = tf.ones(tf.shape(indices)[0])\nreturn tf.scatter_nd(indices, updates, [tf.size(in1)])\n",
            "def transform(in1):\n    return tf.one_hot(in1, 6)\n",
            "return tf.scatter_nd(indices=in1, updates=tf.ones_like(in1), shape=(3, 9))\n",
            "return tf.one_hot(tf.boolean_mask(tf.reshape(in1, [-1]), tf.cast(tf.math.not_equal(tf.reshape(in1, [-1]), 0), tf.bool)), depth=9)\n",
            "indices = tf.where(tf.equal(in1, 1))\nreturn tf.scatter_nd(indices, tf.ones(tf.shape(indices)[0]), [3, 9])\n",
            "updates = tf.ones_like(in1)\nindices = tf.where(in1)\nshape = tf.constant([in1.shape[0], in1.shape[1] + 1], dtype=tf.int64)\nreturn tf.scatter_nd(indices, updates, shape)\n",
            "indices = tf.where(tf.equal(in1, 1))\nreturn tf.scatter_nd(indices, tf.ones_like(indices), [3, 9])\n",
            "indices = tf.where(in1)\nupdates = tf.ones([tf.shape(indices)[0]], dtype=tf.int32)\nreturn tf.scatter_nd(indices, updates, [3, 9])\n",
            "indices = tf.where(tf.not_equal(in1, 0))\nupdates = tf.ones(tf.shape(indices)[0])\nreturn tf.scatter_nd(indices, updates, tf.constant([3, 9]))\n",
            "updates = tf.ones(tf.shape(in1)[0], dtype=tf.int32)\nreturn tf.tensor_scatter_nd_update(tf.zeros((tf.shape(in1)[0], 9), dtype=tf.int32), in1, updates)\n",
            "return tf.tensor_scatter_nd_update(tf.zeros([in1.shape[0], 9], dtype=tf.int32), indices=in1, updates=tf.ones(in1.shape[0]))",
            "indices = tf.where(in1)\nreturn tf.scatter_nd(indices, tf.ones_like(indices[:, 0], dtype=tf.int32), tf.constant([3, 3], dtype=tf.int32))\n",
            "return tf.sparse.to_dense(tf.sparse.SparseTensor(tf.cast(in1, tf.int64, 1), tf.ones_like(in1), tf.shape(in1)))\n",
            "return tf.one_hot(tf.reshape(in1, [-1]), depth=tf.reduce_max(in1) + 1)",
            "indices = tf.where(in1)\nupdates = tf.ones(tf.shape(indices)[0])\nshape = tf.shape(in1, out_type=tf.int32)\nreturn tf.tensor_scatter_nd_update(tf.zeros(shape, dtype=tf.int32), indices, updates)\n",
            "indices = tf.where(tf.not_equal(in1, 0))\nreturn tf.scatter_nd(indices, tf.ones_like(indices[:, 0], dtype=tf.int32), [3, 9])\n",
            "indices = tf.where(tf.cast(in1, tf.bool))\nupdates = tf.ones(tf.shape(indices)[0])\nreturn tf.scatter_nd(indices, updates, [tf.size(in1)])\n",
            "indices = tf.where(tf.not_equal(in1, 0))\nupdates = tf.cast(tf.ones_like(indices[:, 0]), in1.dtype)\nreturn tf.tensor_scatter_nd_update(tf.zeros(tf.cast(tf.reduce_prod(tf.shape(in1)), tf.int64), dtype=in1.dtype), indices, updates)\n",
            "def transform(in1):\n    return tf.one_hot(in1, depth=9)\n",
            "return tf.tensor_scatter_nd_update(tf.zeros([3, 9], dtype=tf.int32), indices=tf.cast(in1, tf.int32), updates=tf.ones_like(in1))\n",
            "def transform(in1):\n    return tf.one_hot(in1, 6)\n"
        ],
        "tf_operators": {
            "tf.where": 31,
            "tf.not_equal": 7,
            "tf.shape": 28,
            "tf.scatter_nd": 28,
            "tf.ones": 21,
            "tf.equal": 8,
            "tf.int32": 20,
            "tf.transpose": 1,
            "tf.reduce_max": 6,
            "tf.int64": 10,
            "tf.cast": 15,
            "tf.squeeze": 1,
            "tf.ones_like": 17,
            "tf.one_hot": 11,
            "tf.constant": 6,
            "tf.reshape": 4,
            "tf.tensor_scatter_nd_update": 10,
            "tf.zeros": 10,
            "tf.reduce_prod": 2,
            "tf.dtypes.int64": 1,
            "tf.bool": 3,
            "tf.newaxis": 2,
            "tf.fill": 1,
            "tf.expand_dims": 1,
            "tf.stack": 1,
            "tf.range": 1,
            "tf.size": 3,
            "tf.boolean_mask": 1,
            "tf.math.not_equal": 1,
            "tf.sparse.SparseTensor": 1,
            "tf.sparse.to_dense": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                0,
                0,
                3,
                9
            ],
            [
                1,
                0,
                3,
                9
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                9
            ],
            [
                0,
                0,
                1,
                1
            ],
            [
                -1,
                1,
                -1,
                1,
                3,
                9
            ],
            [
                0,
                0,
                3,
                9
            ],
            [
                0,
                0,
                9
            ],
            [
                9
            ],
            [
                0,
                0,
                0,
                9
            ],
            [
                0
            ],
            [
                3,
                9,
                0,
                1,
                0,
                3,
                0,
                5,
                1,
                0,
                1,
                2,
                1,
                3,
                1,
                4,
                2,
                1,
                2,
                5,
                2,
                8,
                9
            ],
            [
                1,
                0,
                3,
                9
            ],
            [
                1,
                0,
                3,
                9
            ],
            [
                1,
                0
            ],
            [
                0,
                3,
                9
            ],
            [],
            [
                0,
                0
            ],
            [
                1
            ],
            [
                0
            ],
            [
                6
            ],
            [
                -1,
                1
            ],
            [
                1,
                0,
                9
            ],
            [
                2
            ],
            [
                0,
                3,
                9
            ],
            [
                1,
                1,
                1,
                0
            ],
            [
                1,
                1,
                0,
                1
            ],
            [
                0
            ],
            [
                0,
                0
            ],
            [
                6
            ],
            [
                3,
                9
            ],
            [
                -1,
                -1,
                0,
                9
            ],
            [
                1,
                0,
                3,
                9
            ],
            [
                0,
                1,
                1
            ],
            [
                1,
                3,
                9
            ],
            [
                0,
                3,
                9
            ],
            [
                0,
                0,
                3,
                9
            ],
            [
                0,
                0,
                9
            ],
            [
                0,
                9,
                0
            ],
            [
                0,
                3,
                3
            ],
            [
                1
            ],
            [
                -1,
                1
            ],
            [
                0
            ],
            [
                0,
                0,
                3,
                9
            ],
            [
                0
            ],
            [
                0,
                0
            ],
            [
                9
            ],
            [
                3,
                9
            ],
            [
                6
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            8,
            9,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 2,
                "tf_bool": 0,
                "input_var": 10,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 3,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 10,
                "axis": 4,
                "shape": 3,
                "provided": 6,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 2,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 3,
                "tf_bool": 0,
                "input_var": 8,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 2,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 220,
            "shape": 19,
            "tf_bool": 3,
            "provided": 31,
            "common": 76,
            "shape_tuple": 1,
            "tf_float32": 0,
            "axis": 5,
            "tf_int64": 14,
            "tf_int32": 29
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0011976047904191617,
                "tf.add(x, y)": 0.0011976047904191617,
                "tf.add_n(inputs)": 0.0011976047904191617,
                "tf.argmax(input, axis)": 0.0011976047904191617,
                "tf.argmin(input, axis)": 0.0011976047904191617,
                "tf.argsort(values, axis, stable=True)": 0.0011976047904191617,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0011976047904191617,
                "tf.boolean_mask(tensor, mask)": 0.0023952095808383233,
                "tf.broadcast_to(input, shape)": 0.0011976047904191617,
                "tf.cast(x, dtype)": 0.022754491017964073,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0011976047904191617,
                "tf.concat(values, axis)": 0.0011976047904191617,
                "tf.constant(value)": 0.005988023952095809,
                "tf.constant(value, dtype)": 0.0011976047904191617,
                "tf.divide(x, y)": 0.0011976047904191617,
                "tf.equal(x, y)": 0.010778443113772455,
                "tf.exp(x)": 0.0011976047904191617,
                "tf.expand_dims(input, axis)": 0.0023952095808383233,
                "tf.eye(num_rows)": 0.0011976047904191617,
                "tf.eye(num_rows, num_columns)": 0.0011976047904191617,
                "tf.eye(num_rows, dtype)": 0.0011976047904191617,
                "tf.fill(dims, value)": 0.0023952095808383233,
                "tf.gather(params, indices)": 0.0011976047904191617,
                "tf.gather(params, indices, axis, batch_dims)": 0.0011976047904191617,
                "tf.gather_nd(params, indices)": 0.0011976047904191617,
                "tf.gather_nd(params, indices, batch_dims)": 0.0011976047904191617,
                "tf.greater(x, y)": 0.0011976047904191617,
                "tf.greater_equal(x, y)": 0.0011976047904191617,
                "tf.math.bincount(arr)": 0.0011976047904191617,
                "tf.math.ceil(x)": 0.0011976047904191617,
                "tf.math.count_nonzero(input)": 0.0011976047904191617,
                "tf.math.count_nonzero(input, axis)": 0.0011976047904191617,
                "tf.math.cumsum(x, axis)": 0.0011976047904191617,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0011976047904191617,
                "tf.math.divide_no_nan(x, y)": 0.0011976047904191617,
                "tf.math.floor(x)": 0.0011976047904191617,
                "tf.math.log(x)": 0.0011976047904191617,
                "tf.math.logical_and(x, y)": 0.0011976047904191617,
                "tf.math.logical_not(x)": 0.0011976047904191617,
                "tf.math.logical_or(x, y)": 0.0011976047904191617,
                "tf.math.logical_xor(x, y)": 0.0011976047904191617,
                "tf.math.negative(x)": 0.0011976047904191617,
                "tf.math.reciprocal(x)": 0.0011976047904191617,
                "tf.math.reciprocal_no_nan(x)": 0.0011976047904191617,
                "tf.math.segment_max(data, segment_ids)": 0.0011976047904191617,
                "tf.math.segment_mean(data, segment_ids)": 0.0011976047904191617,
                "tf.math.segment_min(data, segment_ids)": 0.0011976047904191617,
                "tf.math.segment_prod(data, segment_ids)": 0.0011976047904191617,
                "tf.math.segment_sum(data, segment_ids)": 0.0011976047904191617,
                "tf.math.squared_difference(x, y)": 0.0011976047904191617,
                "tf.math.top_k(input, k)": 0.0011976047904191617,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0011976047904191617,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0011976047904191617,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0011976047904191617,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0011976047904191617,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0011976047904191617,
                "tf.matmul(a, b)": 0.0011976047904191617,
                "tf.maximum(x, y)": 0.0011976047904191617,
                "tf.minimum(x, y)": 0.0011976047904191617,
                "tf.multiply(x, y)": 0.0011976047904191617,
                "tf.not_equal(x, y)": 0.009580838323353293,
                "tf.one_hot(indices, depth)": 0.01437125748502994,
                "tf.ones(shape)": 0.026347305389221556,
                "tf.ones_like(input)": 0.02155688622754491,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0011976047904191617,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0011976047904191617,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0011976047904191617,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0011976047904191617,
                "tf.range(start)": 0.0023952095808383233,
                "tf.range(start, limit, delta)": 0.0011976047904191617,
                "tf.reduce_any(input_tensor, axis)": 0.0011976047904191617,
                "tf.reduce_all(input_tensor, axis)": 0.0011976047904191617,
                "tf.reduce_max(input_tensor)": 0.008383233532934131,
                "tf.reduce_max(input_tensor, axis)": 0.0011976047904191617,
                "tf.reduce_mean(input_tensor)": 0.0011976047904191617,
                "tf.reduce_mean(input_tensor, axis)": 0.0011976047904191617,
                "tf.reduce_min(input_tensor)": 0.0011976047904191617,
                "tf.reduce_min(input_tensor, axis)": 0.0011976047904191617,
                "tf.reduce_prod(input_tensor, axis)": 0.003592814371257485,
                "tf.reduce_sum(input_tensor)": 0.0011976047904191617,
                "tf.reduce_sum(input_tensor, axis)": 0.0011976047904191617,
                "tf.repeat(input, repeats)": 0.0011976047904191617,
                "tf.repeat(input, repeats, axis)": 0.0011976047904191617,
                "tf.reshape(tensor, shape)": 0.008383233532934131,
                "tf.reverse(tensor, axis)": 0.0011976047904191617,
                "tf.roll(input, shift, axis)": 0.0011976047904191617,
                "tf.round(x)": 0.0011976047904191617,
                "tf.scatter_nd(indices, updates, shape)": 0.03473053892215569,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0011976047904191617,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0011976047904191617,
                "tf.sequence_mask(lengths)": 0.0011976047904191617,
                "tf.sequence_mask(lengths, maxlen)": 0.0011976047904191617,
                "tf.shape(input)": 0.04311377245508982,
                "tf.sign(x)": 0.0011976047904191617,
                "tf.sort(values, axis)": 0.0011976047904191617,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0011976047904191617,
                "tf.sqrt(x)": 0.0011976047904191617,
                "tf.square(x)": 0.0011976047904191617,
                "tf.squeeze(input)": 0.0023952095808383233,
                "tf.squeeze(input, axis)": 0.0011976047904191617,
                "tf.stack(values, axis)": 0.0023952095808383233,
                "tf.subtract(x, y)": 0.0011976047904191617,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.013173652694610778,
                "tf.tensordot(a, b, axes)": 0.0011976047904191617,
                "tf.tile(input, multiples)": 0.0011976047904191617,
                "tf.transpose(a)": 0.0023952095808383233,
                "tf.transpose(a, perm)": 0.0011976047904191617,
                "tf.unique_with_counts(x)": 0.0011976047904191617,
                "tf.unstack(value, axis)": 0.0011976047904191617,
                "tf.where(condition)": 0.03952095808383234,
                "tf.where(condition, x, y)": 0.0011976047904191617,
                "tf.zeros(shape)": 0.013173652694610778,
                "tf.zeros_like(input)": 0.0011976047904191617,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0011976047904191617,
                "tf.sparse.add(a, b)": 0.0011976047904191617,
                "tf.sparse.concat(axis, sp_inputs)": 0.0011976047904191617,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0011976047904191617,
                "tf.sparse.from_dense(tensor)": 0.0011976047904191617,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0011976047904191617,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0011976047904191617,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0011976047904191617,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0011976047904191617,
                "tf.sparse.reset_shape(sp_input)": 0.0011976047904191617,
                "tf.sparse.reshape(sp_input, shape)": 0.0011976047904191617,
                "tf.sparse.retain(sp_input, to_retain)": 0.0011976047904191617,
                "tf.sparse.slice(sp_input, start, size)": 0.0011976047904191617,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0011976047904191617,
                "tf.sparse.to_dense(sp_input)": 0.0023952095808383233,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0011976047904191617,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0011976047904191617,
                "tf.sparse.transpose(sp_input)": 0.0011976047904191617,
                "tf.sparse.transpose(sp_input, perm)": 0.0011976047904191617,
                "IndexingAxis1Operation": 0.016766467065868262,
                "IndexingOperation": 0.03832335329341317,
                "PairCreationOperation": 0.019161676646706587,
                "SingletonTupleCreationOperation": 0.0011976047904191617,
                "SlicingAxis0BothOperation": 0.0011976047904191617,
                "SlicingAxis0LeftOperation": 0.0011976047904191617,
                "SlicingAxis0RightOperation": 0.0011976047904191617,
                "SlicingAxis1BothOperation": 0.0011976047904191617,
                "SlicingAxis1LeftOperation": 0.0011976047904191617,
                "SlicingAxis1RightOperation": 0.0011976047904191617,
                "TripleCreationOperation": 0.0011976047904191617,
                "PROVIDED_CONSTANT_WEIGHT": 0.03832335329341317,
                "COMMON_CONSTANT_WEIGHT": 0.09221556886227544,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0011976047904191617,
                "INPUT_VARIABLE_WEIGHT": 0.26467065868263473,
                "AXIS_CONSTANT_WEIGHT": 0.00718562874251497,
                "SHAPE_CONSTANT_WEIGHT": 0.023952095808383235,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0023952095808383233,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.03592814371257485,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0011976047904191617,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004790419161676647,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.017964071856287425
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 10,
                "tf.add(x, y)": 10,
                "tf.add_n(inputs)": 10,
                "tf.argmax(input, axis)": 10,
                "tf.argmin(input, axis)": 10,
                "tf.argsort(values, axis, stable=True)": 10,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 10,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 10,
                "tf.cast(x, dtype)": 5,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 10,
                "tf.concat(values, axis)": 10,
                "tf.constant(value)": 7,
                "tf.constant(value, dtype)": 10,
                "tf.divide(x, y)": 10,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 10,
                "tf.expand_dims(input, axis)": 9,
                "tf.eye(num_rows)": 10,
                "tf.eye(num_rows, num_columns)": 10,
                "tf.eye(num_rows, dtype)": 10,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 10,
                "tf.gather(params, indices, axis, batch_dims)": 10,
                "tf.gather_nd(params, indices)": 10,
                "tf.gather_nd(params, indices, batch_dims)": 10,
                "tf.greater(x, y)": 10,
                "tf.greater_equal(x, y)": 10,
                "tf.math.bincount(arr)": 10,
                "tf.math.ceil(x)": 10,
                "tf.math.count_nonzero(input)": 10,
                "tf.math.count_nonzero(input, axis)": 10,
                "tf.math.cumsum(x, axis)": 10,
                "tf.math.cumsum(x, axis, exclusive=True)": 10,
                "tf.math.divide_no_nan(x, y)": 10,
                "tf.math.floor(x)": 10,
                "tf.math.log(x)": 10,
                "tf.math.logical_and(x, y)": 10,
                "tf.math.logical_not(x)": 10,
                "tf.math.logical_or(x, y)": 10,
                "tf.math.logical_xor(x, y)": 10,
                "tf.math.negative(x)": 10,
                "tf.math.reciprocal(x)": 10,
                "tf.math.reciprocal_no_nan(x)": 10,
                "tf.math.segment_max(data, segment_ids)": 10,
                "tf.math.segment_mean(data, segment_ids)": 10,
                "tf.math.segment_min(data, segment_ids)": 10,
                "tf.math.segment_prod(data, segment_ids)": 10,
                "tf.math.segment_sum(data, segment_ids)": 10,
                "tf.math.squared_difference(x, y)": 10,
                "tf.math.top_k(input, k)": 10,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 10,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 10,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 10,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 10,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 10,
                "tf.matmul(a, b)": 10,
                "tf.maximum(x, y)": 10,
                "tf.minimum(x, y)": 10,
                "tf.multiply(x, y)": 10,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 6,
                "tf.ones(shape)": 5,
                "tf.ones_like(input)": 6,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 10,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 10,
                "tf.pad(tensor, paddings, mode='REFLECT')": 10,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 10,
                "tf.range(start)": 9,
                "tf.range(start, limit, delta)": 10,
                "tf.reduce_any(input_tensor, axis)": 10,
                "tf.reduce_all(input_tensor, axis)": 10,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 10,
                "tf.reduce_mean(input_tensor)": 10,
                "tf.reduce_mean(input_tensor, axis)": 10,
                "tf.reduce_min(input_tensor)": 10,
                "tf.reduce_min(input_tensor, axis)": 10,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 10,
                "tf.reduce_sum(input_tensor, axis)": 10,
                "tf.repeat(input, repeats)": 10,
                "tf.repeat(input, repeats, axis)": 10,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 10,
                "tf.roll(input, shift, axis)": 10,
                "tf.round(x)": 10,
                "tf.scatter_nd(indices, updates, shape)": 5,
                "tf.searchsorted(sorted_sequence, values, side='left')": 10,
                "tf.searchsorted(sorted_sequence, values, side='right')": 10,
                "tf.sequence_mask(lengths)": 10,
                "tf.sequence_mask(lengths, maxlen)": 10,
                "tf.shape(input)": 5,
                "tf.sign(x)": 10,
                "tf.sort(values, axis)": 10,
                "tf.sort(values, axis, direction='DESCENDING')": 10,
                "tf.sqrt(x)": 10,
                "tf.square(x)": 10,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 10,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 10,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 6,
                "tf.tensordot(a, b, axes)": 10,
                "tf.tile(input, multiples)": 10,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 10,
                "tf.unique_with_counts(x)": 10,
                "tf.unstack(value, axis)": 10,
                "tf.where(condition)": 5,
                "tf.where(condition, x, y)": 10,
                "tf.zeros(shape)": 6,
                "tf.zeros_like(input)": 10,
                "tf.SparseTensor(indices, values, dense_shape)": 10,
                "tf.sparse.add(a, b)": 10,
                "tf.sparse.concat(axis, sp_inputs)": 10,
                "tf.sparse.expand_dims(sp_input, axis)": 10,
                "tf.sparse.from_dense(tensor)": 10,
                "tf.sparse.maximum(sp_a, sp_b)": 10,
                "tf.sparse.minimum(sp_a, sp_b)": 10,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 10,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 10,
                "tf.sparse.reset_shape(sp_input)": 10,
                "tf.sparse.reshape(sp_input, shape)": 10,
                "tf.sparse.retain(sp_input, to_retain)": 10,
                "tf.sparse.slice(sp_input, start, size)": 10,
                "tf.sparse.split(sp_input, num_split, axis)": 10,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 10,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 10,
                "tf.sparse.transpose(sp_input)": 10,
                "tf.sparse.transpose(sp_input, perm)": 10,
                "IndexingAxis1Operation": 6,
                "IndexingOperation": 5,
                "PairCreationOperation": 6,
                "SingletonTupleCreationOperation": 10,
                "SlicingAxis0BothOperation": 10,
                "SlicingAxis0LeftOperation": 10,
                "SlicingAxis0RightOperation": 10,
                "SlicingAxis1BothOperation": 10,
                "SlicingAxis1LeftOperation": 10,
                "SlicingAxis1RightOperation": 10,
                "TripleCreationOperation": 10,
                "PROVIDED_CONSTANT_WEIGHT": 5,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 10,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 7,
                "SHAPE_CONSTANT_WEIGHT": 5,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 5,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 10,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 6
            }
        }
    },
    {
        "name": "stackoverflow_24",
        "description": "(\\'like tf.divide(), but when dividing by 0, return the numerator\\')",
        "target_program": "tf.where(tf.cast(in2, tf.bool), x=tf.divide(in1, in2), y=in1)",
        "source": "https://stackoverflow.com/questions/53643339/tensorflow-overriding-tf-divide-to-return-the-numerator-when-dividing-by-0",
        "constants": "[0]",
        "examples": {
            "inputs": "[[3.0, 1.0, 4.0, 5.0, 2.0, 8.0, -6.0, -7.0],[0.5, 0.0, -2.0, 0.0, 1.0, -1.0, 0.0, 2.0],]",
            "outputs": "[6.0, 1.0, -2.0, 5.0, 2.0, -8.0, -6.0, -3.5]"
        },
        "completions": [
            "return tf.math.divide_no_nan(in1, in2)",
            "result = tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\nreturn result\n",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.maximum(in2, 1.0)))",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.divide_no_nan(in1, in2)",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.clip_by_value(in2, -1e-10, 1e10)))\n",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "out = tf.divide_no_nan(in1, in2)\nreturn tf.where(tf.equal(in2, 0), in1, out)\n",
            "result = tf.divide(in1, in2)\nresult = tf.where(tf.equal(in2, 0), in1, result)\nreturn result\n",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.divide(in1, tf.where(tf.equal(in2, 0), in1, in2))\n",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.where(tf.equal(in2, tf.constant(0.0)), in1, tf.divide(in1, in2))",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.math.divide_no_nan(in2, tf.ones_like(in2))))",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.where(tf.not_equal(in2, 0), tf.divide(in1, in2), in1)",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.clip_by_value(in2, 1e-12, 1e12)))",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.divide_no_nan(in1, in2)",
            "result = tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\nreturn result\n",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.clip_by_value(in2, 1e-9, 1e9)))\n",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.maximum(in2, 1e-12)))",
            "return tf.math.divide_no_nan(in1, tf.where(tf.equal(in2, 0), in1, in2))\n",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.clip_by_value(in2, 1e-20, 1e20)))\n",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.abs(in2)))\n",
            "return tf.math.divide_no_nan(in1, in2)"
        ],
        "tf_operators": {
            "tf.math.divide_no_nan": 19,
            "tf.where": 31,
            "tf.divide": 29,
            "tf.equal": 30,
            "tf.maximum": 2,
            "tf.divide_no_nan": 3,
            "tf.clip_by_value": 4,
            "tf.constant": 1,
            "tf.ones_like": 1,
            "tf.not_equal": 1,
            "tf.abs": 1
        },
        "coverage_percentage": 50.0,
        "total_covered": 2,
        "total_in_target": 4,
        "parsed_constants": [
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [
                0,
                -1e-10
            ],
            [
                0
            ],
            [],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            []
        ],
        "all_constants": [
            0,
            -1e-10
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 163,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 30,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004282655246252677,
                "tf.add(x, y)": 0.0021413276231263384,
                "tf.add_n(inputs)": 0.0021413276231263384,
                "tf.argmax(input, axis)": 0.0021413276231263384,
                "tf.argmin(input, axis)": 0.0021413276231263384,
                "tf.argsort(values, axis, stable=True)": 0.0021413276231263384,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0021413276231263384,
                "tf.boolean_mask(tensor, mask)": 0.0021413276231263384,
                "tf.broadcast_to(input, shape)": 0.0021413276231263384,
                "tf.cast(x, dtype)": 0.0021413276231263384,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.010706638115631691,
                "tf.concat(values, axis)": 0.0021413276231263384,
                "tf.constant(value)": 0.004282655246252677,
                "tf.constant(value, dtype)": 0.0021413276231263384,
                "tf.divide(x, y)": 0.06423982869379015,
                "tf.equal(x, y)": 0.06638115631691649,
                "tf.exp(x)": 0.0021413276231263384,
                "tf.expand_dims(input, axis)": 0.0021413276231263384,
                "tf.eye(num_rows)": 0.0021413276231263384,
                "tf.eye(num_rows, num_columns)": 0.0021413276231263384,
                "tf.eye(num_rows, dtype)": 0.0021413276231263384,
                "tf.fill(dims, value)": 0.0021413276231263384,
                "tf.gather(params, indices)": 0.0021413276231263384,
                "tf.gather(params, indices, axis, batch_dims)": 0.0021413276231263384,
                "tf.gather_nd(params, indices)": 0.0021413276231263384,
                "tf.gather_nd(params, indices, batch_dims)": 0.0021413276231263384,
                "tf.greater(x, y)": 0.0021413276231263384,
                "tf.greater_equal(x, y)": 0.0021413276231263384,
                "tf.math.bincount(arr)": 0.0021413276231263384,
                "tf.math.ceil(x)": 0.0021413276231263384,
                "tf.math.count_nonzero(input)": 0.0021413276231263384,
                "tf.math.count_nonzero(input, axis)": 0.0021413276231263384,
                "tf.math.cumsum(x, axis)": 0.0021413276231263384,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0021413276231263384,
                "tf.math.divide_no_nan(x, y)": 0.042826552462526764,
                "tf.math.floor(x)": 0.0021413276231263384,
                "tf.math.log(x)": 0.0021413276231263384,
                "tf.math.logical_and(x, y)": 0.0021413276231263384,
                "tf.math.logical_not(x)": 0.0021413276231263384,
                "tf.math.logical_or(x, y)": 0.0021413276231263384,
                "tf.math.logical_xor(x, y)": 0.0021413276231263384,
                "tf.math.negative(x)": 0.0021413276231263384,
                "tf.math.reciprocal(x)": 0.0021413276231263384,
                "tf.math.reciprocal_no_nan(x)": 0.0021413276231263384,
                "tf.math.segment_max(data, segment_ids)": 0.0021413276231263384,
                "tf.math.segment_mean(data, segment_ids)": 0.0021413276231263384,
                "tf.math.segment_min(data, segment_ids)": 0.0021413276231263384,
                "tf.math.segment_prod(data, segment_ids)": 0.0021413276231263384,
                "tf.math.segment_sum(data, segment_ids)": 0.0021413276231263384,
                "tf.math.squared_difference(x, y)": 0.0021413276231263384,
                "tf.math.top_k(input, k)": 0.0021413276231263384,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0021413276231263384,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0021413276231263384,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0021413276231263384,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0021413276231263384,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0021413276231263384,
                "tf.matmul(a, b)": 0.0021413276231263384,
                "tf.maximum(x, y)": 0.006423982869379015,
                "tf.minimum(x, y)": 0.0021413276231263384,
                "tf.multiply(x, y)": 0.0021413276231263384,
                "tf.not_equal(x, y)": 0.004282655246252677,
                "tf.one_hot(indices, depth)": 0.0021413276231263384,
                "tf.ones(shape)": 0.0021413276231263384,
                "tf.ones_like(input)": 0.004282655246252677,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0021413276231263384,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0021413276231263384,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0021413276231263384,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0021413276231263384,
                "tf.range(start)": 0.0021413276231263384,
                "tf.range(start, limit, delta)": 0.0021413276231263384,
                "tf.reduce_any(input_tensor, axis)": 0.0021413276231263384,
                "tf.reduce_all(input_tensor, axis)": 0.0021413276231263384,
                "tf.reduce_max(input_tensor)": 0.0021413276231263384,
                "tf.reduce_max(input_tensor, axis)": 0.0021413276231263384,
                "tf.reduce_mean(input_tensor)": 0.0021413276231263384,
                "tf.reduce_mean(input_tensor, axis)": 0.0021413276231263384,
                "tf.reduce_min(input_tensor)": 0.0021413276231263384,
                "tf.reduce_min(input_tensor, axis)": 0.0021413276231263384,
                "tf.reduce_prod(input_tensor, axis)": 0.0021413276231263384,
                "tf.reduce_sum(input_tensor)": 0.0021413276231263384,
                "tf.reduce_sum(input_tensor, axis)": 0.0021413276231263384,
                "tf.repeat(input, repeats)": 0.0021413276231263384,
                "tf.repeat(input, repeats, axis)": 0.0021413276231263384,
                "tf.reshape(tensor, shape)": 0.0021413276231263384,
                "tf.reverse(tensor, axis)": 0.0021413276231263384,
                "tf.roll(input, shift, axis)": 0.0021413276231263384,
                "tf.round(x)": 0.0021413276231263384,
                "tf.scatter_nd(indices, updates, shape)": 0.0021413276231263384,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0021413276231263384,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0021413276231263384,
                "tf.sequence_mask(lengths)": 0.0021413276231263384,
                "tf.sequence_mask(lengths, maxlen)": 0.0021413276231263384,
                "tf.shape(input)": 0.0021413276231263384,
                "tf.sign(x)": 0.0021413276231263384,
                "tf.sort(values, axis)": 0.0021413276231263384,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0021413276231263384,
                "tf.sqrt(x)": 0.0021413276231263384,
                "tf.square(x)": 0.0021413276231263384,
                "tf.squeeze(input)": 0.0021413276231263384,
                "tf.squeeze(input, axis)": 0.0021413276231263384,
                "tf.stack(values, axis)": 0.0021413276231263384,
                "tf.subtract(x, y)": 0.0021413276231263384,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0021413276231263384,
                "tf.tensordot(a, b, axes)": 0.0021413276231263384,
                "tf.tile(input, multiples)": 0.0021413276231263384,
                "tf.transpose(a)": 0.0021413276231263384,
                "tf.transpose(a, perm)": 0.0021413276231263384,
                "tf.unique_with_counts(x)": 0.0021413276231263384,
                "tf.unstack(value, axis)": 0.0021413276231263384,
                "tf.where(condition)": 0.0021413276231263384,
                "tf.where(condition, x, y)": 0.06852248394004283,
                "tf.zeros(shape)": 0.0021413276231263384,
                "tf.zeros_like(input)": 0.0021413276231263384,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0021413276231263384,
                "tf.sparse.add(a, b)": 0.0021413276231263384,
                "tf.sparse.concat(axis, sp_inputs)": 0.0021413276231263384,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0021413276231263384,
                "tf.sparse.from_dense(tensor)": 0.0021413276231263384,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0021413276231263384,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0021413276231263384,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0021413276231263384,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0021413276231263384,
                "tf.sparse.reset_shape(sp_input)": 0.0021413276231263384,
                "tf.sparse.reshape(sp_input, shape)": 0.0021413276231263384,
                "tf.sparse.retain(sp_input, to_retain)": 0.0021413276231263384,
                "tf.sparse.slice(sp_input, start, size)": 0.0021413276231263384,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0021413276231263384,
                "tf.sparse.to_dense(sp_input)": 0.0021413276231263384,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0021413276231263384,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0021413276231263384,
                "tf.sparse.transpose(sp_input)": 0.0021413276231263384,
                "tf.sparse.transpose(sp_input, perm)": 0.0021413276231263384,
                "IndexingAxis1Operation": 0.0021413276231263384,
                "IndexingOperation": 0.0021413276231263384,
                "PairCreationOperation": 0.0021413276231263384,
                "SingletonTupleCreationOperation": 0.0021413276231263384,
                "SlicingAxis0BothOperation": 0.0021413276231263384,
                "SlicingAxis0LeftOperation": 0.0021413276231263384,
                "SlicingAxis0RightOperation": 0.0021413276231263384,
                "SlicingAxis1BothOperation": 0.0021413276231263384,
                "SlicingAxis1LeftOperation": 0.0021413276231263384,
                "SlicingAxis1RightOperation": 0.0021413276231263384,
                "TripleCreationOperation": 0.0021413276231263384,
                "PROVIDED_CONSTANT_WEIGHT": 0.0021413276231263384,
                "COMMON_CONSTANT_WEIGHT": 0.06638115631691649,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0021413276231263384,
                "INPUT_VARIABLE_WEIGHT": 0.3511777301927195,
                "AXIS_CONSTANT_WEIGHT": 0.0021413276231263384,
                "SHAPE_CONSTANT_WEIGHT": 0.0021413276231263384,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0021413276231263384,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0021413276231263384,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0021413276231263384,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0021413276231263384,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0021413276231263384
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 9,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 4,
                "tf.equal(x, y)": 4,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 9,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 5,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 9,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 9,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 4,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 9,
                "PairCreationOperation": 9,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 9,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_25",
        "description": "copy the tensor tf.eye(3), 4 times",
        "target_program": "tf.tile(tf.eye(in1), (in2, 1))",
        "source": "https://stackoverflow.com/questions/53602691/duplicate-a-tensor-n-times",
        "constants": "[]",
        "examples": {
            "inputs": "[3,4,]",
            "outputs": "[[1.0, 0.0, 0.0],    [0.0, 1.0, 0.0],    [0.0, 0.0, 1.0],    [1.0, 0.0, 0.0],    [0.0, 1.0, 0.0],    [0.0, 0.0, 1.0],    [1.0, 0.0, 0.0],    [0.0, 1.0, 0.0],    [0.0, 0.0, 1.0],    [1.0, 0.0, 0.0],    [0.0, 1.0, 0.0],    [0.0, 0.0, 1.0]]"
        },
        "completions": [
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1, dtype=tf.float32), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.broadcast_to(tf.eye(in1), [in2, in1])\n",
            "return tf.tile(tf.eye(in1), multiples=[in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.broadcast_to(tf.eye(in1), [in2, in1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1, dtype=tf.float32), [in2, 1])\n",
            "return tf.tile(tf.eye(in1, dtype=tf.float64), [in2, 1])\n",
            "return tf.tile(tf.eye(in1, dtype=tf.float32), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.broadcast_to(tf.eye(in1, dtype=tf.float32), [in2, in1])",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.tile(tf.eye(in1, dtype=tf.float32), [in2])",
            "return tf.tile(tf.eye(in1, dtype=tf.float32), [in2, 1])",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.repeat(tf.eye(in1), in2, axis=0)",
            "return tf.tile(tf.eye(in1), [in2, 1])\n  ",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1, dtype=tf.float32), [in2, 1])\n",
            "return tf.tile(tf.eye(in1, dtype=tf.float32), [in2, 1])",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.stack([tf.tile(tf.eye(in1), [in2, 1])], axis=0)\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1, num_columns=3), multiples=[in2])",
            "return tf.repeat(tf.eye(in1), in2)\n",
            "return tf.reshape(tf.tile(tf.eye(in1), [1, in2]), [-1, in1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.tile(tf.eye(in1), [in2])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), multiples=in2)\n",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.stack([tf.tile(tf.eye(in1), [in2, 1])])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n"
        ],
        "tf_operators": {
            "tf.tile": 45,
            "tf.eye": 50,
            "tf.float32": 8,
            "tf.broadcast_to": 3,
            "tf.float64": 1,
            "tf.repeat": 2,
            "tf.stack": 2,
            "tf.reshape": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                3
            ],
            [],
            [
                1,
                -1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 104,
            "shape": 0,
            "tf_bool": 0,
            "provided": 1,
            "common": 44,
            "shape_tuple": 0,
            "tf_float32": 8,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0024154589371980675,
                "tf.add(x, y)": 0.0024154589371980675,
                "tf.add_n(inputs)": 0.0024154589371980675,
                "tf.argmax(input, axis)": 0.0024154589371980675,
                "tf.argmin(input, axis)": 0.0024154589371980675,
                "tf.argsort(values, axis, stable=True)": 0.0024154589371980675,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0024154589371980675,
                "tf.boolean_mask(tensor, mask)": 0.0024154589371980675,
                "tf.broadcast_to(input, shape)": 0.00966183574879227,
                "tf.cast(x, dtype)": 0.0024154589371980675,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0024154589371980675,
                "tf.concat(values, axis)": 0.0024154589371980675,
                "tf.constant(value)": 0.0024154589371980675,
                "tf.constant(value, dtype)": 0.0024154589371980675,
                "tf.divide(x, y)": 0.0024154589371980675,
                "tf.equal(x, y)": 0.0024154589371980675,
                "tf.exp(x)": 0.0024154589371980675,
                "tf.expand_dims(input, axis)": 0.0024154589371980675,
                "tf.eye(num_rows)": 0.09903381642512077,
                "tf.eye(num_rows, num_columns)": 0.004830917874396135,
                "tf.eye(num_rows, dtype)": 0.024154589371980676,
                "tf.fill(dims, value)": 0.0024154589371980675,
                "tf.gather(params, indices)": 0.0024154589371980675,
                "tf.gather(params, indices, axis, batch_dims)": 0.0024154589371980675,
                "tf.gather_nd(params, indices)": 0.0024154589371980675,
                "tf.gather_nd(params, indices, batch_dims)": 0.0024154589371980675,
                "tf.greater(x, y)": 0.0024154589371980675,
                "tf.greater_equal(x, y)": 0.0024154589371980675,
                "tf.math.bincount(arr)": 0.0024154589371980675,
                "tf.math.ceil(x)": 0.0024154589371980675,
                "tf.math.count_nonzero(input)": 0.0024154589371980675,
                "tf.math.count_nonzero(input, axis)": 0.0024154589371980675,
                "tf.math.cumsum(x, axis)": 0.0024154589371980675,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0024154589371980675,
                "tf.math.divide_no_nan(x, y)": 0.0024154589371980675,
                "tf.math.floor(x)": 0.0024154589371980675,
                "tf.math.log(x)": 0.0024154589371980675,
                "tf.math.logical_and(x, y)": 0.0024154589371980675,
                "tf.math.logical_not(x)": 0.0024154589371980675,
                "tf.math.logical_or(x, y)": 0.0024154589371980675,
                "tf.math.logical_xor(x, y)": 0.0024154589371980675,
                "tf.math.negative(x)": 0.0024154589371980675,
                "tf.math.reciprocal(x)": 0.0024154589371980675,
                "tf.math.reciprocal_no_nan(x)": 0.0024154589371980675,
                "tf.math.segment_max(data, segment_ids)": 0.0024154589371980675,
                "tf.math.segment_mean(data, segment_ids)": 0.0024154589371980675,
                "tf.math.segment_min(data, segment_ids)": 0.0024154589371980675,
                "tf.math.segment_prod(data, segment_ids)": 0.0024154589371980675,
                "tf.math.segment_sum(data, segment_ids)": 0.0024154589371980675,
                "tf.math.squared_difference(x, y)": 0.0024154589371980675,
                "tf.math.top_k(input, k)": 0.0024154589371980675,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0024154589371980675,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0024154589371980675,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0024154589371980675,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0024154589371980675,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0024154589371980675,
                "tf.matmul(a, b)": 0.0024154589371980675,
                "tf.maximum(x, y)": 0.0024154589371980675,
                "tf.minimum(x, y)": 0.0024154589371980675,
                "tf.multiply(x, y)": 0.0024154589371980675,
                "tf.not_equal(x, y)": 0.0024154589371980675,
                "tf.one_hot(indices, depth)": 0.0024154589371980675,
                "tf.ones(shape)": 0.0024154589371980675,
                "tf.ones_like(input)": 0.0024154589371980675,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0024154589371980675,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0024154589371980675,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0024154589371980675,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0024154589371980675,
                "tf.range(start)": 0.0024154589371980675,
                "tf.range(start, limit, delta)": 0.0024154589371980675,
                "tf.reduce_any(input_tensor, axis)": 0.0024154589371980675,
                "tf.reduce_all(input_tensor, axis)": 0.0024154589371980675,
                "tf.reduce_max(input_tensor)": 0.0024154589371980675,
                "tf.reduce_max(input_tensor, axis)": 0.0024154589371980675,
                "tf.reduce_mean(input_tensor)": 0.0024154589371980675,
                "tf.reduce_mean(input_tensor, axis)": 0.0024154589371980675,
                "tf.reduce_min(input_tensor)": 0.0024154589371980675,
                "tf.reduce_min(input_tensor, axis)": 0.0024154589371980675,
                "tf.reduce_prod(input_tensor, axis)": 0.0024154589371980675,
                "tf.reduce_sum(input_tensor)": 0.0024154589371980675,
                "tf.reduce_sum(input_tensor, axis)": 0.0024154589371980675,
                "tf.repeat(input, repeats)": 0.004830917874396135,
                "tf.repeat(input, repeats, axis)": 0.0024154589371980675,
                "tf.reshape(tensor, shape)": 0.004830917874396135,
                "tf.reverse(tensor, axis)": 0.0024154589371980675,
                "tf.roll(input, shift, axis)": 0.0024154589371980675,
                "tf.round(x)": 0.0024154589371980675,
                "tf.scatter_nd(indices, updates, shape)": 0.0024154589371980675,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0024154589371980675,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0024154589371980675,
                "tf.sequence_mask(lengths)": 0.0024154589371980675,
                "tf.sequence_mask(lengths, maxlen)": 0.0024154589371980675,
                "tf.shape(input)": 0.0024154589371980675,
                "tf.sign(x)": 0.0024154589371980675,
                "tf.sort(values, axis)": 0.0024154589371980675,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0024154589371980675,
                "tf.sqrt(x)": 0.0024154589371980675,
                "tf.square(x)": 0.0024154589371980675,
                "tf.squeeze(input)": 0.0024154589371980675,
                "tf.squeeze(input, axis)": 0.0024154589371980675,
                "tf.stack(values, axis)": 0.007246376811594203,
                "tf.subtract(x, y)": 0.0024154589371980675,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0024154589371980675,
                "tf.tensordot(a, b, axes)": 0.0024154589371980675,
                "tf.tile(input, multiples)": 0.1111111111111111,
                "tf.transpose(a)": 0.0024154589371980675,
                "tf.transpose(a, perm)": 0.0024154589371980675,
                "tf.unique_with_counts(x)": 0.0024154589371980675,
                "tf.unstack(value, axis)": 0.0024154589371980675,
                "tf.where(condition)": 0.0024154589371980675,
                "tf.where(condition, x, y)": 0.0024154589371980675,
                "tf.zeros(shape)": 0.0024154589371980675,
                "tf.zeros_like(input)": 0.0024154589371980675,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0024154589371980675,
                "tf.sparse.add(a, b)": 0.0024154589371980675,
                "tf.sparse.concat(axis, sp_inputs)": 0.0024154589371980675,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0024154589371980675,
                "tf.sparse.from_dense(tensor)": 0.0024154589371980675,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0024154589371980675,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0024154589371980675,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0024154589371980675,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0024154589371980675,
                "tf.sparse.reset_shape(sp_input)": 0.0024154589371980675,
                "tf.sparse.reshape(sp_input, shape)": 0.0024154589371980675,
                "tf.sparse.retain(sp_input, to_retain)": 0.0024154589371980675,
                "tf.sparse.slice(sp_input, start, size)": 0.0024154589371980675,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0024154589371980675,
                "tf.sparse.to_dense(sp_input)": 0.0024154589371980675,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0024154589371980675,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0024154589371980675,
                "tf.sparse.transpose(sp_input)": 0.0024154589371980675,
                "tf.sparse.transpose(sp_input, perm)": 0.0024154589371980675,
                "IndexingAxis1Operation": 0.0024154589371980675,
                "IndexingOperation": 0.0024154589371980675,
                "PairCreationOperation": 0.0024154589371980675,
                "SingletonTupleCreationOperation": 0.0024154589371980675,
                "SlicingAxis0BothOperation": 0.0024154589371980675,
                "SlicingAxis0LeftOperation": 0.0024154589371980675,
                "SlicingAxis0RightOperation": 0.0024154589371980675,
                "SlicingAxis1BothOperation": 0.0024154589371980675,
                "SlicingAxis1LeftOperation": 0.0024154589371980675,
                "SlicingAxis1RightOperation": 0.0024154589371980675,
                "TripleCreationOperation": 0.0024154589371980675,
                "PROVIDED_CONSTANT_WEIGHT": 0.004830917874396135,
                "COMMON_CONSTANT_WEIGHT": 0.10869565217391304,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0024154589371980675,
                "INPUT_VARIABLE_WEIGHT": 0.2536231884057971,
                "AXIS_CONSTANT_WEIGHT": 0.0024154589371980675,
                "SHAPE_CONSTANT_WEIGHT": 0.0024154589371980675,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0024154589371980675,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0024154589371980675,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.021739130434782608,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0024154589371980675,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0024154589371980675
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 9,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 9,
                "tf.eye(num_rows)": 3,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 5,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 9,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 9,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 3,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 9,
                "PairCreationOperation": 9,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 9,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 6,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_26",
        "description": "reduction operation for multiple dimensions simultaneously",
        "target_program": "tf.reduce_sum(tf.reduce_sum(in1, axis=1), axis=1)",
        "source": "https://stackoverflow.com/questions/54294780/how-to-perform-reduce-op-on-multiple-dimensions-at-once",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[3, 4], [1, 2]], [[5, -2], [-10, 3]], [[10, 20], [-4, 7]]]]",
            "outputs": "[10, -4, 33]"
        },
        "completions": [
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(tf.reduce_sum(in1, axis=2), axis=1)",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "result = tf.reduce_sum(in1, axis=[1, 2])\nreturn result\n",
            "result = tf.reduce_sum(in1, axis=[1, 2])\nreturn result\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "result = tf.reduce_sum(in1, axis=[1, 2])\nreturn result\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1,2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=(1, 2))",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(input_tensor):\n    return tf.reduce_sum(input_tensor, axis=(1, 2))\n",
            "return tf.reduce_sum(in1, axis=[1,2])",
            "\nreturn tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "result = tf.reduce_sum(in1, axis=[1, 2])\nreturn result\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n   ",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])"
        ],
        "tf_operators": {
            "tf.reduce_sum": 50
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1,
                2
            ],
            [
                2,
                1
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ]
        ],
        "all_constants": [
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 50,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 48,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 48,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0033003300330033004,
                "tf.add(x, y)": 0.0033003300330033004,
                "tf.add_n(inputs)": 0.0033003300330033004,
                "tf.argmax(input, axis)": 0.0033003300330033004,
                "tf.argmin(input, axis)": 0.0033003300330033004,
                "tf.argsort(values, axis, stable=True)": 0.0033003300330033004,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0033003300330033004,
                "tf.boolean_mask(tensor, mask)": 0.0033003300330033004,
                "tf.broadcast_to(input, shape)": 0.0033003300330033004,
                "tf.cast(x, dtype)": 0.0033003300330033004,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0033003300330033004,
                "tf.concat(values, axis)": 0.0033003300330033004,
                "tf.constant(value)": 0.0033003300330033004,
                "tf.constant(value, dtype)": 0.0033003300330033004,
                "tf.divide(x, y)": 0.0033003300330033004,
                "tf.equal(x, y)": 0.0033003300330033004,
                "tf.exp(x)": 0.0033003300330033004,
                "tf.expand_dims(input, axis)": 0.0033003300330033004,
                "tf.eye(num_rows)": 0.0033003300330033004,
                "tf.eye(num_rows, num_columns)": 0.0033003300330033004,
                "tf.eye(num_rows, dtype)": 0.0033003300330033004,
                "tf.fill(dims, value)": 0.0033003300330033004,
                "tf.gather(params, indices)": 0.0033003300330033004,
                "tf.gather(params, indices, axis, batch_dims)": 0.0033003300330033004,
                "tf.gather_nd(params, indices)": 0.0033003300330033004,
                "tf.gather_nd(params, indices, batch_dims)": 0.0033003300330033004,
                "tf.greater(x, y)": 0.0033003300330033004,
                "tf.greater_equal(x, y)": 0.0033003300330033004,
                "tf.math.bincount(arr)": 0.0033003300330033004,
                "tf.math.ceil(x)": 0.0033003300330033004,
                "tf.math.count_nonzero(input)": 0.0033003300330033004,
                "tf.math.count_nonzero(input, axis)": 0.0033003300330033004,
                "tf.math.cumsum(x, axis)": 0.0033003300330033004,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0033003300330033004,
                "tf.math.divide_no_nan(x, y)": 0.0033003300330033004,
                "tf.math.floor(x)": 0.0033003300330033004,
                "tf.math.log(x)": 0.0033003300330033004,
                "tf.math.logical_and(x, y)": 0.0033003300330033004,
                "tf.math.logical_not(x)": 0.0033003300330033004,
                "tf.math.logical_or(x, y)": 0.0033003300330033004,
                "tf.math.logical_xor(x, y)": 0.0033003300330033004,
                "tf.math.negative(x)": 0.0033003300330033004,
                "tf.math.reciprocal(x)": 0.0033003300330033004,
                "tf.math.reciprocal_no_nan(x)": 0.0033003300330033004,
                "tf.math.segment_max(data, segment_ids)": 0.0033003300330033004,
                "tf.math.segment_mean(data, segment_ids)": 0.0033003300330033004,
                "tf.math.segment_min(data, segment_ids)": 0.0033003300330033004,
                "tf.math.segment_prod(data, segment_ids)": 0.0033003300330033004,
                "tf.math.segment_sum(data, segment_ids)": 0.0033003300330033004,
                "tf.math.squared_difference(x, y)": 0.0033003300330033004,
                "tf.math.top_k(input, k)": 0.0033003300330033004,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0033003300330033004,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0033003300330033004,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0033003300330033004,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0033003300330033004,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0033003300330033004,
                "tf.matmul(a, b)": 0.0033003300330033004,
                "tf.maximum(x, y)": 0.0033003300330033004,
                "tf.minimum(x, y)": 0.0033003300330033004,
                "tf.multiply(x, y)": 0.0033003300330033004,
                "tf.not_equal(x, y)": 0.0033003300330033004,
                "tf.one_hot(indices, depth)": 0.0033003300330033004,
                "tf.ones(shape)": 0.0033003300330033004,
                "tf.ones_like(input)": 0.0033003300330033004,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0033003300330033004,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0033003300330033004,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0033003300330033004,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0033003300330033004,
                "tf.range(start)": 0.0033003300330033004,
                "tf.range(start, limit, delta)": 0.0033003300330033004,
                "tf.reduce_any(input_tensor, axis)": 0.0033003300330033004,
                "tf.reduce_all(input_tensor, axis)": 0.0033003300330033004,
                "tf.reduce_max(input_tensor)": 0.0033003300330033004,
                "tf.reduce_max(input_tensor, axis)": 0.0033003300330033004,
                "tf.reduce_mean(input_tensor)": 0.0033003300330033004,
                "tf.reduce_mean(input_tensor, axis)": 0.0033003300330033004,
                "tf.reduce_min(input_tensor)": 0.0033003300330033004,
                "tf.reduce_min(input_tensor, axis)": 0.0033003300330033004,
                "tf.reduce_prod(input_tensor, axis)": 0.0033003300330033004,
                "tf.reduce_sum(input_tensor)": 0.0033003300330033004,
                "tf.reduce_sum(input_tensor, axis)": 0.0033003300330033004,
                "tf.repeat(input, repeats)": 0.0033003300330033004,
                "tf.repeat(input, repeats, axis)": 0.0033003300330033004,
                "tf.reshape(tensor, shape)": 0.0033003300330033004,
                "tf.reverse(tensor, axis)": 0.0033003300330033004,
                "tf.roll(input, shift, axis)": 0.0033003300330033004,
                "tf.round(x)": 0.0033003300330033004,
                "tf.scatter_nd(indices, updates, shape)": 0.0033003300330033004,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0033003300330033004,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0033003300330033004,
                "tf.sequence_mask(lengths)": 0.0033003300330033004,
                "tf.sequence_mask(lengths, maxlen)": 0.0033003300330033004,
                "tf.shape(input)": 0.0033003300330033004,
                "tf.sign(x)": 0.0033003300330033004,
                "tf.sort(values, axis)": 0.0033003300330033004,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0033003300330033004,
                "tf.sqrt(x)": 0.0033003300330033004,
                "tf.square(x)": 0.0033003300330033004,
                "tf.squeeze(input)": 0.0033003300330033004,
                "tf.squeeze(input, axis)": 0.0033003300330033004,
                "tf.stack(values, axis)": 0.0033003300330033004,
                "tf.subtract(x, y)": 0.0033003300330033004,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0033003300330033004,
                "tf.tensordot(a, b, axes)": 0.0033003300330033004,
                "tf.tile(input, multiples)": 0.0033003300330033004,
                "tf.transpose(a)": 0.0033003300330033004,
                "tf.transpose(a, perm)": 0.0033003300330033004,
                "tf.unique_with_counts(x)": 0.0033003300330033004,
                "tf.unstack(value, axis)": 0.0033003300330033004,
                "tf.where(condition)": 0.0033003300330033004,
                "tf.where(condition, x, y)": 0.0033003300330033004,
                "tf.zeros(shape)": 0.0033003300330033004,
                "tf.zeros_like(input)": 0.0033003300330033004,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0033003300330033004,
                "tf.sparse.add(a, b)": 0.0033003300330033004,
                "tf.sparse.concat(axis, sp_inputs)": 0.0033003300330033004,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0033003300330033004,
                "tf.sparse.from_dense(tensor)": 0.0033003300330033004,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0033003300330033004,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0033003300330033004,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0033003300330033004,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0033003300330033004,
                "tf.sparse.reset_shape(sp_input)": 0.0033003300330033004,
                "tf.sparse.reshape(sp_input, shape)": 0.0033003300330033004,
                "tf.sparse.retain(sp_input, to_retain)": 0.0033003300330033004,
                "tf.sparse.slice(sp_input, start, size)": 0.0033003300330033004,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0033003300330033004,
                "tf.sparse.to_dense(sp_input)": 0.0033003300330033004,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0033003300330033004,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0033003300330033004,
                "tf.sparse.transpose(sp_input)": 0.0033003300330033004,
                "tf.sparse.transpose(sp_input, perm)": 0.0033003300330033004,
                "IndexingAxis1Operation": 0.0033003300330033004,
                "IndexingOperation": 0.0033003300330033004,
                "PairCreationOperation": 0.009900990099009901,
                "SingletonTupleCreationOperation": 0.0033003300330033004,
                "SlicingAxis0BothOperation": 0.0033003300330033004,
                "SlicingAxis0LeftOperation": 0.0033003300330033004,
                "SlicingAxis0RightOperation": 0.0033003300330033004,
                "SlicingAxis1BothOperation": 0.0033003300330033004,
                "SlicingAxis1LeftOperation": 0.0033003300330033004,
                "SlicingAxis1RightOperation": 0.0033003300330033004,
                "TripleCreationOperation": 0.0033003300330033004,
                "PROVIDED_CONSTANT_WEIGHT": 0.0033003300330033004,
                "COMMON_CONSTANT_WEIGHT": 0.1617161716171617,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0033003300330033004,
                "INPUT_VARIABLE_WEIGHT": 0.16831683168316833,
                "AXIS_CONSTANT_WEIGHT": 0.1617161716171617,
                "SHAPE_CONSTANT_WEIGHT": 0.0033003300330033004,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0033003300330033004,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0033003300330033004,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0033003300330033004,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0033003300330033004,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0033003300330033004
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 3,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_27",
        "description": "boolean tensor with 1 at the indices in the input tensor",
        "target_program": "tf.cast(tf.reduce_max(tf.one_hot(in1, in2), axis=0), tf.int32)",
        "source": "https://stackoverflow.com/questions/54225704/how-do-i-get-a-tensor-representing-the-on-positions-in-the-original-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 3, 5, 6],8,]",
            "outputs": "[1, 0, 0, 1, 0, 1, 1, 0]"
        },
        "completions": [
            "return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.one_hot(in1, in2)\n",
            "return tf.sequence_mask(in1, in2)",
            "return tf.one_hot(in1, in2)",
            "return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.one_hot(in1, in2)\n",
            "return tf.sequence_mask(in1, in2)",
            "return tf.cast(tf.sequence_mask(in2, maxlen=in2), tf.int32)",
            "return tf.cast(tf.sequence_mask(in1, in2, dtype=tf.bool), tf.int32)",
            "return tf.sequence_mask(in1, in2)\n",
            "return tf.cast(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), tf.int32)",
            "return tf.sequence_mask(indices=in1, maxlen=in2)",
            "return tf.one_hot(in1, in2, dtype=tf.int32)\n",
            "return tf.one_hot(in1, in2)",
            "return tf.one_hot(in1, in2)",
            "def transform(in1, in2):\n    return tf.one_hot(in1, in2)\n",
            "return tf.sequence_mask(in1, in2)",
            "return tf.cast(tf.one_hot(in1, in2), tf.int32)\n",
            "return tf.one_hot(in1, in2)",
            "return tf.sequence_mask(in1, in2)\n",
            "return tf.cast(tf.sequence_mask(in1, in2), tf.int32)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.one_hot(in1, in2)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.sequence_mask(in1, in2)\n",
            "return tf.scatter_nd(tf.expand_dims(in1, 1), tf.ones_like(in1, dtype=tf.int32), [in2])",
            "return tf.sequence_mask(in1, in2, dtype=tf.int32)",
            "return tf.cast(tf.sequence_mask(in1, in2), tf.int32)",
            "return tf.equal(tf.range(in2), in1)\n",
            "return tf.one_hot(in1, in2)",
            "return tf.one_hot(indices=in1, depth=in2)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.one_hot(in1, in2)",
            "return tf.equal(tf.range(in2), in1)\n",
            "return tf.sequence_mask(in1, in2)",
            "return tf.cast(tf.sequence_mask(in1, in2), tf.int32)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.equal(tf.range(in2), tf.expand_dims(in1, 1))",
            "return tf.one_hot(in1, in2)\n",
            "return tf.sequence_mask(in1, in2)",
            "return tf.cast(tf.sparse.to_dense(tf.sparse.SparseTensor(tf.expand_dims(in1, 1), [1] * tf.size(in1), [in2])), tf.int32)",
            "return tf.one_hot(in1, in2)",
            "result = tf.one_hot(indices=in1, depth=in2)\nreturn result\n",
            "return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.where(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), 1, 0)\n",
            "return tf.sequence_mask(in1, in2)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.sequence_mask(in1, in2)"
        ],
        "tf_operators": {
            "tf.sequence_mask": 27,
            "tf.one_hot": 16,
            "tf.cast": 8,
            "tf.int32": 11,
            "tf.bool": 1,
            "tf.range": 5,
            "tf.equal": 5,
            "tf.expand_dims": 5,
            "tf.ones_like": 1,
            "tf.scatter_nd": 1,
            "tf.sparse.SparseTensor": 1,
            "tf.sparse.to_dense": 1,
            "tf.size": 1,
            "tf.where": 1
        },
        "coverage_percentage": 75.0,
        "total_covered": 3,
        "total_in_target": 4,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [
                1,
                1
            ],
            [],
            [],
            [],
            [
                1,
                1,
                0
            ],
            [],
            [],
            [],
            []
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 102,
            "shape": 0,
            "tf_bool": 1,
            "provided": 0,
            "common": 8,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 11
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0029154518950437317,
                "tf.add(x, y)": 0.0029154518950437317,
                "tf.add_n(inputs)": 0.0029154518950437317,
                "tf.argmax(input, axis)": 0.0029154518950437317,
                "tf.argmin(input, axis)": 0.0029154518950437317,
                "tf.argsort(values, axis, stable=True)": 0.0029154518950437317,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0029154518950437317,
                "tf.boolean_mask(tensor, mask)": 0.0029154518950437317,
                "tf.broadcast_to(input, shape)": 0.0029154518950437317,
                "tf.cast(x, dtype)": 0.026239067055393587,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0029154518950437317,
                "tf.concat(values, axis)": 0.0029154518950437317,
                "tf.constant(value)": 0.0029154518950437317,
                "tf.constant(value, dtype)": 0.0029154518950437317,
                "tf.divide(x, y)": 0.0029154518950437317,
                "tf.equal(x, y)": 0.01749271137026239,
                "tf.exp(x)": 0.0029154518950437317,
                "tf.expand_dims(input, axis)": 0.01749271137026239,
                "tf.eye(num_rows)": 0.0029154518950437317,
                "tf.eye(num_rows, num_columns)": 0.0029154518950437317,
                "tf.eye(num_rows, dtype)": 0.0029154518950437317,
                "tf.fill(dims, value)": 0.0029154518950437317,
                "tf.gather(params, indices)": 0.0029154518950437317,
                "tf.gather(params, indices, axis, batch_dims)": 0.0029154518950437317,
                "tf.gather_nd(params, indices)": 0.0029154518950437317,
                "tf.gather_nd(params, indices, batch_dims)": 0.0029154518950437317,
                "tf.greater(x, y)": 0.0029154518950437317,
                "tf.greater_equal(x, y)": 0.0029154518950437317,
                "tf.math.bincount(arr)": 0.0029154518950437317,
                "tf.math.ceil(x)": 0.0029154518950437317,
                "tf.math.count_nonzero(input)": 0.0029154518950437317,
                "tf.math.count_nonzero(input, axis)": 0.0029154518950437317,
                "tf.math.cumsum(x, axis)": 0.0029154518950437317,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0029154518950437317,
                "tf.math.divide_no_nan(x, y)": 0.0029154518950437317,
                "tf.math.floor(x)": 0.0029154518950437317,
                "tf.math.log(x)": 0.0029154518950437317,
                "tf.math.logical_and(x, y)": 0.0029154518950437317,
                "tf.math.logical_not(x)": 0.0029154518950437317,
                "tf.math.logical_or(x, y)": 0.0029154518950437317,
                "tf.math.logical_xor(x, y)": 0.0029154518950437317,
                "tf.math.negative(x)": 0.0029154518950437317,
                "tf.math.reciprocal(x)": 0.0029154518950437317,
                "tf.math.reciprocal_no_nan(x)": 0.0029154518950437317,
                "tf.math.segment_max(data, segment_ids)": 0.0029154518950437317,
                "tf.math.segment_mean(data, segment_ids)": 0.0029154518950437317,
                "tf.math.segment_min(data, segment_ids)": 0.0029154518950437317,
                "tf.math.segment_prod(data, segment_ids)": 0.0029154518950437317,
                "tf.math.segment_sum(data, segment_ids)": 0.0029154518950437317,
                "tf.math.squared_difference(x, y)": 0.0029154518950437317,
                "tf.math.top_k(input, k)": 0.0029154518950437317,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0029154518950437317,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0029154518950437317,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0029154518950437317,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0029154518950437317,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0029154518950437317,
                "tf.matmul(a, b)": 0.0029154518950437317,
                "tf.maximum(x, y)": 0.0029154518950437317,
                "tf.minimum(x, y)": 0.0029154518950437317,
                "tf.multiply(x, y)": 0.0029154518950437317,
                "tf.not_equal(x, y)": 0.0029154518950437317,
                "tf.one_hot(indices, depth)": 0.04956268221574344,
                "tf.ones(shape)": 0.0029154518950437317,
                "tf.ones_like(input)": 0.0058309037900874635,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0029154518950437317,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0029154518950437317,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0029154518950437317,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0029154518950437317,
                "tf.range(start)": 0.01749271137026239,
                "tf.range(start, limit, delta)": 0.0029154518950437317,
                "tf.reduce_any(input_tensor, axis)": 0.0029154518950437317,
                "tf.reduce_all(input_tensor, axis)": 0.0029154518950437317,
                "tf.reduce_max(input_tensor)": 0.0029154518950437317,
                "tf.reduce_max(input_tensor, axis)": 0.0029154518950437317,
                "tf.reduce_mean(input_tensor)": 0.0029154518950437317,
                "tf.reduce_mean(input_tensor, axis)": 0.0029154518950437317,
                "tf.reduce_min(input_tensor)": 0.0029154518950437317,
                "tf.reduce_min(input_tensor, axis)": 0.0029154518950437317,
                "tf.reduce_prod(input_tensor, axis)": 0.0029154518950437317,
                "tf.reduce_sum(input_tensor)": 0.0029154518950437317,
                "tf.reduce_sum(input_tensor, axis)": 0.0029154518950437317,
                "tf.repeat(input, repeats)": 0.0029154518950437317,
                "tf.repeat(input, repeats, axis)": 0.0029154518950437317,
                "tf.reshape(tensor, shape)": 0.0029154518950437317,
                "tf.reverse(tensor, axis)": 0.0029154518950437317,
                "tf.roll(input, shift, axis)": 0.0029154518950437317,
                "tf.round(x)": 0.0029154518950437317,
                "tf.scatter_nd(indices, updates, shape)": 0.0058309037900874635,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0029154518950437317,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0029154518950437317,
                "tf.sequence_mask(lengths)": 0.0029154518950437317,
                "tf.sequence_mask(lengths, maxlen)": 0.06997084548104957,
                "tf.shape(input)": 0.0029154518950437317,
                "tf.sign(x)": 0.0029154518950437317,
                "tf.sort(values, axis)": 0.0029154518950437317,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0029154518950437317,
                "tf.sqrt(x)": 0.0029154518950437317,
                "tf.square(x)": 0.0029154518950437317,
                "tf.squeeze(input)": 0.0029154518950437317,
                "tf.squeeze(input, axis)": 0.0029154518950437317,
                "tf.stack(values, axis)": 0.0029154518950437317,
                "tf.subtract(x, y)": 0.0029154518950437317,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0029154518950437317,
                "tf.tensordot(a, b, axes)": 0.0029154518950437317,
                "tf.tile(input, multiples)": 0.0029154518950437317,
                "tf.transpose(a)": 0.0029154518950437317,
                "tf.transpose(a, perm)": 0.0029154518950437317,
                "tf.unique_with_counts(x)": 0.0029154518950437317,
                "tf.unstack(value, axis)": 0.0029154518950437317,
                "tf.where(condition)": 0.0029154518950437317,
                "tf.where(condition, x, y)": 0.0058309037900874635,
                "tf.zeros(shape)": 0.0029154518950437317,
                "tf.zeros_like(input)": 0.0029154518950437317,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0029154518950437317,
                "tf.sparse.add(a, b)": 0.0029154518950437317,
                "tf.sparse.concat(axis, sp_inputs)": 0.0029154518950437317,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0029154518950437317,
                "tf.sparse.from_dense(tensor)": 0.0029154518950437317,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0029154518950437317,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0029154518950437317,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0029154518950437317,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0029154518950437317,
                "tf.sparse.reset_shape(sp_input)": 0.0029154518950437317,
                "tf.sparse.reshape(sp_input, shape)": 0.0029154518950437317,
                "tf.sparse.retain(sp_input, to_retain)": 0.0029154518950437317,
                "tf.sparse.slice(sp_input, start, size)": 0.0029154518950437317,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0029154518950437317,
                "tf.sparse.to_dense(sp_input)": 0.0058309037900874635,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0029154518950437317,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0029154518950437317,
                "tf.sparse.transpose(sp_input)": 0.0029154518950437317,
                "tf.sparse.transpose(sp_input, perm)": 0.0029154518950437317,
                "IndexingAxis1Operation": 0.0029154518950437317,
                "IndexingOperation": 0.0029154518950437317,
                "PairCreationOperation": 0.0029154518950437317,
                "SingletonTupleCreationOperation": 0.0029154518950437317,
                "SlicingAxis0BothOperation": 0.0029154518950437317,
                "SlicingAxis0LeftOperation": 0.0029154518950437317,
                "SlicingAxis0RightOperation": 0.0029154518950437317,
                "SlicingAxis1BothOperation": 0.0029154518950437317,
                "SlicingAxis1LeftOperation": 0.0029154518950437317,
                "SlicingAxis1RightOperation": 0.0029154518950437317,
                "TripleCreationOperation": 0.0029154518950437317,
                "PROVIDED_CONSTANT_WEIGHT": 0.0029154518950437317,
                "COMMON_CONSTANT_WEIGHT": 0.026239067055393587,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0029154518950437317,
                "INPUT_VARIABLE_WEIGHT": 0.30029154518950435,
                "AXIS_CONSTANT_WEIGHT": 0.0029154518950437317,
                "SHAPE_CONSTANT_WEIGHT": 0.0029154518950437317,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0029154518950437317,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.03498542274052478,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0029154518950437317,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0058309037900874635,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0029154518950437317
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 5,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 6,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 6,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 4,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 6,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 4,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 5,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 5,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_28",
        "description": "extract columns from a 3D tensor given column indices",
        "target_program": "tf.squeeze(tf.gather(in1, tf.expand_dims(in2, 1), axis=-1, batch_dims=1))",
        "source": "https://stackoverflow.com/questions/54274074/selecting-columns-from-3d-tensor-according-to-a-1d-tensor-of-indices-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[5, 3],  [0, 2]], [[7, 4],  [5, 1]], [[10, 20],  [15, 30]], [[11, 16],  [14, 12]], [[-2, -7],  [-4, 6]]],[1, 0, 1, 1, 0],]",
            "outputs": "[[3, 2], [7, 5], [20, 30], [16, 12], [-2, -4]]"
        },
        "completions": [
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.transpose(tf.gather(in1, in2, axis=1), perm=[0, 2, 1])\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=1)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.transpose(tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1)))\n",
            "return tf.gather_nd(in1, indices=tf.stack((tf.range(tf.shape(in1)[0]), in2), axis=1))\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n",
            "return tf.gather_nd(in1, indices=tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n",
            "return tf.transpose(tf.gather(in1, in2, axis=1), perm=[0, 2, 1])\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather_nd(in1, indices=in2, batch_dims=1)\n",
            "return tf.gather(in1, in2, axis=1)\n",
            "return tf.gather(in1, in2, axis=2)\n  ",
            "return tf.gather(in1, in2, axis=1)\n",
            "return tf.gather_nd(in1, indices=in2[:, tf.newaxis, tf.newaxis])\n",
            "return tf.gather_nd(in1, indices=tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.transpose(tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1)))",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "indices = tf.convert_to_tensor(in2)\nreturn tf.squeeze(tf.gather(in1, indices, axis=1))\n",
            "result = tf.gather(in1, in2, axis=2)\nreturn result\n",
            "return tf.transpose(tf.gather(in1, in2, axis=1), perm=[0, 2, 1])\n",
            "return tf.gather(in1, in2, axis=1)\n",
            "return tf.gather(in1, in2, axis=1)\n",
            "return tf.gather(in1, in2, axis=1)\n",
            "return tf.gather(in1, in2, axis=1)\n",
            "output = tf.gather(in1, in2, axis=2)\nreturn output\n",
            "return tf.gather(in1, in2, axis=1)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.map_fn(lambda x: tf.gather(x, in2, axis=1), in1)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather_nd(in1, indices=tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=1)\n",
            "return tf.gather(params=in1, indices=in2, axis=1)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=1)\n",
            "return tf.cast(tf.gather(in1, in2, axis=2), tf.int32)\n",
            "return tf.gather(in1, indices=in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=2)\n"
        ],
        "tf_operators": {
            "tf.gather": 40,
            "tf.transpose": 5,
            "tf.shape": 8,
            "tf.range": 8,
            "tf.stack": 8,
            "tf.gather_nd": 10,
            "tf.newaxis": 1,
            "tf.squeeze": 1,
            "tf.convert_to_tensor": 1,
            "tf.map_fn": 1,
            "tf.cast": 1,
            "tf.int32": 1
        },
        "coverage_percentage": 66.66666666666666,
        "total_covered": 2,
        "total_in_target": 3,
        "parsed_constants": [
            [
                2
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                2
            ],
            [
                2
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                2
            ],
            [
                0,
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [],
            [
                0,
                1
            ],
            [
                2
            ],
            [
                0,
                1
            ],
            [
                2
            ],
            [
                2
            ],
            [
                1
            ],
            [
                2
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                2
            ],
            [
                2
            ],
            [
                0,
                1
            ],
            [
                2
            ],
            [
                2
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ]
        ],
        "all_constants": [
            0,
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 109,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 39,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 27,
            "tf_int64": 0,
            "tf_int32": 1
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.002403846153846154,
                "tf.add(x, y)": 0.002403846153846154,
                "tf.add_n(inputs)": 0.002403846153846154,
                "tf.argmax(input, axis)": 0.002403846153846154,
                "tf.argmin(input, axis)": 0.002403846153846154,
                "tf.argsort(values, axis, stable=True)": 0.002403846153846154,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.002403846153846154,
                "tf.boolean_mask(tensor, mask)": 0.002403846153846154,
                "tf.broadcast_to(input, shape)": 0.002403846153846154,
                "tf.cast(x, dtype)": 0.004807692307692308,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.002403846153846154,
                "tf.concat(values, axis)": 0.002403846153846154,
                "tf.constant(value)": 0.002403846153846154,
                "tf.constant(value, dtype)": 0.002403846153846154,
                "tf.divide(x, y)": 0.002403846153846154,
                "tf.equal(x, y)": 0.002403846153846154,
                "tf.exp(x)": 0.002403846153846154,
                "tf.expand_dims(input, axis)": 0.002403846153846154,
                "tf.eye(num_rows)": 0.002403846153846154,
                "tf.eye(num_rows, num_columns)": 0.002403846153846154,
                "tf.eye(num_rows, dtype)": 0.002403846153846154,
                "tf.fill(dims, value)": 0.002403846153846154,
                "tf.gather(params, indices)": 0.002403846153846154,
                "tf.gather(params, indices, axis, batch_dims)": 0.09375,
                "tf.gather_nd(params, indices)": 0.01201923076923077,
                "tf.gather_nd(params, indices, batch_dims)": 0.014423076923076924,
                "tf.greater(x, y)": 0.002403846153846154,
                "tf.greater_equal(x, y)": 0.002403846153846154,
                "tf.math.bincount(arr)": 0.002403846153846154,
                "tf.math.ceil(x)": 0.002403846153846154,
                "tf.math.count_nonzero(input)": 0.002403846153846154,
                "tf.math.count_nonzero(input, axis)": 0.002403846153846154,
                "tf.math.cumsum(x, axis)": 0.002403846153846154,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.002403846153846154,
                "tf.math.divide_no_nan(x, y)": 0.002403846153846154,
                "tf.math.floor(x)": 0.002403846153846154,
                "tf.math.log(x)": 0.002403846153846154,
                "tf.math.logical_and(x, y)": 0.002403846153846154,
                "tf.math.logical_not(x)": 0.002403846153846154,
                "tf.math.logical_or(x, y)": 0.002403846153846154,
                "tf.math.logical_xor(x, y)": 0.002403846153846154,
                "tf.math.negative(x)": 0.002403846153846154,
                "tf.math.reciprocal(x)": 0.002403846153846154,
                "tf.math.reciprocal_no_nan(x)": 0.002403846153846154,
                "tf.math.segment_max(data, segment_ids)": 0.002403846153846154,
                "tf.math.segment_mean(data, segment_ids)": 0.002403846153846154,
                "tf.math.segment_min(data, segment_ids)": 0.002403846153846154,
                "tf.math.segment_prod(data, segment_ids)": 0.002403846153846154,
                "tf.math.segment_sum(data, segment_ids)": 0.002403846153846154,
                "tf.math.squared_difference(x, y)": 0.002403846153846154,
                "tf.math.top_k(input, k)": 0.002403846153846154,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.002403846153846154,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.002403846153846154,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.002403846153846154,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.002403846153846154,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.002403846153846154,
                "tf.matmul(a, b)": 0.002403846153846154,
                "tf.maximum(x, y)": 0.002403846153846154,
                "tf.minimum(x, y)": 0.002403846153846154,
                "tf.multiply(x, y)": 0.002403846153846154,
                "tf.not_equal(x, y)": 0.002403846153846154,
                "tf.one_hot(indices, depth)": 0.002403846153846154,
                "tf.ones(shape)": 0.002403846153846154,
                "tf.ones_like(input)": 0.002403846153846154,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.002403846153846154,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.002403846153846154,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.002403846153846154,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.002403846153846154,
                "tf.range(start)": 0.021634615384615384,
                "tf.range(start, limit, delta)": 0.002403846153846154,
                "tf.reduce_any(input_tensor, axis)": 0.002403846153846154,
                "tf.reduce_all(input_tensor, axis)": 0.002403846153846154,
                "tf.reduce_max(input_tensor)": 0.002403846153846154,
                "tf.reduce_max(input_tensor, axis)": 0.002403846153846154,
                "tf.reduce_mean(input_tensor)": 0.002403846153846154,
                "tf.reduce_mean(input_tensor, axis)": 0.002403846153846154,
                "tf.reduce_min(input_tensor)": 0.002403846153846154,
                "tf.reduce_min(input_tensor, axis)": 0.002403846153846154,
                "tf.reduce_prod(input_tensor, axis)": 0.002403846153846154,
                "tf.reduce_sum(input_tensor)": 0.002403846153846154,
                "tf.reduce_sum(input_tensor, axis)": 0.002403846153846154,
                "tf.repeat(input, repeats)": 0.002403846153846154,
                "tf.repeat(input, repeats, axis)": 0.002403846153846154,
                "tf.reshape(tensor, shape)": 0.002403846153846154,
                "tf.reverse(tensor, axis)": 0.002403846153846154,
                "tf.roll(input, shift, axis)": 0.002403846153846154,
                "tf.round(x)": 0.002403846153846154,
                "tf.scatter_nd(indices, updates, shape)": 0.002403846153846154,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.002403846153846154,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.002403846153846154,
                "tf.sequence_mask(lengths)": 0.002403846153846154,
                "tf.sequence_mask(lengths, maxlen)": 0.002403846153846154,
                "tf.shape(input)": 0.021634615384615384,
                "tf.sign(x)": 0.002403846153846154,
                "tf.sort(values, axis)": 0.002403846153846154,
                "tf.sort(values, axis, direction='DESCENDING')": 0.002403846153846154,
                "tf.sqrt(x)": 0.002403846153846154,
                "tf.square(x)": 0.002403846153846154,
                "tf.squeeze(input)": 0.004807692307692308,
                "tf.squeeze(input, axis)": 0.002403846153846154,
                "tf.stack(values, axis)": 0.021634615384615384,
                "tf.subtract(x, y)": 0.002403846153846154,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.002403846153846154,
                "tf.tensordot(a, b, axes)": 0.002403846153846154,
                "tf.tile(input, multiples)": 0.002403846153846154,
                "tf.transpose(a)": 0.007211538461538462,
                "tf.transpose(a, perm)": 0.002403846153846154,
                "tf.unique_with_counts(x)": 0.002403846153846154,
                "tf.unstack(value, axis)": 0.002403846153846154,
                "tf.where(condition)": 0.002403846153846154,
                "tf.where(condition, x, y)": 0.002403846153846154,
                "tf.zeros(shape)": 0.002403846153846154,
                "tf.zeros_like(input)": 0.002403846153846154,
                "tf.SparseTensor(indices, values, dense_shape)": 0.002403846153846154,
                "tf.sparse.add(a, b)": 0.002403846153846154,
                "tf.sparse.concat(axis, sp_inputs)": 0.002403846153846154,
                "tf.sparse.expand_dims(sp_input, axis)": 0.002403846153846154,
                "tf.sparse.from_dense(tensor)": 0.002403846153846154,
                "tf.sparse.maximum(sp_a, sp_b)": 0.002403846153846154,
                "tf.sparse.minimum(sp_a, sp_b)": 0.002403846153846154,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.002403846153846154,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.002403846153846154,
                "tf.sparse.reset_shape(sp_input)": 0.002403846153846154,
                "tf.sparse.reshape(sp_input, shape)": 0.002403846153846154,
                "tf.sparse.retain(sp_input, to_retain)": 0.002403846153846154,
                "tf.sparse.slice(sp_input, start, size)": 0.002403846153846154,
                "tf.sparse.split(sp_input, num_split, axis)": 0.002403846153846154,
                "tf.sparse.to_dense(sp_input)": 0.002403846153846154,
                "tf.sparse.to_dense(sp_input, default_value)": 0.002403846153846154,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.002403846153846154,
                "tf.sparse.transpose(sp_input)": 0.002403846153846154,
                "tf.sparse.transpose(sp_input, perm)": 0.002403846153846154,
                "IndexingAxis1Operation": 0.002403846153846154,
                "IndexingOperation": 0.021634615384615384,
                "PairCreationOperation": 0.004807692307692308,
                "SingletonTupleCreationOperation": 0.002403846153846154,
                "SlicingAxis0BothOperation": 0.002403846153846154,
                "SlicingAxis0LeftOperation": 0.002403846153846154,
                "SlicingAxis0RightOperation": 0.002403846153846154,
                "SlicingAxis1BothOperation": 0.002403846153846154,
                "SlicingAxis1LeftOperation": 0.002403846153846154,
                "SlicingAxis1RightOperation": 0.002403846153846154,
                "TripleCreationOperation": 0.004807692307692308,
                "PROVIDED_CONSTANT_WEIGHT": 0.002403846153846154,
                "COMMON_CONSTANT_WEIGHT": 0.09615384615384616,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.002403846153846154,
                "INPUT_VARIABLE_WEIGHT": 0.2644230769230769,
                "AXIS_CONSTANT_WEIGHT": 0.0673076923076923,
                "SHAPE_CONSTANT_WEIGHT": 0.002403846153846154,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.002403846153846154,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.004807692307692308,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.002403846153846154,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.002403846153846154,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.002403846153846154
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 9,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 3,
                "tf.gather_nd(params, indices)": 6,
                "tf.gather_nd(params, indices, batch_dims)": 6,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 6,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 6,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 6,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 6,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 4,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_29",
        "description": "place continuous values into buckets given bucket boundaries",
        "target_program": "tf.searchsorted(in1, in2, side='left')",
        "source": "https://stackoverflow.com/questions/54155085/bucketing-continous-value-tensors-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[-1.0, -0.8, -0.6, -0.4, -0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0],[0.1, -10, -0.1, 1.1, 0.41],]",
            "outputs": "[6, 0, 5, 11, 8]"
        },
        "completions": [
            "boundaries = [-1.0, -0.5, 0.0, 0.5, 1.0]\nreturn tf.searchsorted(boundaries, in2)\n ",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2)",
            "def transform(in1, in2):\n    boundaries = tf.constant([-1, -0.5, 0, 0.5, 1], dtype=tf.float32)\n    return tf.searchsorted(boundaries, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, side='left')",
            "return tf.searchsorted([0, -0.2, 0.2, 0.4, 0.6, 0.8, 1], in2, side='right')",
            "bucket_boundaries = tf.constant([-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1], dtype=tf.float32)\nreturn tf.searchsorted(bucket_boundaries, in1, side='right')\n",
            "buckets = tf.constant([-0.6, -0.2, 0.2, 0.6, 1.0])\noutput = tf.searchsorted(buckets, in2, side='right')\nreturn output\n",
            "return tf.searchsorted(in1, in2, side='left')",
            "bins = tf.constant([-1. , -0.8, -0.6, -0.4, -0.2, 0. , 0.2, 0.4, 0.6, 0.8, 1.])\nreturn tf.searchsorted(bins, in2, side='right') - 1\n",
            "return tf.searchsorted(in1, in2, side='right')",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, 'right')",
            "def transform(in1, in2):\n    bucket_boundaries = tf.constant([-1., -0.2, 0., 0.2, 1.])\n    buckets = tf.searchsorted(bucket_boundaries, in2, side='right')\n    return buckets\n",
            "return tf.searchsorted(in1, in2)\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(tf.constant([-1.0, -0.8, -0.6, -0.4, -0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0]), in2, side='left')\n",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "return tf.searchsorted(in1, in2)",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "def transform(in1, in2):\n    bucket_boundaries = [-0.1, -0.05, 0, 0.05, 0.1]\n    return tf.searchsorted(bucket_boundaries, in2)\n",
            "def transform(in1, in2):\n    bucket_boundaries = [-0.2, 0.2, 0.4, 0.6, 1.0]\n    return tf.searchsorted(bucket_boundaries, in2, side='right').numpy()\n",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "return tf.searchsorted(in1, in2, side='left')\n  ",
            "buckets = [-1, -0.5, 0, 0.5, 1]\nreturn tf.searchsorted(buckets, in2, side='left')\n",
            "def transform(in1, in2):\n    buckets = tf.searchsorted(in1, in2, side='right')\n    return buckets\n",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "return tf.searchsorted(in1, in2)\n",
            "return tf.searchsorted(tf.constant([-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1]), in2, side='right')\n",
            "def transform(in1, in2):\n    boundaries = tf.constant([-0.2, 0.2, 0.4, 0.6, 0.8])\n    output = tf.searchsorted(boundaries, in2)\n    return output\n",
            "def transform(in1, in2):\n    buckets = tf.searchsorted(in1, in2, side='right')\n    return buckets\n",
            "return tf.searchsorted(in1, in2)\n",
            "def transform(in1, in2):\n    boundaries = [-0.2, -0.1, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]\n    buckets = tf.searchsorted(boundaries, in2, side='right')\n    return buckets\n",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "return tf.searchsorted(in1, in2, side='right')",
            "return tf.searchsorted(in1, in2, side='right')",
            "buckets = tf.searchsorted(in1, in2, side='right')\nreturn buckets\n",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "return tf.searchsorted(in1, in2)",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2)\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2)",
            "def transform(in1, in2):\n    boundaries = [-0.2, 0, 0.2, 0.4, 0.6, 0.8]\n    output = tf.searchsorted(boundaries, in2, side='right')\n    return output\n"
        ],
        "tf_operators": {
            "tf.searchsorted": 50,
            "tf.float32": 2,
            "tf.constant": 8
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                -1.0,
                -0.5
            ],
            [],
            [],
            [
                -1,
                -0.5,
                0,
                1
            ],
            [],
            [],
            [
                0,
                -0.2,
                1
            ],
            [
                -1,
                -0.8,
                -0.6,
                -0.4,
                -0.2,
                0,
                1
            ],
            [
                -0.6,
                -0.2
            ],
            [],
            [
                -1.0,
                -0.8,
                -0.6,
                -0.4,
                -0.2,
                1
            ],
            [],
            [],
            [],
            [
                -1.0,
                -0.2
            ],
            [],
            [],
            [
                -1.0,
                -0.8,
                -0.6,
                -0.4,
                -0.2
            ],
            [],
            [],
            [],
            [
                -0.1,
                -0.05,
                0
            ],
            [
                -0.2
            ],
            [],
            [],
            [
                -1,
                -0.5,
                0,
                1
            ],
            [],
            [],
            [],
            [
                -1,
                -0.8,
                -0.6,
                -0.4,
                -0.2,
                0,
                1
            ],
            [
                -0.2
            ],
            [],
            [],
            [
                -0.2,
                -0.1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                -0.2,
                0
            ]
        ],
        "all_constants": [
            -0.5,
            0,
            -0.2,
            1,
            -0.8,
            -0.6,
            -0.4,
            -0.1,
            -0.05,
            -1.0
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 85,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 17,
            "shape_tuple": 0,
            "tf_float32": 2,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0037735849056603774,
                "tf.add(x, y)": 0.0037735849056603774,
                "tf.add_n(inputs)": 0.0037735849056603774,
                "tf.argmax(input, axis)": 0.0037735849056603774,
                "tf.argmin(input, axis)": 0.0037735849056603774,
                "tf.argsort(values, axis, stable=True)": 0.0037735849056603774,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0037735849056603774,
                "tf.boolean_mask(tensor, mask)": 0.0037735849056603774,
                "tf.broadcast_to(input, shape)": 0.0037735849056603774,
                "tf.cast(x, dtype)": 0.0037735849056603774,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0037735849056603774,
                "tf.concat(values, axis)": 0.0037735849056603774,
                "tf.constant(value)": 0.026415094339622643,
                "tf.constant(value, dtype)": 0.0037735849056603774,
                "tf.divide(x, y)": 0.0037735849056603774,
                "tf.equal(x, y)": 0.0037735849056603774,
                "tf.exp(x)": 0.0037735849056603774,
                "tf.expand_dims(input, axis)": 0.0037735849056603774,
                "tf.eye(num_rows)": 0.0037735849056603774,
                "tf.eye(num_rows, num_columns)": 0.0037735849056603774,
                "tf.eye(num_rows, dtype)": 0.0037735849056603774,
                "tf.fill(dims, value)": 0.0037735849056603774,
                "tf.gather(params, indices)": 0.0037735849056603774,
                "tf.gather(params, indices, axis, batch_dims)": 0.0037735849056603774,
                "tf.gather_nd(params, indices)": 0.0037735849056603774,
                "tf.gather_nd(params, indices, batch_dims)": 0.0037735849056603774,
                "tf.greater(x, y)": 0.0037735849056603774,
                "tf.greater_equal(x, y)": 0.0037735849056603774,
                "tf.math.bincount(arr)": 0.0037735849056603774,
                "tf.math.ceil(x)": 0.0037735849056603774,
                "tf.math.count_nonzero(input)": 0.0037735849056603774,
                "tf.math.count_nonzero(input, axis)": 0.0037735849056603774,
                "tf.math.cumsum(x, axis)": 0.0037735849056603774,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0037735849056603774,
                "tf.math.divide_no_nan(x, y)": 0.0037735849056603774,
                "tf.math.floor(x)": 0.0037735849056603774,
                "tf.math.log(x)": 0.0037735849056603774,
                "tf.math.logical_and(x, y)": 0.0037735849056603774,
                "tf.math.logical_not(x)": 0.0037735849056603774,
                "tf.math.logical_or(x, y)": 0.0037735849056603774,
                "tf.math.logical_xor(x, y)": 0.0037735849056603774,
                "tf.math.negative(x)": 0.0037735849056603774,
                "tf.math.reciprocal(x)": 0.0037735849056603774,
                "tf.math.reciprocal_no_nan(x)": 0.0037735849056603774,
                "tf.math.segment_max(data, segment_ids)": 0.0037735849056603774,
                "tf.math.segment_mean(data, segment_ids)": 0.0037735849056603774,
                "tf.math.segment_min(data, segment_ids)": 0.0037735849056603774,
                "tf.math.segment_prod(data, segment_ids)": 0.0037735849056603774,
                "tf.math.segment_sum(data, segment_ids)": 0.0037735849056603774,
                "tf.math.squared_difference(x, y)": 0.0037735849056603774,
                "tf.math.top_k(input, k)": 0.0037735849056603774,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0037735849056603774,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0037735849056603774,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0037735849056603774,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0037735849056603774,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0037735849056603774,
                "tf.matmul(a, b)": 0.0037735849056603774,
                "tf.maximum(x, y)": 0.0037735849056603774,
                "tf.minimum(x, y)": 0.0037735849056603774,
                "tf.multiply(x, y)": 0.0037735849056603774,
                "tf.not_equal(x, y)": 0.0037735849056603774,
                "tf.one_hot(indices, depth)": 0.0037735849056603774,
                "tf.ones(shape)": 0.0037735849056603774,
                "tf.ones_like(input)": 0.0037735849056603774,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0037735849056603774,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0037735849056603774,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0037735849056603774,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0037735849056603774,
                "tf.range(start)": 0.0037735849056603774,
                "tf.range(start, limit, delta)": 0.0037735849056603774,
                "tf.reduce_any(input_tensor, axis)": 0.0037735849056603774,
                "tf.reduce_all(input_tensor, axis)": 0.0037735849056603774,
                "tf.reduce_max(input_tensor)": 0.0037735849056603774,
                "tf.reduce_max(input_tensor, axis)": 0.0037735849056603774,
                "tf.reduce_mean(input_tensor)": 0.0037735849056603774,
                "tf.reduce_mean(input_tensor, axis)": 0.0037735849056603774,
                "tf.reduce_min(input_tensor)": 0.0037735849056603774,
                "tf.reduce_min(input_tensor, axis)": 0.0037735849056603774,
                "tf.reduce_prod(input_tensor, axis)": 0.0037735849056603774,
                "tf.reduce_sum(input_tensor)": 0.0037735849056603774,
                "tf.reduce_sum(input_tensor, axis)": 0.0037735849056603774,
                "tf.repeat(input, repeats)": 0.0037735849056603774,
                "tf.repeat(input, repeats, axis)": 0.0037735849056603774,
                "tf.reshape(tensor, shape)": 0.0037735849056603774,
                "tf.reverse(tensor, axis)": 0.0037735849056603774,
                "tf.roll(input, shift, axis)": 0.0037735849056603774,
                "tf.round(x)": 0.0037735849056603774,
                "tf.scatter_nd(indices, updates, shape)": 0.0037735849056603774,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0037735849056603774,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0037735849056603774,
                "tf.sequence_mask(lengths)": 0.0037735849056603774,
                "tf.sequence_mask(lengths, maxlen)": 0.0037735849056603774,
                "tf.shape(input)": 0.0037735849056603774,
                "tf.sign(x)": 0.0037735849056603774,
                "tf.sort(values, axis)": 0.0037735849056603774,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0037735849056603774,
                "tf.sqrt(x)": 0.0037735849056603774,
                "tf.square(x)": 0.0037735849056603774,
                "tf.squeeze(input)": 0.0037735849056603774,
                "tf.squeeze(input, axis)": 0.0037735849056603774,
                "tf.stack(values, axis)": 0.0037735849056603774,
                "tf.subtract(x, y)": 0.0037735849056603774,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0037735849056603774,
                "tf.tensordot(a, b, axes)": 0.0037735849056603774,
                "tf.tile(input, multiples)": 0.0037735849056603774,
                "tf.transpose(a)": 0.0037735849056603774,
                "tf.transpose(a, perm)": 0.0037735849056603774,
                "tf.unique_with_counts(x)": 0.0037735849056603774,
                "tf.unstack(value, axis)": 0.0037735849056603774,
                "tf.where(condition)": 0.0037735849056603774,
                "tf.where(condition, x, y)": 0.0037735849056603774,
                "tf.zeros(shape)": 0.0037735849056603774,
                "tf.zeros_like(input)": 0.0037735849056603774,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0037735849056603774,
                "tf.sparse.add(a, b)": 0.0037735849056603774,
                "tf.sparse.concat(axis, sp_inputs)": 0.0037735849056603774,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0037735849056603774,
                "tf.sparse.from_dense(tensor)": 0.0037735849056603774,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0037735849056603774,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0037735849056603774,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0037735849056603774,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0037735849056603774,
                "tf.sparse.reset_shape(sp_input)": 0.0037735849056603774,
                "tf.sparse.reshape(sp_input, shape)": 0.0037735849056603774,
                "tf.sparse.retain(sp_input, to_retain)": 0.0037735849056603774,
                "tf.sparse.slice(sp_input, start, size)": 0.0037735849056603774,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0037735849056603774,
                "tf.sparse.to_dense(sp_input)": 0.0037735849056603774,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0037735849056603774,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0037735849056603774,
                "tf.sparse.transpose(sp_input)": 0.0037735849056603774,
                "tf.sparse.transpose(sp_input, perm)": 0.0037735849056603774,
                "IndexingAxis1Operation": 0.0037735849056603774,
                "IndexingOperation": 0.0037735849056603774,
                "PairCreationOperation": 0.0037735849056603774,
                "SingletonTupleCreationOperation": 0.0037735849056603774,
                "SlicingAxis0BothOperation": 0.0037735849056603774,
                "SlicingAxis0LeftOperation": 0.0037735849056603774,
                "SlicingAxis0RightOperation": 0.0037735849056603774,
                "SlicingAxis1BothOperation": 0.0037735849056603774,
                "SlicingAxis1LeftOperation": 0.0037735849056603774,
                "SlicingAxis1RightOperation": 0.0037735849056603774,
                "TripleCreationOperation": 0.0037735849056603774,
                "PROVIDED_CONSTANT_WEIGHT": 0.0037735849056603774,
                "COMMON_CONSTANT_WEIGHT": 0.06792452830188679,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0037735849056603774,
                "INPUT_VARIABLE_WEIGHT": 0.32452830188679244,
                "AXIS_CONSTANT_WEIGHT": 0.0037735849056603774,
                "SHAPE_CONSTANT_WEIGHT": 0.0037735849056603774,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0037735849056603774,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0037735849056603774,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.011320754716981131,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0037735849056603774,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0037735849056603774
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 5,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 8,
                "tf.pad(tensor, paddings, mode='REFLECT')": 8,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 8,
                "tf.searchsorted(sorted_sequence, values, side='right')": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction='DESCENDING')": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 6,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_30",
        "description": "compute Euclidean distance between two tensors",
        "target_program": "tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))",
        "source": "https://stackoverflow.com/questions/54147780/tensorflow-how-to-calculate-the-euclidean-distance-between-two-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1., 2.], [3., 4.], [5., 6.]],[[9., 4.], [8., 5.], [7., 6.]],]",
            "outputs": "[[math.sqrt(68), math.sqrt(58), math.sqrt(52)],    [math.sqrt(36), math.sqrt(26), math.sqrt(20)],    [math.sqrt(20), math.sqrt(10), math.sqrt(4)]]"
        },
        "completions": [
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=2)\n",
            "diff = tf.subtract(in1, in2)\nsquare_diff = tf.square(diff)\nsum_square_diff = tf.reduce_sum(square_diff, axis=1)\neuclidean_distance = tf.sqrt(sum_square_diff)\nreturn euclidean_distance\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), 2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=2)\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), 2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=2)",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))",
            "return tf.norm(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0)), axis=-1)\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "squared_diff = tf.math.squared_difference(in1, tf.expand_dims(in2, axis=1))\ndistance = tf.reduce_sum(squared_diff, axis=2)\ndistances = tf.sqrt(distance)\nreturn distances\n",
            "sq_diff = tf.math.squared_difference(in1[:, tf.newaxis], in2)\nsum_sq_diff = tf.reduce_sum(sq_diff, axis=2)\neuclidean_dist = tf.sqrt(sum_sq_diff)\nreturn euclidean_dist\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), 2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=-1))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "diff = tf.subtract(in1, in2)\nsquare_diff = tf.square(diff)\nsquare_sum = tf.reduce_sum(square_diff, axis=2)\neuclidean_distance = tf.sqrt(square_sum)\nreturn euclidean_distance\n",
            "diff = tf.subtract(in1, in2)\nsquare_diff = tf.square(diff)\nsum_square_diff = tf.reduce_sum(square_diff, axis=1, keepdims=True)\neuclidean_distance = tf.sqrt(sum_square_diff)\nreturn euclidean_distance\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2))\n",
            "squared_diff = tf.math.squared_difference(in1, in2)\nsum_squared_diff = tf.reduce_sum(squared_diff, axis=-1)\neuclidean_dist = tf.sqrt(sum_squared_diff)\nreturn euclidean_dist\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis = 2))",
            "diff = tf.subtract(in1, in2)\nsq_diff = tf.square(diff)\nsum_sq_diff = tf.reduce_sum(sq_diff, axis=2)\neuclidean_distance = tf.sqrt(sum_sq_diff)\nreturn euclidean_distance\n",
            "def transform(in1, in2):\n    squared_diff = tf.math.squared_difference(in1, tf.expand_dims(in2, 1))\n    squared_diff_sum = tf.reduce_sum(squared_diff, axis=2)\n    euclidean_dist = tf.sqrt(squared_diff_sum)\n    return euclidean_dist",
            "differences = tf.subtract(in1, in2)\nsquared_diff = tf.square(differences)\nsum_squared_diff = tf.reduce_sum(squared_diff, axis=2)\neuclidean_distances = tf.sqrt(sum_squared_diff)\nreturn euclidean_distances\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), 2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))",
            "return tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), 2)",
            "squared_diff = tf.math.squared_difference(in1, tf.expand_dims(in2, axis=1))\neuclidean_dist = tf.reduce_sum(squared_diff, axis=-1)\neuclidean_dist = tf.sqrt(euclidean_dist)\nreturn euclidean_dist\n",
            "squared_diff = tf.math.squared_difference(in1, tf.expand_dims(in2, axis=1))\nsummed_squared_diff = tf.reduce_sum(squared_diff, axis=-1)\neuclidean_dist = tf.sqrt(summed_squared_diff)\nreturn euclidean_dist\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=2)\n",
            "return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=-1)\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(in1 - tf.expand_dims(in2, 1)), axis=2))\n"
        ],
        "tf_operators": {
            "tf.sqrt": 43,
            "tf.subtract": 25,
            "tf.square": 38,
            "tf.reduce_sum": 44,
            "tf.expand_dims": 43,
            "tf.norm": 6,
            "tf.math.squared_difference": 6,
            "tf.newaxis": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 5,
        "total_in_target": 5,
        "parsed_constants": [
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                -1
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                2
            ],
            [
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                -1
            ],
            [
                1,
                0,
                2
            ],
            [
                2
            ],
            [
                1
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                2
            ],
            [
                -1
            ],
            [
                1,
                0,
                2
            ],
            [
                2
            ],
            [
                1,
                2
            ],
            [
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                -1
            ],
            [
                1,
                -1
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                -1
            ],
            [
                1,
                2
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 100,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 89,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 42,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0017094017094017094,
                "tf.add(x, y)": 0.0017094017094017094,
                "tf.add_n(inputs)": 0.0017094017094017094,
                "tf.argmax(input, axis)": 0.0017094017094017094,
                "tf.argmin(input, axis)": 0.0017094017094017094,
                "tf.argsort(values, axis, stable=True)": 0.0017094017094017094,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0017094017094017094,
                "tf.boolean_mask(tensor, mask)": 0.0017094017094017094,
                "tf.broadcast_to(input, shape)": 0.0017094017094017094,
                "tf.cast(x, dtype)": 0.0017094017094017094,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0017094017094017094,
                "tf.concat(values, axis)": 0.0017094017094017094,
                "tf.constant(value)": 0.0017094017094017094,
                "tf.constant(value, dtype)": 0.0017094017094017094,
                "tf.divide(x, y)": 0.0017094017094017094,
                "tf.equal(x, y)": 0.0017094017094017094,
                "tf.exp(x)": 0.0017094017094017094,
                "tf.expand_dims(input, axis)": 0.13846153846153847,
                "tf.eye(num_rows)": 0.0017094017094017094,
                "tf.eye(num_rows, num_columns)": 0.0017094017094017094,
                "tf.eye(num_rows, dtype)": 0.0017094017094017094,
                "tf.fill(dims, value)": 0.0017094017094017094,
                "tf.gather(params, indices)": 0.0017094017094017094,
                "tf.gather(params, indices, axis, batch_dims)": 0.0017094017094017094,
                "tf.gather_nd(params, indices)": 0.0017094017094017094,
                "tf.gather_nd(params, indices, batch_dims)": 0.0017094017094017094,
                "tf.greater(x, y)": 0.0017094017094017094,
                "tf.greater_equal(x, y)": 0.0017094017094017094,
                "tf.math.bincount(arr)": 0.0017094017094017094,
                "tf.math.ceil(x)": 0.0017094017094017094,
                "tf.math.count_nonzero(input)": 0.0017094017094017094,
                "tf.math.count_nonzero(input, axis)": 0.0017094017094017094,
                "tf.math.cumsum(x, axis)": 0.0017094017094017094,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0017094017094017094,
                "tf.math.divide_no_nan(x, y)": 0.0017094017094017094,
                "tf.math.floor(x)": 0.0017094017094017094,
                "tf.math.log(x)": 0.0017094017094017094,
                "tf.math.logical_and(x, y)": 0.0017094017094017094,
                "tf.math.logical_not(x)": 0.0017094017094017094,
                "tf.math.logical_or(x, y)": 0.0017094017094017094,
                "tf.math.logical_xor(x, y)": 0.0017094017094017094,
                "tf.math.negative(x)": 0.0017094017094017094,
                "tf.math.reciprocal(x)": 0.0017094017094017094,
                "tf.math.reciprocal_no_nan(x)": 0.0017094017094017094,
                "tf.math.segment_max(data, segment_ids)": 0.0017094017094017094,
                "tf.math.segment_mean(data, segment_ids)": 0.0017094017094017094,
                "tf.math.segment_min(data, segment_ids)": 0.0017094017094017094,
                "tf.math.segment_prod(data, segment_ids)": 0.0017094017094017094,
                "tf.math.segment_sum(data, segment_ids)": 0.0017094017094017094,
                "tf.math.squared_difference(x, y)": 0.011965811965811967,
                "tf.math.top_k(input, k)": 0.0017094017094017094,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0017094017094017094,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0017094017094017094,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0017094017094017094,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0017094017094017094,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0017094017094017094,
                "tf.matmul(a, b)": 0.0017094017094017094,
                "tf.maximum(x, y)": 0.0017094017094017094,
                "tf.minimum(x, y)": 0.0017094017094017094,
                "tf.multiply(x, y)": 0.0017094017094017094,
                "tf.not_equal(x, y)": 0.0017094017094017094,
                "tf.one_hot(indices, depth)": 0.0017094017094017094,
                "tf.ones(shape)": 0.0017094017094017094,
                "tf.ones_like(input)": 0.0017094017094017094,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0017094017094017094,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0017094017094017094,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0017094017094017094,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0017094017094017094,
                "tf.range(start)": 0.0017094017094017094,
                "tf.range(start, limit, delta)": 0.0017094017094017094,
                "tf.reduce_any(input_tensor, axis)": 0.0017094017094017094,
                "tf.reduce_all(input_tensor, axis)": 0.0017094017094017094,
                "tf.reduce_max(input_tensor)": 0.0017094017094017094,
                "tf.reduce_max(input_tensor, axis)": 0.0017094017094017094,
                "tf.reduce_mean(input_tensor)": 0.0017094017094017094,
                "tf.reduce_mean(input_tensor, axis)": 0.0017094017094017094,
                "tf.reduce_min(input_tensor)": 0.0017094017094017094,
                "tf.reduce_min(input_tensor, axis)": 0.0017094017094017094,
                "tf.reduce_prod(input_tensor, axis)": 0.0017094017094017094,
                "tf.reduce_sum(input_tensor)": 0.0017094017094017094,
                "tf.reduce_sum(input_tensor, axis)": 0.010256410256410256,
                "tf.repeat(input, repeats)": 0.0017094017094017094,
                "tf.repeat(input, repeats, axis)": 0.0017094017094017094,
                "tf.reshape(tensor, shape)": 0.0017094017094017094,
                "tf.reverse(tensor, axis)": 0.0017094017094017094,
                "tf.roll(input, shift, axis)": 0.0017094017094017094,
                "tf.round(x)": 0.0017094017094017094,
                "tf.scatter_nd(indices, updates, shape)": 0.0017094017094017094,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0017094017094017094,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0017094017094017094,
                "tf.sequence_mask(lengths)": 0.0017094017094017094,
                "tf.sequence_mask(lengths, maxlen)": 0.0017094017094017094,
                "tf.shape(input)": 0.0017094017094017094,
                "tf.sign(x)": 0.0017094017094017094,
                "tf.sort(values, axis)": 0.0017094017094017094,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0017094017094017094,
                "tf.sqrt(x)": 0.07521367521367521,
                "tf.square(x)": 0.06666666666666667,
                "tf.squeeze(input)": 0.0017094017094017094,
                "tf.squeeze(input, axis)": 0.0017094017094017094,
                "tf.stack(values, axis)": 0.0017094017094017094,
                "tf.subtract(x, y)": 0.044444444444444446,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0017094017094017094,
                "tf.tensordot(a, b, axes)": 0.0017094017094017094,
                "tf.tile(input, multiples)": 0.0017094017094017094,
                "tf.transpose(a)": 0.0017094017094017094,
                "tf.transpose(a, perm)": 0.0017094017094017094,
                "tf.unique_with_counts(x)": 0.0017094017094017094,
                "tf.unstack(value, axis)": 0.0017094017094017094,
                "tf.where(condition)": 0.0017094017094017094,
                "tf.where(condition, x, y)": 0.0017094017094017094,
                "tf.zeros(shape)": 0.0017094017094017094,
                "tf.zeros_like(input)": 0.0017094017094017094,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0017094017094017094,
                "tf.sparse.add(a, b)": 0.0017094017094017094,
                "tf.sparse.concat(axis, sp_inputs)": 0.0017094017094017094,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0017094017094017094,
                "tf.sparse.from_dense(tensor)": 0.0017094017094017094,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0017094017094017094,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0017094017094017094,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0017094017094017094,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0017094017094017094,
                "tf.sparse.reset_shape(sp_input)": 0.0017094017094017094,
                "tf.sparse.reshape(sp_input, shape)": 0.0017094017094017094,
                "tf.sparse.retain(sp_input, to_retain)": 0.0017094017094017094,
                "tf.sparse.slice(sp_input, start, size)": 0.0017094017094017094,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0017094017094017094,
                "tf.sparse.to_dense(sp_input)": 0.0017094017094017094,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0017094017094017094,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0017094017094017094,
                "tf.sparse.transpose(sp_input)": 0.0017094017094017094,
                "tf.sparse.transpose(sp_input, perm)": 0.0017094017094017094,
                "IndexingAxis1Operation": 0.003418803418803419,
                "IndexingOperation": 0.0017094017094017094,
                "PairCreationOperation": 0.003418803418803419,
                "SingletonTupleCreationOperation": 0.0017094017094017094,
                "SlicingAxis0BothOperation": 0.0017094017094017094,
                "SlicingAxis0LeftOperation": 0.0017094017094017094,
                "SlicingAxis0RightOperation": 0.0017094017094017094,
                "SlicingAxis1BothOperation": 0.0017094017094017094,
                "SlicingAxis1LeftOperation": 0.0017094017094017094,
                "SlicingAxis1RightOperation": 0.0017094017094017094,
                "TripleCreationOperation": 0.0017094017094017094,
                "PROVIDED_CONSTANT_WEIGHT": 0.0017094017094017094,
                "COMMON_CONSTANT_WEIGHT": 0.15384615384615385,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0017094017094017094,
                "INPUT_VARIABLE_WEIGHT": 0.17264957264957265,
                "AXIS_CONSTANT_WEIGHT": 0.0735042735042735,
                "SHAPE_CONSTANT_WEIGHT": 0.0017094017094017094,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0017094017094017094,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0017094017094017094,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0017094017094017094,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0017094017094017094,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0017094017094017094
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 9,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 3,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 6,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 9,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 9,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 4,
                "tf.square(x)": 4,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 4,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 9,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 4,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_31",
        "description": "squared error between two tensors, one being a sparse tensor",
        "target_program": "tf.reduce_sum(tf.square(tf.subtract(in2, tf.sparse.to_dense(in1))))",
        "source": "https://stackoverflow.com/questions/45032668/tensorflow-how-to-compute-the-square-error-between-a-tensor-and-a-sparse-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "tf.SparseTensor(indices=[[0, 0], [0, 1], [1, 1]], values=[1.0, 1.5, -2.0], dense_shape=[2, 2]), [[3.0, 1.0], [0.2, -1.0]],",
            "outputs": "5.29"
        },
        "completions": [
            "return tf.reduce_sum(tf.math.square(tf.sparse.to_dense(in1) - in2))",
            "result = tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\nreturn result.numpy()\n",
            "return tf.reduce_mean(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "return tf.sparse.reduce_sum(tf.sparse.square(tf.sparse.subtract(in1, tf.sparse.from_dense(in2))))",
            "return tf.reduce_sum(tf.sparse.square(tf.sparse.subtract(in1, tf.sparse.from_dense(in2))))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.square(tf.sparse.to_dense(in1) - in2))\n",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "return tf.reduce_mean(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "result = tf.reduce_sum(tf.math.square(tf.sparse.to_dense(in1) - in2))\nreturn result.numpy()\n",
            "'''\ndef transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n'''\n",
            "dense = tf.sparse.to_dense(in1)\nsquared_diff = tf.math.squared_difference(dense, in2)\nreturn tf.reduce_sum(squared_diff)\n",
            "return tf.reduce_sum(tf.square(in2 - tf.sparse.to_dense(in1)))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1,\ndefault_value=0.0), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "return tf.reduce_sum(tf.sparse.to_dense(tf.sparse.square(tf.sparse.subtract(in1, tf.sparse.from_dense(in2)))))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_mean(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.sparse.to_dense(tf.sparse.square(tf.sparse.subtract(in1, tf.sparse.from_dense(in2)))))\n",
            "squared_diff = tf.sparse.from_dense(in1) - in2\nsquared_error = tf.reduce_sum(tf.square(squared_diff))\nreturn squared_error.numpy()\n",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "return tf.reduce_sum(tf.math.square(tf.sparse.to_dense(in1) - in2))",
            "return tf.reduce_mean(tf.sparse.to_dense(in1) - in2) ** 2",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(in2, tf.sparse.to_dense(in1)))",
            "return tf.reduce_mean(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_mean(tf.square(tf.sparse.to_dense(in1) - in2))",
            "result = tf.math.squared_difference(tf.sparse.to_dense(in1), in2)\nsquared_error = tf.reduce_sum(result)\nreturn squared_error\n",
            "return tf.reduce_mean(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "squared_diff = tf.math.squared_difference(tf.sparse.to_dense(in1), in2)\nresult = tf.reduce_sum(squared_diff)\nweights = tf.constant([[0, 1, 2, 3]])\nreturn result\n",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "result = tf.math.squared_difference(tf.sparse.to_dense(in1), in2)\noutput = tf.reduce_sum(result)\nreturn output\n",
            "return tf.math.reduce_mean(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "return tf.reduce_sum(tf.sparse.to_dense(in1) - in2)**2"
        ],
        "tf_operators": {
            "tf.math.square": 3,
            "tf.reduce_sum": 41,
            "tf.sparse.to_dense": 47,
            "tf.math.squared_difference": 37,
            "tf.reduce_mean": 7,
            "tf.sparse.subtract": 4,
            "tf.sparse.from_dense": 5,
            "tf.sparse.square": 4,
            "tf.sparse.reduce_sum": 1,
            "tf.square": 4,
            "tf.math.reduce_mean": 1
        },
        "coverage_percentage": 75.0,
        "total_covered": 3,
        "total_in_target": 4,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                2
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                2
            ]
        ],
        "all_constants": [
            2
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 98,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 0,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 2,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0025380710659898475,
                "tf.add(x, y)": 0.0025380710659898475,
                "tf.add_n(inputs)": 0.0025380710659898475,
                "tf.argmax(input, axis)": 0.0025380710659898475,
                "tf.argmin(input, axis)": 0.0025380710659898475,
                "tf.argsort(values, axis, stable=True)": 0.0025380710659898475,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0025380710659898475,
                "tf.boolean_mask(tensor, mask)": 0.0025380710659898475,
                "tf.broadcast_to(input, shape)": 0.0025380710659898475,
                "tf.cast(x, dtype)": 0.0025380710659898475,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0025380710659898475,
                "tf.concat(values, axis)": 0.0025380710659898475,
                "tf.constant(value)": 0.005076142131979695,
                "tf.constant(value, dtype)": 0.0025380710659898475,
                "tf.divide(x, y)": 0.0025380710659898475,
                "tf.equal(x, y)": 0.0025380710659898475,
                "tf.exp(x)": 0.0025380710659898475,
                "tf.expand_dims(input, axis)": 0.0025380710659898475,
                "tf.eye(num_rows)": 0.0025380710659898475,
                "tf.eye(num_rows, num_columns)": 0.0025380710659898475,
                "tf.eye(num_rows, dtype)": 0.0025380710659898475,
                "tf.fill(dims, value)": 0.0025380710659898475,
                "tf.gather(params, indices)": 0.0025380710659898475,
                "tf.gather(params, indices, axis, batch_dims)": 0.0025380710659898475,
                "tf.gather_nd(params, indices)": 0.0025380710659898475,
                "tf.gather_nd(params, indices, batch_dims)": 0.0025380710659898475,
                "tf.greater(x, y)": 0.0025380710659898475,
                "tf.greater_equal(x, y)": 0.0025380710659898475,
                "tf.math.bincount(arr)": 0.0025380710659898475,
                "tf.math.ceil(x)": 0.0025380710659898475,
                "tf.math.count_nonzero(input)": 0.0025380710659898475,
                "tf.math.count_nonzero(input, axis)": 0.0025380710659898475,
                "tf.math.cumsum(x, axis)": 0.0025380710659898475,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0025380710659898475,
                "tf.math.divide_no_nan(x, y)": 0.0025380710659898475,
                "tf.math.floor(x)": 0.0025380710659898475,
                "tf.math.log(x)": 0.0025380710659898475,
                "tf.math.logical_and(x, y)": 0.0025380710659898475,
                "tf.math.logical_not(x)": 0.0025380710659898475,
                "tf.math.logical_or(x, y)": 0.0025380710659898475,
                "tf.math.logical_xor(x, y)": 0.0025380710659898475,
                "tf.math.negative(x)": 0.0025380710659898475,
                "tf.math.reciprocal(x)": 0.0025380710659898475,
                "tf.math.reciprocal_no_nan(x)": 0.0025380710659898475,
                "tf.math.segment_max(data, segment_ids)": 0.0025380710659898475,
                "tf.math.segment_mean(data, segment_ids)": 0.0025380710659898475,
                "tf.math.segment_min(data, segment_ids)": 0.0025380710659898475,
                "tf.math.segment_prod(data, segment_ids)": 0.0025380710659898475,
                "tf.math.segment_sum(data, segment_ids)": 0.0025380710659898475,
                "tf.math.squared_difference(x, y)": 0.09390862944162437,
                "tf.math.top_k(input, k)": 0.0025380710659898475,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0025380710659898475,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0025380710659898475,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0025380710659898475,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0025380710659898475,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0025380710659898475,
                "tf.matmul(a, b)": 0.0025380710659898475,
                "tf.maximum(x, y)": 0.0025380710659898475,
                "tf.minimum(x, y)": 0.0025380710659898475,
                "tf.multiply(x, y)": 0.0025380710659898475,
                "tf.not_equal(x, y)": 0.0025380710659898475,
                "tf.one_hot(indices, depth)": 0.0025380710659898475,
                "tf.ones(shape)": 0.0025380710659898475,
                "tf.ones_like(input)": 0.0025380710659898475,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0025380710659898475,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0025380710659898475,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0025380710659898475,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0025380710659898475,
                "tf.range(start)": 0.0025380710659898475,
                "tf.range(start, limit, delta)": 0.0025380710659898475,
                "tf.reduce_any(input_tensor, axis)": 0.0025380710659898475,
                "tf.reduce_all(input_tensor, axis)": 0.0025380710659898475,
                "tf.reduce_max(input_tensor)": 0.0025380710659898475,
                "tf.reduce_max(input_tensor, axis)": 0.0025380710659898475,
                "tf.reduce_mean(input_tensor)": 0.02030456852791878,
                "tf.reduce_mean(input_tensor, axis)": 0.0025380710659898475,
                "tf.reduce_min(input_tensor)": 0.0025380710659898475,
                "tf.reduce_min(input_tensor, axis)": 0.0025380710659898475,
                "tf.reduce_prod(input_tensor, axis)": 0.0025380710659898475,
                "tf.reduce_sum(input_tensor)": 0.10406091370558376,
                "tf.reduce_sum(input_tensor, axis)": 0.0025380710659898475,
                "tf.repeat(input, repeats)": 0.0025380710659898475,
                "tf.repeat(input, repeats, axis)": 0.0025380710659898475,
                "tf.reshape(tensor, shape)": 0.0025380710659898475,
                "tf.reverse(tensor, axis)": 0.0025380710659898475,
                "tf.roll(input, shift, axis)": 0.0025380710659898475,
                "tf.round(x)": 0.0025380710659898475,
                "tf.scatter_nd(indices, updates, shape)": 0.0025380710659898475,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0025380710659898475,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0025380710659898475,
                "tf.sequence_mask(lengths)": 0.0025380710659898475,
                "tf.sequence_mask(lengths, maxlen)": 0.0025380710659898475,
                "tf.shape(input)": 0.0025380710659898475,
                "tf.sign(x)": 0.0025380710659898475,
                "tf.sort(values, axis)": 0.0025380710659898475,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0025380710659898475,
                "tf.sqrt(x)": 0.0025380710659898475,
                "tf.square(x)": 0.012690355329949238,
                "tf.squeeze(input)": 0.0025380710659898475,
                "tf.squeeze(input, axis)": 0.0025380710659898475,
                "tf.stack(values, axis)": 0.0025380710659898475,
                "tf.subtract(x, y)": 0.0025380710659898475,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0025380710659898475,
                "tf.tensordot(a, b, axes)": 0.0025380710659898475,
                "tf.tile(input, multiples)": 0.0025380710659898475,
                "tf.transpose(a)": 0.0025380710659898475,
                "tf.transpose(a, perm)": 0.0025380710659898475,
                "tf.unique_with_counts(x)": 0.0025380710659898475,
                "tf.unstack(value, axis)": 0.0025380710659898475,
                "tf.where(condition)": 0.0025380710659898475,
                "tf.where(condition, x, y)": 0.0025380710659898475,
                "tf.zeros(shape)": 0.0025380710659898475,
                "tf.zeros_like(input)": 0.0025380710659898475,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0025380710659898475,
                "tf.sparse.add(a, b)": 0.0025380710659898475,
                "tf.sparse.concat(axis, sp_inputs)": 0.0025380710659898475,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0025380710659898475,
                "tf.sparse.from_dense(tensor)": 0.015228426395939087,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0025380710659898475,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0025380710659898475,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0025380710659898475,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005076142131979695,
                "tf.sparse.reset_shape(sp_input)": 0.0025380710659898475,
                "tf.sparse.reshape(sp_input, shape)": 0.0025380710659898475,
                "tf.sparse.retain(sp_input, to_retain)": 0.0025380710659898475,
                "tf.sparse.slice(sp_input, start, size)": 0.0025380710659898475,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0025380710659898475,
                "tf.sparse.to_dense(sp_input)": 0.116751269035533,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0025380710659898475,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0025380710659898475,
                "tf.sparse.transpose(sp_input)": 0.0025380710659898475,
                "tf.sparse.transpose(sp_input, perm)": 0.0025380710659898475,
                "IndexingAxis1Operation": 0.0025380710659898475,
                "IndexingOperation": 0.0025380710659898475,
                "PairCreationOperation": 0.0025380710659898475,
                "SingletonTupleCreationOperation": 0.0025380710659898475,
                "SlicingAxis0BothOperation": 0.0025380710659898475,
                "SlicingAxis0LeftOperation": 0.0025380710659898475,
                "SlicingAxis0RightOperation": 0.0025380710659898475,
                "SlicingAxis1BothOperation": 0.0025380710659898475,
                "SlicingAxis1LeftOperation": 0.0025380710659898475,
                "SlicingAxis1RightOperation": 0.0025380710659898475,
                "TripleCreationOperation": 0.0025380710659898475,
                "PROVIDED_CONSTANT_WEIGHT": 0.0025380710659898475,
                "COMMON_CONSTANT_WEIGHT": 0.0025380710659898475,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0025380710659898475,
                "INPUT_VARIABLE_WEIGHT": 0.2512690355329949,
                "AXIS_CONSTANT_WEIGHT": 0.007614213197969543,
                "SHAPE_CONSTANT_WEIGHT": 0.0025380710659898475,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0025380710659898475,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0025380710659898475,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0025380710659898475,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0025380710659898475,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0025380710659898475
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 9,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 9,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 3,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 9,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 6,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 3,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 9,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 6,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 6,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 3,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 9,
                "PairCreationOperation": 9,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 9,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 7,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_32",
        "description": "weighted sum across rows, where the column index is the weight",
        "target_program": "tf.tensordot(in1, tf.cast(tf.range(4), tf.float32), 1)",
        "source": "https://stackoverflow.com/questions/48659449/how-to-compute-the-weighted-sum-of-a-tensor-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[0.1, 0.6, 0.2, 0.1], [0.3, 0.1, 0.4, 0.2], [0.2, 0.1, 0.2, 0.5]],]",
            "outputs": "[1.3, 1.5, 2.0]"
        },
        "completions": [
            "def transform(in1):\n    col_indices = tf.range(tf.cast(tf.shape(in1)[1], tf.float32))\n    weighted_sum = tf.reduce_sum(in1 * tf.cast(col_indices, tf.float32), axis=1)\n    return weighted_sum\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[-1] + 1)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[1] + 1)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=tf.float32)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[1]+1)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(in1.shape[1]), tf.float32)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(tf.shape(in1)[1]), in1.dtype)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=tf.float32)), axis=1)",
            "weights = tf.constant([[0, 1, 2, 3]])\nreturn tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1]) + 1), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=tf.float32)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.eye(4)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1])), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.eye(4)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=tf.float32)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(tf.shape(in1)[1]), tf.float64)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(tf.shape(in1)[1]), tf.float32)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.constant([[0],[1],[2]])), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[-1], dtype=in1.dtype)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[-1]+1)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(in1.shape[1]), in1.dtype)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.eye(4)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.eye(4)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[-1]) + 1), axis=1)",
            "def transform(in1):\n    weights = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(1, in1.shape[1]+1)), axis=1)",
            "def transform(in1):\n    weights = tf.range(tf.shape(in1)[1])\n    weighted_sum = tf.reduce_sum(in1 * weights, axis=1)\n    return weighted_sum\n",
            "weights = tf.range(tf.shape(in1)[1])\nreturn tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[1]+1)), axis=1)\n",
            "weights = tf.constant([[1, 2, 3, 4]], dtype=tf.float32)\nreturn tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=tf.float32)), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[-1] + 1)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(1, in1.shape[1]+1)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(tf.shape(in1)[-1]), in1.dtype)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(1, in1.shape[1]+1)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[1] + 1)), axis=1)",
            "weights = tf.constant([[0, 1, 2, 3]])\nreturn tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n",
            "def transform(in1):\n    indices = tf.range(tf.shape(in1)[1])\n    return tf.reduce_sum(tf.multiply(in1, tf.cast(indices, tf.float32)), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.constant([[0, 1, 2, 3]], dtype=tf.float32)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[1]+1)), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.constant([[0, 1, 2, 3]], dtype=tf.float32)), axis=1)",
            "def transform(in1):\n    weights = tf.constant([[0, 1, 2, 3]])\n    result = tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n    return result\n",
            "def transform(in1):\n    weights = tf.constant([[0, 1, 2, 3]])\n    result = tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n    return result",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=tf.float32)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=in1.dtype)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.constant([[0, 1, 2, 3]], dtype=tf.float32)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.constant([[0],[1],[2]])), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[1] + 1)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=tf.float32)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[1]+1)), axis=1)\n"
        ],
        "tf_operators": {
            "tf.shape": 31,
            "tf.reduce_sum": 50,
            "tf.float32": 16,
            "tf.range": 36,
            "tf.cast": 8,
            "tf.multiply": 48,
            "tf.constant": 10,
            "tf.eye": 4,
            "tf.float64": 1
        },
        "coverage_percentage": 75.0,
        "total_covered": 3,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1,
                1
            ],
            [
                1,
                -1,
                1,
                1
            ],
            [
                1,
                1,
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1,
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                1,
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                4,
                1
            ],
            [
                1,
                1
            ],
            [
                4,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1,
                2,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                -1,
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                4,
                1
            ],
            [
                4,
                1
            ],
            [
                -1,
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1,
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1,
                1,
                1
            ],
            [
                1,
                2,
                3,
                4,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                -1,
                1,
                1
            ],
            [
                1,
                1,
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1,
                1,
                1
            ],
            [
                1,
                1,
                1,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                1,
                1,
                1,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                0,
                1,
                2,
                1
            ],
            [
                1,
                1,
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1,
                1,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            4,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 2,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 2,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 83,
            "shape": 13,
            "tf_bool": 0,
            "provided": 0,
            "common": 133,
            "shape_tuple": 0,
            "tf_float32": 17,
            "axis": 10,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0017605633802816902,
                "tf.add(x, y)": 0.0017605633802816902,
                "tf.add_n(inputs)": 0.0017605633802816902,
                "tf.argmax(input, axis)": 0.0017605633802816902,
                "tf.argmin(input, axis)": 0.0017605633802816902,
                "tf.argsort(values, axis, stable=True)": 0.0017605633802816902,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0017605633802816902,
                "tf.boolean_mask(tensor, mask)": 0.0017605633802816902,
                "tf.broadcast_to(input, shape)": 0.0017605633802816902,
                "tf.cast(x, dtype)": 0.017605633802816902,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0017605633802816902,
                "tf.concat(values, axis)": 0.0017605633802816902,
                "tf.constant(value)": 0.01232394366197183,
                "tf.constant(value, dtype)": 0.0017605633802816902,
                "tf.divide(x, y)": 0.0017605633802816902,
                "tf.equal(x, y)": 0.0017605633802816902,
                "tf.exp(x)": 0.0017605633802816902,
                "tf.expand_dims(input, axis)": 0.0017605633802816902,
                "tf.eye(num_rows)": 0.008802816901408451,
                "tf.eye(num_rows, num_columns)": 0.0017605633802816902,
                "tf.eye(num_rows, dtype)": 0.0017605633802816902,
                "tf.fill(dims, value)": 0.0017605633802816902,
                "tf.gather(params, indices)": 0.0017605633802816902,
                "tf.gather(params, indices, axis, batch_dims)": 0.0017605633802816902,
                "tf.gather_nd(params, indices)": 0.0017605633802816902,
                "tf.gather_nd(params, indices, batch_dims)": 0.0017605633802816902,
                "tf.greater(x, y)": 0.0017605633802816902,
                "tf.greater_equal(x, y)": 0.0017605633802816902,
                "tf.math.bincount(arr)": 0.0017605633802816902,
                "tf.math.ceil(x)": 0.0017605633802816902,
                "tf.math.count_nonzero(input)": 0.0017605633802816902,
                "tf.math.count_nonzero(input, axis)": 0.0017605633802816902,
                "tf.math.cumsum(x, axis)": 0.0017605633802816902,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0017605633802816902,
                "tf.math.divide_no_nan(x, y)": 0.0017605633802816902,
                "tf.math.floor(x)": 0.0017605633802816902,
                "tf.math.log(x)": 0.0017605633802816902,
                "tf.math.logical_and(x, y)": 0.0017605633802816902,
                "tf.math.logical_not(x)": 0.0017605633802816902,
                "tf.math.logical_or(x, y)": 0.0017605633802816902,
                "tf.math.logical_xor(x, y)": 0.0017605633802816902,
                "tf.math.negative(x)": 0.0017605633802816902,
                "tf.math.reciprocal(x)": 0.0017605633802816902,
                "tf.math.reciprocal_no_nan(x)": 0.0017605633802816902,
                "tf.math.segment_max(data, segment_ids)": 0.0017605633802816902,
                "tf.math.segment_mean(data, segment_ids)": 0.0017605633802816902,
                "tf.math.segment_min(data, segment_ids)": 0.0017605633802816902,
                "tf.math.segment_prod(data, segment_ids)": 0.0017605633802816902,
                "tf.math.segment_sum(data, segment_ids)": 0.0017605633802816902,
                "tf.math.squared_difference(x, y)": 0.0017605633802816902,
                "tf.math.top_k(input, k)": 0.0017605633802816902,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0017605633802816902,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0017605633802816902,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0017605633802816902,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0017605633802816902,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0017605633802816902,
                "tf.matmul(a, b)": 0.0017605633802816902,
                "tf.maximum(x, y)": 0.0017605633802816902,
                "tf.minimum(x, y)": 0.0017605633802816902,
                "tf.multiply(x, y)": 0.08626760563380281,
                "tf.not_equal(x, y)": 0.0017605633802816902,
                "tf.one_hot(indices, depth)": 0.0017605633802816902,
                "tf.ones(shape)": 0.0017605633802816902,
                "tf.ones_like(input)": 0.0017605633802816902,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0017605633802816902,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0017605633802816902,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0017605633802816902,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0017605633802816902,
                "tf.range(start)": 0.02464788732394366,
                "tf.range(start, limit, delta)": 0.01936619718309859,
                "tf.reduce_any(input_tensor, axis)": 0.0017605633802816902,
                "tf.reduce_all(input_tensor, axis)": 0.0017605633802816902,
                "tf.reduce_max(input_tensor)": 0.0017605633802816902,
                "tf.reduce_max(input_tensor, axis)": 0.0017605633802816902,
                "tf.reduce_mean(input_tensor)": 0.0017605633802816902,
                "tf.reduce_mean(input_tensor, axis)": 0.0017605633802816902,
                "tf.reduce_min(input_tensor)": 0.0017605633802816902,
                "tf.reduce_min(input_tensor, axis)": 0.0017605633802816902,
                "tf.reduce_prod(input_tensor, axis)": 0.0017605633802816902,
                "tf.reduce_sum(input_tensor)": 0.0017605633802816902,
                "tf.reduce_sum(input_tensor, axis)": 0.0017605633802816902,
                "tf.repeat(input, repeats)": 0.0017605633802816902,
                "tf.repeat(input, repeats, axis)": 0.0017605633802816902,
                "tf.reshape(tensor, shape)": 0.0017605633802816902,
                "tf.reverse(tensor, axis)": 0.0017605633802816902,
                "tf.roll(input, shift, axis)": 0.0017605633802816902,
                "tf.round(x)": 0.0017605633802816902,
                "tf.scatter_nd(indices, updates, shape)": 0.0017605633802816902,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0017605633802816902,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0017605633802816902,
                "tf.sequence_mask(lengths)": 0.0017605633802816902,
                "tf.sequence_mask(lengths, maxlen)": 0.0017605633802816902,
                "tf.shape(input)": 0.056338028169014086,
                "tf.sign(x)": 0.0017605633802816902,
                "tf.sort(values, axis)": 0.0017605633802816902,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0017605633802816902,
                "tf.sqrt(x)": 0.0017605633802816902,
                "tf.square(x)": 0.0017605633802816902,
                "tf.squeeze(input)": 0.0017605633802816902,
                "tf.squeeze(input, axis)": 0.0017605633802816902,
                "tf.stack(values, axis)": 0.0017605633802816902,
                "tf.subtract(x, y)": 0.0017605633802816902,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0017605633802816902,
                "tf.tensordot(a, b, axes)": 0.0017605633802816902,
                "tf.tile(input, multiples)": 0.0017605633802816902,
                "tf.transpose(a)": 0.0017605633802816902,
                "tf.transpose(a, perm)": 0.0017605633802816902,
                "tf.unique_with_counts(x)": 0.0017605633802816902,
                "tf.unstack(value, axis)": 0.0017605633802816902,
                "tf.where(condition)": 0.0017605633802816902,
                "tf.where(condition, x, y)": 0.0017605633802816902,
                "tf.zeros(shape)": 0.0017605633802816902,
                "tf.zeros_like(input)": 0.0017605633802816902,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0017605633802816902,
                "tf.sparse.add(a, b)": 0.0017605633802816902,
                "tf.sparse.concat(axis, sp_inputs)": 0.0017605633802816902,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0017605633802816902,
                "tf.sparse.from_dense(tensor)": 0.0017605633802816902,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0017605633802816902,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0017605633802816902,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0017605633802816902,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0017605633802816902,
                "tf.sparse.reset_shape(sp_input)": 0.0017605633802816902,
                "tf.sparse.reshape(sp_input, shape)": 0.0017605633802816902,
                "tf.sparse.retain(sp_input, to_retain)": 0.0017605633802816902,
                "tf.sparse.slice(sp_input, start, size)": 0.0017605633802816902,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0017605633802816902,
                "tf.sparse.to_dense(sp_input)": 0.0017605633802816902,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0017605633802816902,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0017605633802816902,
                "tf.sparse.transpose(sp_input)": 0.0017605633802816902,
                "tf.sparse.transpose(sp_input, perm)": 0.0017605633802816902,
                "IndexingAxis1Operation": 0.0017605633802816902,
                "IndexingOperation": 0.06514084507042253,
                "PairCreationOperation": 0.0017605633802816902,
                "SingletonTupleCreationOperation": 0.0017605633802816902,
                "SlicingAxis0BothOperation": 0.0017605633802816902,
                "SlicingAxis0LeftOperation": 0.0017605633802816902,
                "SlicingAxis0RightOperation": 0.0017605633802816902,
                "SlicingAxis1BothOperation": 0.0017605633802816902,
                "SlicingAxis1LeftOperation": 0.0017605633802816902,
                "SlicingAxis1RightOperation": 0.0017605633802816902,
                "TripleCreationOperation": 0.0017605633802816902,
                "PROVIDED_CONSTANT_WEIGHT": 0.0017605633802816902,
                "COMMON_CONSTANT_WEIGHT": 0.23591549295774647,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0017605633802816902,
                "INPUT_VARIABLE_WEIGHT": 0.14788732394366197,
                "AXIS_CONSTANT_WEIGHT": 0.01936619718309859,
                "SHAPE_CONSTANT_WEIGHT": 0.02464788732394366,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0017605633802816902,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0017605633802816902,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.03169014084507042,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0017605633802816902,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0017605633802816902
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 6,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 6,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 9,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 4,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 5,
                "tf.range(start, limit, delta)": 6,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 4,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 4,
                "PairCreationOperation": 9,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 2,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 6,
                "SHAPE_CONSTANT_WEIGHT": 5,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 5,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_33",
        "description": "find the minimum distance between two sets of points",
        "target_program": "tf.reduce_min(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 0), tf.expand_dims(in2, 1))), axis=2), axis=1)",
        "source": "https://stackoverflow.com/questions/40558251/computing-minimum-distance-for-each-element-in-a-tensor-relative-to-another-tens",
        "constants": "[]",
        "examples": {
            "inputs": "[[[.3, .1, .4], [.1, .5, .9], [.2, .6, .5], [.3, .5, .8],[.9, .7, .9]],[[.3, .2, .3], [.8, .4, .6], [.2, .6, .4], [.3, .3, .8]],]",
            "outputs": "[0.02, 0.19, 0.01, 0.04]"
        },
        "completions": [
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)",
            "distances = tf.reduce_min(tf.math.squared_difference(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0)), axis=-1)\nreturn tf.sqrt(distances)\n",
            "dist = tf.math.reduce_min(tf.math.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\nreturn dist\n",
            "dist = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\ndist = tf.reduce_min(tf.reduce_sum(tf.square(dist), axis=-1), axis=1)\nreturn dist\n",
            "dist = tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\nreturn tf.reduce_min(dist, axis=1)\n",
            "expanded_in1 = tf.expand_dims(in1, axis=1)\nexpanded_in2 = tf.expand_dims(in2, axis=0)\ndiff = tf.math.squared_difference(expanded_in1, expanded_in2)\ndistances = tf.reduce_min(tf.reduce_sum(diff, axis=2), axis=1)\nreturn tf.sqrt(distances)\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n",
            "dist = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn dist\n",
            "dist = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\ndist_squared = tf.reduce_sum(tf.square(dist), axis=2)\nreturn tf.sqrt(tf.reduce_min(dist_squared, axis=1))\n",
            "distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn distances\n",
            "dist = tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\nreturn tf.sqrt(dist)\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "dist = tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\nreturn tf.reduce_min(dist, axis=1)\n",
            "dists = tf.reduce_min(tf.math.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn dists\n",
            "dist = tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\nreturn dist\n                                                                                                                                                                                                                          ",
            "expanded_in1 = tf.expand_dims(in1, 1)\nexpanded_in2 = tf.expand_dims(in2, 0)\ndiff = tf.reduce_sum(tf.square(expanded_in1 - expanded_in2), axis=2)\nreturn tf.reduce_min(tf.math.sqrt(diff), axis=1)\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n",
            "distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn distances.numpy()\n",
            "dist = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\nreturn tf.sqrt(tf.reduce_min(tf.reduce_sum(tf.square(dist), axis=-1), axis=1))\n",
            "diffs = tf.reshape(in1, [tf.shape(in1)[0], 1, tf.shape(in1)[1]]) - tf.reshape(in2, [1, tf.shape(in2)[0], tf.shape(in2)[1]])\ndistances = tf.sqrt(tf.reduce_sum(tf.square(diffs), axis=2))\nreturn tf.reduce_min(distances, axis=1)\n",
            "distances = tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\nreturn tf.sqrt(distances)\n",
            "distances = []\nfor i in range(len(in1)):\n    distances.append(tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(in1[i] - in2), axis=1))))\nreturn distances\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "distances = tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\nreturn tf.sqrt(distances)\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n",
            "distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn distances\n",
            "return tf.reduce_min(tf.math.reduce_euclidean_distance(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0)), axis=1)\n",
            "distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn distances\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, axis=1) - in2), axis=2))\n ",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn distances\n",
            "dist = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn dist\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2)), axis=1)\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)",
            "pairwise_diff = tf.expand_dims(in1, axis=1) - tf.expand_dims(in2, axis=0)\nsquared_diff = tf.reduce_sum(tf.math.square(pairwise_diff), axis=2)\nreturn tf.reduce_min(tf.math.sqrt(squared_diff), axis=1)\n",
            "distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn distances\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "pairwise_dist = tf.reduce_min(tf.math.reduce_sum(tf.square(tf.expand_dims(in1, axis=1) - tf.expand_dims(in2, axis=0)), axis=2), axis=1)\nreturn tf.sqrt(pairwise_dist)\n",
            "distances = tf.sqrt(tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1))\nreturn distances\n",
            "dist_matrix = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn dist_matrix\n",
            "distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn distances\n",
            "pairwise_diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\ndistances = tf.reduce_min(tf.reduce_sum(tf.square(pairwise_diff), axis=2), axis=1)\nreturn tf.sqrt(distances)\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)",
            "return tf.reduce_min(tf.math.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), 2)), axis=1)\n",
            "distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn distances\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n"
        ],
        "tf_operators": {
            "tf.sqrt": 42,
            "tf.square": 46,
            "tf.reduce_sum": 46,
            "tf.reduce_min": 45,
            "tf.expand_dims": 48,
            "tf.math.squared_difference": 2,
            "tf.math.reduce_sum": 2,
            "tf.math.reduce_min": 1,
            "tf.math.sqrt": 4,
            "tf.shape": 1,
            "tf.reshape": 1,
            "tf.math.reduce_euclidean_distance": 1,
            "tf.subtract": 1,
            "tf.math.square": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 5,
        "total_in_target": 5,
        "parsed_constants": [
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                -1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                -1,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                -1,
                1
            ],
            [
                0,
                1,
                1,
                1,
                0,
                1,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                2
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 105,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 149,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 45,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0015313935681470138,
                "tf.add(x, y)": 0.0015313935681470138,
                "tf.add_n(inputs)": 0.0015313935681470138,
                "tf.argmax(input, axis)": 0.0015313935681470138,
                "tf.argmin(input, axis)": 0.0015313935681470138,
                "tf.argsort(values, axis, stable=True)": 0.0015313935681470138,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0015313935681470138,
                "tf.boolean_mask(tensor, mask)": 0.0015313935681470138,
                "tf.broadcast_to(input, shape)": 0.0015313935681470138,
                "tf.cast(x, dtype)": 0.0015313935681470138,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0015313935681470138,
                "tf.concat(values, axis)": 0.0015313935681470138,
                "tf.constant(value)": 0.0015313935681470138,
                "tf.constant(value, dtype)": 0.0015313935681470138,
                "tf.divide(x, y)": 0.0015313935681470138,
                "tf.equal(x, y)": 0.0015313935681470138,
                "tf.exp(x)": 0.0015313935681470138,
                "tf.expand_dims(input, axis)": 0.14701378254211334,
                "tf.eye(num_rows)": 0.0015313935681470138,
                "tf.eye(num_rows, num_columns)": 0.0015313935681470138,
                "tf.eye(num_rows, dtype)": 0.0015313935681470138,
                "tf.fill(dims, value)": 0.0015313935681470138,
                "tf.gather(params, indices)": 0.0015313935681470138,
                "tf.gather(params, indices, axis, batch_dims)": 0.0015313935681470138,
                "tf.gather_nd(params, indices)": 0.0015313935681470138,
                "tf.gather_nd(params, indices, batch_dims)": 0.0015313935681470138,
                "tf.greater(x, y)": 0.0015313935681470138,
                "tf.greater_equal(x, y)": 0.0015313935681470138,
                "tf.math.bincount(arr)": 0.0015313935681470138,
                "tf.math.ceil(x)": 0.0015313935681470138,
                "tf.math.count_nonzero(input)": 0.0015313935681470138,
                "tf.math.count_nonzero(input, axis)": 0.0015313935681470138,
                "tf.math.cumsum(x, axis)": 0.0015313935681470138,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0015313935681470138,
                "tf.math.divide_no_nan(x, y)": 0.0015313935681470138,
                "tf.math.floor(x)": 0.0015313935681470138,
                "tf.math.log(x)": 0.0015313935681470138,
                "tf.math.logical_and(x, y)": 0.0015313935681470138,
                "tf.math.logical_not(x)": 0.0015313935681470138,
                "tf.math.logical_or(x, y)": 0.0015313935681470138,
                "tf.math.logical_xor(x, y)": 0.0015313935681470138,
                "tf.math.negative(x)": 0.0015313935681470138,
                "tf.math.reciprocal(x)": 0.0015313935681470138,
                "tf.math.reciprocal_no_nan(x)": 0.0015313935681470138,
                "tf.math.segment_max(data, segment_ids)": 0.0015313935681470138,
                "tf.math.segment_mean(data, segment_ids)": 0.0015313935681470138,
                "tf.math.segment_min(data, segment_ids)": 0.0015313935681470138,
                "tf.math.segment_prod(data, segment_ids)": 0.0015313935681470138,
                "tf.math.segment_sum(data, segment_ids)": 0.0015313935681470138,
                "tf.math.squared_difference(x, y)": 0.004594180704441042,
                "tf.math.top_k(input, k)": 0.0015313935681470138,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0015313935681470138,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0015313935681470138,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0015313935681470138,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0015313935681470138,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0015313935681470138,
                "tf.matmul(a, b)": 0.0015313935681470138,
                "tf.maximum(x, y)": 0.0015313935681470138,
                "tf.minimum(x, y)": 0.0015313935681470138,
                "tf.multiply(x, y)": 0.0015313935681470138,
                "tf.not_equal(x, y)": 0.0015313935681470138,
                "tf.one_hot(indices, depth)": 0.0015313935681470138,
                "tf.ones(shape)": 0.0015313935681470138,
                "tf.ones_like(input)": 0.0015313935681470138,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0015313935681470138,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0015313935681470138,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0015313935681470138,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0015313935681470138,
                "tf.range(start)": 0.0015313935681470138,
                "tf.range(start, limit, delta)": 0.0015313935681470138,
                "tf.reduce_any(input_tensor, axis)": 0.0015313935681470138,
                "tf.reduce_all(input_tensor, axis)": 0.0015313935681470138,
                "tf.reduce_max(input_tensor)": 0.0015313935681470138,
                "tf.reduce_max(input_tensor, axis)": 0.0015313935681470138,
                "tf.reduce_mean(input_tensor)": 0.0015313935681470138,
                "tf.reduce_mean(input_tensor, axis)": 0.0015313935681470138,
                "tf.reduce_min(input_tensor)": 0.0030627871362940277,
                "tf.reduce_min(input_tensor, axis)": 0.0015313935681470138,
                "tf.reduce_prod(input_tensor, axis)": 0.0015313935681470138,
                "tf.reduce_sum(input_tensor)": 0.0015313935681470138,
                "tf.reduce_sum(input_tensor, axis)": 0.0030627871362940277,
                "tf.repeat(input, repeats)": 0.0015313935681470138,
                "tf.repeat(input, repeats, axis)": 0.0015313935681470138,
                "tf.reshape(tensor, shape)": 0.004594180704441042,
                "tf.reverse(tensor, axis)": 0.0015313935681470138,
                "tf.roll(input, shift, axis)": 0.0015313935681470138,
                "tf.round(x)": 0.0015313935681470138,
                "tf.scatter_nd(indices, updates, shape)": 0.0015313935681470138,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0015313935681470138,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0015313935681470138,
                "tf.sequence_mask(lengths)": 0.0015313935681470138,
                "tf.sequence_mask(lengths, maxlen)": 0.0015313935681470138,
                "tf.shape(input)": 0.007656967840735069,
                "tf.sign(x)": 0.0015313935681470138,
                "tf.sort(values, axis)": 0.0015313935681470138,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0015313935681470138,
                "tf.sqrt(x)": 0.06584992343032159,
                "tf.square(x)": 0.07197549770290965,
                "tf.squeeze(input)": 0.0015313935681470138,
                "tf.squeeze(input, axis)": 0.0015313935681470138,
                "tf.stack(values, axis)": 0.0015313935681470138,
                "tf.subtract(x, y)": 0.0030627871362940277,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0015313935681470138,
                "tf.tensordot(a, b, axes)": 0.0015313935681470138,
                "tf.tile(input, multiples)": 0.0015313935681470138,
                "tf.transpose(a)": 0.0015313935681470138,
                "tf.transpose(a, perm)": 0.0015313935681470138,
                "tf.unique_with_counts(x)": 0.0015313935681470138,
                "tf.unstack(value, axis)": 0.0015313935681470138,
                "tf.where(condition)": 0.0015313935681470138,
                "tf.where(condition, x, y)": 0.0015313935681470138,
                "tf.zeros(shape)": 0.0015313935681470138,
                "tf.zeros_like(input)": 0.0015313935681470138,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0015313935681470138,
                "tf.sparse.add(a, b)": 0.0015313935681470138,
                "tf.sparse.concat(axis, sp_inputs)": 0.0015313935681470138,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0015313935681470138,
                "tf.sparse.from_dense(tensor)": 0.0015313935681470138,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0015313935681470138,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0015313935681470138,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0015313935681470138,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0015313935681470138,
                "tf.sparse.reset_shape(sp_input)": 0.0015313935681470138,
                "tf.sparse.reshape(sp_input, shape)": 0.0015313935681470138,
                "tf.sparse.retain(sp_input, to_retain)": 0.0015313935681470138,
                "tf.sparse.slice(sp_input, start, size)": 0.0015313935681470138,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0015313935681470138,
                "tf.sparse.to_dense(sp_input)": 0.0015313935681470138,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0015313935681470138,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0015313935681470138,
                "tf.sparse.transpose(sp_input)": 0.0015313935681470138,
                "tf.sparse.transpose(sp_input, perm)": 0.0015313935681470138,
                "IndexingAxis1Operation": 0.0015313935681470138,
                "IndexingOperation": 0.009188361408882083,
                "PairCreationOperation": 0.0015313935681470138,
                "SingletonTupleCreationOperation": 0.0015313935681470138,
                "SlicingAxis0BothOperation": 0.0015313935681470138,
                "SlicingAxis0LeftOperation": 0.0015313935681470138,
                "SlicingAxis0RightOperation": 0.0015313935681470138,
                "SlicingAxis1BothOperation": 0.0015313935681470138,
                "SlicingAxis1LeftOperation": 0.0015313935681470138,
                "SlicingAxis1RightOperation": 0.0015313935681470138,
                "TripleCreationOperation": 0.0015313935681470138,
                "PROVIDED_CONSTANT_WEIGHT": 0.0015313935681470138,
                "COMMON_CONSTANT_WEIGHT": 0.22970903522205208,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0015313935681470138,
                "INPUT_VARIABLE_WEIGHT": 0.16232771822358347,
                "AXIS_CONSTANT_WEIGHT": 0.07044410413476264,
                "SHAPE_CONSTANT_WEIGHT": 0.0015313935681470138,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0015313935681470138,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0015313935681470138,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0015313935681470138,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0015313935681470138,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0015313935681470138
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 9,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 3,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 9,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 7,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 4,
                "tf.square(x)": 4,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 7,
                "PairCreationOperation": 9,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 2,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 4,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_34",
        "description": "compute a weighted sum of tensors",
        "target_program": "tf.tensordot(in2, in1, 1)",
        "source": "https://stackoverflow.com/questions/49532371/compute-a-linear-combination-of-tensors-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[1, 2], [3, 4]],[[5, 6], [7, 8]],[[10, 20], [30, 40]]],[3, 5, 10],]",
            "outputs": "[[128, 236], [344, 452]]"
        },
        "completions": [
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 0)\n",
            "return tf.reduce_sum(in1 * tf.expand_dims(in2, -1), axis=0)",
            "result = tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=1)), axis=0)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(tf.cast(in1, tf.int32), tf.expand_dims(in2, axis=-1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)\n",
            "return tf.reduce_sum(in1 * tf.expand_dims(in2, axis=1), axis=0)",
            "tf.tensordot(in1, in2, axes=0)\n",
            "weighted_sum = tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\nreturn weighted_sum\n",
            "result = tf.tensordot(in1, in2, axes=0)\nresult = tf.reduce_sum(result, axis=0)\nreturn result\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=1)), axis=0)",
            "output = tf.reduce_sum(tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1)), axis=0)\n",
            "tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 0)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)",
            "weighted_sum = tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\nreturn weighted_sum\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "return tf.reduce_sum(in1 * tf.expand_dims(in2, axis=1), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "result = tf.reduce_sum(in1 * tf.expand_dims(in2, axis=-1), axis=0)\nreturn result\n",
            "return tf.reduce_sum(tf.multiply(tf.expand_dims(in1, axis=-1), tf.expand_dims(in2, axis=0)), axis=0)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 0)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(tf.tile(tf.expand_dims(in2, 1), [1, 2, 2]), in1), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(tf.cast(tf.unstack(in1, axis=0), tf.int32), tf.expand_dims(in2, axis=1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)"
        ],
        "tf_operators": {
            "tf.expand_dims": 48,
            "tf.reduce_sum": 49,
            "tf.multiply": 44,
            "tf.cast": 2,
            "tf.int32": 2,
            "tf.tensordot": 2,
            "tf.tile": 1,
            "tf.unstack": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                -1,
                0
            ],
            [
                0,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                1,
                2,
                2,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                0,
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 100,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 103,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 2,
            "tf_int64": 0,
            "tf_int32": 2
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0021413276231263384,
                "tf.add(x, y)": 0.0021413276231263384,
                "tf.add_n(inputs)": 0.0021413276231263384,
                "tf.argmax(input, axis)": 0.0021413276231263384,
                "tf.argmin(input, axis)": 0.0021413276231263384,
                "tf.argsort(values, axis, stable=True)": 0.0021413276231263384,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0021413276231263384,
                "tf.boolean_mask(tensor, mask)": 0.0021413276231263384,
                "tf.broadcast_to(input, shape)": 0.0021413276231263384,
                "tf.cast(x, dtype)": 0.006423982869379015,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0021413276231263384,
                "tf.concat(values, axis)": 0.0021413276231263384,
                "tf.constant(value)": 0.0021413276231263384,
                "tf.constant(value, dtype)": 0.0021413276231263384,
                "tf.divide(x, y)": 0.0021413276231263384,
                "tf.equal(x, y)": 0.0021413276231263384,
                "tf.exp(x)": 0.0021413276231263384,
                "tf.expand_dims(input, axis)": 0.10920770877944326,
                "tf.eye(num_rows)": 0.0021413276231263384,
                "tf.eye(num_rows, num_columns)": 0.0021413276231263384,
                "tf.eye(num_rows, dtype)": 0.0021413276231263384,
                "tf.fill(dims, value)": 0.0021413276231263384,
                "tf.gather(params, indices)": 0.0021413276231263384,
                "tf.gather(params, indices, axis, batch_dims)": 0.0021413276231263384,
                "tf.gather_nd(params, indices)": 0.0021413276231263384,
                "tf.gather_nd(params, indices, batch_dims)": 0.0021413276231263384,
                "tf.greater(x, y)": 0.0021413276231263384,
                "tf.greater_equal(x, y)": 0.0021413276231263384,
                "tf.math.bincount(arr)": 0.0021413276231263384,
                "tf.math.ceil(x)": 0.0021413276231263384,
                "tf.math.count_nonzero(input)": 0.0021413276231263384,
                "tf.math.count_nonzero(input, axis)": 0.0021413276231263384,
                "tf.math.cumsum(x, axis)": 0.0021413276231263384,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0021413276231263384,
                "tf.math.divide_no_nan(x, y)": 0.0021413276231263384,
                "tf.math.floor(x)": 0.0021413276231263384,
                "tf.math.log(x)": 0.0021413276231263384,
                "tf.math.logical_and(x, y)": 0.0021413276231263384,
                "tf.math.logical_not(x)": 0.0021413276231263384,
                "tf.math.logical_or(x, y)": 0.0021413276231263384,
                "tf.math.logical_xor(x, y)": 0.0021413276231263384,
                "tf.math.negative(x)": 0.0021413276231263384,
                "tf.math.reciprocal(x)": 0.0021413276231263384,
                "tf.math.reciprocal_no_nan(x)": 0.0021413276231263384,
                "tf.math.segment_max(data, segment_ids)": 0.0021413276231263384,
                "tf.math.segment_mean(data, segment_ids)": 0.0021413276231263384,
                "tf.math.segment_min(data, segment_ids)": 0.0021413276231263384,
                "tf.math.segment_prod(data, segment_ids)": 0.0021413276231263384,
                "tf.math.segment_sum(data, segment_ids)": 0.0021413276231263384,
                "tf.math.squared_difference(x, y)": 0.0021413276231263384,
                "tf.math.top_k(input, k)": 0.0021413276231263384,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0021413276231263384,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0021413276231263384,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0021413276231263384,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0021413276231263384,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0021413276231263384,
                "tf.matmul(a, b)": 0.0021413276231263384,
                "tf.maximum(x, y)": 0.0021413276231263384,
                "tf.minimum(x, y)": 0.0021413276231263384,
                "tf.multiply(x, y)": 0.09635974304068523,
                "tf.not_equal(x, y)": 0.0021413276231263384,
                "tf.one_hot(indices, depth)": 0.0021413276231263384,
                "tf.ones(shape)": 0.0021413276231263384,
                "tf.ones_like(input)": 0.0021413276231263384,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0021413276231263384,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0021413276231263384,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0021413276231263384,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0021413276231263384,
                "tf.range(start)": 0.0021413276231263384,
                "tf.range(start, limit, delta)": 0.0021413276231263384,
                "tf.reduce_any(input_tensor, axis)": 0.0021413276231263384,
                "tf.reduce_all(input_tensor, axis)": 0.0021413276231263384,
                "tf.reduce_max(input_tensor)": 0.0021413276231263384,
                "tf.reduce_max(input_tensor, axis)": 0.0021413276231263384,
                "tf.reduce_mean(input_tensor)": 0.0021413276231263384,
                "tf.reduce_mean(input_tensor, axis)": 0.0021413276231263384,
                "tf.reduce_min(input_tensor)": 0.0021413276231263384,
                "tf.reduce_min(input_tensor, axis)": 0.0021413276231263384,
                "tf.reduce_prod(input_tensor, axis)": 0.0021413276231263384,
                "tf.reduce_sum(input_tensor)": 0.0021413276231263384,
                "tf.reduce_sum(input_tensor, axis)": 0.01284796573875803,
                "tf.repeat(input, repeats)": 0.0021413276231263384,
                "tf.repeat(input, repeats, axis)": 0.0021413276231263384,
                "tf.reshape(tensor, shape)": 0.0021413276231263384,
                "tf.reverse(tensor, axis)": 0.0021413276231263384,
                "tf.roll(input, shift, axis)": 0.0021413276231263384,
                "tf.round(x)": 0.0021413276231263384,
                "tf.scatter_nd(indices, updates, shape)": 0.0021413276231263384,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0021413276231263384,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0021413276231263384,
                "tf.sequence_mask(lengths)": 0.0021413276231263384,
                "tf.sequence_mask(lengths, maxlen)": 0.0021413276231263384,
                "tf.shape(input)": 0.0021413276231263384,
                "tf.sign(x)": 0.0021413276231263384,
                "tf.sort(values, axis)": 0.0021413276231263384,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0021413276231263384,
                "tf.sqrt(x)": 0.0021413276231263384,
                "tf.square(x)": 0.0021413276231263384,
                "tf.squeeze(input)": 0.0021413276231263384,
                "tf.squeeze(input, axis)": 0.0021413276231263384,
                "tf.stack(values, axis)": 0.0021413276231263384,
                "tf.subtract(x, y)": 0.0021413276231263384,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0021413276231263384,
                "tf.tensordot(a, b, axes)": 0.006423982869379015,
                "tf.tile(input, multiples)": 0.004282655246252677,
                "tf.transpose(a)": 0.0021413276231263384,
                "tf.transpose(a, perm)": 0.0021413276231263384,
                "tf.unique_with_counts(x)": 0.0021413276231263384,
                "tf.unstack(value, axis)": 0.004282655246252677,
                "tf.where(condition)": 0.0021413276231263384,
                "tf.where(condition, x, y)": 0.0021413276231263384,
                "tf.zeros(shape)": 0.0021413276231263384,
                "tf.zeros_like(input)": 0.0021413276231263384,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0021413276231263384,
                "tf.sparse.add(a, b)": 0.0021413276231263384,
                "tf.sparse.concat(axis, sp_inputs)": 0.0021413276231263384,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0021413276231263384,
                "tf.sparse.from_dense(tensor)": 0.0021413276231263384,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0021413276231263384,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0021413276231263384,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0021413276231263384,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0021413276231263384,
                "tf.sparse.reset_shape(sp_input)": 0.0021413276231263384,
                "tf.sparse.reshape(sp_input, shape)": 0.0021413276231263384,
                "tf.sparse.retain(sp_input, to_retain)": 0.0021413276231263384,
                "tf.sparse.slice(sp_input, start, size)": 0.0021413276231263384,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0021413276231263384,
                "tf.sparse.to_dense(sp_input)": 0.0021413276231263384,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0021413276231263384,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0021413276231263384,
                "tf.sparse.transpose(sp_input)": 0.0021413276231263384,
                "tf.sparse.transpose(sp_input, perm)": 0.0021413276231263384,
                "IndexingAxis1Operation": 0.0021413276231263384,
                "IndexingOperation": 0.0021413276231263384,
                "PairCreationOperation": 0.0021413276231263384,
                "SingletonTupleCreationOperation": 0.0021413276231263384,
                "SlicingAxis0BothOperation": 0.0021413276231263384,
                "SlicingAxis0LeftOperation": 0.0021413276231263384,
                "SlicingAxis0RightOperation": 0.0021413276231263384,
                "SlicingAxis1BothOperation": 0.0021413276231263384,
                "SlicingAxis1LeftOperation": 0.0021413276231263384,
                "SlicingAxis1RightOperation": 0.0021413276231263384,
                "TripleCreationOperation": 0.0021413276231263384,
                "PROVIDED_CONSTANT_WEIGHT": 0.0021413276231263384,
                "COMMON_CONSTANT_WEIGHT": 0.22269807280513917,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0021413276231263384,
                "INPUT_VARIABLE_WEIGHT": 0.21627408993576017,
                "AXIS_CONSTANT_WEIGHT": 0.006423982869379015,
                "SHAPE_CONSTANT_WEIGHT": 0.0021413276231263384,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0021413276231263384,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.006423982869379015,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0021413276231263384,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0021413276231263384,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0021413276231263384
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 3,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 3,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 9,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 6,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 9,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 9,
                "PairCreationOperation": 9,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 2,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 7,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_35",
        "description": "linear interpolation between two tensors",
        "target_program": "tf.add(in2, tf.multiply(tf.expand_dims(in3, 1), tf.subtract(in1, in2)))",
        "source": "https://stackoverflow.com/questions/49643371/keras-compute-convex-combination-of-two-tensors",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]], [[10., 20.], [30., 40.], [50., 60.]]],[[[9.0, 8.0], [7.0, 6.0], [5.0, 4.0]], [[90., 80.], [70., 60.], [50., 40.]]],[0.1, 0.4, 0.8],]",
            "outputs": "[[[8.2, 7.4], [5.4, 5.2], [5.0, 5.6]],    [[82., 74.], [54., 52.], [50., 56.]]]"
        },
        "completions": [
            "return tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n",
            "return tf.add(tf.multiply(in1, 1-in3), tf.multiply(in2, in3))\n",
            "return tf.add(tf.multiply(in1, 1 - tf.expand_dims(in3, 1)), tf.multiply(in2, tf.expand_dims(in3, 1)))\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return tf.add(tf.multiply(in1, 1.0 - tf.expand_dims(in3, 1)), tf.multiply(in2, tf.expand_dims(in3, 1)))\n",
            "result = tf.add(tf.multiply(in1, (1.0 - in3)), tf.multiply(in2, in3))\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 + in3[:, :, None] * (in2 - in1)\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - tf.expand_dims(in3, -1)) + in2 * tf.expand_dims(in3, -1)\n",
            "return tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "result = tf.add(tf.multiply(1.0 - in3, in1), tf.multiply(in3, in2))\n",
            "result = in1 * (1 - in3) + in2 * in3\n",
            "return tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return (1 - in3) * in1 + in3 * in2\n",
            "return in1 + in3[:, None, None] * (in2 - in1)\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 + in3 * (in2 - in1)\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "result = tf.add(tf.multiply(in1, 1-in3), tf.multiply(in2, in3))\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "result = tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\nreturn result\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 + in3 * (in2 - in1)\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 + in3[:, tf.newaxis, tf.newaxis] * (in2 - in1)\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "result = in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1*in3 + in2*(1-in3)\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "result = tf.add(tf.multiply(in1, 1-in3), tf.multiply(in2, in3))\nreturn result\n"
        ],
        "tf_operators": {
            "tf.add": 11,
            "tf.multiply": 11,
            "tf.expand_dims": 3,
            "tf.newaxis": 1
        },
        "coverage_percentage": 75.0,
        "total_covered": 3,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                -1,
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 200,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 48,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0022471910112359553,
                "tf.add(x, y)": 0.02696629213483146,
                "tf.add_n(inputs)": 0.0022471910112359553,
                "tf.argmax(input, axis)": 0.0022471910112359553,
                "tf.argmin(input, axis)": 0.0022471910112359553,
                "tf.argsort(values, axis, stable=True)": 0.0022471910112359553,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0022471910112359553,
                "tf.boolean_mask(tensor, mask)": 0.0022471910112359553,
                "tf.broadcast_to(input, shape)": 0.0022471910112359553,
                "tf.cast(x, dtype)": 0.0022471910112359553,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0022471910112359553,
                "tf.concat(values, axis)": 0.0022471910112359553,
                "tf.constant(value)": 0.0022471910112359553,
                "tf.constant(value, dtype)": 0.0022471910112359553,
                "tf.divide(x, y)": 0.0022471910112359553,
                "tf.equal(x, y)": 0.0022471910112359553,
                "tf.exp(x)": 0.0022471910112359553,
                "tf.expand_dims(input, axis)": 0.015730337078651686,
                "tf.eye(num_rows)": 0.0022471910112359553,
                "tf.eye(num_rows, num_columns)": 0.0022471910112359553,
                "tf.eye(num_rows, dtype)": 0.0022471910112359553,
                "tf.fill(dims, value)": 0.0022471910112359553,
                "tf.gather(params, indices)": 0.0022471910112359553,
                "tf.gather(params, indices, axis, batch_dims)": 0.0022471910112359553,
                "tf.gather_nd(params, indices)": 0.0022471910112359553,
                "tf.gather_nd(params, indices, batch_dims)": 0.0022471910112359553,
                "tf.greater(x, y)": 0.0022471910112359553,
                "tf.greater_equal(x, y)": 0.0022471910112359553,
                "tf.math.bincount(arr)": 0.0022471910112359553,
                "tf.math.ceil(x)": 0.0022471910112359553,
                "tf.math.count_nonzero(input)": 0.0022471910112359553,
                "tf.math.count_nonzero(input, axis)": 0.0022471910112359553,
                "tf.math.cumsum(x, axis)": 0.0022471910112359553,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0022471910112359553,
                "tf.math.divide_no_nan(x, y)": 0.0022471910112359553,
                "tf.math.floor(x)": 0.0022471910112359553,
                "tf.math.log(x)": 0.0022471910112359553,
                "tf.math.logical_and(x, y)": 0.0022471910112359553,
                "tf.math.logical_not(x)": 0.0022471910112359553,
                "tf.math.logical_or(x, y)": 0.0022471910112359553,
                "tf.math.logical_xor(x, y)": 0.0022471910112359553,
                "tf.math.negative(x)": 0.0022471910112359553,
                "tf.math.reciprocal(x)": 0.0022471910112359553,
                "tf.math.reciprocal_no_nan(x)": 0.0022471910112359553,
                "tf.math.segment_max(data, segment_ids)": 0.0022471910112359553,
                "tf.math.segment_mean(data, segment_ids)": 0.0022471910112359553,
                "tf.math.segment_min(data, segment_ids)": 0.0022471910112359553,
                "tf.math.segment_prod(data, segment_ids)": 0.0022471910112359553,
                "tf.math.segment_sum(data, segment_ids)": 0.0022471910112359553,
                "tf.math.squared_difference(x, y)": 0.0022471910112359553,
                "tf.math.top_k(input, k)": 0.0022471910112359553,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0022471910112359553,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0022471910112359553,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0022471910112359553,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0022471910112359553,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0022471910112359553,
                "tf.matmul(a, b)": 0.0022471910112359553,
                "tf.maximum(x, y)": 0.0022471910112359553,
                "tf.minimum(x, y)": 0.0022471910112359553,
                "tf.multiply(x, y)": 0.051685393258426963,
                "tf.not_equal(x, y)": 0.0022471910112359553,
                "tf.one_hot(indices, depth)": 0.0022471910112359553,
                "tf.ones(shape)": 0.0022471910112359553,
                "tf.ones_like(input)": 0.0022471910112359553,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0022471910112359553,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0022471910112359553,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0022471910112359553,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0022471910112359553,
                "tf.range(start)": 0.0022471910112359553,
                "tf.range(start, limit, delta)": 0.0022471910112359553,
                "tf.reduce_any(input_tensor, axis)": 0.0022471910112359553,
                "tf.reduce_all(input_tensor, axis)": 0.0022471910112359553,
                "tf.reduce_max(input_tensor)": 0.0022471910112359553,
                "tf.reduce_max(input_tensor, axis)": 0.0022471910112359553,
                "tf.reduce_mean(input_tensor)": 0.0022471910112359553,
                "tf.reduce_mean(input_tensor, axis)": 0.0022471910112359553,
                "tf.reduce_min(input_tensor)": 0.0022471910112359553,
                "tf.reduce_min(input_tensor, axis)": 0.0022471910112359553,
                "tf.reduce_prod(input_tensor, axis)": 0.0022471910112359553,
                "tf.reduce_sum(input_tensor)": 0.0022471910112359553,
                "tf.reduce_sum(input_tensor, axis)": 0.0022471910112359553,
                "tf.repeat(input, repeats)": 0.0022471910112359553,
                "tf.repeat(input, repeats, axis)": 0.0022471910112359553,
                "tf.reshape(tensor, shape)": 0.0022471910112359553,
                "tf.reverse(tensor, axis)": 0.0022471910112359553,
                "tf.roll(input, shift, axis)": 0.0022471910112359553,
                "tf.round(x)": 0.0022471910112359553,
                "tf.scatter_nd(indices, updates, shape)": 0.0022471910112359553,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0022471910112359553,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0022471910112359553,
                "tf.sequence_mask(lengths)": 0.0022471910112359553,
                "tf.sequence_mask(lengths, maxlen)": 0.0022471910112359553,
                "tf.shape(input)": 0.0022471910112359553,
                "tf.sign(x)": 0.0022471910112359553,
                "tf.sort(values, axis)": 0.0022471910112359553,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0022471910112359553,
                "tf.sqrt(x)": 0.0022471910112359553,
                "tf.square(x)": 0.0022471910112359553,
                "tf.squeeze(input)": 0.0022471910112359553,
                "tf.squeeze(input, axis)": 0.0022471910112359553,
                "tf.stack(values, axis)": 0.0022471910112359553,
                "tf.subtract(x, y)": 0.0022471910112359553,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0022471910112359553,
                "tf.tensordot(a, b, axes)": 0.0022471910112359553,
                "tf.tile(input, multiples)": 0.0022471910112359553,
                "tf.transpose(a)": 0.0022471910112359553,
                "tf.transpose(a, perm)": 0.0022471910112359553,
                "tf.unique_with_counts(x)": 0.0022471910112359553,
                "tf.unstack(value, axis)": 0.0022471910112359553,
                "tf.where(condition)": 0.0022471910112359553,
                "tf.where(condition, x, y)": 0.0022471910112359553,
                "tf.zeros(shape)": 0.0022471910112359553,
                "tf.zeros_like(input)": 0.0022471910112359553,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0022471910112359553,
                "tf.sparse.add(a, b)": 0.0022471910112359553,
                "tf.sparse.concat(axis, sp_inputs)": 0.0022471910112359553,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0022471910112359553,
                "tf.sparse.from_dense(tensor)": 0.0022471910112359553,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0022471910112359553,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0022471910112359553,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0022471910112359553,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0022471910112359553,
                "tf.sparse.reset_shape(sp_input)": 0.0022471910112359553,
                "tf.sparse.reshape(sp_input, shape)": 0.0022471910112359553,
                "tf.sparse.retain(sp_input, to_retain)": 0.0022471910112359553,
                "tf.sparse.slice(sp_input, start, size)": 0.0022471910112359553,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0022471910112359553,
                "tf.sparse.to_dense(sp_input)": 0.0022471910112359553,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0022471910112359553,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0022471910112359553,
                "tf.sparse.transpose(sp_input)": 0.0022471910112359553,
                "tf.sparse.transpose(sp_input, perm)": 0.0022471910112359553,
                "IndexingAxis1Operation": 0.0022471910112359553,
                "IndexingOperation": 0.0022471910112359553,
                "PairCreationOperation": 0.0022471910112359553,
                "SingletonTupleCreationOperation": 0.0022471910112359553,
                "SlicingAxis0BothOperation": 0.0022471910112359553,
                "SlicingAxis0LeftOperation": 0.0022471910112359553,
                "SlicingAxis0RightOperation": 0.0022471910112359553,
                "SlicingAxis1BothOperation": 0.0022471910112359553,
                "SlicingAxis1LeftOperation": 0.0022471910112359553,
                "SlicingAxis1RightOperation": 0.0022471910112359553,
                "TripleCreationOperation": 0.008988764044943821,
                "PROVIDED_CONSTANT_WEIGHT": 0.0022471910112359553,
                "COMMON_CONSTANT_WEIGHT": 0.1101123595505618,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0022471910112359553,
                "INPUT_VARIABLE_WEIGHT": 0.451685393258427,
                "AXIS_CONSTANT_WEIGHT": 0.0022471910112359553,
                "SHAPE_CONSTANT_WEIGHT": 0.0022471910112359553,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0022471910112359553,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0022471910112359553,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0022471910112359553,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0022471910112359553,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0022471910112359553
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 5,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 9,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 6,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 4,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 9,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 9,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 9,
                "PairCreationOperation": 9,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 7,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 1,
                "AXIS_CONSTANT_WEIGHT": 9,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_36",
        "description": "divide each element by the column index",
        "target_program": "tf.cast(tf.divide(in1, tf.add(in1, tf.range(8))), tf.float32)",
        "source": "https://stackoverflow.com/questions/43306788/divide-elements-of-1-d-tensor-by-the-corrispondent-index",
        "constants": "[]",
        "examples": {
            "inputs": "[[1, 0, 1, 1, 0, 1, 0, 1],]",
            "outputs": "[1., 0., 0.333333, 0.25, 0., 0.166667, 0., 0.125]"
        },
        "completions": [
            "return tf.divide(in1, tf.cast(tf.range(1, tf.size(in1) + 1), tf.float32))\n",
            "def transform(in1):\n    col_indices = tf.cast(tf.range(tf.shape(in1)[0]), tf.float32) + 1\n    return tf.divide(tf.cast(in1, tf.float32), col_indices)\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n      ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[-1]+1), tf.float32))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0] + 1))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[-1] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))",
            "def transform(in1):\n    result = tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n    return result\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0] + 1))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, in1.shape[0]+1), tf.float32))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0] + 1))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0] + 1))\n",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, 1+tf.shape(in1)[0]))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n  ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.range(1, tf.size(in1)+1, dtype=tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0]+1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[-1] + 1), tf.float32))\n",
            "return tf.math.divide_no_nan(tf.cast(in1, tf.float32), tf.cast(tf.range(1, in1.shape[0] + 1), tf.float32))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0]+1), dtype=tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0]+1))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.cast(tf.range(1, 9), tf.float32))\n",
            "return tf.divide(in1, tf.range(tf.shape(in1)[0]) + 1.0)\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.size(in1)+1))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.size(in1)+1))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0]+1))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.size(in1) + 1))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.size(in1)+1))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, len(in1)+1))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0]+1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0]+1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.size(in1)+1))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.size(in1)+1), tf.float32))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.size(in1)+1), tf.float32))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.cast(tf.range(1, tf.shape(in1)[0]+1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.size(in1) + 1), tf.float32))\n"
        ],
        "tf_operators": {
            "tf.float32": 49,
            "tf.range": 50,
            "tf.cast": 47,
            "tf.divide": 49,
            "tf.size": 10,
            "tf.shape": 36,
            "tf.math.divide_no_nan": 1
        },
        "coverage_percentage": 80.0,
        "total_covered": 4,
        "total_in_target": 5,
        "parsed_constants": [
            [
                1,
                1
            ],
            [
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                -1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                -1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                1,
                0
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                -1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                9
            ],
            [
                0
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            -1,
            9
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 2,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 2,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 2,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 2,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 97,
            "shape": 0,
            "tf_bool": 0,
            "provided": 1,
            "common": 134,
            "shape_tuple": 0,
            "tf_float32": 53,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0016207455429497568,
                "tf.add(x, y)": 0.0016207455429497568,
                "tf.add_n(inputs)": 0.0016207455429497568,
                "tf.argmax(input, axis)": 0.0016207455429497568,
                "tf.argmin(input, axis)": 0.0016207455429497568,
                "tf.argsort(values, axis, stable=True)": 0.0016207455429497568,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0016207455429497568,
                "tf.boolean_mask(tensor, mask)": 0.0016207455429497568,
                "tf.broadcast_to(input, shape)": 0.0016207455429497568,
                "tf.cast(x, dtype)": 0.08427876823338736,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0016207455429497568,
                "tf.concat(values, axis)": 0.0016207455429497568,
                "tf.constant(value)": 0.0016207455429497568,
                "tf.constant(value, dtype)": 0.0016207455429497568,
                "tf.divide(x, y)": 0.08103727714748785,
                "tf.equal(x, y)": 0.0016207455429497568,
                "tf.exp(x)": 0.0016207455429497568,
                "tf.expand_dims(input, axis)": 0.0016207455429497568,
                "tf.eye(num_rows)": 0.0016207455429497568,
                "tf.eye(num_rows, num_columns)": 0.0016207455429497568,
                "tf.eye(num_rows, dtype)": 0.0016207455429497568,
                "tf.fill(dims, value)": 0.0016207455429497568,
                "tf.gather(params, indices)": 0.0016207455429497568,
                "tf.gather(params, indices, axis, batch_dims)": 0.0016207455429497568,
                "tf.gather_nd(params, indices)": 0.0016207455429497568,
                "tf.gather_nd(params, indices, batch_dims)": 0.0016207455429497568,
                "tf.greater(x, y)": 0.0016207455429497568,
                "tf.greater_equal(x, y)": 0.0016207455429497568,
                "tf.math.bincount(arr)": 0.0016207455429497568,
                "tf.math.ceil(x)": 0.0016207455429497568,
                "tf.math.count_nonzero(input)": 0.0016207455429497568,
                "tf.math.count_nonzero(input, axis)": 0.0016207455429497568,
                "tf.math.cumsum(x, axis)": 0.0016207455429497568,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0016207455429497568,
                "tf.math.divide_no_nan(x, y)": 0.0032414910858995136,
                "tf.math.floor(x)": 0.0016207455429497568,
                "tf.math.log(x)": 0.0016207455429497568,
                "tf.math.logical_and(x, y)": 0.0016207455429497568,
                "tf.math.logical_not(x)": 0.0016207455429497568,
                "tf.math.logical_or(x, y)": 0.0016207455429497568,
                "tf.math.logical_xor(x, y)": 0.0016207455429497568,
                "tf.math.negative(x)": 0.0016207455429497568,
                "tf.math.reciprocal(x)": 0.0016207455429497568,
                "tf.math.reciprocal_no_nan(x)": 0.0016207455429497568,
                "tf.math.segment_max(data, segment_ids)": 0.0016207455429497568,
                "tf.math.segment_mean(data, segment_ids)": 0.0016207455429497568,
                "tf.math.segment_min(data, segment_ids)": 0.0016207455429497568,
                "tf.math.segment_prod(data, segment_ids)": 0.0016207455429497568,
                "tf.math.segment_sum(data, segment_ids)": 0.0016207455429497568,
                "tf.math.squared_difference(x, y)": 0.0016207455429497568,
                "tf.math.top_k(input, k)": 0.0016207455429497568,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0016207455429497568,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0016207455429497568,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0016207455429497568,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0016207455429497568,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0016207455429497568,
                "tf.matmul(a, b)": 0.0016207455429497568,
                "tf.maximum(x, y)": 0.0016207455429497568,
                "tf.minimum(x, y)": 0.0016207455429497568,
                "tf.multiply(x, y)": 0.0016207455429497568,
                "tf.not_equal(x, y)": 0.0016207455429497568,
                "tf.one_hot(indices, depth)": 0.0016207455429497568,
                "tf.ones(shape)": 0.0016207455429497568,
                "tf.ones_like(input)": 0.0016207455429497568,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0016207455429497568,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0016207455429497568,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0016207455429497568,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0016207455429497568,
                "tf.range(start)": 0.004862236628849271,
                "tf.range(start, limit, delta)": 0.0016207455429497568,
                "tf.reduce_any(input_tensor, axis)": 0.0016207455429497568,
                "tf.reduce_all(input_tensor, axis)": 0.0016207455429497568,
                "tf.reduce_max(input_tensor)": 0.0016207455429497568,
                "tf.reduce_max(input_tensor, axis)": 0.0016207455429497568,
                "tf.reduce_mean(input_tensor)": 0.0016207455429497568,
                "tf.reduce_mean(input_tensor, axis)": 0.0016207455429497568,
                "tf.reduce_min(input_tensor)": 0.0016207455429497568,
                "tf.reduce_min(input_tensor, axis)": 0.0016207455429497568,
                "tf.reduce_prod(input_tensor, axis)": 0.0016207455429497568,
                "tf.reduce_sum(input_tensor)": 0.0016207455429497568,
                "tf.reduce_sum(input_tensor, axis)": 0.0016207455429497568,
                "tf.repeat(input, repeats)": 0.0016207455429497568,
                "tf.repeat(input, repeats, axis)": 0.0016207455429497568,
                "tf.reshape(tensor, shape)": 0.0016207455429497568,
                "tf.reverse(tensor, axis)": 0.0016207455429497568,
                "tf.roll(input, shift, axis)": 0.0016207455429497568,
                "tf.round(x)": 0.0016207455429497568,
                "tf.scatter_nd(indices, updates, shape)": 0.0016207455429497568,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0016207455429497568,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0016207455429497568,
                "tf.sequence_mask(lengths)": 0.0016207455429497568,
                "tf.sequence_mask(lengths, maxlen)": 0.0016207455429497568,
                "tf.shape(input)": 0.059967585089141004,
                "tf.sign(x)": 0.0016207455429497568,
                "tf.sort(values, axis)": 0.0016207455429497568,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0016207455429497568,
                "tf.sqrt(x)": 0.0016207455429497568,
                "tf.square(x)": 0.0016207455429497568,
                "tf.squeeze(input)": 0.0016207455429497568,
                "tf.squeeze(input, axis)": 0.0016207455429497568,
                "tf.stack(values, axis)": 0.0016207455429497568,
                "tf.subtract(x, y)": 0.0016207455429497568,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0016207455429497568,
                "tf.tensordot(a, b, axes)": 0.0016207455429497568,
                "tf.tile(input, multiples)": 0.0016207455429497568,
                "tf.transpose(a)": 0.0016207455429497568,
                "tf.transpose(a, perm)": 0.0016207455429497568,
                "tf.unique_with_counts(x)": 0.0016207455429497568,
                "tf.unstack(value, axis)": 0.0016207455429497568,
                "tf.where(condition)": 0.0016207455429497568,
                "tf.where(condition, x, y)": 0.0016207455429497568,
                "tf.zeros(shape)": 0.0016207455429497568,
                "tf.zeros_like(input)": 0.0016207455429497568,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0016207455429497568,
                "tf.sparse.add(a, b)": 0.0016207455429497568,
                "tf.sparse.concat(axis, sp_inputs)": 0.0016207455429497568,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0016207455429497568,
                "tf.sparse.from_dense(tensor)": 0.0016207455429497568,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0016207455429497568,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0016207455429497568,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0016207455429497568,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0016207455429497568,
                "tf.sparse.reset_shape(sp_input)": 0.0016207455429497568,
                "tf.sparse.reshape(sp_input, shape)": 0.0016207455429497568,
                "tf.sparse.retain(sp_input, to_retain)": 0.0016207455429497568,
                "tf.sparse.slice(sp_input, start, size)": 0.0016207455429497568,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0016207455429497568,
                "tf.sparse.to_dense(sp_input)": 0.0016207455429497568,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0016207455429497568,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0016207455429497568,
                "tf.sparse.transpose(sp_input)": 0.0016207455429497568,
                "tf.sparse.transpose(sp_input, perm)": 0.0016207455429497568,
                "IndexingAxis1Operation": 0.0016207455429497568,
                "IndexingOperation": 0.06320907617504051,
                "PairCreationOperation": 0.0016207455429497568,
                "SingletonTupleCreationOperation": 0.0016207455429497568,
                "SlicingAxis0BothOperation": 0.0016207455429497568,
                "SlicingAxis0LeftOperation": 0.0016207455429497568,
                "SlicingAxis0RightOperation": 0.0016207455429497568,
                "SlicingAxis1BothOperation": 0.0016207455429497568,
                "SlicingAxis1LeftOperation": 0.0016207455429497568,
                "SlicingAxis1RightOperation": 0.0016207455429497568,
                "TripleCreationOperation": 0.0016207455429497568,
                "PROVIDED_CONSTANT_WEIGHT": 0.0032414910858995136,
                "COMMON_CONSTANT_WEIGHT": 0.2188006482982172,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0016207455429497568,
                "INPUT_VARIABLE_WEIGHT": 0.15883306320907617,
                "AXIS_CONSTANT_WEIGHT": 0.0016207455429497568,
                "SHAPE_CONSTANT_WEIGHT": 0.0016207455429497568,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0016207455429497568,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0016207455429497568,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.08752025931928688,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0016207455429497568,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0016207455429497568
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 4,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 4,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 9,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 4,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 4,
                "PairCreationOperation": 9,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 2,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 9,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 4,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_37",
        "description": "dot product a vector with last dimension of a tensor",
        "target_program": "tf.tensordot(in1, in2, 1)",
        "source": "https://stackoverflow.com/questions/49206051/multiply-4-d-tensor-with-1-d-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]],  [[1.2, 3.4, 5.6], [7.8, 9.8, 7.6]]]],[0.5, 1.0, 2.0],]",
            "outputs": "[[[8.5, 19.0], [15.2, 28.9]]]"
        },
        "completions": [
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-2)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-2)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=([-1], [0]))\n",
            "return tf.tensordot(in1, in2, axes=[[-1], [0]])\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=(-1, 0))",
            "return tf.tensordot(in1, in2, axes=([3], [0]))",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-2)",
            "return tf.tensordot(in1, in2, axes=[[-1], [0]])\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=(-1, 0))\n",
            "result = tf.tensordot(in1, in2, axes=[[3], [0]])\nreturn result\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "result = tf.tensordot(in1, in2, axes=(-1, 0))\nreturn result\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=-2)\n",
            "return tf.tensordot(in1, in2, axes=(-1, 0))",
            "return tf.tensordot(in1, in2, axes=[[3], [0]])",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-1)",
            "return tf.tensordot(in1, in2, axes=[[-1], [0]])\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=[[3], [0]])\n",
            "return tf.tensordot(in1, in2, axes=(-1, 0))\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=(-1,0))\n",
            "return tf.tensordot(in1, in2, axes=(-1, 0))\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=-1)\n",
            "return tf.tensordot(in1, in2, axes=[-1, 0])\n",
            "return tf.tensordot(in1, in2, axes=[[-1], [0]])\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-1)\n",
            "return tf.tensordot(in1, in2, axes=[[-1], [0]])\n",
            "return tf.tensordot(in1, in2, axes=(-1, 0))\n",
            "return tf.tensordot(in1, in2, axes=(-1, 0))",
            "return tf.tensordot(in1, in2, axes=[-1, 0])\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.reshape(in2, [1, 1, -1])), axis=-1)\n",
            "return tf.reduce_sum(in1 * in2, axis=-1)\n",
            "result = tf.tensordot(in1, in2, axes=1)\nreturn result\n",
            "return tf.tensordot(in1, in2, axes=[[-1], [0]])\n",
            "return tf.tensordot(in1, in2, axes=(3, 0))\n",
            "return tf.tensordot(in1, in2, axes=[-1, 0])\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=[[-1], [0]])",
            "return tf.tensordot(in1, in2, axes=(-1, 0))\n",
            "return tf.tensordot(in1, in2, axes=[[3], [0]])\n",
            "return tf.tensordot(in1, in2, axes=([-1], [0]))\n"
        ],
        "tf_operators": {
            "tf.expand_dims": 7,
            "tf.reduce_sum": 9,
            "tf.multiply": 8,
            "tf.tensordot": 41,
            "tf.reshape": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                -1,
                -2
            ],
            [
                -1,
                -2
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                3,
                0
            ],
            [
                -1,
                -2
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                3,
                0
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                -1,
                -2
            ],
            [
                -1,
                0
            ],
            [
                3,
                0
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                3,
                0
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                -1
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                1,
                -1,
                -1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                3,
                0
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                3,
                0
            ],
            [
                -1,
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            3,
            -2,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 100,
            "shape": 0,
            "tf_bool": 0,
            "provided": 4,
            "common": 67,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 5,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0024875621890547263,
                "tf.add(x, y)": 0.0024875621890547263,
                "tf.add_n(inputs)": 0.0024875621890547263,
                "tf.argmax(input, axis)": 0.0024875621890547263,
                "tf.argmin(input, axis)": 0.0024875621890547263,
                "tf.argsort(values, axis, stable=True)": 0.0024875621890547263,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0024875621890547263,
                "tf.boolean_mask(tensor, mask)": 0.0024875621890547263,
                "tf.broadcast_to(input, shape)": 0.0024875621890547263,
                "tf.cast(x, dtype)": 0.0024875621890547263,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0024875621890547263,
                "tf.concat(values, axis)": 0.0024875621890547263,
                "tf.constant(value)": 0.0024875621890547263,
                "tf.constant(value, dtype)": 0.0024875621890547263,
                "tf.divide(x, y)": 0.0024875621890547263,
                "tf.equal(x, y)": 0.0024875621890547263,
                "tf.exp(x)": 0.0024875621890547263,
                "tf.expand_dims(input, axis)": 0.01990049751243781,
                "tf.eye(num_rows)": 0.0024875621890547263,
                "tf.eye(num_rows, num_columns)": 0.0024875621890547263,
                "tf.eye(num_rows, dtype)": 0.0024875621890547263,
                "tf.fill(dims, value)": 0.0024875621890547263,
                "tf.gather(params, indices)": 0.0024875621890547263,
                "tf.gather(params, indices, axis, batch_dims)": 0.0024875621890547263,
                "tf.gather_nd(params, indices)": 0.0024875621890547263,
                "tf.gather_nd(params, indices, batch_dims)": 0.0024875621890547263,
                "tf.greater(x, y)": 0.0024875621890547263,
                "tf.greater_equal(x, y)": 0.0024875621890547263,
                "tf.math.bincount(arr)": 0.0024875621890547263,
                "tf.math.ceil(x)": 0.0024875621890547263,
                "tf.math.count_nonzero(input)": 0.0024875621890547263,
                "tf.math.count_nonzero(input, axis)": 0.0024875621890547263,
                "tf.math.cumsum(x, axis)": 0.0024875621890547263,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0024875621890547263,
                "tf.math.divide_no_nan(x, y)": 0.0024875621890547263,
                "tf.math.floor(x)": 0.0024875621890547263,
                "tf.math.log(x)": 0.0024875621890547263,
                "tf.math.logical_and(x, y)": 0.0024875621890547263,
                "tf.math.logical_not(x)": 0.0024875621890547263,
                "tf.math.logical_or(x, y)": 0.0024875621890547263,
                "tf.math.logical_xor(x, y)": 0.0024875621890547263,
                "tf.math.negative(x)": 0.0024875621890547263,
                "tf.math.reciprocal(x)": 0.0024875621890547263,
                "tf.math.reciprocal_no_nan(x)": 0.0024875621890547263,
                "tf.math.segment_max(data, segment_ids)": 0.0024875621890547263,
                "tf.math.segment_mean(data, segment_ids)": 0.0024875621890547263,
                "tf.math.segment_min(data, segment_ids)": 0.0024875621890547263,
                "tf.math.segment_prod(data, segment_ids)": 0.0024875621890547263,
                "tf.math.segment_sum(data, segment_ids)": 0.0024875621890547263,
                "tf.math.squared_difference(x, y)": 0.0024875621890547263,
                "tf.math.top_k(input, k)": 0.0024875621890547263,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0024875621890547263,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0024875621890547263,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0024875621890547263,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0024875621890547263,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0024875621890547263,
                "tf.matmul(a, b)": 0.0024875621890547263,
                "tf.maximum(x, y)": 0.0024875621890547263,
                "tf.minimum(x, y)": 0.0024875621890547263,
                "tf.multiply(x, y)": 0.022388059701492536,
                "tf.not_equal(x, y)": 0.0024875621890547263,
                "tf.one_hot(indices, depth)": 0.0024875621890547263,
                "tf.ones(shape)": 0.0024875621890547263,
                "tf.ones_like(input)": 0.0024875621890547263,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0024875621890547263,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0024875621890547263,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0024875621890547263,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0024875621890547263,
                "tf.range(start)": 0.0024875621890547263,
                "tf.range(start, limit, delta)": 0.0024875621890547263,
                "tf.reduce_any(input_tensor, axis)": 0.0024875621890547263,
                "tf.reduce_all(input_tensor, axis)": 0.0024875621890547263,
                "tf.reduce_max(input_tensor)": 0.0024875621890547263,
                "tf.reduce_max(input_tensor, axis)": 0.0024875621890547263,
                "tf.reduce_mean(input_tensor)": 0.0024875621890547263,
                "tf.reduce_mean(input_tensor, axis)": 0.0024875621890547263,
                "tf.reduce_min(input_tensor)": 0.0024875621890547263,
                "tf.reduce_min(input_tensor, axis)": 0.0024875621890547263,
                "tf.reduce_prod(input_tensor, axis)": 0.0024875621890547263,
                "tf.reduce_sum(input_tensor)": 0.0024875621890547263,
                "tf.reduce_sum(input_tensor, axis)": 0.0024875621890547263,
                "tf.repeat(input, repeats)": 0.0024875621890547263,
                "tf.repeat(input, repeats, axis)": 0.0024875621890547263,
                "tf.reshape(tensor, shape)": 0.004975124378109453,
                "tf.reverse(tensor, axis)": 0.0024875621890547263,
                "tf.roll(input, shift, axis)": 0.0024875621890547263,
                "tf.round(x)": 0.0024875621890547263,
                "tf.scatter_nd(indices, updates, shape)": 0.0024875621890547263,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0024875621890547263,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0024875621890547263,
                "tf.sequence_mask(lengths)": 0.0024875621890547263,
                "tf.sequence_mask(lengths, maxlen)": 0.0024875621890547263,
                "tf.shape(input)": 0.0024875621890547263,
                "tf.sign(x)": 0.0024875621890547263,
                "tf.sort(values, axis)": 0.0024875621890547263,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0024875621890547263,
                "tf.sqrt(x)": 0.0024875621890547263,
                "tf.square(x)": 0.0024875621890547263,
                "tf.squeeze(input)": 0.0024875621890547263,
                "tf.squeeze(input, axis)": 0.0024875621890547263,
                "tf.stack(values, axis)": 0.0024875621890547263,
                "tf.subtract(x, y)": 0.0024875621890547263,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0024875621890547263,
                "tf.tensordot(a, b, axes)": 0.1044776119402985,
                "tf.tile(input, multiples)": 0.0024875621890547263,
                "tf.transpose(a)": 0.0024875621890547263,
                "tf.transpose(a, perm)": 0.0024875621890547263,
                "tf.unique_with_counts(x)": 0.0024875621890547263,
                "tf.unstack(value, axis)": 0.0024875621890547263,
                "tf.where(condition)": 0.0024875621890547263,
                "tf.where(condition, x, y)": 0.0024875621890547263,
                "tf.zeros(shape)": 0.0024875621890547263,
                "tf.zeros_like(input)": 0.0024875621890547263,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0024875621890547263,
                "tf.sparse.add(a, b)": 0.0024875621890547263,
                "tf.sparse.concat(axis, sp_inputs)": 0.0024875621890547263,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0024875621890547263,
                "tf.sparse.from_dense(tensor)": 0.0024875621890547263,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0024875621890547263,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0024875621890547263,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0024875621890547263,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0024875621890547263,
                "tf.sparse.reset_shape(sp_input)": 0.0024875621890547263,
                "tf.sparse.reshape(sp_input, shape)": 0.0024875621890547263,
                "tf.sparse.retain(sp_input, to_retain)": 0.0024875621890547263,
                "tf.sparse.slice(sp_input, start, size)": 0.0024875621890547263,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0024875621890547263,
                "tf.sparse.to_dense(sp_input)": 0.0024875621890547263,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0024875621890547263,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0024875621890547263,
                "tf.sparse.transpose(sp_input)": 0.0024875621890547263,
                "tf.sparse.transpose(sp_input, perm)": 0.0024875621890547263,
                "IndexingAxis1Operation": 0.0024875621890547263,
                "IndexingOperation": 0.0024875621890547263,
                "PairCreationOperation": 0.03731343283582089,
                "SingletonTupleCreationOperation": 0.0024875621890547263,
                "SlicingAxis0BothOperation": 0.0024875621890547263,
                "SlicingAxis0LeftOperation": 0.0024875621890547263,
                "SlicingAxis0RightOperation": 0.0024875621890547263,
                "SlicingAxis1BothOperation": 0.0024875621890547263,
                "SlicingAxis1LeftOperation": 0.0024875621890547263,
                "SlicingAxis1RightOperation": 0.0024875621890547263,
                "TripleCreationOperation": 0.0024875621890547263,
                "PROVIDED_CONSTANT_WEIGHT": 0.012437810945273632,
                "COMMON_CONSTANT_WEIGHT": 0.1691542288557214,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0024875621890547263,
                "INPUT_VARIABLE_WEIGHT": 0.2512437810945274,
                "AXIS_CONSTANT_WEIGHT": 0.014925373134328358,
                "SHAPE_CONSTANT_WEIGHT": 0.0024875621890547263,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0024875621890547263,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0024875621890547263,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0024875621890547263,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0024875621890547263,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0024875621890547263
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 9,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 6,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 5,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 9,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 9,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 3,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 9,
                "PairCreationOperation": 5,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 6,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 6,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_38",
        "description": "compute the product of marked elements",
        "target_program": "tf.reduce_prod(tf.maximum(tf.reduce_max(in2), tf.multiply(in1, in2)), axis=1)",
        "source": "https://stackoverflow.com/questions/49511529/tensorflow-compute-multiplication-by-binary-matrix",
        "constants": "[]",
        "examples": {
            "inputs": "[[9, 2, 5, 3, 7, 4],[[0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1]],]",
            "outputs": "[35, 9, 120]"
        },
        "completions": [
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "result = tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\nreturn result\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, in2), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.cast(in2, tf.float32)), axis=1)",
            "marked_elements = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\nproduct = tf.reduce_prod(marked_elements, axis=1)\nreturn product\n",
            "marked_indices = tf.where(in2)\nmarked_values = tf.gather_nd(in1, marked_indices)\nresult = tf.reduce_prod(marked_values, axis=1)\nreturn result\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.math.unsorted_segment_prod(in1, tf.reduce_sum(in2, axis=1), 3)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n",
            "return tf.reduce_sum(tf.math.unsorted_segment_prod(in1, tf.squeeze(in2, axis=0), tf.reduce_max(in2)+1), axis=1)\n",
            "element_wise_product = tf.math.unsorted_segment_prod(in1, tf.boolean_mask(in2, tf.cast(in2, tf.bool)), tf.reduce_sum(in2, axis=1))\nreturn element_wise_product\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n  ",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.math.unsorted_segment_prod(in1, tf.argmax(in2, axis=1), tf.constant(2))\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    marked_elements = tf.constant(in1)\n    mask = tf.constant(in2)\n    \n    marked_indices = tf.where(tf.equal(mask, 1))\n    marked_values = tf.gather_nd(marked_elements, marked_indices)\n    \n    product = tf.reduce_prod(marked_values, axis=1)\n    \n    return product.numpy()\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "marked_elements = tf.where(in2)\nproducts = tf.reduce_prod(tf.gather(in1, marked_elements), axis=1)\nreturn products\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)",
            "return tf.reduce_sum(tf.math.unsorted_segment_prod(in1, tf.cast(tf.where(in2)[:, 1], tf.int32), tf.reduce_max(in2) + 1), axis=1)",
            "marked_indices = tf.where(in2)\nmarked_elements = tf.gather_nd(in1, marked_indices)\nproduct = tf.reduce_prod(marked_elements, axis=1)\nreturn product\n",
            "return tf.reduce_prod(tf.math.logical_and(tf.cast(in1, tf.bool), in2), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "marked_idx = tf.cast(tf.where(in2), tf.int32)\nmarked_values = tf.gather_nd(in1, marked_idx)\nresult = tf.reduce_prod(marked_values, axis=1)\nreturn result\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n",
            "return tf.math.unsorted_segment_prod(in1, tf.argmax(in2, axis=1), 3)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.math.unsorted_segment_prod(in1, tf.argmax(in2, axis=1), tf.reduce_max(in2) + 1)\n",
            "mask = tf.constant([[0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1]])\nmarked_elements = tf.boolean_mask(in1, mask)\nresult = tf.reduce_prod(marked_elements, axis=1)\nreturn result\n",
            "return tf.reduce_prod(tf.where(in2, in1, tf.ones_like(in1)), axis=1)"
        ],
        "tf_operators": {
            "tf.boolean_mask": 36,
            "tf.cast": 38,
            "tf.reduce_prod": 42,
            "tf.bool": 35,
            "tf.float32": 1,
            "tf.reduce_sum": 5,
            "tf.multiply": 1,
            "tf.where": 7,
            "tf.gather_nd": 4,
            "tf.math.unsorted_segment_prod": 7,
            "tf.squeeze": 1,
            "tf.reduce_max": 3,
            "tf.argmax": 3,
            "tf.constant": 3,
            "tf.equal": 1,
            "tf.gather": 1,
            "tf.int32": 2,
            "tf.math.logical_and": 1,
            "tf.ones_like": 1
        },
        "coverage_percentage": 75.0,
        "total_covered": 3,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                3
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                2
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                3
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                0,
                1,
                0,
                1,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                0,
                1,
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 19,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 105,
            "shape": 2,
            "tf_bool": 35,
            "provided": 0,
            "common": 82,
            "shape_tuple": 0,
            "tf_float32": 1,
            "axis": 1,
            "tf_int64": 0,
            "tf_int32": 2
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0018726591760299626,
                "tf.add(x, y)": 0.0018726591760299626,
                "tf.add_n(inputs)": 0.0018726591760299626,
                "tf.argmax(input, axis)": 0.00749063670411985,
                "tf.argmin(input, axis)": 0.0018726591760299626,
                "tf.argsort(values, axis, stable=True)": 0.0018726591760299626,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0018726591760299626,
                "tf.boolean_mask(tensor, mask)": 0.06928838951310862,
                "tf.broadcast_to(input, shape)": 0.0018726591760299626,
                "tf.cast(x, dtype)": 0.07303370786516854,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0018726591760299626,
                "tf.concat(values, axis)": 0.0018726591760299626,
                "tf.constant(value)": 0.009363295880149813,
                "tf.constant(value, dtype)": 0.0018726591760299626,
                "tf.divide(x, y)": 0.0018726591760299626,
                "tf.equal(x, y)": 0.003745318352059925,
                "tf.exp(x)": 0.0018726591760299626,
                "tf.expand_dims(input, axis)": 0.0018726591760299626,
                "tf.eye(num_rows)": 0.0018726591760299626,
                "tf.eye(num_rows, num_columns)": 0.0018726591760299626,
                "tf.eye(num_rows, dtype)": 0.0018726591760299626,
                "tf.fill(dims, value)": 0.0018726591760299626,
                "tf.gather(params, indices)": 0.003745318352059925,
                "tf.gather(params, indices, axis, batch_dims)": 0.0018726591760299626,
                "tf.gather_nd(params, indices)": 0.009363295880149813,
                "tf.gather_nd(params, indices, batch_dims)": 0.0018726591760299626,
                "tf.greater(x, y)": 0.0018726591760299626,
                "tf.greater_equal(x, y)": 0.0018726591760299626,
                "tf.math.bincount(arr)": 0.0018726591760299626,
                "tf.math.ceil(x)": 0.0018726591760299626,
                "tf.math.count_nonzero(input)": 0.0018726591760299626,
                "tf.math.count_nonzero(input, axis)": 0.0018726591760299626,
                "tf.math.cumsum(x, axis)": 0.0018726591760299626,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0018726591760299626,
                "tf.math.divide_no_nan(x, y)": 0.0018726591760299626,
                "tf.math.floor(x)": 0.0018726591760299626,
                "tf.math.log(x)": 0.0018726591760299626,
                "tf.math.logical_and(x, y)": 0.003745318352059925,
                "tf.math.logical_not(x)": 0.0018726591760299626,
                "tf.math.logical_or(x, y)": 0.0018726591760299626,
                "tf.math.logical_xor(x, y)": 0.0018726591760299626,
                "tf.math.negative(x)": 0.0018726591760299626,
                "tf.math.reciprocal(x)": 0.0018726591760299626,
                "tf.math.reciprocal_no_nan(x)": 0.0018726591760299626,
                "tf.math.segment_max(data, segment_ids)": 0.0018726591760299626,
                "tf.math.segment_mean(data, segment_ids)": 0.0018726591760299626,
                "tf.math.segment_min(data, segment_ids)": 0.0018726591760299626,
                "tf.math.segment_prod(data, segment_ids)": 0.0018726591760299626,
                "tf.math.segment_sum(data, segment_ids)": 0.0018726591760299626,
                "tf.math.squared_difference(x, y)": 0.0018726591760299626,
                "tf.math.top_k(input, k)": 0.0018726591760299626,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0018726591760299626,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0018726591760299626,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0018726591760299626,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0149812734082397,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0018726591760299626,
                "tf.matmul(a, b)": 0.0018726591760299626,
                "tf.maximum(x, y)": 0.0018726591760299626,
                "tf.minimum(x, y)": 0.0018726591760299626,
                "tf.multiply(x, y)": 0.003745318352059925,
                "tf.not_equal(x, y)": 0.0018726591760299626,
                "tf.one_hot(indices, depth)": 0.0018726591760299626,
                "tf.ones(shape)": 0.0018726591760299626,
                "tf.ones_like(input)": 0.003745318352059925,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0018726591760299626,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0018726591760299626,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0018726591760299626,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0018726591760299626,
                "tf.range(start)": 0.0018726591760299626,
                "tf.range(start, limit, delta)": 0.0018726591760299626,
                "tf.reduce_any(input_tensor, axis)": 0.0018726591760299626,
                "tf.reduce_all(input_tensor, axis)": 0.0018726591760299626,
                "tf.reduce_max(input_tensor)": 0.00749063670411985,
                "tf.reduce_max(input_tensor, axis)": 0.0018726591760299626,
                "tf.reduce_mean(input_tensor)": 0.0018726591760299626,
                "tf.reduce_mean(input_tensor, axis)": 0.0018726591760299626,
                "tf.reduce_min(input_tensor)": 0.0018726591760299626,
                "tf.reduce_min(input_tensor, axis)": 0.0018726591760299626,
                "tf.reduce_prod(input_tensor, axis)": 0.08052434456928839,
                "tf.reduce_sum(input_tensor)": 0.0018726591760299626,
                "tf.reduce_sum(input_tensor, axis)": 0.0018726591760299626,
                "tf.repeat(input, repeats)": 0.0018726591760299626,
                "tf.repeat(input, repeats, axis)": 0.0018726591760299626,
                "tf.reshape(tensor, shape)": 0.0018726591760299626,
                "tf.reverse(tensor, axis)": 0.0018726591760299626,
                "tf.roll(input, shift, axis)": 0.0018726591760299626,
                "tf.round(x)": 0.0018726591760299626,
                "tf.scatter_nd(indices, updates, shape)": 0.0018726591760299626,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0018726591760299626,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0018726591760299626,
                "tf.sequence_mask(lengths)": 0.0018726591760299626,
                "tf.sequence_mask(lengths, maxlen)": 0.0018726591760299626,
                "tf.shape(input)": 0.0018726591760299626,
                "tf.sign(x)": 0.0018726591760299626,
                "tf.sort(values, axis)": 0.0018726591760299626,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0018726591760299626,
                "tf.sqrt(x)": 0.0018726591760299626,
                "tf.square(x)": 0.0018726591760299626,
                "tf.squeeze(input)": 0.0018726591760299626,
                "tf.squeeze(input, axis)": 0.0018726591760299626,
                "tf.stack(values, axis)": 0.0018726591760299626,
                "tf.subtract(x, y)": 0.0018726591760299626,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0018726591760299626,
                "tf.tensordot(a, b, axes)": 0.0018726591760299626,
                "tf.tile(input, multiples)": 0.0018726591760299626,
                "tf.transpose(a)": 0.0018726591760299626,
                "tf.transpose(a, perm)": 0.0018726591760299626,
                "tf.unique_with_counts(x)": 0.0018726591760299626,
                "tf.unstack(value, axis)": 0.0018726591760299626,
                "tf.where(condition)": 0.013108614232209739,
                "tf.where(condition, x, y)": 0.003745318352059925,
                "tf.zeros(shape)": 0.0018726591760299626,
                "tf.zeros_like(input)": 0.0018726591760299626,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0018726591760299626,
                "tf.sparse.add(a, b)": 0.0018726591760299626,
                "tf.sparse.concat(axis, sp_inputs)": 0.0018726591760299626,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0018726591760299626,
                "tf.sparse.from_dense(tensor)": 0.0018726591760299626,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0018726591760299626,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0018726591760299626,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0018726591760299626,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0018726591760299626,
                "tf.sparse.reset_shape(sp_input)": 0.0018726591760299626,
                "tf.sparse.reshape(sp_input, shape)": 0.0018726591760299626,
                "tf.sparse.retain(sp_input, to_retain)": 0.0018726591760299626,
                "tf.sparse.slice(sp_input, start, size)": 0.0018726591760299626,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0018726591760299626,
                "tf.sparse.to_dense(sp_input)": 0.0018726591760299626,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0018726591760299626,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0018726591760299626,
                "tf.sparse.transpose(sp_input)": 0.0018726591760299626,
                "tf.sparse.transpose(sp_input, perm)": 0.0018726591760299626,
                "IndexingAxis1Operation": 0.003745318352059925,
                "IndexingOperation": 0.0018726591760299626,
                "PairCreationOperation": 0.003745318352059925,
                "SingletonTupleCreationOperation": 0.0018726591760299626,
                "SlicingAxis0BothOperation": 0.0018726591760299626,
                "SlicingAxis0LeftOperation": 0.0018726591760299626,
                "SlicingAxis0RightOperation": 0.0018726591760299626,
                "SlicingAxis1BothOperation": 0.0018726591760299626,
                "SlicingAxis1LeftOperation": 0.0018726591760299626,
                "SlicingAxis1RightOperation": 0.0018726591760299626,
                "TripleCreationOperation": 0.0018726591760299626,
                "PROVIDED_CONSTANT_WEIGHT": 0.0018726591760299626,
                "COMMON_CONSTANT_WEIGHT": 0.15543071161048688,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0018726591760299626,
                "INPUT_VARIABLE_WEIGHT": 0.19850187265917604,
                "AXIS_CONSTANT_WEIGHT": 0.003745318352059925,
                "SHAPE_CONSTANT_WEIGHT": 0.0056179775280898875,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0018726591760299626,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0056179775280898875,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.003745318352059925,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.06741573033707865,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0018726591760299626
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 4,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 4,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 7,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 9,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 6,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 9,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 4,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 9,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 6,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 9,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 7,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 4,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_39",
        "description": "(\\'set to 0 the elements with absolute value less than 1, and square the other elements\\')",
        "target_program": "tf.multiply(tf.square(in1), tf.cast(tf.cast(tf.cast(in1, tf.int32), tf.bool), tf.float32))",
        "source": "https://stackoverflow.com/questions/37912161/how-can-i-compute-element-wise-conditionals-on-batches-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[-1.5, 1.0, 0.9, 2.0], [1.1, 0.0, -0.1, -0.9], [-1.0, 0.1, -1.1, 2.5]],]",
            "outputs": "[[2.25, 1.0, 0.0, 4.0],    [1.21, 0.0, 0.0, 0.0],    [1.0, 0.0, 1.21, 6.25]]"
        },
        "completions": [
            "result = tf.square(tf.where(tf.less(tf.abs(in1), 1.0), tf.zeros_like(in1), in1))\n",
            "result = tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\nreturn result\n",
            "return tf.multiply(tf.maximum(tf.abs(in1), 1), tf.cast(tf.greater_equal(tf.abs(in1), 1), tf.float32))",
            "return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))",
            "def transform(in1):\n    return tf.where(tf.less(tf.abs(in1), 1), 0, tf.square(in1))\n",
            "return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), 0)\n",
            "return tf.multiply(tf.maximum(tf.abs(in1), 1.0), tf.maximum(tf.abs(in1) >= 1.0, 0.0))\n",
            "return tf.where(tf.less(tf.abs(in1), 1), 0, tf.square(in1))\n",
            "return tf.where(tf.less(tf.abs(in1), 1), 0, tf.square(in1))\n",
            "return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n",
            "def transform(in1):\n    mask = tf.cast(tf.abs(in1) < 1, tf.float32)\n    return tf.multiply(tf.square(in1), 1 - mask)\n",
            "return tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n",
            "return tf.where(tf.less(tf.abs(in1), 1), 0, tf.square(in1))\n",
            "return tf.where(tf.abs(in1) < 1, 0, tf.square(in1))\n",
            "return tf.multiply(tf.maximum(tf.abs(in1) - 1, 0), tf.abs(in1))\n",
            "return tf.multiply(tf.cast(tf.greater_equal(tf.abs(in1), 1), tf.float32), tf.square(in1))",
            "return tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n",
            "return tf.square(tf.where(tf.greater_equal(tf.abs(in1), 1), in1, 0))\n",
            "return tf.math.maximum(tf.square(in1), 0)\n",
            "return tf.where(tf.abs(in1) < 1, tf.square(in1), tf.zeros_like(in1))",
            "return tf.where(tf.abs(in1) < 1, 0, tf.square(in1))\n",
            "return tf.where(tf.less(tf.abs(in1), 1.0), tf.zeros_like(in1), tf.square(in1))",
            "return tf.where(tf.less(tf.abs(in1), 1), 0, tf.square(in1))",
            "def transform(in1):\n    return tf.where(tf.less_equal(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n",
            "return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n",
            "return tf.where(tf.abs(in1) < 1, tf.constant(0.0), tf.square(in1))\n",
            "return tf.multiply(tf.cast(tf.greater_equal(tf.abs(in1), 1), tf.float32), tf.square(in1))\n",
            "def transform(in1):\n    return tf.where(tf.less(tf.abs(in1), 1), 0, tf.square(in1))\n",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))",
            "return tf.multiply(tf.maximum(tf.abs(in1), 1), tf.maximum(tf.abs(in1), 1))\n",
            "return tf.where(tf.less(tf.abs(in1), 1), 0, tf.square(in1))",
            "return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, 0, tf.square(in1))\n",
            "return tf.multiply(tf.maximum(tf.abs(in1) - 1.0, 0.0), tf.maximum(tf.abs(in1) - 1.0, 0.0))\n",
            "return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n",
            "zero_mask = tf.cast(tf.less(tf.abs(in1), 1), tf.float32)\nsquared_values = tf.square(tf.where(zero_mask, tf.zeros_like(in1), in1))\nreturn squared_values\n",
            "return tf.where(tf.less(tf.abs(in1), 1), 0, tf.square(in1))",
            "return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n",
            "out = tf.square(tf.where(tf.less(tf.abs(in1), 1), 0, in1))\nreturn out\n",
            "return tf.where(tf.less(tf.abs(in1), 1), 0, tf.square(in1))\n",
            "return tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))",
            "return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), tf.zeros_like(in1))",
            "return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))",
            "return tf.where(tf.abs(in1) < 1, tf.square(in1), tf.zeros_like(in1))",
            "return tf.multiply(tf.cast(tf.greater_equal(tf.abs(in1), 1), in1**2), tf.fill(tf.shape(in1), 1))\n",
            "def transform(in1):\n    return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), tf.zeros_like(in1))\n",
            "return tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))",
            "return tf.multiply(tf.maximum(tf.abs(in1) >= 1, in1), tf.maximum(tf.abs(in1) >= 1, in1))\n",
            "result = tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\nreturn result\n",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n"
        ],
        "tf_operators": {
            "tf.less": 19,
            "tf.where": 39,
            "tf.square": 43,
            "tf.zeros_like": 23,
            "tf.abs": 49,
            "tf.maximum": 6,
            "tf.multiply": 10,
            "tf.greater_equal": 8,
            "tf.float32": 5,
            "tf.cast": 6,
            "tf.math.maximum": 1,
            "tf.less_equal": 1,
            "tf.constant": 1,
            "tf.shape": 1,
            "tf.fill": 1
        },
        "coverage_percentage": 66.66666666666666,
        "total_covered": 4,
        "total_in_target": 6,
        "parsed_constants": [
            [],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 125,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 67,
            "shape_tuple": 0,
            "tf_float32": 5,
            "axis": 1,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.10181818181818182,
                "tf.add(x, y)": 0.0018181818181818182,
                "tf.add_n(inputs)": 0.0018181818181818182,
                "tf.argmax(input, axis)": 0.0018181818181818182,
                "tf.argmin(input, axis)": 0.0018181818181818182,
                "tf.argsort(values, axis, stable=True)": 0.0018181818181818182,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0018181818181818182,
                "tf.boolean_mask(tensor, mask)": 0.0018181818181818182,
                "tf.broadcast_to(input, shape)": 0.0018181818181818182,
                "tf.cast(x, dtype)": 0.012727272727272728,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0018181818181818182,
                "tf.concat(values, axis)": 0.0018181818181818182,
                "tf.constant(value)": 0.0036363636363636364,
                "tf.constant(value, dtype)": 0.0018181818181818182,
                "tf.divide(x, y)": 0.0018181818181818182,
                "tf.equal(x, y)": 0.0018181818181818182,
                "tf.exp(x)": 0.0018181818181818182,
                "tf.expand_dims(input, axis)": 0.0018181818181818182,
                "tf.eye(num_rows)": 0.0018181818181818182,
                "tf.eye(num_rows, num_columns)": 0.0018181818181818182,
                "tf.eye(num_rows, dtype)": 0.0018181818181818182,
                "tf.fill(dims, value)": 0.0036363636363636364,
                "tf.gather(params, indices)": 0.0018181818181818182,
                "tf.gather(params, indices, axis, batch_dims)": 0.0018181818181818182,
                "tf.gather_nd(params, indices)": 0.0018181818181818182,
                "tf.gather_nd(params, indices, batch_dims)": 0.0018181818181818182,
                "tf.greater(x, y)": 0.0018181818181818182,
                "tf.greater_equal(x, y)": 0.016363636363636365,
                "tf.math.bincount(arr)": 0.0018181818181818182,
                "tf.math.ceil(x)": 0.0018181818181818182,
                "tf.math.count_nonzero(input)": 0.0018181818181818182,
                "tf.math.count_nonzero(input, axis)": 0.0018181818181818182,
                "tf.math.cumsum(x, axis)": 0.0018181818181818182,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0018181818181818182,
                "tf.math.divide_no_nan(x, y)": 0.0018181818181818182,
                "tf.math.floor(x)": 0.0018181818181818182,
                "tf.math.log(x)": 0.0018181818181818182,
                "tf.math.logical_and(x, y)": 0.0018181818181818182,
                "tf.math.logical_not(x)": 0.0018181818181818182,
                "tf.math.logical_or(x, y)": 0.0018181818181818182,
                "tf.math.logical_xor(x, y)": 0.0018181818181818182,
                "tf.math.negative(x)": 0.0018181818181818182,
                "tf.math.reciprocal(x)": 0.0018181818181818182,
                "tf.math.reciprocal_no_nan(x)": 0.0018181818181818182,
                "tf.math.segment_max(data, segment_ids)": 0.0018181818181818182,
                "tf.math.segment_mean(data, segment_ids)": 0.0018181818181818182,
                "tf.math.segment_min(data, segment_ids)": 0.0018181818181818182,
                "tf.math.segment_prod(data, segment_ids)": 0.0018181818181818182,
                "tf.math.segment_sum(data, segment_ids)": 0.0018181818181818182,
                "tf.math.squared_difference(x, y)": 0.0018181818181818182,
                "tf.math.top_k(input, k)": 0.0018181818181818182,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0018181818181818182,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0018181818181818182,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0018181818181818182,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0018181818181818182,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0018181818181818182,
                "tf.matmul(a, b)": 0.0018181818181818182,
                "tf.maximum(x, y)": 0.02,
                "tf.minimum(x, y)": 0.0018181818181818182,
                "tf.multiply(x, y)": 0.02,
                "tf.not_equal(x, y)": 0.0018181818181818182,
                "tf.one_hot(indices, depth)": 0.0018181818181818182,
                "tf.ones(shape)": 0.0018181818181818182,
                "tf.ones_like(input)": 0.0018181818181818182,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0018181818181818182,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0018181818181818182,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0018181818181818182,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0018181818181818182,
                "tf.range(start)": 0.0018181818181818182,
                "tf.range(start, limit, delta)": 0.0018181818181818182,
                "tf.reduce_any(input_tensor, axis)": 0.0018181818181818182,
                "tf.reduce_all(input_tensor, axis)": 0.0018181818181818182,
                "tf.reduce_max(input_tensor)": 0.0018181818181818182,
                "tf.reduce_max(input_tensor, axis)": 0.0018181818181818182,
                "tf.reduce_mean(input_tensor)": 0.0018181818181818182,
                "tf.reduce_mean(input_tensor, axis)": 0.0018181818181818182,
                "tf.reduce_min(input_tensor)": 0.0018181818181818182,
                "tf.reduce_min(input_tensor, axis)": 0.0018181818181818182,
                "tf.reduce_prod(input_tensor, axis)": 0.0018181818181818182,
                "tf.reduce_sum(input_tensor)": 0.0018181818181818182,
                "tf.reduce_sum(input_tensor, axis)": 0.0018181818181818182,
                "tf.repeat(input, repeats)": 0.0018181818181818182,
                "tf.repeat(input, repeats, axis)": 0.0018181818181818182,
                "tf.reshape(tensor, shape)": 0.0018181818181818182,
                "tf.reverse(tensor, axis)": 0.0018181818181818182,
                "tf.roll(input, shift, axis)": 0.0018181818181818182,
                "tf.round(x)": 0.0018181818181818182,
                "tf.scatter_nd(indices, updates, shape)": 0.0018181818181818182,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0018181818181818182,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0018181818181818182,
                "tf.sequence_mask(lengths)": 0.0018181818181818182,
                "tf.sequence_mask(lengths, maxlen)": 0.0018181818181818182,
                "tf.shape(input)": 0.0036363636363636364,
                "tf.sign(x)": 0.0018181818181818182,
                "tf.sort(values, axis)": 0.0018181818181818182,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0018181818181818182,
                "tf.sqrt(x)": 0.0018181818181818182,
                "tf.square(x)": 0.08,
                "tf.squeeze(input)": 0.0018181818181818182,
                "tf.squeeze(input, axis)": 0.0018181818181818182,
                "tf.stack(values, axis)": 0.0018181818181818182,
                "tf.subtract(x, y)": 0.0018181818181818182,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0018181818181818182,
                "tf.tensordot(a, b, axes)": 0.0018181818181818182,
                "tf.tile(input, multiples)": 0.0018181818181818182,
                "tf.transpose(a)": 0.0018181818181818182,
                "tf.transpose(a, perm)": 0.0018181818181818182,
                "tf.unique_with_counts(x)": 0.0018181818181818182,
                "tf.unstack(value, axis)": 0.0018181818181818182,
                "tf.where(condition)": 0.0018181818181818182,
                "tf.where(condition, x, y)": 0.07272727272727272,
                "tf.zeros(shape)": 0.0018181818181818182,
                "tf.zeros_like(input)": 0.04363636363636364,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0018181818181818182,
                "tf.sparse.add(a, b)": 0.0018181818181818182,
                "tf.sparse.concat(axis, sp_inputs)": 0.0018181818181818182,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0018181818181818182,
                "tf.sparse.from_dense(tensor)": 0.0018181818181818182,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0018181818181818182,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0018181818181818182,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0018181818181818182,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0018181818181818182,
                "tf.sparse.reset_shape(sp_input)": 0.0018181818181818182,
                "tf.sparse.reshape(sp_input, shape)": 0.0018181818181818182,
                "tf.sparse.retain(sp_input, to_retain)": 0.0018181818181818182,
                "tf.sparse.slice(sp_input, start, size)": 0.0018181818181818182,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0018181818181818182,
                "tf.sparse.to_dense(sp_input)": 0.0018181818181818182,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0018181818181818182,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0018181818181818182,
                "tf.sparse.transpose(sp_input)": 0.0018181818181818182,
                "tf.sparse.transpose(sp_input, perm)": 0.0018181818181818182,
                "IndexingAxis1Operation": 0.0018181818181818182,
                "IndexingOperation": 0.0018181818181818182,
                "PairCreationOperation": 0.0018181818181818182,
                "SingletonTupleCreationOperation": 0.0018181818181818182,
                "SlicingAxis0BothOperation": 0.0018181818181818182,
                "SlicingAxis0LeftOperation": 0.0018181818181818182,
                "SlicingAxis0RightOperation": 0.0018181818181818182,
                "SlicingAxis1BothOperation": 0.0018181818181818182,
                "SlicingAxis1LeftOperation": 0.0018181818181818182,
                "SlicingAxis1RightOperation": 0.0018181818181818182,
                "TripleCreationOperation": 0.0018181818181818182,
                "PROVIDED_CONSTANT_WEIGHT": 0.0018181818181818182,
                "COMMON_CONSTANT_WEIGHT": 0.12363636363636364,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0018181818181818182,
                "INPUT_VARIABLE_WEIGHT": 0.2290909090909091,
                "AXIS_CONSTANT_WEIGHT": 0.0036363636363636364,
                "SHAPE_CONSTANT_WEIGHT": 0.0018181818181818182,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0018181818181818182,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0018181818181818182,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.01090909090909091,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0018181818181818182,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0018181818181818182
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 3,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 6,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 9,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 6,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 6,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 6,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 9,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 8,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 4,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 4,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 5,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 9,
                "PairCreationOperation": 9,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_40",
        "description": "use the output of tf.nn.top_k to make a sparse tensor",
        "target_program": "tf.sparse.to_dense(tf.SparseTensor(tf.cast(in2, tf.int64), in1, (3, 5)))",
        "source": "https://stackoverflow.com/questions/43996831/make-a-sparse-tensor-based-on-the-output-of-tf-nn-top-k",
        "constants": "[]",
        "examples": {
            "inputs": "[[4, 5, 2, 7, 8, 6],[[0, 2], [0, 4], [1, 1], [1, 3], [2, 0], [2, 3]],]",
            "outputs": "[[0, 0, 4, 0, 5],[0, 2, 0, 7, 0],[8, 0, 0, 6, 0]]"
        },
        "completions": [
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=[3, 5])",
            "return tf.scatter_nd(in2, in1, tf.reduce_max(in1) + 1)",
            "return tf.sparse.SparseTensor(indices=in2, values=in1[tf.math.unsorted_segment_max(in2[:, 0], in2[:, 0], 3)], dense_shape=[3, 5])",
            "return tf.scatter_nd(in2, in1, shape=tf.reduce_max(in2, axis=0) + 1)\n",
            "return tf.sparse.SparseTensor(indices=in2, values=tf.squeeze(in1), dense_shape=(3, 5))",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=[3, 5])",
            "return tf.sparse.SparseTensor(tf.transpose(in2), in1, (3, 4))",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=[3, 5])",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=[3, 5])",
            "values, indices = tf.unstack(in2, axis=1)\nreturn tf.scatter_nd(indices, values, shape=(3, 5))\n",
            "values = in1\nindices = in2\nsparse_tensor = tf.sparse.SparseTensor(tf.transpose(indices), values, dense_shape=[3, 5])\nreturn tf.sparse.to_dense(sparse_tensor)\n",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=[3, 5])",
            "def transform(in1, in2):\n    values = in1\n    indices = in2\n    topk_values, topk_indices = tf.math.top_k(values, k=tf.shape(values)[0])\n    sparse_tensor = tf.scatter_nd(indices=topk_indices, updates=topk_values, shape=tf.shape(in2, out_type=tf.int64))\n    return sparse_tensor\n",
            "return tf.tensor_scatter_nd_update(tf.zeros((3, 5), dtype=tf.int32), in2, tf.squeeze(in1, axis=1))",
            "return tf.tensor_scatter_nd_update(tf.zeros([3, 5], dtype=tf.int32), in2, in1)",
            "def transform(in1, in2):\n    values = tf.constant(in1)\n    indices = in2[:, 0]\n    updates = in1\n    shape = tf.reduce_max(indices) + 1\n    k_values, k_indices = tf.math.top_k(-values, k=2)\n    sparse_tensor = tf.tensor_scatter_nd_update(tf.zeros(shape), tf.expand_dims(k_indices, 1), tf.gather(values, k_indices))\n    return sparse_tensor\n",
            "return tf.sparse.SparseTensor(indices=tf.cast(in2, tf.int64), values=in1, dense_shape=[3, 5])",
            "values = in1\nindices = in2\nreturn tf.cast(tf.scatter_nd(indices, values, shape=[3, 5]), tf.int32)\n",
            "return tf.scatter_nd(in2, in1, tf.reduce_max(in1)+1)",
            "return tf.scatter_nd(in2, in1, (3, 5))",
            "return tf.sparse.SparseTensor(tf.cast(in2, tf.int64), in1, dense_shape=[3, 5])",
            "values = tf.unstack(in1)\nindices = in2\nreturn tf.sparse.SparseTensor(indices, values, dense_shape=tf.constant([3, 5], dtype=tf.int64))\n",
            "values, indices = tf.math.top_k(tf.convert_to_tensor(in1), sorted=True)\nreturn tf.scatter_nd(indices, values, tuple(tf.reduce_max(indices, axis=0) + 1))\n",
            "return tf.tensor_scatter_nd_update(tf.zeros([3, 5], dtype=tf.int32), in2, in1)",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=(3, 5))",
            "def transform(in1, in2):\n    values = tf.constant(in1)\n    indices = tf.constant(in2)\n    top_values, top_indices = tf.nn.top_k(-values, k=tf.shape(in2)[1])\n    top_indices = tf.transpose(top_indices)\n    top_indices = tf.cast(top_indices, tf.int64)\n    depth = tf.shape(in1)[0]\n    return tf.one_hot(top_indices, depth)\n",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=[3, 5])",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=(3, 5))",
            "return tf.tensor_scatter_nd_update(tf.zeros((3, 5), dtype=tf.int32), in2, tf.squeeze(in1, axis=1))",
            "return tf.scatter_nd(in2, in1, [3, 5])",
            "def transform(in1, in2):\n    values, indices = tf.nn.top_k(in1, k=in1.shape[0])\n    result = tf.sparse.SparseTensor(indices=in2, values=tf.gather(values, indices), dense_shape=in2.shape)\n    return tf.sparse.to_dense(result)\n",
            "values = in1\nindices = in2\nshape = tf.reduce_max(indices, axis=0) + 1\nreturn tf.scatter_nd(indices, values, shape)\n",
            "values, indices = tf.math.top_k(in1)\nreturn tf.scatter_nd(indices, values, tf.shape(in1))\n",
            "return tf.scatter_nd(in2, in1, tf.reduce_max(in1) + 1)",
            "values = tf.gather(in1, in2[:, 1])\nindices = in2[:, 0]\nsparse_tensor = tf.scatter_nd(tf.expand_dims(indices, 1), values, tf.reduce_max(indices) + 1)\nreturn sparse_tensor\n",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=(3, 5))",
            "return tf.scatter_nd(in2, in1, [3, 5])",
            "values = in1\nindices = in2\ndepth = tf.shape(in1)[0]\nreturn tf.scatter_nd(indices, values, [depth, tf.reduce_max(indices)+1])\n",
            "def transform(in1, in2):\n    values, indices = tf.nn.top_k(in1, k=in1.shape[0])\n    sparse_tensor = tf.scatter_nd(indices=tf.cast(in2, tf.int32), updates=values, shape=tf.reduce_max(in2, axis=0) + 1)\n    return sparse_tensor\n",
            "return tf.sequence_mask(in1.shape[0], maxlen=tf.reduce_max(in2[:, 1]) + 1) * tf.scatter_nd(in2, in1, [in2.shape[0], tf.reduce_max(in2[:, 1]) + 1])",
            "return tf.sparse.SparseTensor(tf.transpose(in2), in1, [3, 5])",
            "return tf.sparse.SparseTensor(tf.unstack(in2, axis=1), tf.unstack(in1), [3, 5])",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=(3, 5))",
            "return tf.sparse.SparseTensor(tf.transpose(in2), in1, dense_shape=[3, 5])",
            "return tf.tensor_scatter_nd_update(tf.zeros([3, 5], dtype=tf.int32), in2, in1)",
            "return tf.tensor_scatter_nd_update(tf.zeros([3, 5], dtype=tf.int32), in2, in1)",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=[3, 5])",
            "values = in1\nindices = in2\nreturn tf.scatter_nd(indices, values, shape=(3, 5))\n",
            "def transform(in1, in2):\n    values = tf.constant(in1)\n    indices = tf.constant(in2)\n    top_k = tf.math.top_k(values, k=tf.shape(indices)[1])\n    sparse_tensor = tf.sparse.SparseTensor(indices, top_k.values, dense_shape=[tf.shape(indices)[0], tf.reduce_max(indices) + 1])\n    return tf.sparse.to_dense(sparse_tensor)\n",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=[3, 5])"
        ],
        "tf_operators": {
            "tf.sparse.SparseTensor": 24,
            "tf.reduce_max": 12,
            "tf.scatter_nd": 18,
            "tf.math.unsorted_segment_max": 1,
            "tf.squeeze": 3,
            "tf.transpose": 5,
            "tf.unstack": 3,
            "tf.sparse.to_dense": 3,
            "tf.int64": 5,
            "tf.shape": 5,
            "tf.math.top_k": 5,
            "tf.tensor_scatter_nd_update": 7,
            "tf.zeros": 7,
            "tf.int32": 8,
            "tf.gather": 3,
            "tf.expand_dims": 2,
            "tf.constant": 4,
            "tf.cast": 5,
            "tf.convert_to_tensor": 1,
            "tf.one_hot": 1,
            "tf.nn.top_k": 3,
            "tf.sequence_mask": 1
        },
        "coverage_percentage": 75.0,
        "total_covered": 3,
        "total_in_target": 4,
        "parsed_constants": [
            [
                3,
                5
            ],
            [
                1
            ],
            [
                0,
                0,
                3,
                3,
                5
            ],
            [
                0,
                1
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                3,
                4
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                1,
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                0
            ],
            [
                3,
                5,
                1
            ],
            [
                3,
                5
            ],
            [
                0,
                1,
                2,
                1
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                1
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                0,
                1
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                1,
                0
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                3,
                5,
                1
            ],
            [
                3,
                5
            ],
            [
                0
            ],
            [
                0,
                1
            ],
            [],
            [
                1
            ],
            [
                1,
                0,
                1,
                1
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                0,
                1
            ],
            [
                0,
                0,
                1
            ],
            [
                0,
                1,
                1,
                0,
                1,
                1
            ],
            [
                3,
                5
            ],
            [
                1,
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                1,
                0,
                1
            ],
            [
                3,
                5
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 1
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 145,
            "shape": 0,
            "tf_bool": 0,
            "provided": 47,
            "common": 34,
            "shape_tuple": 10,
            "tf_float32": 0,
            "axis": 1,
            "tf_int64": 5,
            "tf_int32": 8
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.001876172607879925,
                "tf.add(x, y)": 0.001876172607879925,
                "tf.add_n(inputs)": 0.001876172607879925,
                "tf.argmax(input, axis)": 0.001876172607879925,
                "tf.argmin(input, axis)": 0.001876172607879925,
                "tf.argsort(values, axis, stable=True)": 0.001876172607879925,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.001876172607879925,
                "tf.boolean_mask(tensor, mask)": 0.001876172607879925,
                "tf.broadcast_to(input, shape)": 0.001876172607879925,
                "tf.cast(x, dtype)": 0.01125703564727955,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.001876172607879925,
                "tf.concat(values, axis)": 0.001876172607879925,
                "tf.constant(value)": 0.01125703564727955,
                "tf.constant(value, dtype)": 0.001876172607879925,
                "tf.divide(x, y)": 0.001876172607879925,
                "tf.equal(x, y)": 0.001876172607879925,
                "tf.exp(x)": 0.001876172607879925,
                "tf.expand_dims(input, axis)": 0.005628517823639775,
                "tf.eye(num_rows)": 0.001876172607879925,
                "tf.eye(num_rows, num_columns)": 0.001876172607879925,
                "tf.eye(num_rows, dtype)": 0.001876172607879925,
                "tf.fill(dims, value)": 0.001876172607879925,
                "tf.gather(params, indices)": 0.0075046904315197,
                "tf.gather(params, indices, axis, batch_dims)": 0.001876172607879925,
                "tf.gather_nd(params, indices)": 0.001876172607879925,
                "tf.gather_nd(params, indices, batch_dims)": 0.001876172607879925,
                "tf.greater(x, y)": 0.001876172607879925,
                "tf.greater_equal(x, y)": 0.001876172607879925,
                "tf.math.bincount(arr)": 0.001876172607879925,
                "tf.math.ceil(x)": 0.001876172607879925,
                "tf.math.count_nonzero(input)": 0.001876172607879925,
                "tf.math.count_nonzero(input, axis)": 0.001876172607879925,
                "tf.math.cumsum(x, axis)": 0.001876172607879925,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.001876172607879925,
                "tf.math.divide_no_nan(x, y)": 0.001876172607879925,
                "tf.math.floor(x)": 0.001876172607879925,
                "tf.math.log(x)": 0.001876172607879925,
                "tf.math.logical_and(x, y)": 0.001876172607879925,
                "tf.math.logical_not(x)": 0.001876172607879925,
                "tf.math.logical_or(x, y)": 0.001876172607879925,
                "tf.math.logical_xor(x, y)": 0.001876172607879925,
                "tf.math.negative(x)": 0.001876172607879925,
                "tf.math.reciprocal(x)": 0.001876172607879925,
                "tf.math.reciprocal_no_nan(x)": 0.001876172607879925,
                "tf.math.segment_max(data, segment_ids)": 0.001876172607879925,
                "tf.math.segment_mean(data, segment_ids)": 0.001876172607879925,
                "tf.math.segment_min(data, segment_ids)": 0.001876172607879925,
                "tf.math.segment_prod(data, segment_ids)": 0.001876172607879925,
                "tf.math.segment_sum(data, segment_ids)": 0.001876172607879925,
                "tf.math.squared_difference(x, y)": 0.001876172607879925,
                "tf.math.top_k(input, k)": 0.01125703564727955,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.00375234521575985,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.001876172607879925,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.001876172607879925,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.001876172607879925,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.001876172607879925,
                "tf.matmul(a, b)": 0.001876172607879925,
                "tf.maximum(x, y)": 0.001876172607879925,
                "tf.minimum(x, y)": 0.001876172607879925,
                "tf.multiply(x, y)": 0.001876172607879925,
                "tf.not_equal(x, y)": 0.001876172607879925,
                "tf.one_hot(indices, depth)": 0.00375234521575985,
                "tf.ones(shape)": 0.001876172607879925,
                "tf.ones_like(input)": 0.001876172607879925,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.001876172607879925,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.001876172607879925,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.001876172607879925,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.001876172607879925,
                "tf.range(start)": 0.001876172607879925,
                "tf.range(start, limit, delta)": 0.001876172607879925,
                "tf.reduce_any(input_tensor, axis)": 0.001876172607879925,
                "tf.reduce_all(input_tensor, axis)": 0.001876172607879925,
                "tf.reduce_max(input_tensor)": 0.01876172607879925,
                "tf.reduce_max(input_tensor, axis)": 0.001876172607879925,
                "tf.reduce_mean(input_tensor)": 0.001876172607879925,
                "tf.reduce_mean(input_tensor, axis)": 0.001876172607879925,
                "tf.reduce_min(input_tensor)": 0.001876172607879925,
                "tf.reduce_min(input_tensor, axis)": 0.001876172607879925,
                "tf.reduce_prod(input_tensor, axis)": 0.001876172607879925,
                "tf.reduce_sum(input_tensor)": 0.001876172607879925,
                "tf.reduce_sum(input_tensor, axis)": 0.001876172607879925,
                "tf.repeat(input, repeats)": 0.001876172607879925,
                "tf.repeat(input, repeats, axis)": 0.001876172607879925,
                "tf.reshape(tensor, shape)": 0.001876172607879925,
                "tf.reverse(tensor, axis)": 0.001876172607879925,
                "tf.roll(input, shift, axis)": 0.001876172607879925,
                "tf.round(x)": 0.001876172607879925,
                "tf.scatter_nd(indices, updates, shape)": 0.03564727954971857,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.001876172607879925,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.001876172607879925,
                "tf.sequence_mask(lengths)": 0.001876172607879925,
                "tf.sequence_mask(lengths, maxlen)": 0.001876172607879925,
                "tf.shape(input)": 0.016885553470919325,
                "tf.sign(x)": 0.001876172607879925,
                "tf.sort(values, axis)": 0.001876172607879925,
                "tf.sort(values, axis, direction='DESCENDING')": 0.001876172607879925,
                "tf.sqrt(x)": 0.001876172607879925,
                "tf.square(x)": 0.001876172607879925,
                "tf.squeeze(input)": 0.00375234521575985,
                "tf.squeeze(input, axis)": 0.001876172607879925,
                "tf.stack(values, axis)": 0.001876172607879925,
                "tf.subtract(x, y)": 0.001876172607879925,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0150093808630394,
                "tf.tensordot(a, b, axes)": 0.001876172607879925,
                "tf.tile(input, multiples)": 0.001876172607879925,
                "tf.transpose(a)": 0.01125703564727955,
                "tf.transpose(a, perm)": 0.001876172607879925,
                "tf.unique_with_counts(x)": 0.001876172607879925,
                "tf.unstack(value, axis)": 0.009380863039399626,
                "tf.where(condition)": 0.001876172607879925,
                "tf.where(condition, x, y)": 0.001876172607879925,
                "tf.zeros(shape)": 0.0150093808630394,
                "tf.zeros_like(input)": 0.001876172607879925,
                "tf.SparseTensor(indices, values, dense_shape)": 0.001876172607879925,
                "tf.sparse.add(a, b)": 0.001876172607879925,
                "tf.sparse.concat(axis, sp_inputs)": 0.001876172607879925,
                "tf.sparse.expand_dims(sp_input, axis)": 0.001876172607879925,
                "tf.sparse.from_dense(tensor)": 0.001876172607879925,
                "tf.sparse.maximum(sp_a, sp_b)": 0.001876172607879925,
                "tf.sparse.minimum(sp_a, sp_b)": 0.001876172607879925,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.001876172607879925,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.001876172607879925,
                "tf.sparse.reset_shape(sp_input)": 0.001876172607879925,
                "tf.sparse.reshape(sp_input, shape)": 0.001876172607879925,
                "tf.sparse.retain(sp_input, to_retain)": 0.001876172607879925,
                "tf.sparse.slice(sp_input, start, size)": 0.001876172607879925,
                "tf.sparse.split(sp_input, num_split, axis)": 0.001876172607879925,
                "tf.sparse.to_dense(sp_input)": 0.0075046904315197,
                "tf.sparse.to_dense(sp_input, default_value)": 0.001876172607879925,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.001876172607879925,
                "tf.sparse.transpose(sp_input)": 0.001876172607879925,
                "tf.sparse.transpose(sp_input, perm)": 0.001876172607879925,
                "IndexingAxis1Operation": 0.0150093808630394,
                "IndexingOperation": 0.0225140712945591,
                "PairCreationOperation": 0.05065666041275797,
                "SingletonTupleCreationOperation": 0.001876172607879925,
                "SlicingAxis0BothOperation": 0.001876172607879925,
                "SlicingAxis0LeftOperation": 0.001876172607879925,
                "SlicingAxis0RightOperation": 0.001876172607879925,
                "SlicingAxis1BothOperation": 0.001876172607879925,
                "SlicingAxis1LeftOperation": 0.001876172607879925,
                "SlicingAxis1RightOperation": 0.001876172607879925,
                "TripleCreationOperation": 0.001876172607879925,
                "PROVIDED_CONSTANT_WEIGHT": 0.0900562851782364,
                "COMMON_CONSTANT_WEIGHT": 0.06566604127579738,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.001876172607879925,
                "INPUT_VARIABLE_WEIGHT": 0.27392120075046905,
                "AXIS_CONSTANT_WEIGHT": 0.00375234521575985,
                "SHAPE_CONSTANT_WEIGHT": 0.001876172607879925,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.020637898686679174,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.016885553470919325,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.001876172607879925,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.001876172607879925,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.01125703564727955
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 6,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 6,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 6,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 9,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 6,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 5,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 6,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 6,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 6,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 6,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 6,
                "IndexingOperation": 5,
                "PairCreationOperation": 4,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 3,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 6,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 6,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 6
            }
        }
    },
    {
        "name": "stackoverflow_41",
        "description": "copy all elements except at the given index",
        "target_program": "tf.boolean_mask(in1, tf.not_equal(tf.constant(in2), tf.range(10)))",
        "source": "https://stackoverflow.com/questions/54499051/elegant-way-to-access-python-list-and-tensor-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[5, 2, 8, 2, 4, 1, 1, 0, 2, 1],3,]",
            "outputs": "[5, 2, 8, 4, 1, 1, 0, 2, 1]"
        },
        "completions": [
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(in1.shape[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    output = tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n    return output\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))",
            "indices = tf.constant(in2, dtype=tf.int32)\nreturn tf.gather(in1, tf.concat([tf.range(indices), tf.range(indices + 1, tf.shape(in1)[0])], axis=0))\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.gather(in1, tf.where(tf.not_equal(tf.range(in1.shape[0]), in2)))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.concat([tf.slice(in1, [0], in2), tf.slice(in1, in2 + 1, -1)], axis=0)",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))",
            "output = tf.gather(in1, tf.concat([tf.range(in2), tf.range(in2+1, tf.shape(in1)[0])], axis=0))\nreturn output\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.gather(in1, tf.where(tf.not_equal(tf.range(tf.shape(in1)[0]), in2))[:, 0])\n",
            "def transform(in1, in2):\n    return tf.gather(in1, tf.where(tf.not_equal(tf.range(tf.shape(in1)[0]), in2))[:, 0])\n",
            "return tf.gather(in1, tf.where(tf.not_equal(tf.range(tf.shape(in1)[0]), in2))[:, 0])",
            "return tf.gather_nd(in1, tf.where(tf.not_equal(tf.range(tf.shape(in1)[0]), in2)))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.gather(in1, tf.concat([tf.range(in2), tf.range(in2+1, tf.size(in1))], 0))\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n"
        ],
        "tf_operators": {
            "tf.boolean_mask": 37,
            "tf.not_equal": 42,
            "tf.shape": 34,
            "tf.range": 45,
            "tf.size": 9,
            "tf.concat": 8,
            "tf.gather": 7,
            "tf.int32": 1,
            "tf.constant": 1,
            "tf.where": 5,
            "tf.slice": 1,
            "tf.gather_nd": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [],
            [
                1,
                0,
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0,
                1,
                -1,
                0
            ],
            [
                0
            ],
            [],
            [
                1,
                0,
                0
            ],
            [
                0
            ],
            [
                0,
                0
            ],
            [
                0,
                0
            ],
            [
                0,
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [
                0
            ],
            [
                1,
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 158,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 54,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 1
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0016750418760469012,
                "tf.add(x, y)": 0.0016750418760469012,
                "tf.add_n(inputs)": 0.0016750418760469012,
                "tf.argmax(input, axis)": 0.0016750418760469012,
                "tf.argmin(input, axis)": 0.0016750418760469012,
                "tf.argsort(values, axis, stable=True)": 0.0016750418760469012,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0016750418760469012,
                "tf.boolean_mask(tensor, mask)": 0.06365159128978225,
                "tf.broadcast_to(input, shape)": 0.0016750418760469012,
                "tf.cast(x, dtype)": 0.0016750418760469012,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0016750418760469012,
                "tf.concat(values, axis)": 0.01507537688442211,
                "tf.constant(value)": 0.0016750418760469012,
                "tf.constant(value, dtype)": 0.0016750418760469012,
                "tf.divide(x, y)": 0.0016750418760469012,
                "tf.equal(x, y)": 0.0016750418760469012,
                "tf.exp(x)": 0.0016750418760469012,
                "tf.expand_dims(input, axis)": 0.0016750418760469012,
                "tf.eye(num_rows)": 0.0016750418760469012,
                "tf.eye(num_rows, num_columns)": 0.0016750418760469012,
                "tf.eye(num_rows, dtype)": 0.0016750418760469012,
                "tf.fill(dims, value)": 0.0016750418760469012,
                "tf.gather(params, indices)": 0.01340033500837521,
                "tf.gather(params, indices, axis, batch_dims)": 0.0016750418760469012,
                "tf.gather_nd(params, indices)": 0.0033500837520938024,
                "tf.gather_nd(params, indices, batch_dims)": 0.0016750418760469012,
                "tf.greater(x, y)": 0.0016750418760469012,
                "tf.greater_equal(x, y)": 0.0016750418760469012,
                "tf.math.bincount(arr)": 0.0016750418760469012,
                "tf.math.ceil(x)": 0.0016750418760469012,
                "tf.math.count_nonzero(input)": 0.0016750418760469012,
                "tf.math.count_nonzero(input, axis)": 0.0016750418760469012,
                "tf.math.cumsum(x, axis)": 0.0016750418760469012,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0016750418760469012,
                "tf.math.divide_no_nan(x, y)": 0.0016750418760469012,
                "tf.math.floor(x)": 0.0016750418760469012,
                "tf.math.log(x)": 0.0016750418760469012,
                "tf.math.logical_and(x, y)": 0.0016750418760469012,
                "tf.math.logical_not(x)": 0.0016750418760469012,
                "tf.math.logical_or(x, y)": 0.0016750418760469012,
                "tf.math.logical_xor(x, y)": 0.0016750418760469012,
                "tf.math.negative(x)": 0.0016750418760469012,
                "tf.math.reciprocal(x)": 0.0016750418760469012,
                "tf.math.reciprocal_no_nan(x)": 0.0016750418760469012,
                "tf.math.segment_max(data, segment_ids)": 0.0016750418760469012,
                "tf.math.segment_mean(data, segment_ids)": 0.0016750418760469012,
                "tf.math.segment_min(data, segment_ids)": 0.0016750418760469012,
                "tf.math.segment_prod(data, segment_ids)": 0.0016750418760469012,
                "tf.math.segment_sum(data, segment_ids)": 0.0016750418760469012,
                "tf.math.squared_difference(x, y)": 0.0016750418760469012,
                "tf.math.top_k(input, k)": 0.0016750418760469012,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0016750418760469012,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0016750418760469012,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0016750418760469012,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0016750418760469012,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0016750418760469012,
                "tf.matmul(a, b)": 0.0016750418760469012,
                "tf.maximum(x, y)": 0.0016750418760469012,
                "tf.minimum(x, y)": 0.0016750418760469012,
                "tf.multiply(x, y)": 0.0016750418760469012,
                "tf.not_equal(x, y)": 0.07202680067001675,
                "tf.one_hot(indices, depth)": 0.0016750418760469012,
                "tf.ones(shape)": 0.0016750418760469012,
                "tf.ones_like(input)": 0.0016750418760469012,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0016750418760469012,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0016750418760469012,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0016750418760469012,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0016750418760469012,
                "tf.range(start)": 0.07705192629815745,
                "tf.range(start, limit, delta)": 0.0016750418760469012,
                "tf.reduce_any(input_tensor, axis)": 0.0016750418760469012,
                "tf.reduce_all(input_tensor, axis)": 0.0016750418760469012,
                "tf.reduce_max(input_tensor)": 0.0016750418760469012,
                "tf.reduce_max(input_tensor, axis)": 0.0016750418760469012,
                "tf.reduce_mean(input_tensor)": 0.0016750418760469012,
                "tf.reduce_mean(input_tensor, axis)": 0.0016750418760469012,
                "tf.reduce_min(input_tensor)": 0.0016750418760469012,
                "tf.reduce_min(input_tensor, axis)": 0.0016750418760469012,
                "tf.reduce_prod(input_tensor, axis)": 0.0016750418760469012,
                "tf.reduce_sum(input_tensor)": 0.0016750418760469012,
                "tf.reduce_sum(input_tensor, axis)": 0.0016750418760469012,
                "tf.repeat(input, repeats)": 0.0016750418760469012,
                "tf.repeat(input, repeats, axis)": 0.0016750418760469012,
                "tf.reshape(tensor, shape)": 0.0016750418760469012,
                "tf.reverse(tensor, axis)": 0.0016750418760469012,
                "tf.roll(input, shift, axis)": 0.0016750418760469012,
                "tf.round(x)": 0.0016750418760469012,
                "tf.scatter_nd(indices, updates, shape)": 0.0016750418760469012,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0016750418760469012,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0016750418760469012,
                "tf.sequence_mask(lengths)": 0.0016750418760469012,
                "tf.sequence_mask(lengths, maxlen)": 0.0016750418760469012,
                "tf.shape(input)": 0.05862646566164154,
                "tf.sign(x)": 0.0016750418760469012,
                "tf.sort(values, axis)": 0.0016750418760469012,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0016750418760469012,
                "tf.sqrt(x)": 0.0016750418760469012,
                "tf.square(x)": 0.0016750418760469012,
                "tf.squeeze(input)": 0.0016750418760469012,
                "tf.squeeze(input, axis)": 0.0016750418760469012,
                "tf.stack(values, axis)": 0.0016750418760469012,
                "tf.subtract(x, y)": 0.0016750418760469012,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0016750418760469012,
                "tf.tensordot(a, b, axes)": 0.0016750418760469012,
                "tf.tile(input, multiples)": 0.0016750418760469012,
                "tf.transpose(a)": 0.0016750418760469012,
                "tf.transpose(a, perm)": 0.0016750418760469012,
                "tf.unique_with_counts(x)": 0.0016750418760469012,
                "tf.unstack(value, axis)": 0.0016750418760469012,
                "tf.where(condition)": 0.010050251256281407,
                "tf.where(condition, x, y)": 0.0016750418760469012,
                "tf.zeros(shape)": 0.0016750418760469012,
                "tf.zeros_like(input)": 0.0016750418760469012,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0016750418760469012,
                "tf.sparse.add(a, b)": 0.0016750418760469012,
                "tf.sparse.concat(axis, sp_inputs)": 0.0016750418760469012,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0016750418760469012,
                "tf.sparse.from_dense(tensor)": 0.0016750418760469012,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0016750418760469012,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0016750418760469012,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0016750418760469012,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0016750418760469012,
                "tf.sparse.reset_shape(sp_input)": 0.0016750418760469012,
                "tf.sparse.reshape(sp_input, shape)": 0.0016750418760469012,
                "tf.sparse.retain(sp_input, to_retain)": 0.0016750418760469012,
                "tf.sparse.slice(sp_input, start, size)": 0.0016750418760469012,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0016750418760469012,
                "tf.sparse.to_dense(sp_input)": 0.0016750418760469012,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0016750418760469012,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0016750418760469012,
                "tf.sparse.transpose(sp_input)": 0.0016750418760469012,
                "tf.sparse.transpose(sp_input, perm)": 0.0016750418760469012,
                "IndexingAxis1Operation": 0.006700167504187605,
                "IndexingOperation": 0.06197654941373534,
                "PairCreationOperation": 0.006700167504187605,
                "SingletonTupleCreationOperation": 0.0016750418760469012,
                "SlicingAxis0BothOperation": 0.0016750418760469012,
                "SlicingAxis0LeftOperation": 0.008375209380234505,
                "SlicingAxis0RightOperation": 0.008375209380234505,
                "SlicingAxis1BothOperation": 0.0016750418760469012,
                "SlicingAxis1LeftOperation": 0.0016750418760469012,
                "SlicingAxis1RightOperation": 0.0016750418760469012,
                "TripleCreationOperation": 0.0016750418760469012,
                "PROVIDED_CONSTANT_WEIGHT": 0.0016750418760469012,
                "COMMON_CONSTANT_WEIGHT": 0.09212730318257957,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0016750418760469012,
                "INPUT_VARIABLE_WEIGHT": 0.2663316582914573,
                "AXIS_CONSTANT_WEIGHT": 0.0016750418760469012,
                "SHAPE_CONSTANT_WEIGHT": 0.0016750418760469012,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0016750418760469012,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0033500837520938024,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0016750418760469012,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0016750418760469012,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0016750418760469012
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 4,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 9,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 6,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 9,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 6,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 4,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 4,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 4,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 7,
                "IndexingOperation": 4,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 9,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_42",
        "description": "create a binary vector where the max element is 1",
        "target_program": "tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
        "source": "https://stackoverflow.com/questions/54493814/binary-vector-of-max",
        "constants": "[]",
        "examples": {
            "inputs": "[[4, 6, 2, 6, 7, 3, -3],]",
            "outputs": "[0, 0, 0, 0, 1, 0, 0]"
        },
        "completions": [
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1), depth=in1.shape[0])\n",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "max_val = tf.reduce_max(in1)\noutput = tf.cast(tf.equal(in1, max_val), tf.int32)\nreturn output\n",
            "return tf.cast(tf.math.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "return tf.cast(in1 == tf.reduce_max(in1), tf.int32)\n",
            "return tf.equal(in1, tf.reduce_max(in1))",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "result = tf.equal(in1, tf.reduce_max(in1))\nreturn tf.cast(result, tf.int32)\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n",
            "max_val = tf.reduce_max(in1)\nreturn tf.cast(tf.equal(in1, max_val), tf.int32)\n",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    binary_vec = tf.cast(tf.equal(in1, max_val), tf.int32)\n    return binary_vec\n",
            "max_value = tf.reduce_max(in1)\nreturn tf.cast(tf.equal(in1, max_value), tf.int32)\n",
            "return tf.equal(in1, tf.reduce_max(in1))",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    binary_vector = tf.cast(tf.equal(in1, max_val), tf.int32)\n    return binary_vector\n",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    return tf.cast(tf.equal(in1, max_val), tf.int32)\n",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    return tf.cast(tf.equal(in1, max_val), tf.int32)\n",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "max_val = tf.reduce_max(in1)\nreturn tf.cast(tf.equal(in1, max_val), tf.int32)\n",
            "def transform(in1):\n    return tf.stack([tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)])\n",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1))\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1))\n",
            "def transform(in1):\n    max_value = tf.reduce_max(in1)\n    binary_vector = tf.where(tf.equal(in1, max_value), 1, 0)\n    return binary_vector\n",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "return tf.one_hot(tf.argmax(in1), depth=in1.shape[0])",
            "return tf.math.equal(in1, tf.reduce_max(in1))\n",
            "return tf.one_hot(tf.argmax(in1), depth=tf.size(in1), dtype=tf.int32)",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n",
            "return tf.equal(in1, tf.reduce_max(in1))",
            "max_val = tf.reduce_max(in1)\noutput = tf.cast(tf.equal(in1, max_val), dtype=tf.int32)\nreturn output.numpy()\n  ",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), dtype=tf.int32)",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1), tf.size(in1), dtype=tf.int32)\n",
            "return tf.where(tf.equal(in1, tf.reduce_max(in1)), 1, 0)",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n",
            "\nreturn tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)"
        ],
        "tf_operators": {
            "tf.reduce_max": 46,
            "tf.cast": 25,
            "tf.equal": 43,
            "tf.int32": 27,
            "tf.one_hot": 4,
            "tf.argmax": 4,
            "tf.math.equal": 2,
            "tf.stack": 1,
            "tf.where": 2,
            "tf.size": 2
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1,
                0
            ],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1,
                0
            ],
            [],
            [],
            []
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 98,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 6,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 27
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.002421307506053269,
                "tf.add(x, y)": 0.002421307506053269,
                "tf.add_n(inputs)": 0.002421307506053269,
                "tf.argmax(input, axis)": 0.012106537530266344,
                "tf.argmin(input, axis)": 0.002421307506053269,
                "tf.argsort(values, axis, stable=True)": 0.002421307506053269,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.002421307506053269,
                "tf.boolean_mask(tensor, mask)": 0.002421307506053269,
                "tf.broadcast_to(input, shape)": 0.002421307506053269,
                "tf.cast(x, dtype)": 0.06295399515738499,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.002421307506053269,
                "tf.concat(values, axis)": 0.002421307506053269,
                "tf.constant(value)": 0.002421307506053269,
                "tf.constant(value, dtype)": 0.002421307506053269,
                "tf.divide(x, y)": 0.002421307506053269,
                "tf.equal(x, y)": 0.10653753026634383,
                "tf.exp(x)": 0.002421307506053269,
                "tf.expand_dims(input, axis)": 0.002421307506053269,
                "tf.eye(num_rows)": 0.002421307506053269,
                "tf.eye(num_rows, num_columns)": 0.002421307506053269,
                "tf.eye(num_rows, dtype)": 0.002421307506053269,
                "tf.fill(dims, value)": 0.002421307506053269,
                "tf.gather(params, indices)": 0.002421307506053269,
                "tf.gather(params, indices, axis, batch_dims)": 0.002421307506053269,
                "tf.gather_nd(params, indices)": 0.002421307506053269,
                "tf.gather_nd(params, indices, batch_dims)": 0.002421307506053269,
                "tf.greater(x, y)": 0.002421307506053269,
                "tf.greater_equal(x, y)": 0.002421307506053269,
                "tf.math.bincount(arr)": 0.002421307506053269,
                "tf.math.ceil(x)": 0.002421307506053269,
                "tf.math.count_nonzero(input)": 0.002421307506053269,
                "tf.math.count_nonzero(input, axis)": 0.002421307506053269,
                "tf.math.cumsum(x, axis)": 0.002421307506053269,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.002421307506053269,
                "tf.math.divide_no_nan(x, y)": 0.002421307506053269,
                "tf.math.floor(x)": 0.002421307506053269,
                "tf.math.log(x)": 0.002421307506053269,
                "tf.math.logical_and(x, y)": 0.002421307506053269,
                "tf.math.logical_not(x)": 0.002421307506053269,
                "tf.math.logical_or(x, y)": 0.002421307506053269,
                "tf.math.logical_xor(x, y)": 0.002421307506053269,
                "tf.math.negative(x)": 0.002421307506053269,
                "tf.math.reciprocal(x)": 0.002421307506053269,
                "tf.math.reciprocal_no_nan(x)": 0.002421307506053269,
                "tf.math.segment_max(data, segment_ids)": 0.002421307506053269,
                "tf.math.segment_mean(data, segment_ids)": 0.002421307506053269,
                "tf.math.segment_min(data, segment_ids)": 0.002421307506053269,
                "tf.math.segment_prod(data, segment_ids)": 0.002421307506053269,
                "tf.math.segment_sum(data, segment_ids)": 0.002421307506053269,
                "tf.math.squared_difference(x, y)": 0.002421307506053269,
                "tf.math.top_k(input, k)": 0.002421307506053269,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.002421307506053269,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.002421307506053269,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.002421307506053269,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.002421307506053269,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.002421307506053269,
                "tf.matmul(a, b)": 0.002421307506053269,
                "tf.maximum(x, y)": 0.002421307506053269,
                "tf.minimum(x, y)": 0.002421307506053269,
                "tf.multiply(x, y)": 0.002421307506053269,
                "tf.not_equal(x, y)": 0.002421307506053269,
                "tf.one_hot(indices, depth)": 0.012106537530266344,
                "tf.ones(shape)": 0.002421307506053269,
                "tf.ones_like(input)": 0.002421307506053269,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.002421307506053269,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.002421307506053269,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.002421307506053269,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.002421307506053269,
                "tf.range(start)": 0.002421307506053269,
                "tf.range(start, limit, delta)": 0.002421307506053269,
                "tf.reduce_any(input_tensor, axis)": 0.002421307506053269,
                "tf.reduce_all(input_tensor, axis)": 0.002421307506053269,
                "tf.reduce_max(input_tensor)": 0.11380145278450363,
                "tf.reduce_max(input_tensor, axis)": 0.002421307506053269,
                "tf.reduce_mean(input_tensor)": 0.002421307506053269,
                "tf.reduce_mean(input_tensor, axis)": 0.002421307506053269,
                "tf.reduce_min(input_tensor)": 0.002421307506053269,
                "tf.reduce_min(input_tensor, axis)": 0.002421307506053269,
                "tf.reduce_prod(input_tensor, axis)": 0.002421307506053269,
                "tf.reduce_sum(input_tensor)": 0.002421307506053269,
                "tf.reduce_sum(input_tensor, axis)": 0.002421307506053269,
                "tf.repeat(input, repeats)": 0.002421307506053269,
                "tf.repeat(input, repeats, axis)": 0.002421307506053269,
                "tf.reshape(tensor, shape)": 0.002421307506053269,
                "tf.reverse(tensor, axis)": 0.002421307506053269,
                "tf.roll(input, shift, axis)": 0.002421307506053269,
                "tf.round(x)": 0.002421307506053269,
                "tf.scatter_nd(indices, updates, shape)": 0.002421307506053269,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.002421307506053269,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.002421307506053269,
                "tf.sequence_mask(lengths)": 0.002421307506053269,
                "tf.sequence_mask(lengths, maxlen)": 0.002421307506053269,
                "tf.shape(input)": 0.002421307506053269,
                "tf.sign(x)": 0.002421307506053269,
                "tf.sort(values, axis)": 0.002421307506053269,
                "tf.sort(values, axis, direction='DESCENDING')": 0.002421307506053269,
                "tf.sqrt(x)": 0.002421307506053269,
                "tf.square(x)": 0.002421307506053269,
                "tf.squeeze(input)": 0.002421307506053269,
                "tf.squeeze(input, axis)": 0.002421307506053269,
                "tf.stack(values, axis)": 0.004842615012106538,
                "tf.subtract(x, y)": 0.002421307506053269,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.002421307506053269,
                "tf.tensordot(a, b, axes)": 0.002421307506053269,
                "tf.tile(input, multiples)": 0.002421307506053269,
                "tf.transpose(a)": 0.002421307506053269,
                "tf.transpose(a, perm)": 0.002421307506053269,
                "tf.unique_with_counts(x)": 0.002421307506053269,
                "tf.unstack(value, axis)": 0.002421307506053269,
                "tf.where(condition)": 0.002421307506053269,
                "tf.where(condition, x, y)": 0.007263922518159807,
                "tf.zeros(shape)": 0.002421307506053269,
                "tf.zeros_like(input)": 0.002421307506053269,
                "tf.SparseTensor(indices, values, dense_shape)": 0.002421307506053269,
                "tf.sparse.add(a, b)": 0.002421307506053269,
                "tf.sparse.concat(axis, sp_inputs)": 0.002421307506053269,
                "tf.sparse.expand_dims(sp_input, axis)": 0.002421307506053269,
                "tf.sparse.from_dense(tensor)": 0.002421307506053269,
                "tf.sparse.maximum(sp_a, sp_b)": 0.002421307506053269,
                "tf.sparse.minimum(sp_a, sp_b)": 0.002421307506053269,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.002421307506053269,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.002421307506053269,
                "tf.sparse.reset_shape(sp_input)": 0.002421307506053269,
                "tf.sparse.reshape(sp_input, shape)": 0.002421307506053269,
                "tf.sparse.retain(sp_input, to_retain)": 0.002421307506053269,
                "tf.sparse.slice(sp_input, start, size)": 0.002421307506053269,
                "tf.sparse.split(sp_input, num_split, axis)": 0.002421307506053269,
                "tf.sparse.to_dense(sp_input)": 0.002421307506053269,
                "tf.sparse.to_dense(sp_input, default_value)": 0.002421307506053269,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.002421307506053269,
                "tf.sparse.transpose(sp_input)": 0.002421307506053269,
                "tf.sparse.transpose(sp_input, perm)": 0.002421307506053269,
                "IndexingAxis1Operation": 0.002421307506053269,
                "IndexingOperation": 0.007263922518159807,
                "PairCreationOperation": 0.002421307506053269,
                "SingletonTupleCreationOperation": 0.002421307506053269,
                "SlicingAxis0BothOperation": 0.002421307506053269,
                "SlicingAxis0LeftOperation": 0.002421307506053269,
                "SlicingAxis0RightOperation": 0.002421307506053269,
                "SlicingAxis1BothOperation": 0.002421307506053269,
                "SlicingAxis1LeftOperation": 0.002421307506053269,
                "SlicingAxis1RightOperation": 0.002421307506053269,
                "TripleCreationOperation": 0.002421307506053269,
                "PROVIDED_CONSTANT_WEIGHT": 0.002421307506053269,
                "COMMON_CONSTANT_WEIGHT": 0.01694915254237288,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.002421307506053269,
                "INPUT_VARIABLE_WEIGHT": 0.2397094430992736,
                "AXIS_CONSTANT_WEIGHT": 0.002421307506053269,
                "SHAPE_CONSTANT_WEIGHT": 0.002421307506053269,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.002421307506053269,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.06779661016949153,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.002421307506053269,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.002421307506053269,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.002421307506053269
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 6,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 4,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 3,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 9,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 6,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 9,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 3,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 9,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 7,
                "PairCreationOperation": 9,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 6,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 9,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 4,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_43",
        "description": "extract elements of a tensor given row indices",
        "target_program": "tf.gather_nd(tf.transpose(in1), tf.expand_dims(in2, 1), batch_dims=1)",
        "source": "https://stackoverflow.com/questions/54455169/better-way-to-access-individual-elements-in-a-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[[12, 34, 56, 78, 90, 10], [99, 88, 77, 55, 44, 33], [-1, -2, -3, -4, -5, -6]],[0, 1, 1, 0, 2, 0],]",
            "outputs": "[12, 88, 77, 78, -5, 10]"
        },
        "completions": [
            "return tf.gather(in1, in2)\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(params=in1, indices=in2)",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.transpose([in2]))\n",
            "return tf.gather(in1, in2)",
            "output = tf.gather_nd(in1, in2)\nreturn output\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.size(in2))], axis=1))\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.size(in2))], axis=1))",
            "return tf.gather(in1, in2)",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(in1, in2)",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(in1, in2)\n",
            "output = tf.gather_nd(in1, in2)\nreturn output\n",
            "return tf.gather(in1, in2)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n",
            "return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.size(in2))], axis=1))\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather_nd(in1, tf.stack((in2, tf.range(tf.size(in2))), axis=1))",
            "return tf.gather_nd(in1, tf.stack((in2, tf.range(in2.shape[0])), axis=1))\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(in1, in2)",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "output = tf.gather(in1, in2)\nreturn output\n",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.size(in2))], axis=1))\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(params=in1, indices=in2, axis=1)\n",
            "return tf.gather(params=in1, indices=in2)\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(in1, in2)",
            "return tf.gather(in1, in2, axis=0)\n",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n",
            "return tf.gather_nd(in1, tf.stack((tf.range(tf.shape(in1)[0]), in2), axis=1))\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(params=in1, indices=in2)\n",
            "return tf.gather(params=in1, indices=in2)\n",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.shape(in2)[0])], axis=1))\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.size(in2))], axis=1))\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.size(in2))], axis=1))\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(params=in1, indices=in2)\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(params=in1, indices=in2)"
        ],
        "tf_operators": {
            "tf.gather": 35,
            "tf.transpose": 1,
            "tf.gather_nd": 15,
            "tf.size": 7,
            "tf.range": 12,
            "tf.stack": 12,
            "tf.shape": 4
        },
        "coverage_percentage": 66.66666666666666,
        "total_covered": 2,
        "total_in_target": 3,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                0,
                1
            ],
            [],
            [],
            [
                0,
                1
            ],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [],
            [],
            [],
            [
                0,
                1
            ],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [],
            [],
            []
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 108,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 19,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.002717391304347826,
                "tf.add(x, y)": 0.002717391304347826,
                "tf.add_n(inputs)": 0.002717391304347826,
                "tf.argmax(input, axis)": 0.002717391304347826,
                "tf.argmin(input, axis)": 0.002717391304347826,
                "tf.argsort(values, axis, stable=True)": 0.002717391304347826,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.002717391304347826,
                "tf.boolean_mask(tensor, mask)": 0.002717391304347826,
                "tf.broadcast_to(input, shape)": 0.002717391304347826,
                "tf.cast(x, dtype)": 0.002717391304347826,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.002717391304347826,
                "tf.concat(values, axis)": 0.002717391304347826,
                "tf.constant(value)": 0.002717391304347826,
                "tf.constant(value, dtype)": 0.002717391304347826,
                "tf.divide(x, y)": 0.002717391304347826,
                "tf.equal(x, y)": 0.002717391304347826,
                "tf.exp(x)": 0.002717391304347826,
                "tf.expand_dims(input, axis)": 0.002717391304347826,
                "tf.eye(num_rows)": 0.002717391304347826,
                "tf.eye(num_rows, num_columns)": 0.002717391304347826,
                "tf.eye(num_rows, dtype)": 0.002717391304347826,
                "tf.fill(dims, value)": 0.002717391304347826,
                "tf.gather(params, indices)": 0.07608695652173914,
                "tf.gather(params, indices, axis, batch_dims)": 0.021739130434782608,
                "tf.gather_nd(params, indices)": 0.043478260869565216,
                "tf.gather_nd(params, indices, batch_dims)": 0.002717391304347826,
                "tf.greater(x, y)": 0.002717391304347826,
                "tf.greater_equal(x, y)": 0.002717391304347826,
                "tf.math.bincount(arr)": 0.002717391304347826,
                "tf.math.ceil(x)": 0.002717391304347826,
                "tf.math.count_nonzero(input)": 0.002717391304347826,
                "tf.math.count_nonzero(input, axis)": 0.002717391304347826,
                "tf.math.cumsum(x, axis)": 0.002717391304347826,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.002717391304347826,
                "tf.math.divide_no_nan(x, y)": 0.002717391304347826,
                "tf.math.floor(x)": 0.002717391304347826,
                "tf.math.log(x)": 0.002717391304347826,
                "tf.math.logical_and(x, y)": 0.002717391304347826,
                "tf.math.logical_not(x)": 0.002717391304347826,
                "tf.math.logical_or(x, y)": 0.002717391304347826,
                "tf.math.logical_xor(x, y)": 0.002717391304347826,
                "tf.math.negative(x)": 0.002717391304347826,
                "tf.math.reciprocal(x)": 0.002717391304347826,
                "tf.math.reciprocal_no_nan(x)": 0.002717391304347826,
                "tf.math.segment_max(data, segment_ids)": 0.002717391304347826,
                "tf.math.segment_mean(data, segment_ids)": 0.002717391304347826,
                "tf.math.segment_min(data, segment_ids)": 0.002717391304347826,
                "tf.math.segment_prod(data, segment_ids)": 0.002717391304347826,
                "tf.math.segment_sum(data, segment_ids)": 0.002717391304347826,
                "tf.math.squared_difference(x, y)": 0.002717391304347826,
                "tf.math.top_k(input, k)": 0.002717391304347826,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.002717391304347826,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.002717391304347826,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.002717391304347826,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.002717391304347826,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.002717391304347826,
                "tf.matmul(a, b)": 0.002717391304347826,
                "tf.maximum(x, y)": 0.002717391304347826,
                "tf.minimum(x, y)": 0.002717391304347826,
                "tf.multiply(x, y)": 0.002717391304347826,
                "tf.not_equal(x, y)": 0.002717391304347826,
                "tf.one_hot(indices, depth)": 0.002717391304347826,
                "tf.ones(shape)": 0.002717391304347826,
                "tf.ones_like(input)": 0.002717391304347826,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.002717391304347826,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.002717391304347826,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.002717391304347826,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.002717391304347826,
                "tf.range(start)": 0.035326086956521736,
                "tf.range(start, limit, delta)": 0.002717391304347826,
                "tf.reduce_any(input_tensor, axis)": 0.002717391304347826,
                "tf.reduce_all(input_tensor, axis)": 0.002717391304347826,
                "tf.reduce_max(input_tensor)": 0.002717391304347826,
                "tf.reduce_max(input_tensor, axis)": 0.002717391304347826,
                "tf.reduce_mean(input_tensor)": 0.002717391304347826,
                "tf.reduce_mean(input_tensor, axis)": 0.002717391304347826,
                "tf.reduce_min(input_tensor)": 0.002717391304347826,
                "tf.reduce_min(input_tensor, axis)": 0.002717391304347826,
                "tf.reduce_prod(input_tensor, axis)": 0.002717391304347826,
                "tf.reduce_sum(input_tensor)": 0.002717391304347826,
                "tf.reduce_sum(input_tensor, axis)": 0.002717391304347826,
                "tf.repeat(input, repeats)": 0.002717391304347826,
                "tf.repeat(input, repeats, axis)": 0.002717391304347826,
                "tf.reshape(tensor, shape)": 0.002717391304347826,
                "tf.reverse(tensor, axis)": 0.002717391304347826,
                "tf.roll(input, shift, axis)": 0.002717391304347826,
                "tf.round(x)": 0.002717391304347826,
                "tf.scatter_nd(indices, updates, shape)": 0.002717391304347826,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.002717391304347826,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.002717391304347826,
                "tf.sequence_mask(lengths)": 0.002717391304347826,
                "tf.sequence_mask(lengths, maxlen)": 0.002717391304347826,
                "tf.shape(input)": 0.01358695652173913,
                "tf.sign(x)": 0.002717391304347826,
                "tf.sort(values, axis)": 0.002717391304347826,
                "tf.sort(values, axis, direction='DESCENDING')": 0.002717391304347826,
                "tf.sqrt(x)": 0.002717391304347826,
                "tf.square(x)": 0.002717391304347826,
                "tf.squeeze(input)": 0.002717391304347826,
                "tf.squeeze(input, axis)": 0.002717391304347826,
                "tf.stack(values, axis)": 0.035326086956521736,
                "tf.subtract(x, y)": 0.002717391304347826,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.002717391304347826,
                "tf.tensordot(a, b, axes)": 0.002717391304347826,
                "tf.tile(input, multiples)": 0.002717391304347826,
                "tf.transpose(a)": 0.005434782608695652,
                "tf.transpose(a, perm)": 0.002717391304347826,
                "tf.unique_with_counts(x)": 0.002717391304347826,
                "tf.unstack(value, axis)": 0.002717391304347826,
                "tf.where(condition)": 0.002717391304347826,
                "tf.where(condition, x, y)": 0.002717391304347826,
                "tf.zeros(shape)": 0.002717391304347826,
                "tf.zeros_like(input)": 0.002717391304347826,
                "tf.SparseTensor(indices, values, dense_shape)": 0.002717391304347826,
                "tf.sparse.add(a, b)": 0.002717391304347826,
                "tf.sparse.concat(axis, sp_inputs)": 0.002717391304347826,
                "tf.sparse.expand_dims(sp_input, axis)": 0.002717391304347826,
                "tf.sparse.from_dense(tensor)": 0.002717391304347826,
                "tf.sparse.maximum(sp_a, sp_b)": 0.002717391304347826,
                "tf.sparse.minimum(sp_a, sp_b)": 0.002717391304347826,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.002717391304347826,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.002717391304347826,
                "tf.sparse.reset_shape(sp_input)": 0.002717391304347826,
                "tf.sparse.reshape(sp_input, shape)": 0.002717391304347826,
                "tf.sparse.retain(sp_input, to_retain)": 0.002717391304347826,
                "tf.sparse.slice(sp_input, start, size)": 0.002717391304347826,
                "tf.sparse.split(sp_input, num_split, axis)": 0.002717391304347826,
                "tf.sparse.to_dense(sp_input)": 0.002717391304347826,
                "tf.sparse.to_dense(sp_input, default_value)": 0.002717391304347826,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.002717391304347826,
                "tf.sparse.transpose(sp_input)": 0.002717391304347826,
                "tf.sparse.transpose(sp_input, perm)": 0.002717391304347826,
                "IndexingAxis1Operation": 0.002717391304347826,
                "IndexingOperation": 0.016304347826086956,
                "PairCreationOperation": 0.010869565217391304,
                "SingletonTupleCreationOperation": 0.002717391304347826,
                "SlicingAxis0BothOperation": 0.002717391304347826,
                "SlicingAxis0LeftOperation": 0.002717391304347826,
                "SlicingAxis0RightOperation": 0.002717391304347826,
                "SlicingAxis1BothOperation": 0.002717391304347826,
                "SlicingAxis1LeftOperation": 0.002717391304347826,
                "SlicingAxis1RightOperation": 0.002717391304347826,
                "TripleCreationOperation": 0.002717391304347826,
                "PROVIDED_CONSTANT_WEIGHT": 0.002717391304347826,
                "COMMON_CONSTANT_WEIGHT": 0.05434782608695652,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.002717391304347826,
                "INPUT_VARIABLE_WEIGHT": 0.296195652173913,
                "AXIS_CONSTANT_WEIGHT": 0.002717391304347826,
                "SHAPE_CONSTANT_WEIGHT": 0.002717391304347826,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.002717391304347826,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.002717391304347826,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.002717391304347826,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.002717391304347826,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.002717391304347826
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 9,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 9,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 4,
                "tf.gather(params, indices, axis, batch_dims)": 6,
                "tf.gather_nd(params, indices)": 5,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 5,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 6,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 5,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 6,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 9,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_44",
        "description": "sum across columns for pairs of consecutive rows",
        "target_program": "tf.squeeze(tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1))",
        "source": "https://stackoverflow.com/questions/54402389/sum-the-columns-for-each-two-consecutive-rows-of-a-tensor-of-3-dimensions",
        "constants": "[2]",
        "examples": {
            "inputs": "[[[3, 5, 2], [6, 2, 3], [8, 7, 1], [0, -3, 5], [-4, 7, 3], [2, 1, 6], [10, 20, 30], [4, 5, 6]],]",
            "outputs": "[[9, 7, 5],    [8, 4, 6],    [-2, 8, 9],    [14, 25, 36]]"
        },
        "completions": [
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n",
            "return tf.math.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, tf.shape(in1)[0], 2)], axis=1), axis=1)\n",
            "out = tf.math.segment_sum(in1, tf.repeat(tf.constant([0, 1], dtype=tf.int32), tf.shape(in1)[0]//2))\nreturn out\n",
            "return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, in1.shape[0], 2)], axis=2), axis=2)\n",
            "return tf.math.segment_sum(in1, tf.tile(tf.constant([0, 1], tf.int32), tf.expand_dims(tf.shape(in1)[0] // 2, 0)))\n",
            "return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, in1.shape[0], 2)], axis=2), axis=1)\n",
            "sums = tf.reduce_sum(tf.reshape(in1, (-1, 2, 3)), axis=1)\nreturn sums\n",
            "return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, len(in1), 2)], axis=0), axis=1)\n",
            "return tf.math.cumsum(tf.transpose(in1), axis=1)[:, 1::2] - tf.math.cumsum(tf.transpose(in1), axis=1)[:, ::2]\n",
            "return tf.math.segment_sum(in1, tf.range(in1.shape[0]) // 2)\n",
            "return tf.math.segment_sum(in1, tf.range(tf.shape(in1)[0])//2)",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, 3)), axis=1)\n",
            "return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, tf.shape(in1)[0], 2)], axis=1), axis=1)\n",
            "return tf.math.segment_sum(in1, tf.range(tf.shape(in1)[0] // 2), axis=0)\n",
            "return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, tf.shape(in1)[0], 2)], axis=1), axis=1)\n",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, tf.shape(in1)[1])), axis=1)\n",
            "return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, len(in1)-1, 2)], axis=0), axis=1)\n",
            "return tf.math.segment_sum(in1, tf.range(tf.shape(in1)[0]) // 2)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (4, 2, 3)), axis=1)\n",
            "return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, in1.shape[0], 2)], axis=2), axis=1)\n",
            "return tf.cast(tf.unstack(in1, axis=1), tf.int32)\n",
            "sums = tf.roll(in1, shift=-1, axis=0) + in1\nreturn tf.reduce_sum(sums, axis=1)\n",
            "return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, tf.shape(in1)[0]-1, 2)], axis=1), axis=1)\n",
            "return tf.math.unsorted_segment_sum(in1, tf.repeat(tf.range(4), 2), 4)\n",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, tf.shape(in1)[1])), axis=1)\n",
            "return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, 8, 2)], axis=2), axis=2)\n",
            "return tf.reshape(tf.reduce_sum(tf.reshape(in1, (-1, 2, 3)), axis=1), (4, 3))\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n",
            "return tf.reduce_sum(tf.stack([in1[:-1], in1[1:]], axis=1), axis=1)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n",
            "return tf.cast(tf.reshape(tf.reduce_sum(tf.reshape(in1, [-1, 2, 3]), axis=1), [-1, 3]), tf.int32)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n",
            "return tf.math.segment_sum(in1, tf.concat([tf.zeros(in1.shape[0] - 1, dtype=tf.int32), tf.ones(in1.shape[0] - 1, dtype=tf.int32)], axis=0))\n",
            "return tf.reshape(tf.reduce_sum(tf.stack(tf.unstack(in1[::2], axis=0) + tf.unstack(in1[1::2], axis=0), axis=1), axis=1), (-1, in1.shape[1]))",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, 3)), 1)\n",
            "return tf.reduce_sum(tf.stack([in1[::2], in1[1::2]], axis=1), axis=1)\n",
            "return tf.math.segment_sum(in1, tf.constant([0, 0, 1, 1, 2, 2, 3, 3]))\n",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, 3)), axis=1)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]), axis=1)\n",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, 3)), axis=1)\n",
            "return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, tf.shape(in1)[0], 2)], axis=2), axis=1)\n",
            "return tf.math.segment_sum(in1, tf.constant([0, 0, 1, 1, 2, 2, 3, 3], dtype=tf.int32))\n",
            "return tf.math.unsorted_segment_sum(in1, tf.fill((in1.shape[0]//2,), tf.constant(0, dtype=tf.int32)), in1.shape[0]//2)\n",
            "return tf.math.cumsum(tf.stack([in1[i:i+2] for i in range(0, tf.shape(in1)[0], 2)], axis=1), axis=1)\n",
            "return tf.math.segment_sum(in1, tf.math.range(4))\n",
            "return tf.math.segment_sum(in1, tf.range(tf.shape(in1)[0]) // 2)\n",
            "return tf.math.segment_sum(in1, tf.repeat(tf.range(2), len(in1)//2))\n",
            "return tf.math.segment_sum(in1, tf.range(tf.shape(in1)[0]) // 2)\n"
        ],
        "tf_operators": {
            "tf.reshape": 18,
            "tf.reduce_sum": 31,
            "tf.math.reduce_sum": 1,
            "tf.shape": 16,
            "tf.stack": 15,
            "tf.repeat": 3,
            "tf.math.segment_sum": 13,
            "tf.int32": 7,
            "tf.constant": 5,
            "tf.tile": 1,
            "tf.expand_dims": 1,
            "tf.math.cumsum": 2,
            "tf.transpose": 1,
            "tf.range": 8,
            "tf.cast": 2,
            "tf.unstack": 2,
            "tf.roll": 1,
            "tf.math.unsorted_segment_sum": 2,
            "tf.concat": 1,
            "tf.ones": 1,
            "tf.zeros": 1,
            "tf.fill": 1,
            "tf.math.range": 1
        },
        "coverage_percentage": 66.66666666666666,
        "total_covered": 2,
        "total_in_target": 3,
        "parsed_constants": [
            [
                -1,
                2,
                1,
                1
            ],
            [
                2,
                0,
                0,
                2,
                1,
                1
            ],
            [
                0,
                1,
                0,
                2
            ],
            [
                2,
                0,
                0,
                2,
                2,
                2
            ],
            [
                0,
                1,
                0,
                2,
                0
            ],
            [
                2,
                0,
                0,
                2,
                2,
                1
            ],
            [
                -1,
                2,
                3,
                1
            ],
            [
                2,
                0,
                2,
                0,
                1
            ],
            [
                1,
                1,
                2,
                1,
                2
            ],
            [
                0,
                2
            ],
            [
                0,
                2
            ],
            [
                -1,
                2,
                3,
                1
            ],
            [
                2,
                0,
                0,
                2,
                1,
                1
            ],
            [
                0,
                2,
                0
            ],
            [
                2,
                0,
                0,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                2,
                0,
                1,
                2,
                0,
                1
            ],
            [
                0,
                2
            ],
            [
                4,
                2,
                3,
                1
            ],
            [
                2,
                0,
                0,
                2,
                2,
                1
            ],
            [
                1
            ],
            [
                -1,
                0,
                1
            ],
            [
                2,
                0,
                0,
                1,
                2,
                1,
                1
            ],
            [
                4,
                2,
                4
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                2,
                0,
                8,
                2,
                2,
                2
            ],
            [
                -1,
                2,
                3,
                1,
                4,
                3
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                -1,
                1,
                1,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                3,
                1,
                -1,
                3
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                0,
                1,
                0,
                1,
                0
            ],
            [
                2,
                0,
                1,
                2,
                0,
                1,
                1,
                -1,
                1
            ],
            [
                -1,
                2,
                3,
                1
            ],
            [
                2,
                1,
                2,
                1,
                1
            ],
            [
                0,
                0,
                1,
                1,
                2,
                2,
                3,
                3
            ],
            [
                -1,
                2,
                3,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                3,
                1
            ],
            [
                2,
                0,
                0,
                2,
                2,
                1
            ],
            [
                0,
                0,
                1,
                1,
                2,
                2,
                3,
                3
            ],
            [
                0,
                2,
                0,
                0,
                2
            ],
            [
                2,
                0,
                0,
                2,
                1,
                1
            ],
            [
                4
            ],
            [
                0,
                2
            ],
            [
                2,
                2
            ],
            [
                0,
                2
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            4,
            8,
            -1
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 4,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 4,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 2,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 2,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 2,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 74,
            "shape": 7,
            "tf_bool": 0,
            "provided": 3,
            "common": 134,
            "shape_tuple": 1,
            "tf_float32": 0,
            "axis": 56,
            "tf_int64": 0,
            "tf_int32": 8
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.001658374792703151,
                "tf.add(x, y)": 0.001658374792703151,
                "tf.add_n(inputs)": 0.001658374792703151,
                "tf.argmax(input, axis)": 0.001658374792703151,
                "tf.argmin(input, axis)": 0.001658374792703151,
                "tf.argsort(values, axis, stable=True)": 0.001658374792703151,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.001658374792703151,
                "tf.boolean_mask(tensor, mask)": 0.001658374792703151,
                "tf.broadcast_to(input, shape)": 0.001658374792703151,
                "tf.cast(x, dtype)": 0.004975124378109453,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.001658374792703151,
                "tf.concat(values, axis)": 0.003316749585406302,
                "tf.constant(value)": 0.003316749585406302,
                "tf.constant(value, dtype)": 0.003316749585406302,
                "tf.divide(x, y)": 0.001658374792703151,
                "tf.equal(x, y)": 0.001658374792703151,
                "tf.exp(x)": 0.001658374792703151,
                "tf.expand_dims(input, axis)": 0.003316749585406302,
                "tf.eye(num_rows)": 0.001658374792703151,
                "tf.eye(num_rows, num_columns)": 0.001658374792703151,
                "tf.eye(num_rows, dtype)": 0.001658374792703151,
                "tf.fill(dims, value)": 0.003316749585406302,
                "tf.gather(params, indices)": 0.001658374792703151,
                "tf.gather(params, indices, axis, batch_dims)": 0.001658374792703151,
                "tf.gather_nd(params, indices)": 0.001658374792703151,
                "tf.gather_nd(params, indices, batch_dims)": 0.001658374792703151,
                "tf.greater(x, y)": 0.001658374792703151,
                "tf.greater_equal(x, y)": 0.001658374792703151,
                "tf.math.bincount(arr)": 0.001658374792703151,
                "tf.math.ceil(x)": 0.001658374792703151,
                "tf.math.count_nonzero(input)": 0.001658374792703151,
                "tf.math.count_nonzero(input, axis)": 0.001658374792703151,
                "tf.math.cumsum(x, axis)": 0.001658374792703151,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.006633499170812604,
                "tf.math.divide_no_nan(x, y)": 0.001658374792703151,
                "tf.math.floor(x)": 0.001658374792703151,
                "tf.math.log(x)": 0.001658374792703151,
                "tf.math.logical_and(x, y)": 0.001658374792703151,
                "tf.math.logical_not(x)": 0.001658374792703151,
                "tf.math.logical_or(x, y)": 0.001658374792703151,
                "tf.math.logical_xor(x, y)": 0.001658374792703151,
                "tf.math.negative(x)": 0.001658374792703151,
                "tf.math.reciprocal(x)": 0.001658374792703151,
                "tf.math.reciprocal_no_nan(x)": 0.001658374792703151,
                "tf.math.segment_max(data, segment_ids)": 0.001658374792703151,
                "tf.math.segment_mean(data, segment_ids)": 0.001658374792703151,
                "tf.math.segment_min(data, segment_ids)": 0.001658374792703151,
                "tf.math.segment_prod(data, segment_ids)": 0.001658374792703151,
                "tf.math.segment_sum(data, segment_ids)": 0.02321724709784411,
                "tf.math.squared_difference(x, y)": 0.001658374792703151,
                "tf.math.top_k(input, k)": 0.001658374792703151,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.001658374792703151,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.001658374792703151,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.001658374792703151,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.001658374792703151,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004975124378109453,
                "tf.matmul(a, b)": 0.001658374792703151,
                "tf.maximum(x, y)": 0.001658374792703151,
                "tf.minimum(x, y)": 0.001658374792703151,
                "tf.multiply(x, y)": 0.001658374792703151,
                "tf.not_equal(x, y)": 0.001658374792703151,
                "tf.one_hot(indices, depth)": 0.001658374792703151,
                "tf.ones(shape)": 0.003316749585406302,
                "tf.ones_like(input)": 0.001658374792703151,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.001658374792703151,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.001658374792703151,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.001658374792703151,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.001658374792703151,
                "tf.range(start)": 0.014925373134328358,
                "tf.range(start, limit, delta)": 0.001658374792703151,
                "tf.reduce_any(input_tensor, axis)": 0.001658374792703151,
                "tf.reduce_all(input_tensor, axis)": 0.001658374792703151,
                "tf.reduce_max(input_tensor)": 0.001658374792703151,
                "tf.reduce_max(input_tensor, axis)": 0.001658374792703151,
                "tf.reduce_mean(input_tensor)": 0.001658374792703151,
                "tf.reduce_mean(input_tensor, axis)": 0.001658374792703151,
                "tf.reduce_min(input_tensor)": 0.001658374792703151,
                "tf.reduce_min(input_tensor, axis)": 0.001658374792703151,
                "tf.reduce_prod(input_tensor, axis)": 0.001658374792703151,
                "tf.reduce_sum(input_tensor)": 0.001658374792703151,
                "tf.reduce_sum(input_tensor, axis)": 0.003316749585406302,
                "tf.repeat(input, repeats)": 0.006633499170812604,
                "tf.repeat(input, repeats, axis)": 0.001658374792703151,
                "tf.reshape(tensor, shape)": 0.03482587064676617,
                "tf.reverse(tensor, axis)": 0.001658374792703151,
                "tf.roll(input, shift, axis)": 0.003316749585406302,
                "tf.round(x)": 0.001658374792703151,
                "tf.scatter_nd(indices, updates, shape)": 0.001658374792703151,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.001658374792703151,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.001658374792703151,
                "tf.sequence_mask(lengths)": 0.001658374792703151,
                "tf.sequence_mask(lengths, maxlen)": 0.001658374792703151,
                "tf.shape(input)": 0.028192371475953566,
                "tf.sign(x)": 0.001658374792703151,
                "tf.sort(values, axis)": 0.001658374792703151,
                "tf.sort(values, axis, direction='DESCENDING')": 0.001658374792703151,
                "tf.sqrt(x)": 0.001658374792703151,
                "tf.square(x)": 0.001658374792703151,
                "tf.squeeze(input)": 0.001658374792703151,
                "tf.squeeze(input, axis)": 0.001658374792703151,
                "tf.stack(values, axis)": 0.026533996683250415,
                "tf.subtract(x, y)": 0.001658374792703151,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.001658374792703151,
                "tf.tensordot(a, b, axes)": 0.001658374792703151,
                "tf.tile(input, multiples)": 0.003316749585406302,
                "tf.transpose(a)": 0.004975124378109453,
                "tf.transpose(a, perm)": 0.001658374792703151,
                "tf.unique_with_counts(x)": 0.001658374792703151,
                "tf.unstack(value, axis)": 0.006633499170812604,
                "tf.where(condition)": 0.001658374792703151,
                "tf.where(condition, x, y)": 0.001658374792703151,
                "tf.zeros(shape)": 0.003316749585406302,
                "tf.zeros_like(input)": 0.001658374792703151,
                "tf.SparseTensor(indices, values, dense_shape)": 0.001658374792703151,
                "tf.sparse.add(a, b)": 0.001658374792703151,
                "tf.sparse.concat(axis, sp_inputs)": 0.001658374792703151,
                "tf.sparse.expand_dims(sp_input, axis)": 0.001658374792703151,
                "tf.sparse.from_dense(tensor)": 0.001658374792703151,
                "tf.sparse.maximum(sp_a, sp_b)": 0.001658374792703151,
                "tf.sparse.minimum(sp_a, sp_b)": 0.001658374792703151,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.001658374792703151,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.001658374792703151,
                "tf.sparse.reset_shape(sp_input)": 0.001658374792703151,
                "tf.sparse.reshape(sp_input, shape)": 0.001658374792703151,
                "tf.sparse.retain(sp_input, to_retain)": 0.001658374792703151,
                "tf.sparse.slice(sp_input, start, size)": 0.001658374792703151,
                "tf.sparse.split(sp_input, num_split, axis)": 0.001658374792703151,
                "tf.sparse.to_dense(sp_input)": 0.001658374792703151,
                "tf.sparse.to_dense(sp_input, default_value)": 0.001658374792703151,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.001658374792703151,
                "tf.sparse.transpose(sp_input)": 0.001658374792703151,
                "tf.sparse.transpose(sp_input, perm)": 0.001658374792703151,
                "IndexingAxis1Operation": 0.001658374792703151,
                "IndexingOperation": 0.05306799336650083,
                "PairCreationOperation": 0.008291873963515755,
                "SingletonTupleCreationOperation": 0.003316749585406302,
                "SlicingAxis0BothOperation": 0.02155887230514096,
                "SlicingAxis0LeftOperation": 0.006633499170812604,
                "SlicingAxis0RightOperation": 0.003316749585406302,
                "SlicingAxis1BothOperation": 0.001658374792703151,
                "SlicingAxis1LeftOperation": 0.003316749585406302,
                "SlicingAxis1RightOperation": 0.001658374792703151,
                "TripleCreationOperation": 0.026533996683250415,
                "PROVIDED_CONSTANT_WEIGHT": 0.006633499170812604,
                "COMMON_CONSTANT_WEIGHT": 0.22388059701492538,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.001658374792703151,
                "INPUT_VARIABLE_WEIGHT": 0.12437810945273632,
                "AXIS_CONSTANT_WEIGHT": 0.0945273631840796,
                "SHAPE_CONSTANT_WEIGHT": 0.013266998341625208,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.003316749585406302,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.014925373134328358,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.001658374792703151,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.001658374792703151,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.001658374792703151
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 5,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 6,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 5,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 5,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 5,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 4,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 6,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 5,
                "PROVIDED_CONSTANT_WEIGHT": 7,
                "COMMON_CONSTANT_WEIGHT": 2,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 3,
                "SHAPE_CONSTANT_WEIGHT": 6,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 6,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_45",
        "description": "reverse the order in the marked rows",
        "target_program": "tf.where(tf.sequence_mask(in2), x=tf.roll(in1, 1, -1), y=in1)",
        "source": "https://stackoverflow.com/questions/54337925/reverse-order-of-some-elements-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[12, 34], [56, 78], [23, 54], [76, 78], [42, 24]]],[1, 0, 1, 0, 1],]",
            "outputs": "[[[34, 12], [56, 78], [54, 23], [76, 78], [24, 42]]]"
        },
        "completions": [
            "return tf.stack([tf.reverse(row, axis=[-1]) if mark == 1 else row for row, mark in zip(tf.squeeze(in1, 0), in2)])",
            "return tf.boolean_mask(in1, tf.equal(tf.range(tf.shape(in2)[0]), tf.reverse(in2, axis=[0])))",
            "return tf.where(tf.equal(tf.expand_dims(in2, 1), 1), tf.reverse(in1, [-1]), in1)",
            "def transform(in1, in2):\n    reversed_indices = tf.argsort(in2, axis=None)\n    reversed_in1 = tf.reverse(in1, axis=[0])\n    return tf.gather(reversed_in1, reversed_indices)",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.argsort(tf.argsort(tf.range(tf.shape(in2)[0]), axis=-1, direction='DESCENDING'), axis=0, stable=True), batch_dims=1)\n",
            "out = tf.reverse(in1, axis=[1])\nout = tf.where(in2, out, in1)\nreturn out\n",
            "return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=[-1])",
            "return tf.boolean_mask(in1, in2, axis=1)",
            "return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=[2])",
            "return tf.map_fn(lambda x: tf.reverse(x), in1, in2)",
            "return tf.where(tf.broadcast_to(tf.expand_dims(in2, 1), tf.shape(in1)), tf.reverse(in1, [-1]), in1)",
            "return tf.stack([tf.reverse(row, axis=[0]) if mark else row for row, mark in zip(tf.unstack(in1, axis=1), tf.unstack(in2))], axis=1)",
            "return tf.boolean_mask(in1, tf.equal(in2, 0))",
            "return tf.stack([tf.reverse(tf.gather(params=in1[0], indices=tf.where(in2)[:, 0]), axis=[0])])",
            "return tf.stack([tf.reverse(tf.boolean_mask(row, tf.equal(in2, 1)), axis=[0]) for row in tf.unstack(in1)])",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))",
            "return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=[-2])",
            "return tf.boolean_mask(in1, tf.equal(in2, 1), axis=2)",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))",
            "def transform(in1, in2):\n    in1 = tf.reverse(in1, axis=[0])\n    in1 = tf.where(tf.equal(in2, 1), in1, tf.reverse(in1, axis=[1]))\n    return in1\n",
            "return tf.where(in2, tf.reverse(in1, [-1]), in1)",
            "return tf.where(tf.cast(in2, tf.bool), tf.reverse(in1, [-2]), in1)",
            "return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=[-1])",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))",
            "def transform(in1, in2):\n    return tf.reverse(tf.boolean_mask(in1[0], tf.cast(in2, tf.bool)), axis=[1])\n",
            "def transform(in1, in2):\n    return tf.reverse(tf.boolean_mask(in1, in2), axis=[2])\n",
            "return tf.boolean_mask(in1, tf.math.equal(in2, 0), axis=2), tf.reverse(tf.boolean_mask(in1, tf.math.equal(in2, 1), axis=2), axis=[2])",
            "return tf.stack([tf.reverse(row, axis=[0]) if mark else row for row, mark in zip(tf.unstack(in1, axis=1), tf.cast(in2, tf.bool))], axis=1)",
            "return tf.boolean_mask(in1, tf.math.logical_not(tf.cast(in2, tf.bool)), axis=2)",
            "return tf.map_fn(lambda x: tf.reverse(x[0], axis=[0]) if x[1] == 1 else x[0], (in1, in2), dtype=tf.int32)",
            "# Reverse the order in the marked rows\nreturn tf.reverse(in1, axis=[1])[0::in2.shape[0]]\n",
            "def transform(in1, in2):\n    return tf.reverse(in1, axis=[1])[0] * in2[:, tf.newaxis]\n",
            "result = tf.reverse(in1, axis=[1])\nmask = tf.equal(in2, 0)\nindices = tf.where(mask)\nreturn tf.tensor_scatter_nd_update(result, indices, tf.reverse(tf.gather_nd(in1, indices), axis=[2]))\n",
            "def transform(in1, in2):\n    return tf.reverse(tf.boolean_mask(in1, in2, axis=2), axis=[2])\n",
            "def transform(in1, in2):\n    return tf.reverse(in1, axis=[1])[0], in2\n",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=0)",
            "return tf.boolean_mask(in1, tf.equal(in2, 1), axis=1)",
            "return tf.stack([tf.reverse(in1[i], [-1]) if mark==1 else in1[i] for i, mark in enumerate(in2)], axis=0)",
            "reversed_indices = tf.boolean_mask(tf.range(tf.shape(in1)[1]-1, -1, -1), in2)\nreturn tf.reverse(in1, axis=[1])[reversed_indices]\n",
            "return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=[-2])",
            "def transform(in1, in2):\n    return tf.reverse(in1, axis=[1])[0, in2]\n",
            "return tf.where(tf.equal(in2, 0), in1, tf.reverse(in1, [-2]))",
            "def transform(in1, in2):\n    reversed_indices = tf.reverse(tf.where(in2), axis=[0])\n    return tf.gather_nd(in1, reversed_indices)\n",
            "def transform(in1, in2):\n    marked_rows = tf.where(tf.equal(in2, 1))\n    reversed_rows = tf.reverse(marked_rows, axis=[1])\n    result = tf.tensor_scatter_nd_update(in1, marked_rows, tf.gather_nd(in1, reversed_rows))\n    return result\n",
            "return tf.tensor_scatter_nd_update(in1, tf.expand_dims(tf.where(in2), 1), tf.reverse(tf.gather_nd(in1, tf.expand_dims(tf.argsort(in2), 1)), axis=[1]))",
            "return tf.boolean_mask(in1, tf.equal(in2, 1), axis=2)",
            "return tf.boolean_mask(in1, tf.equal(tf.range(tf.shape(in2)[0]), in2), axis=1)",
            "return tf.reverse(tf.where(tf.cast(in2, tf.bool), in1, in1), [-1])",
            "return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=[1])",
            "return tf.boolean_mask(in1, tf.equal(in2, 0)[:, None, None], axis=1) + tf.boolean_mask(in1, tf.equal(in2, 1)[:, None, None], axis=1)"
        ],
        "tf_operators": {
            "tf.squeeze": 1,
            "tf.reverse": 37,
            "tf.stack": 6,
            "tf.boolean_mask": 25,
            "tf.shape": 5,
            "tf.range": 4,
            "tf.equal": 13,
            "tf.where": 13,
            "tf.expand_dims": 3,
            "tf.gather": 2,
            "tf.argsort": 3,
            "tf.gather_nd": 5,
            "tf.cast": 15,
            "tf.bool": 15,
            "tf.map_fn": 2,
            "tf.broadcast_to": 1,
            "tf.unstack": 3,
            "tf.math.equal": 1,
            "tf.math.logical_not": 1,
            "tf.int32": 1,
            "tf.newaxis": 1,
            "tf.tensor_scatter_nd_update": 3
        },
        "coverage_percentage": 33.33333333333333,
        "total_covered": 1,
        "total_in_target": 3,
        "parsed_constants": [
            [
                1,
                -1,
                0
            ],
            [
                0,
                0
            ],
            [
                1,
                1,
                -1
            ],
            [
                0
            ],
            [
                0,
                -1,
                0,
                1
            ],
            [
                1
            ],
            [
                1,
                -1
            ],
            [
                1
            ],
            [
                1,
                2
            ],
            [],
            [
                1,
                -1
            ],
            [
                0,
                1,
                1
            ],
            [
                0
            ],
            [
                0,
                0,
                0
            ],
            [
                1,
                0
            ],
            [],
            [
                1,
                -2
            ],
            [
                1,
                2
            ],
            [],
            [
                0,
                1,
                1
            ],
            [
                -1
            ],
            [
                -2
            ],
            [
                1,
                -1
            ],
            [],
            [
                0,
                1
            ],
            [
                2
            ],
            [
                0,
                2,
                1,
                2,
                2
            ],
            [
                0,
                1,
                1
            ],
            [
                2
            ],
            [
                1,
                1,
                0,
                0,
                0
            ],
            [
                1,
                0,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0,
                2
            ],
            [
                2,
                2
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                1,
                1
            ],
            [
                1,
                -1,
                0
            ],
            [
                1,
                1,
                -1,
                -1,
                1
            ],
            [
                1,
                -2
            ],
            [
                1,
                0
            ],
            [
                0,
                -2
            ],
            [
                0
            ],
            [
                1,
                1
            ],
            [
                1,
                1,
                1
            ],
            [
                1,
                2
            ],
            [
                0,
                1
            ],
            [
                -1
            ],
            [
                1,
                1
            ],
            [
                0,
                1,
                1,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -2,
            -1
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 123,
            "shape": 0,
            "tf_bool": 15,
            "provided": 4,
            "common": 88,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 11,
            "tf_int64": 0,
            "tf_int32": 1
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0017513134851138354,
                "tf.add(x, y)": 0.0017513134851138354,
                "tf.add_n(inputs)": 0.0017513134851138354,
                "tf.argmax(input, axis)": 0.0017513134851138354,
                "tf.argmin(input, axis)": 0.0017513134851138354,
                "tf.argsort(values, axis, stable=True)": 0.0035026269702276708,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0017513134851138354,
                "tf.boolean_mask(tensor, mask)": 0.04903677758318739,
                "tf.broadcast_to(input, shape)": 0.0035026269702276708,
                "tf.cast(x, dtype)": 0.028021015761821366,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0017513134851138354,
                "tf.concat(values, axis)": 0.0017513134851138354,
                "tf.constant(value)": 0.0017513134851138354,
                "tf.constant(value, dtype)": 0.0017513134851138354,
                "tf.divide(x, y)": 0.0017513134851138354,
                "tf.equal(x, y)": 0.02626970227670753,
                "tf.exp(x)": 0.0017513134851138354,
                "tf.expand_dims(input, axis)": 0.008756567425569177,
                "tf.eye(num_rows)": 0.0017513134851138354,
                "tf.eye(num_rows, num_columns)": 0.0017513134851138354,
                "tf.eye(num_rows, dtype)": 0.0017513134851138354,
                "tf.fill(dims, value)": 0.0017513134851138354,
                "tf.gather(params, indices)": 0.0035026269702276708,
                "tf.gather(params, indices, axis, batch_dims)": 0.0035026269702276708,
                "tf.gather_nd(params, indices)": 0.008756567425569177,
                "tf.gather_nd(params, indices, batch_dims)": 0.0017513134851138354,
                "tf.greater(x, y)": 0.0017513134851138354,
                "tf.greater_equal(x, y)": 0.0017513134851138354,
                "tf.math.bincount(arr)": 0.0017513134851138354,
                "tf.math.ceil(x)": 0.0017513134851138354,
                "tf.math.count_nonzero(input)": 0.0017513134851138354,
                "tf.math.count_nonzero(input, axis)": 0.0017513134851138354,
                "tf.math.cumsum(x, axis)": 0.0017513134851138354,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0017513134851138354,
                "tf.math.divide_no_nan(x, y)": 0.0017513134851138354,
                "tf.math.floor(x)": 0.0017513134851138354,
                "tf.math.log(x)": 0.0017513134851138354,
                "tf.math.logical_and(x, y)": 0.0017513134851138354,
                "tf.math.logical_not(x)": 0.0035026269702276708,
                "tf.math.logical_or(x, y)": 0.0017513134851138354,
                "tf.math.logical_xor(x, y)": 0.0017513134851138354,
                "tf.math.negative(x)": 0.0017513134851138354,
                "tf.math.reciprocal(x)": 0.0017513134851138354,
                "tf.math.reciprocal_no_nan(x)": 0.0017513134851138354,
                "tf.math.segment_max(data, segment_ids)": 0.0017513134851138354,
                "tf.math.segment_mean(data, segment_ids)": 0.0017513134851138354,
                "tf.math.segment_min(data, segment_ids)": 0.0017513134851138354,
                "tf.math.segment_prod(data, segment_ids)": 0.0017513134851138354,
                "tf.math.segment_sum(data, segment_ids)": 0.0017513134851138354,
                "tf.math.squared_difference(x, y)": 0.0017513134851138354,
                "tf.math.top_k(input, k)": 0.0017513134851138354,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0017513134851138354,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0017513134851138354,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0017513134851138354,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0017513134851138354,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0017513134851138354,
                "tf.matmul(a, b)": 0.0017513134851138354,
                "tf.maximum(x, y)": 0.0017513134851138354,
                "tf.minimum(x, y)": 0.0017513134851138354,
                "tf.multiply(x, y)": 0.0017513134851138354,
                "tf.not_equal(x, y)": 0.0017513134851138354,
                "tf.one_hot(indices, depth)": 0.0017513134851138354,
                "tf.ones(shape)": 0.0017513134851138354,
                "tf.ones_like(input)": 0.0017513134851138354,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0017513134851138354,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0017513134851138354,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0017513134851138354,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0017513134851138354,
                "tf.range(start)": 0.0070052539404553416,
                "tf.range(start, limit, delta)": 0.0035026269702276708,
                "tf.reduce_any(input_tensor, axis)": 0.0017513134851138354,
                "tf.reduce_all(input_tensor, axis)": 0.0017513134851138354,
                "tf.reduce_max(input_tensor)": 0.0017513134851138354,
                "tf.reduce_max(input_tensor, axis)": 0.0017513134851138354,
                "tf.reduce_mean(input_tensor)": 0.0017513134851138354,
                "tf.reduce_mean(input_tensor, axis)": 0.0017513134851138354,
                "tf.reduce_min(input_tensor)": 0.0017513134851138354,
                "tf.reduce_min(input_tensor, axis)": 0.0017513134851138354,
                "tf.reduce_prod(input_tensor, axis)": 0.0017513134851138354,
                "tf.reduce_sum(input_tensor)": 0.0017513134851138354,
                "tf.reduce_sum(input_tensor, axis)": 0.0017513134851138354,
                "tf.repeat(input, repeats)": 0.0017513134851138354,
                "tf.repeat(input, repeats, axis)": 0.0017513134851138354,
                "tf.reshape(tensor, shape)": 0.0017513134851138354,
                "tf.reverse(tensor, axis)": 0.07005253940455342,
                "tf.roll(input, shift, axis)": 0.0017513134851138354,
                "tf.round(x)": 0.0017513134851138354,
                "tf.scatter_nd(indices, updates, shape)": 0.0017513134851138354,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0017513134851138354,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0017513134851138354,
                "tf.sequence_mask(lengths)": 0.0017513134851138354,
                "tf.sequence_mask(lengths, maxlen)": 0.0017513134851138354,
                "tf.shape(input)": 0.010507880910683012,
                "tf.sign(x)": 0.0017513134851138354,
                "tf.sort(values, axis)": 0.0017513134851138354,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0017513134851138354,
                "tf.sqrt(x)": 0.0017513134851138354,
                "tf.square(x)": 0.0017513134851138354,
                "tf.squeeze(input)": 0.0017513134851138354,
                "tf.squeeze(input, axis)": 0.0035026269702276708,
                "tf.stack(values, axis)": 0.012259194395796848,
                "tf.subtract(x, y)": 0.0017513134851138354,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0070052539404553416,
                "tf.tensordot(a, b, axes)": 0.0017513134851138354,
                "tf.tile(input, multiples)": 0.0017513134851138354,
                "tf.transpose(a)": 0.0017513134851138354,
                "tf.transpose(a, perm)": 0.0017513134851138354,
                "tf.unique_with_counts(x)": 0.0017513134851138354,
                "tf.unstack(value, axis)": 0.008756567425569177,
                "tf.where(condition)": 0.010507880910683012,
                "tf.where(condition, x, y)": 0.01576182136602452,
                "tf.zeros(shape)": 0.0017513134851138354,
                "tf.zeros_like(input)": 0.0017513134851138354,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0017513134851138354,
                "tf.sparse.add(a, b)": 0.0017513134851138354,
                "tf.sparse.concat(axis, sp_inputs)": 0.0017513134851138354,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0017513134851138354,
                "tf.sparse.from_dense(tensor)": 0.0017513134851138354,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0017513134851138354,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0017513134851138354,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0017513134851138354,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0017513134851138354,
                "tf.sparse.reset_shape(sp_input)": 0.0017513134851138354,
                "tf.sparse.reshape(sp_input, shape)": 0.0017513134851138354,
                "tf.sparse.retain(sp_input, to_retain)": 0.0017513134851138354,
                "tf.sparse.slice(sp_input, start, size)": 0.0017513134851138354,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0017513134851138354,
                "tf.sparse.to_dense(sp_input)": 0.0017513134851138354,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0017513134851138354,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0017513134851138354,
                "tf.sparse.transpose(sp_input)": 0.0017513134851138354,
                "tf.sparse.transpose(sp_input, perm)": 0.0017513134851138354,
                "IndexingAxis1Operation": 0.005253940455341506,
                "IndexingOperation": 0.028021015761821366,
                "PairCreationOperation": 0.01926444833625219,
                "SingletonTupleCreationOperation": 0.0017513134851138354,
                "SlicingAxis0BothOperation": 0.0017513134851138354,
                "SlicingAxis0LeftOperation": 0.0035026269702276708,
                "SlicingAxis0RightOperation": 0.0017513134851138354,
                "SlicingAxis1BothOperation": 0.0017513134851138354,
                "SlicingAxis1LeftOperation": 0.0017513134851138354,
                "SlicingAxis1RightOperation": 0.0017513134851138354,
                "TripleCreationOperation": 0.005253940455341506,
                "PROVIDED_CONSTANT_WEIGHT": 0.008756567425569177,
                "COMMON_CONSTANT_WEIGHT": 0.15586690017513136,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0017513134851138354,
                "INPUT_VARIABLE_WEIGHT": 0.2171628721541156,
                "AXIS_CONSTANT_WEIGHT": 0.021015761821366025,
                "SHAPE_CONSTANT_WEIGHT": 0.0017513134851138354,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0017513134851138354,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0035026269702276708,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0017513134851138354,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.028021015761821366,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0017513134851138354
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 4,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 5,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 5,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 4,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 7,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 6,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 6,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 5,
                "PairCreationOperation": 6,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 7,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 6,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 5,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_46",
        "description": "convert segment lengths to segment ids",
        "target_program": "tf.cast(tf.where(tf.sequence_mask(in1))[:, 0], tf.int32)",
        "source": "https://stackoverflow.com/questions/58652161/how-to-convert-2-3-4-to-0-0-1-1-1-2-2-2-2-to-utilize-tf-math-segment-sum",
        "constants": "[]",
        "examples": {
            "inputs": "[[3, 4, 1],]",
            "outputs": "[0, 0, 0, 1, 1, 1, 1, 2]"
        },
        "completions": [
            "return tf.repeat(tf.range(tf.size(in1)), in1)",
            "return tf.math.unsorted_segment_min(tf.ones_like(tf.sequence_mask(in1)), tf.cumsum(in1) - 1, tf.reduce_max(in1) + 1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.size(in1)), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.sequence_mask(tf.reduce_sum(in1), tf.reduce_max(in1)) - 1",
            "return tf.sequence_mask(tf.reduce_sum(in1), tf.reduce_sum(in1))",
            "return tf.repeat(tf.range(tf.size(in1)), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n",
            "return tf.repeat(tf.range(tf.size(in1)), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.size(in1)), in1)",
            "return tf.math.cumsum(tf.one_hot(in1 - 1, tf.reduce_max(in1)), axis=0)",
            "def transform(in1):\n    segment_lengths = in1\n    segment_ids = tf.math.cumsum(tf.ones_like(segment_lengths), exclusive=True)\n    return segment_ids\n",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.size(in1)), in1)\n",
            "def transform(in1):\n    segment_lengths = in1\n    segment_ids = tf.repeat(tf.range(tf.size(segment_lengths)), segment_lengths)\n    return segment_ids\n",
            "return tf.repeat(tf.range(tf.size(in1)), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.range(tf.reduce_sum(in1)) - tf.repeat(tf.cumsum(in1), in1)",
            "def transform(in1):\n    segment_lengths = in1\n    num_segments = len(segment_lengths)\n    segment_ids = tf.repeat(tf.range(num_segments), segment_lengths)\n    return segment_ids\n",
            "return tf.repeat(tf.range(tf.size(in1)), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.math.unsorted_segment_max(tf.ones_like(in1), tf.math.cumsum(in1), tf.reduce_max(in1)+1)\n",
            "return tf.repeat(tf.range(tf.reduce_sum(in1)), in1)",
            "def transform(in1):\n    segment_lengths = in1\n    segment_ids = tf.repeat(tf.range(tf.size(segment_lengths)), segment_lengths)\n    return segment_ids\n",
            "def transform(input_lengths):\n    max_length = tf.reduce_sum(input_lengths)\n    segment_ids = tf.cumsum(tf.ones(max_length, dtype=tf.int32)) - 1\n    return segment_ids\n",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.cast(tf.repeat(tf.range(tf.shape(in1)[0]), in1), tf.int32)",
            "return tf.argmax(tf.sequence_mask(in1), axis=0)\n",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n",
            "return tf.cast(tf.repeat(tf.range(len(in1)), in1), tf.int32)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.concat([tf.fill([length], i) for i, length in enumerate(in1)], axis=0)",
            "return tf.repeat(tf.range(tf.size(in1)), tf.unstack(in1))\n",
            "return tf.repeat(tf.range(tf.size(in1)), in1)\n",
            "return tf.math.cumsum(tf.sequence_mask(in1), exclusive=True)\n",
            "def transform(in1):\n    lengths = in1\n    segment_ids = tf.repeat(tf.range(tf.size(lengths)), tf.cast(lengths, tf.int32))\n    return segment_ids\n",
            "return tf.math.segment_sum(tf.ones_like(tf.sequence_mask(in1)), tf.constant([0, 0, 0, 1, 1, 1, 1, 2]))",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.size(in1, out_type=tf.int64)), tf.cast(in1, tf.int64))",
            "def transform(in1):\n    segment_lengths = in1\n    segment_ids = tf.repeat(tf.range(tf.size(segment_lengths)), segment_lengths)\n    return segment_ids\n",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.expand_dims(tf.cast(tf.repeat(tf.range(tf.shape(in1)[0]), in1), tf.int32), 1)"
        ],
        "tf_operators": {
            "tf.range": 39,
            "tf.repeat": 39,
            "tf.size": 15,
            "tf.reduce_max": 4,
            "tf.sequence_mask": 6,
            "tf.ones_like": 4,
            "tf.math.unsorted_segment_min": 1,
            "tf.cumsum": 3,
            "tf.shape": 20,
            "tf.reduce_sum": 5,
            "tf.math.cumsum": 4,
            "tf.one_hot": 1,
            "tf.math.unsorted_segment_max": 1,
            "tf.ones": 1,
            "tf.int32": 5,
            "tf.cast": 5,
            "tf.argmax": 1,
            "tf.concat": 1,
            "tf.fill": 1,
            "tf.unstack": 1,
            "tf.math.segment_sum": 1,
            "tf.constant": 1,
            "tf.int64": 1,
            "tf.expand_dims": 1
        },
        "coverage_percentage": 75.0,
        "total_covered": 3,
        "total_in_target": 4,
        "parsed_constants": [
            [],
            [
                1,
                1
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                1
            ],
            [],
            [],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                1,
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            [
                0
            ],
            [],
            [],
            [
                0
            ],
            [
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 2,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 92,
            "shape": 0,
            "tf_bool": 0,
            "provided": 1,
            "common": 39,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 2,
            "tf_int32": 5
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0022123893805309734,
                "tf.add(x, y)": 0.0022123893805309734,
                "tf.add_n(inputs)": 0.0022123893805309734,
                "tf.argmax(input, axis)": 0.004424778761061947,
                "tf.argmin(input, axis)": 0.0022123893805309734,
                "tf.argsort(values, axis, stable=True)": 0.0022123893805309734,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0022123893805309734,
                "tf.boolean_mask(tensor, mask)": 0.0022123893805309734,
                "tf.broadcast_to(input, shape)": 0.0022123893805309734,
                "tf.cast(x, dtype)": 0.01327433628318584,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0022123893805309734,
                "tf.concat(values, axis)": 0.004424778761061947,
                "tf.constant(value)": 0.004424778761061947,
                "tf.constant(value, dtype)": 0.0022123893805309734,
                "tf.divide(x, y)": 0.0022123893805309734,
                "tf.equal(x, y)": 0.0022123893805309734,
                "tf.exp(x)": 0.0022123893805309734,
                "tf.expand_dims(input, axis)": 0.004424778761061947,
                "tf.eye(num_rows)": 0.0022123893805309734,
                "tf.eye(num_rows, num_columns)": 0.0022123893805309734,
                "tf.eye(num_rows, dtype)": 0.0022123893805309734,
                "tf.fill(dims, value)": 0.004424778761061947,
                "tf.gather(params, indices)": 0.0022123893805309734,
                "tf.gather(params, indices, axis, batch_dims)": 0.0022123893805309734,
                "tf.gather_nd(params, indices)": 0.0022123893805309734,
                "tf.gather_nd(params, indices, batch_dims)": 0.0022123893805309734,
                "tf.greater(x, y)": 0.0022123893805309734,
                "tf.greater_equal(x, y)": 0.0022123893805309734,
                "tf.math.bincount(arr)": 0.0022123893805309734,
                "tf.math.ceil(x)": 0.0022123893805309734,
                "tf.math.count_nonzero(input)": 0.0022123893805309734,
                "tf.math.count_nonzero(input, axis)": 0.0022123893805309734,
                "tf.math.cumsum(x, axis)": 0.0022123893805309734,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.008849557522123894,
                "tf.math.divide_no_nan(x, y)": 0.0022123893805309734,
                "tf.math.floor(x)": 0.0022123893805309734,
                "tf.math.log(x)": 0.0022123893805309734,
                "tf.math.logical_and(x, y)": 0.0022123893805309734,
                "tf.math.logical_not(x)": 0.0022123893805309734,
                "tf.math.logical_or(x, y)": 0.0022123893805309734,
                "tf.math.logical_xor(x, y)": 0.0022123893805309734,
                "tf.math.negative(x)": 0.0022123893805309734,
                "tf.math.reciprocal(x)": 0.0022123893805309734,
                "tf.math.reciprocal_no_nan(x)": 0.0022123893805309734,
                "tf.math.segment_max(data, segment_ids)": 0.0022123893805309734,
                "tf.math.segment_mean(data, segment_ids)": 0.0022123893805309734,
                "tf.math.segment_min(data, segment_ids)": 0.0022123893805309734,
                "tf.math.segment_prod(data, segment_ids)": 0.0022123893805309734,
                "tf.math.segment_sum(data, segment_ids)": 0.004424778761061947,
                "tf.math.squared_difference(x, y)": 0.0022123893805309734,
                "tf.math.top_k(input, k)": 0.0022123893805309734,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004424778761061947,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0022123893805309734,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004424778761061947,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0022123893805309734,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0022123893805309734,
                "tf.matmul(a, b)": 0.0022123893805309734,
                "tf.maximum(x, y)": 0.0022123893805309734,
                "tf.minimum(x, y)": 0.0022123893805309734,
                "tf.multiply(x, y)": 0.0022123893805309734,
                "tf.not_equal(x, y)": 0.0022123893805309734,
                "tf.one_hot(indices, depth)": 0.004424778761061947,
                "tf.ones(shape)": 0.004424778761061947,
                "tf.ones_like(input)": 0.011061946902654867,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0022123893805309734,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0022123893805309734,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0022123893805309734,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0022123893805309734,
                "tf.range(start)": 0.08849557522123894,
                "tf.range(start, limit, delta)": 0.0022123893805309734,
                "tf.reduce_any(input_tensor, axis)": 0.0022123893805309734,
                "tf.reduce_all(input_tensor, axis)": 0.0022123893805309734,
                "tf.reduce_max(input_tensor)": 0.011061946902654867,
                "tf.reduce_max(input_tensor, axis)": 0.0022123893805309734,
                "tf.reduce_mean(input_tensor)": 0.0022123893805309734,
                "tf.reduce_mean(input_tensor, axis)": 0.0022123893805309734,
                "tf.reduce_min(input_tensor)": 0.0022123893805309734,
                "tf.reduce_min(input_tensor, axis)": 0.0022123893805309734,
                "tf.reduce_prod(input_tensor, axis)": 0.0022123893805309734,
                "tf.reduce_sum(input_tensor)": 0.015486725663716814,
                "tf.reduce_sum(input_tensor, axis)": 0.0022123893805309734,
                "tf.repeat(input, repeats)": 0.08849557522123894,
                "tf.repeat(input, repeats, axis)": 0.0022123893805309734,
                "tf.reshape(tensor, shape)": 0.0022123893805309734,
                "tf.reverse(tensor, axis)": 0.0022123893805309734,
                "tf.roll(input, shift, axis)": 0.0022123893805309734,
                "tf.round(x)": 0.0022123893805309734,
                "tf.scatter_nd(indices, updates, shape)": 0.0022123893805309734,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0022123893805309734,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0022123893805309734,
                "tf.sequence_mask(lengths)": 0.011061946902654867,
                "tf.sequence_mask(lengths, maxlen)": 0.00663716814159292,
                "tf.shape(input)": 0.046460176991150445,
                "tf.sign(x)": 0.0022123893805309734,
                "tf.sort(values, axis)": 0.0022123893805309734,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0022123893805309734,
                "tf.sqrt(x)": 0.0022123893805309734,
                "tf.square(x)": 0.0022123893805309734,
                "tf.squeeze(input)": 0.0022123893805309734,
                "tf.squeeze(input, axis)": 0.0022123893805309734,
                "tf.stack(values, axis)": 0.0022123893805309734,
                "tf.subtract(x, y)": 0.0022123893805309734,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0022123893805309734,
                "tf.tensordot(a, b, axes)": 0.0022123893805309734,
                "tf.tile(input, multiples)": 0.0022123893805309734,
                "tf.transpose(a)": 0.0022123893805309734,
                "tf.transpose(a, perm)": 0.0022123893805309734,
                "tf.unique_with_counts(x)": 0.0022123893805309734,
                "tf.unstack(value, axis)": 0.004424778761061947,
                "tf.where(condition)": 0.0022123893805309734,
                "tf.where(condition, x, y)": 0.0022123893805309734,
                "tf.zeros(shape)": 0.0022123893805309734,
                "tf.zeros_like(input)": 0.0022123893805309734,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0022123893805309734,
                "tf.sparse.add(a, b)": 0.0022123893805309734,
                "tf.sparse.concat(axis, sp_inputs)": 0.0022123893805309734,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0022123893805309734,
                "tf.sparse.from_dense(tensor)": 0.0022123893805309734,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0022123893805309734,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0022123893805309734,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0022123893805309734,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0022123893805309734,
                "tf.sparse.reset_shape(sp_input)": 0.0022123893805309734,
                "tf.sparse.reshape(sp_input, shape)": 0.0022123893805309734,
                "tf.sparse.retain(sp_input, to_retain)": 0.0022123893805309734,
                "tf.sparse.slice(sp_input, start, size)": 0.0022123893805309734,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0022123893805309734,
                "tf.sparse.to_dense(sp_input)": 0.0022123893805309734,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0022123893805309734,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0022123893805309734,
                "tf.sparse.transpose(sp_input)": 0.0022123893805309734,
                "tf.sparse.transpose(sp_input, perm)": 0.0022123893805309734,
                "IndexingAxis1Operation": 0.0022123893805309734,
                "IndexingOperation": 0.046460176991150445,
                "PairCreationOperation": 0.004424778761061947,
                "SingletonTupleCreationOperation": 0.0022123893805309734,
                "SlicingAxis0BothOperation": 0.0022123893805309734,
                "SlicingAxis0LeftOperation": 0.0022123893805309734,
                "SlicingAxis0RightOperation": 0.0022123893805309734,
                "SlicingAxis1BothOperation": 0.0022123893805309734,
                "SlicingAxis1LeftOperation": 0.0022123893805309734,
                "SlicingAxis1RightOperation": 0.0022123893805309734,
                "TripleCreationOperation": 0.0022123893805309734,
                "PROVIDED_CONSTANT_WEIGHT": 0.004424778761061947,
                "COMMON_CONSTANT_WEIGHT": 0.08849557522123894,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0022123893805309734,
                "INPUT_VARIABLE_WEIGHT": 0.20575221238938052,
                "AXIS_CONSTANT_WEIGHT": 0.0022123893805309734,
                "SHAPE_CONSTANT_WEIGHT": 0.0022123893805309734,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0022123893805309734,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.01327433628318584,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0022123893805309734,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0022123893805309734,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.00663716814159292
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 6,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 6,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 3,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 6,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 6,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 3,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 6,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 4,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 4,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 9,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 6,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 7
            }
        }
    },
    {
        "name": "stackoverflow_47",
        "description": "put given values into a sequence mask",
        "target_program": "tf.reshape(tf.gather(in1, tf.cumsum(tf.reshape(tf.cast(in2, tf.int32), [-1]), exclusive=True) * tf.reshape(tf.cast(in2, tf.int32), [-1])), in2.shape)",
        "source": "https://stackoverflow.com/questions/58641546/how-can-i-put-the-sequential-values-to-the-sequence-mask",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],[[True, True, True, False, False], [True, True, False, False, False], [True, True, True, True, True], [True, True, True, True, False], [True, False, False, False, False], [True, True, False, False, False]],]",
            "outputs": "[[0, 1, 2, 0, 0],    [3, 4, 0, 0, 0],    [5, 6, 7, 8, 9],    [10, 11, 12, 13, 0],    [14, 0, 0, 0, 0],    [15, 16, 0, 0, 0]]"
        },
        "completions": [
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.sequence_mask(tf.reduce_sum(tf.cast(in2, tf.int32), axis=1), tf.shape(in1)[1]))\n",
            "return tf.where(in2, in1, 0)\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.boolean_mask(in1, in2) * tf.cast(tf.sequence_mask(tf.reduce_sum(tf.cast(in2, tf.int32), axis=1), tf.shape(in1)[1]), dtype=tf.int32)\n",
            "return tf.boolean_mask(in1, in2)\n",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n",
            "mask = tf.sequence_mask(tf.reduce_sum(tf.cast(in2, tf.int32), axis=1), maxlen=tf.shape(in2)[1])\nresult = tf.boolean_mask(in1, tf.tile(in2, [1,2]))\nreturn tf.reshape(result, mask.shape)\n",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.boolean_mask(in1, in2)\n",
            "def transform(in1, in2):\n    return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.boolean_mask(in1, in2)\n",
            "return tf.boolean_mask(in1, tf.transpose(in2))\n",
            "return tf.boolean_mask(in1, in2)\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.boolean_mask(in1, in2)\n",
            "return tf.boolean_mask(in1, in2) * tf.cast(in2, tf.int64)\n",
            "return tf.boolean_mask(in1, in2)\n",
            "result = tf.where(in2, in1, tf.zeros_like(in1))\nreturn result\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.boolean_mask(in1, tf.transpose(in2))\n",
            "return tf.math.multiply(tf.cast(in1, tf.int32), tf.cast(in2, tf.int32))\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.boolean_mask(in1, in2)\n",
            "return tf.math.multiply(in1, tf.cast(in2, tf.int32))",
            "def transform(in1, in2):\n    return tf.gather(in1, tf.reshape(tf.where(in2), [-1]))\n",
            "mask = tf.sequence_mask(tf.reduce_sum(tf.cast(in2, tf.int32)), maxlen=tf.shape(in2)[1])\nresult = tf.boolean_mask(in1, in2) * tf.cast(mask, tf.int64)\nreturn result\n",
            "return tf.boolean_mask(in1, tf.sequence_mask(tf.reduce_sum(tf.cast(in2, tf.int32), axis=1), maxlen=in1.shape[1]))\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.boolean_mask(in1, in2)\n",
            "return tf.boolean_mask(in1, in2)\n",
            "result = tf.where(in2, tf.range(tf.reduce_max(in1)+1), tf.zeros_like(in1))\nreturn tf.cast(result, tf.int32)\n",
            "result = tf.where(in2, in1, tf.constant(0))\nreturn result\n",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n",
            "return tf.boolean_mask(in1, in2)",
            "return tf.boolean_mask(in1, in2)\n",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.boolean_mask(in1, tf.sequence_mask(tf.reduce_sum(tf.cast(in2, tf.int32), axis=1), tf.shape(in1)[1]))\n",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n",
            "return tf.multiply(in1, tf.cast(in2, tf.int32))",
            "return tf.boolean_mask(in1, tf.transpose(in2))",
            "return tf.tensordot(tf.cast(in2, tf.int32), in1, axes=1)\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n"
        ],
        "tf_operators": {
            "tf.sequence_mask": 6,
            "tf.reduce_sum": 6,
            "tf.shape": 5,
            "tf.cast": 21,
            "tf.int32": 11,
            "tf.boolean_mask": 30,
            "tf.where": 16,
            "tf.zeros_like": 13,
            "tf.bool": 9,
            "tf.tile": 1,
            "tf.reshape": 2,
            "tf.transpose": 3,
            "tf.int64": 2,
            "tf.math.multiply": 2,
            "tf.gather": 1,
            "tf.reduce_max": 1,
            "tf.range": 1,
            "tf.constant": 1,
            "tf.multiply": 1,
            "tf.tensordot": 1
        },
        "coverage_percentage": 80.0,
        "total_covered": 4,
        "total_in_target": 5,
        "parsed_constants": [
            [
                1,
                1
            ],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [
                1,
                1
            ],
            [],
            [],
            [
                1,
                1,
                1,
                2
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                -1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [],
            [],
            [],
            [
                1
            ],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [
                1,
                1
            ],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            []
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 122,
            "shape": 0,
            "tf_bool": 9,
            "provided": 0,
            "common": 17,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 1,
            "tf_int64": 2,
            "tf_int32": 13
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.002331002331002331,
                "tf.add(x, y)": 0.002331002331002331,
                "tf.add_n(inputs)": 0.002331002331002331,
                "tf.argmax(input, axis)": 0.002331002331002331,
                "tf.argmin(input, axis)": 0.002331002331002331,
                "tf.argsort(values, axis, stable=True)": 0.002331002331002331,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.002331002331002331,
                "tf.boolean_mask(tensor, mask)": 0.07226107226107226,
                "tf.broadcast_to(input, shape)": 0.002331002331002331,
                "tf.cast(x, dtype)": 0.05827505827505827,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.002331002331002331,
                "tf.concat(values, axis)": 0.002331002331002331,
                "tf.constant(value)": 0.004662004662004662,
                "tf.constant(value, dtype)": 0.002331002331002331,
                "tf.divide(x, y)": 0.002331002331002331,
                "tf.equal(x, y)": 0.002331002331002331,
                "tf.exp(x)": 0.002331002331002331,
                "tf.expand_dims(input, axis)": 0.002331002331002331,
                "tf.eye(num_rows)": 0.002331002331002331,
                "tf.eye(num_rows, num_columns)": 0.002331002331002331,
                "tf.eye(num_rows, dtype)": 0.002331002331002331,
                "tf.fill(dims, value)": 0.002331002331002331,
                "tf.gather(params, indices)": 0.004662004662004662,
                "tf.gather(params, indices, axis, batch_dims)": 0.002331002331002331,
                "tf.gather_nd(params, indices)": 0.002331002331002331,
                "tf.gather_nd(params, indices, batch_dims)": 0.002331002331002331,
                "tf.greater(x, y)": 0.002331002331002331,
                "tf.greater_equal(x, y)": 0.002331002331002331,
                "tf.math.bincount(arr)": 0.002331002331002331,
                "tf.math.ceil(x)": 0.002331002331002331,
                "tf.math.count_nonzero(input)": 0.002331002331002331,
                "tf.math.count_nonzero(input, axis)": 0.002331002331002331,
                "tf.math.cumsum(x, axis)": 0.002331002331002331,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.002331002331002331,
                "tf.math.divide_no_nan(x, y)": 0.002331002331002331,
                "tf.math.floor(x)": 0.002331002331002331,
                "tf.math.log(x)": 0.002331002331002331,
                "tf.math.logical_and(x, y)": 0.002331002331002331,
                "tf.math.logical_not(x)": 0.002331002331002331,
                "tf.math.logical_or(x, y)": 0.002331002331002331,
                "tf.math.logical_xor(x, y)": 0.002331002331002331,
                "tf.math.negative(x)": 0.002331002331002331,
                "tf.math.reciprocal(x)": 0.002331002331002331,
                "tf.math.reciprocal_no_nan(x)": 0.002331002331002331,
                "tf.math.segment_max(data, segment_ids)": 0.002331002331002331,
                "tf.math.segment_mean(data, segment_ids)": 0.002331002331002331,
                "tf.math.segment_min(data, segment_ids)": 0.002331002331002331,
                "tf.math.segment_prod(data, segment_ids)": 0.002331002331002331,
                "tf.math.segment_sum(data, segment_ids)": 0.002331002331002331,
                "tf.math.squared_difference(x, y)": 0.002331002331002331,
                "tf.math.top_k(input, k)": 0.002331002331002331,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.002331002331002331,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.002331002331002331,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.002331002331002331,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.002331002331002331,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.002331002331002331,
                "tf.matmul(a, b)": 0.002331002331002331,
                "tf.maximum(x, y)": 0.002331002331002331,
                "tf.minimum(x, y)": 0.002331002331002331,
                "tf.multiply(x, y)": 0.004662004662004662,
                "tf.not_equal(x, y)": 0.002331002331002331,
                "tf.one_hot(indices, depth)": 0.002331002331002331,
                "tf.ones(shape)": 0.002331002331002331,
                "tf.ones_like(input)": 0.002331002331002331,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.002331002331002331,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.002331002331002331,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.002331002331002331,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.002331002331002331,
                "tf.range(start)": 0.004662004662004662,
                "tf.range(start, limit, delta)": 0.002331002331002331,
                "tf.reduce_any(input_tensor, axis)": 0.002331002331002331,
                "tf.reduce_all(input_tensor, axis)": 0.002331002331002331,
                "tf.reduce_max(input_tensor)": 0.004662004662004662,
                "tf.reduce_max(input_tensor, axis)": 0.002331002331002331,
                "tf.reduce_mean(input_tensor)": 0.002331002331002331,
                "tf.reduce_mean(input_tensor, axis)": 0.002331002331002331,
                "tf.reduce_min(input_tensor)": 0.002331002331002331,
                "tf.reduce_min(input_tensor, axis)": 0.002331002331002331,
                "tf.reduce_prod(input_tensor, axis)": 0.002331002331002331,
                "tf.reduce_sum(input_tensor)": 0.004662004662004662,
                "tf.reduce_sum(input_tensor, axis)": 0.002331002331002331,
                "tf.repeat(input, repeats)": 0.002331002331002331,
                "tf.repeat(input, repeats, axis)": 0.002331002331002331,
                "tf.reshape(tensor, shape)": 0.006993006993006993,
                "tf.reverse(tensor, axis)": 0.002331002331002331,
                "tf.roll(input, shift, axis)": 0.002331002331002331,
                "tf.round(x)": 0.002331002331002331,
                "tf.scatter_nd(indices, updates, shape)": 0.002331002331002331,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.002331002331002331,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.002331002331002331,
                "tf.sequence_mask(lengths)": 0.002331002331002331,
                "tf.sequence_mask(lengths, maxlen)": 0.009324009324009324,
                "tf.shape(input)": 0.013986013986013986,
                "tf.sign(x)": 0.002331002331002331,
                "tf.sort(values, axis)": 0.002331002331002331,
                "tf.sort(values, axis, direction='DESCENDING')": 0.002331002331002331,
                "tf.sqrt(x)": 0.002331002331002331,
                "tf.square(x)": 0.002331002331002331,
                "tf.squeeze(input)": 0.002331002331002331,
                "tf.squeeze(input, axis)": 0.002331002331002331,
                "tf.stack(values, axis)": 0.002331002331002331,
                "tf.subtract(x, y)": 0.002331002331002331,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.002331002331002331,
                "tf.tensordot(a, b, axes)": 0.004662004662004662,
                "tf.tile(input, multiples)": 0.004662004662004662,
                "tf.transpose(a)": 0.009324009324009324,
                "tf.transpose(a, perm)": 0.002331002331002331,
                "tf.unique_with_counts(x)": 0.002331002331002331,
                "tf.unstack(value, axis)": 0.002331002331002331,
                "tf.where(condition)": 0.004662004662004662,
                "tf.where(condition, x, y)": 0.037296037296037296,
                "tf.zeros(shape)": 0.002331002331002331,
                "tf.zeros_like(input)": 0.03263403263403263,
                "tf.SparseTensor(indices, values, dense_shape)": 0.002331002331002331,
                "tf.sparse.add(a, b)": 0.002331002331002331,
                "tf.sparse.concat(axis, sp_inputs)": 0.002331002331002331,
                "tf.sparse.expand_dims(sp_input, axis)": 0.002331002331002331,
                "tf.sparse.from_dense(tensor)": 0.002331002331002331,
                "tf.sparse.maximum(sp_a, sp_b)": 0.002331002331002331,
                "tf.sparse.minimum(sp_a, sp_b)": 0.002331002331002331,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.002331002331002331,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.002331002331002331,
                "tf.sparse.reset_shape(sp_input)": 0.002331002331002331,
                "tf.sparse.reshape(sp_input, shape)": 0.002331002331002331,
                "tf.sparse.retain(sp_input, to_retain)": 0.002331002331002331,
                "tf.sparse.slice(sp_input, start, size)": 0.002331002331002331,
                "tf.sparse.split(sp_input, num_split, axis)": 0.002331002331002331,
                "tf.sparse.to_dense(sp_input)": 0.002331002331002331,
                "tf.sparse.to_dense(sp_input, default_value)": 0.002331002331002331,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.002331002331002331,
                "tf.sparse.transpose(sp_input)": 0.002331002331002331,
                "tf.sparse.transpose(sp_input, perm)": 0.002331002331002331,
                "IndexingAxis1Operation": 0.002331002331002331,
                "IndexingOperation": 0.016317016317016316,
                "PairCreationOperation": 0.002331002331002331,
                "SingletonTupleCreationOperation": 0.002331002331002331,
                "SlicingAxis0BothOperation": 0.002331002331002331,
                "SlicingAxis0LeftOperation": 0.002331002331002331,
                "SlicingAxis0RightOperation": 0.002331002331002331,
                "SlicingAxis1BothOperation": 0.002331002331002331,
                "SlicingAxis1LeftOperation": 0.002331002331002331,
                "SlicingAxis1RightOperation": 0.002331002331002331,
                "TripleCreationOperation": 0.002331002331002331,
                "PROVIDED_CONSTANT_WEIGHT": 0.002331002331002331,
                "COMMON_CONSTANT_WEIGHT": 0.04195804195804196,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.002331002331002331,
                "INPUT_VARIABLE_WEIGHT": 0.2867132867132867,
                "AXIS_CONSTANT_WEIGHT": 0.004662004662004662,
                "SHAPE_CONSTANT_WEIGHT": 0.002331002331002331,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.002331002331002331,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.03263403263403263,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.002331002331002331,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.023310023310023312,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.006993006993006993
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 4,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 4,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 9,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 6,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 5,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 5,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 6,
                "PairCreationOperation": 9,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 5,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 5,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 5,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 7
            }
        }
    },
    {
        "name": "stackoverflow_48",
        "description": "find the indices of all elements",
        "target_program": "tf.cast(tf.argmax(tf.cast(tf.equal(in1, tf.expand_dims(in2, 1)), tf.int32), axis=1), tf.int32)",
        "source": "https://stackoverflow.com/questions/58481332/getting-the-indices-of-several-elements-in-a-tensorflow-at-once",
        "constants": "[]",
        "examples": {
            "inputs": "[[32, 53, 45, 38, 29, 89, 64, 23],[38, 53, 89, 38, 32, 64],]",
            "outputs": "[3, 1, 5, 3, 0, 6]"
        },
        "completions": [
            "return tf.searchsorted(in2, in1, side='left')",
            "return tf.searchsorted(tf.sort(in1), in2)",
            "return tf.argsort(in2)\n",
            "return tf.where(tf.equal(tf.expand_dims(in1, 1), in2))",
            "return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.argsort(in1, stable=True)\n",
            "return tf.searchsorted(tf.sort(in1), in2, side='left')\n",
            "return tf.searchsorted(in2, in1)",
            "return tf.searchsorted(tf.sort(in1), in2)",
            "return tf.argsort(in1)[tf.argsort(in2)]\n  ",
            "def transform(in1, in2):\n    return tf.argsort(in1, stable=True)\n",
            "return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.argsort(in1).numpy()[tf.searchsorted(tf.sort(in1), in2, side='left').numpy()]\n",
            "\nreturn tf.searchsorted(in1, in2, side='left')\n",
            "def transform(in1, in2):\n    return tf.argsort(in1, stable=True)\n",
            "def transform(in1, in2):\n    return tf.argsort(tf.constant(in1), axis=-1, stable=True).numpy()[tf.argsort(in1, in2)].numpy()\n",
            "return tf.where(tf.broadcast_to(tf.expand_dims(in1, axis=1), (1, len(in2))) == tf.expand_dims(in2, axis=0))[:, 1]",
            "return tf.argsort(tf.math.equal(tf.expand_dims(in1, 1), in2), axis=0)[:, 0]\n",
            "return tf.searchsorted(tf.sort(in1), in2)",
            "return tf.searchsorted(tf.sort(in1), in2)",
            "return tf.where(tf.equal(tf.expand_dims(in1, 1), in2))[:, 1]\n",
            "def transform(in1, in2):\n    return tf.argsort(in1, stable=True)[tf.searchsorted(tf.sort(in1), in2, side='right')]\n",
            "return tf.searchsorted(tf.sort(in1), in2, side='left')\n",
            "return tf.argsort(tf.cast(in1, tf.int32), stable=True)",
            "return tf.searchsorted(tf.sort(in1), in2)\n",
            "return tf.concat([tf.where(tf.equal(in1, val))[:, 0] for val in in2], axis=0)",
            "return tf.gather_nd(tf.argsort(in1), tf.reshape(in2, (-1, 1)))",
            "return tf.where(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0)))[1]",
            "def transform(in1, in2):\n    return tf.argsort(in1, stable=True)[tf.argsort(in2, stable=True)]\n",
            "return tf.searchsorted(in1, in2, side='left')",
            "return tf.searchsorted(tf.sort(tf.unique_with_counts(in1).y), in2)",
            "def transform(in1, in2):\n    return tf.argsort(in1)[tf.argsort(in2)]\n",
            "return tf.argsort(tf.where(tf.equal(tf.expand_dims(in1, 1), in2)), stable=True)",
            "return tf.gather_nd(tf.argsort(in2), in1)",
            "return tf.searchsorted(tf.sort(in1), in2)",
            "return tf.searchsorted(in2, in1, side='left')\n",
            "return tf.searchsorted(tf.sort(in1), in2, side='left')\n",
            "return tf.searchsorted(tf.sort(in1), in2, side='left')\n",
            "def transform(in1, in2):\n    return tf.argsort(in1, stable=True)\n",
            "return tf.where(tf.equal(tf.reshape(in1, shape=[-1, 1]), tf.reshape(in2, shape=[1, -1])))",
            "return tf.cast(tf.searchsorted(tf.sort(in1), in2), tf.int32)",
            "return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.argsort(in1, stable=True)\n  ",
            "return tf.argsort(tf.cast(tf.equal(tf.expand_dims(in1, axis=1), in2), tf.int32))",
            "return tf.argsort(tf.cast(tf.cast(in2, tf.bool), tf.int32))[0]",
            "return tf.concat([tf.where(tf.equal(in1, val))[:,0] for val in in2], axis=0)\n",
            "return tf.searchsorted(in1, in2, side='left')",
            "return tf.where(tf.equal(tf.expand_dims(in1, 1), in2)[:,:,1])",
            "return tf.argsort(tf.cast(tf.equal(tf.expand_dims(in1, 1), in2), tf.int32))[-1]",
            "return tf.searchsorted(tf.sort(in1), in2)"
        ],
        "tf_operators": {
            "tf.searchsorted": 24,
            "tf.sort": 15,
            "tf.argsort": 20,
            "tf.where": 9,
            "tf.equal": 10,
            "tf.expand_dims": 9,
            "tf.constant": 1,
            "tf.broadcast_to": 1,
            "tf.math.equal": 1,
            "tf.cast": 5,
            "tf.int32": 5,
            "tf.concat": 2,
            "tf.reshape": 2,
            "tf.gather_nd": 2,
            "tf.unique_with_counts": 1,
            "tf.bool": 1
        },
        "coverage_percentage": 80.0,
        "total_covered": 4,
        "total_in_target": 5,
        "parsed_constants": [
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                -1
            ],
            [
                1,
                1,
                0,
                1
            ],
            [
                1,
                0,
                0
            ],
            [],
            [],
            [
                1,
                1
            ],
            [],
            [],
            [],
            [],
            [
                0,
                0
            ],
            [
                -1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                -1,
                1,
                1,
                -1
            ],
            [],
            [],
            [],
            [
                1
            ],
            [
                0
            ],
            [
                0,
                0
            ],
            [],
            [
                1,
                1
            ],
            [
                1,
                -1
            ],
            []
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 96,
            "shape": 0,
            "tf_bool": 1,
            "provided": 0,
            "common": 34,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 5
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.002702702702702703,
                "tf.add(x, y)": 0.002702702702702703,
                "tf.add_n(inputs)": 0.002702702702702703,
                "tf.argmax(input, axis)": 0.002702702702702703,
                "tf.argmin(input, axis)": 0.002702702702702703,
                "tf.argsort(values, axis, stable=True)": 0.032432432432432434,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.002702702702702703,
                "tf.boolean_mask(tensor, mask)": 0.002702702702702703,
                "tf.broadcast_to(input, shape)": 0.005405405405405406,
                "tf.cast(x, dtype)": 0.01891891891891892,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.002702702702702703,
                "tf.concat(values, axis)": 0.008108108108108109,
                "tf.constant(value)": 0.005405405405405406,
                "tf.constant(value, dtype)": 0.002702702702702703,
                "tf.divide(x, y)": 0.002702702702702703,
                "tf.equal(x, y)": 0.02972972972972973,
                "tf.exp(x)": 0.002702702702702703,
                "tf.expand_dims(input, axis)": 0.032432432432432434,
                "tf.eye(num_rows)": 0.002702702702702703,
                "tf.eye(num_rows, num_columns)": 0.002702702702702703,
                "tf.eye(num_rows, dtype)": 0.002702702702702703,
                "tf.fill(dims, value)": 0.002702702702702703,
                "tf.gather(params, indices)": 0.002702702702702703,
                "tf.gather(params, indices, axis, batch_dims)": 0.002702702702702703,
                "tf.gather_nd(params, indices)": 0.008108108108108109,
                "tf.gather_nd(params, indices, batch_dims)": 0.002702702702702703,
                "tf.greater(x, y)": 0.002702702702702703,
                "tf.greater_equal(x, y)": 0.002702702702702703,
                "tf.math.bincount(arr)": 0.002702702702702703,
                "tf.math.ceil(x)": 0.002702702702702703,
                "tf.math.count_nonzero(input)": 0.002702702702702703,
                "tf.math.count_nonzero(input, axis)": 0.002702702702702703,
                "tf.math.cumsum(x, axis)": 0.002702702702702703,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.002702702702702703,
                "tf.math.divide_no_nan(x, y)": 0.002702702702702703,
                "tf.math.floor(x)": 0.002702702702702703,
                "tf.math.log(x)": 0.002702702702702703,
                "tf.math.logical_and(x, y)": 0.002702702702702703,
                "tf.math.logical_not(x)": 0.002702702702702703,
                "tf.math.logical_or(x, y)": 0.002702702702702703,
                "tf.math.logical_xor(x, y)": 0.002702702702702703,
                "tf.math.negative(x)": 0.002702702702702703,
                "tf.math.reciprocal(x)": 0.002702702702702703,
                "tf.math.reciprocal_no_nan(x)": 0.002702702702702703,
                "tf.math.segment_max(data, segment_ids)": 0.002702702702702703,
                "tf.math.segment_mean(data, segment_ids)": 0.002702702702702703,
                "tf.math.segment_min(data, segment_ids)": 0.002702702702702703,
                "tf.math.segment_prod(data, segment_ids)": 0.002702702702702703,
                "tf.math.segment_sum(data, segment_ids)": 0.002702702702702703,
                "tf.math.squared_difference(x, y)": 0.002702702702702703,
                "tf.math.top_k(input, k)": 0.002702702702702703,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.002702702702702703,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.002702702702702703,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.002702702702702703,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.002702702702702703,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.002702702702702703,
                "tf.matmul(a, b)": 0.002702702702702703,
                "tf.maximum(x, y)": 0.002702702702702703,
                "tf.minimum(x, y)": 0.002702702702702703,
                "tf.multiply(x, y)": 0.002702702702702703,
                "tf.not_equal(x, y)": 0.002702702702702703,
                "tf.one_hot(indices, depth)": 0.002702702702702703,
                "tf.ones(shape)": 0.002702702702702703,
                "tf.ones_like(input)": 0.002702702702702703,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.002702702702702703,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.002702702702702703,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.002702702702702703,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.002702702702702703,
                "tf.range(start)": 0.002702702702702703,
                "tf.range(start, limit, delta)": 0.002702702702702703,
                "tf.reduce_any(input_tensor, axis)": 0.002702702702702703,
                "tf.reduce_all(input_tensor, axis)": 0.002702702702702703,
                "tf.reduce_max(input_tensor)": 0.002702702702702703,
                "tf.reduce_max(input_tensor, axis)": 0.002702702702702703,
                "tf.reduce_mean(input_tensor)": 0.002702702702702703,
                "tf.reduce_mean(input_tensor, axis)": 0.002702702702702703,
                "tf.reduce_min(input_tensor)": 0.002702702702702703,
                "tf.reduce_min(input_tensor, axis)": 0.002702702702702703,
                "tf.reduce_prod(input_tensor, axis)": 0.002702702702702703,
                "tf.reduce_sum(input_tensor)": 0.002702702702702703,
                "tf.reduce_sum(input_tensor, axis)": 0.002702702702702703,
                "tf.repeat(input, repeats)": 0.002702702702702703,
                "tf.repeat(input, repeats, axis)": 0.002702702702702703,
                "tf.reshape(tensor, shape)": 0.010810810810810811,
                "tf.reverse(tensor, axis)": 0.002702702702702703,
                "tf.roll(input, shift, axis)": 0.002702702702702703,
                "tf.round(x)": 0.002702702702702703,
                "tf.scatter_nd(indices, updates, shape)": 0.002702702702702703,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.002702702702702703,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.002702702702702703,
                "tf.sequence_mask(lengths)": 0.002702702702702703,
                "tf.sequence_mask(lengths, maxlen)": 0.002702702702702703,
                "tf.shape(input)": 0.002702702702702703,
                "tf.sign(x)": 0.002702702702702703,
                "tf.sort(values, axis)": 0.002702702702702703,
                "tf.sort(values, axis, direction='DESCENDING')": 0.002702702702702703,
                "tf.sqrt(x)": 0.002702702702702703,
                "tf.square(x)": 0.002702702702702703,
                "tf.squeeze(input)": 0.002702702702702703,
                "tf.squeeze(input, axis)": 0.002702702702702703,
                "tf.stack(values, axis)": 0.002702702702702703,
                "tf.subtract(x, y)": 0.002702702702702703,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.002702702702702703,
                "tf.tensordot(a, b, axes)": 0.002702702702702703,
                "tf.tile(input, multiples)": 0.002702702702702703,
                "tf.transpose(a)": 0.002702702702702703,
                "tf.transpose(a, perm)": 0.002702702702702703,
                "tf.unique_with_counts(x)": 0.005405405405405406,
                "tf.unstack(value, axis)": 0.002702702702702703,
                "tf.where(condition)": 0.02702702702702703,
                "tf.where(condition, x, y)": 0.002702702702702703,
                "tf.zeros(shape)": 0.002702702702702703,
                "tf.zeros_like(input)": 0.002702702702702703,
                "tf.SparseTensor(indices, values, dense_shape)": 0.002702702702702703,
                "tf.sparse.add(a, b)": 0.002702702702702703,
                "tf.sparse.concat(axis, sp_inputs)": 0.002702702702702703,
                "tf.sparse.expand_dims(sp_input, axis)": 0.002702702702702703,
                "tf.sparse.from_dense(tensor)": 0.002702702702702703,
                "tf.sparse.maximum(sp_a, sp_b)": 0.002702702702702703,
                "tf.sparse.minimum(sp_a, sp_b)": 0.002702702702702703,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.002702702702702703,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.002702702702702703,
                "tf.sparse.reset_shape(sp_input)": 0.002702702702702703,
                "tf.sparse.reshape(sp_input, shape)": 0.002702702702702703,
                "tf.sparse.retain(sp_input, to_retain)": 0.002702702702702703,
                "tf.sparse.slice(sp_input, start, size)": 0.002702702702702703,
                "tf.sparse.split(sp_input, num_split, axis)": 0.002702702702702703,
                "tf.sparse.to_dense(sp_input)": 0.002702702702702703,
                "tf.sparse.to_dense(sp_input, default_value)": 0.002702702702702703,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.002702702702702703,
                "tf.sparse.transpose(sp_input)": 0.002702702702702703,
                "tf.sparse.transpose(sp_input, perm)": 0.002702702702702703,
                "IndexingAxis1Operation": 0.016216216216216217,
                "IndexingOperation": 0.02702702702702703,
                "PairCreationOperation": 0.021621621621621623,
                "SingletonTupleCreationOperation": 0.002702702702702703,
                "SlicingAxis0BothOperation": 0.002702702702702703,
                "SlicingAxis0LeftOperation": 0.002702702702702703,
                "SlicingAxis0RightOperation": 0.002702702702702703,
                "SlicingAxis1BothOperation": 0.002702702702702703,
                "SlicingAxis1LeftOperation": 0.002702702702702703,
                "SlicingAxis1RightOperation": 0.002702702702702703,
                "TripleCreationOperation": 0.005405405405405406,
                "PROVIDED_CONSTANT_WEIGHT": 0.002702702702702703,
                "COMMON_CONSTANT_WEIGHT": 0.0945945945945946,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.002702702702702703,
                "INPUT_VARIABLE_WEIGHT": 0.26216216216216215,
                "AXIS_CONSTANT_WEIGHT": 0.002702702702702703,
                "SHAPE_CONSTANT_WEIGHT": 0.002702702702702703,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.002702702702702703,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.016216216216216217,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.002702702702702703,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.005405405405405406,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.002702702702702703
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 5,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 6,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 5,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 5,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 9,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 9,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 5,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 6,
                "IndexingOperation": 5,
                "PairCreationOperation": 6,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 9,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 6,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_49",
        "description": "multiply tensors by scalars in a batched way",
        "target_program": "tf.transpose(tf.multiply(in2, tf.transpose(in1)))",
        "source": "https://stackoverflow.com/questions/58466562/given-a-batch-of-n-images-how-to-scalar-multiply-each-image-by-a-different-scal",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]], [[[0.8, 1.0, 0.0], [0.6, 0.4, 0.2]]], [[[0.9, 0.8, 0.7], [0.1, 0.2, 0.3]]]],[2.0, 0.5, 1.0],]",
            "outputs": "[[[[0.2, 0.4, 0.6], [0.8, 1.0, 1.2]]],    [[[0.4, 0.5, 0.0], [0.3, 0.2, 0.1]]],    [[[0.9, 0.8, 0.7], [0.1, 0.2, 0.3]]]]"
        },
        "completions": [
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(in2, axis=(1, 2)))\n",
            "return tf.multiply(in1, tf.reshape(in2, [1, 1, 1, -1]))\n",
            "return tf.multiply(in1, tf.reshape(in2, [3, 1, 1, 1]))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, axis=1), axis=2))",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n",
            "return tf.multiply(in1, tf.reshape(in2, [1, 1, 1, -1]))\n",
            "tf.multiply(in1, tf.reshape(in2, [1, 1, 1, -1]))\n",
            "batched_scalars = tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, axis=-1), axis=-1), axis=-1)\nresult = tf.multiply(in1, batched_scalars)\nreturn result\n",
            "return tf.multiply(in1, tf.reshape(in2, [3, 1, 1, 1]))\n",
            "tf.multiply(in1, tf.reshape(in2, (1, 1, 1, -1)))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.math.multiply(in1, tf.expand_dims(in2, (1, 2)))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 1))\n",
            "return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "result = tf.multiply(in1, tf.expand_dims(in2, axis=(1,2)))\nreturn result\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "tf.multiply(in1, in2)\n",
            "return tf.multiply(in1, tf.reshape(in2, [tf.shape(in2)[0], 1, 1, 1]))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(in2, axis=-1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n",
            "return tf.multiply(in1, tf.reshape(in2, (1, 1, 1, -1)))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, axis=-1), axis=-1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, axis=-1), axis=-1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n  ",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n",
            "return tf.multiply(in1, tf.reshape(in2, [1, 1, 1, -1]))\n"
        ],
        "tf_operators": {
            "tf.expand_dims": 39,
            "tf.multiply": 49,
            "tf.reshape": 10,
            "tf.math.multiply": 1,
            "tf.shape": 1
        },
        "coverage_percentage": 50.0,
        "total_covered": 1,
        "total_in_target": 2,
        "parsed_constants": [
            [
                -1,
                -1
            ],
            [
                1,
                2
            ],
            [
                1,
                1,
                1,
                -1
            ],
            [
                3,
                1,
                1,
                1
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                1,
                2
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                1,
                1,
                -1
            ],
            [
                1,
                1,
                1,
                -1
            ],
            [
                -1,
                -1,
                -1
            ],
            [
                3,
                1,
                1,
                1
            ],
            [
                1,
                1,
                1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                1,
                2
            ],
            [
                1,
                1
            ],
            [
                -1,
                -1
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                2
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                1,
                1,
                1
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                -1
            ],
            [],
            [
                0,
                1,
                1,
                1
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                -1
            ],
            [
                -1,
                -1
            ],
            [
                1,
                2
            ],
            [
                1,
                1,
                1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                1,
                2
            ],
            [
                1,
                1,
                1,
                -1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 101,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 94,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 11,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.002004008016032064,
                "tf.add(x, y)": 0.002004008016032064,
                "tf.add_n(inputs)": 0.002004008016032064,
                "tf.argmax(input, axis)": 0.002004008016032064,
                "tf.argmin(input, axis)": 0.002004008016032064,
                "tf.argsort(values, axis, stable=True)": 0.002004008016032064,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.002004008016032064,
                "tf.boolean_mask(tensor, mask)": 0.002004008016032064,
                "tf.broadcast_to(input, shape)": 0.002004008016032064,
                "tf.cast(x, dtype)": 0.002004008016032064,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.002004008016032064,
                "tf.concat(values, axis)": 0.002004008016032064,
                "tf.constant(value)": 0.002004008016032064,
                "tf.constant(value, dtype)": 0.002004008016032064,
                "tf.divide(x, y)": 0.002004008016032064,
                "tf.equal(x, y)": 0.002004008016032064,
                "tf.exp(x)": 0.002004008016032064,
                "tf.expand_dims(input, axis)": 0.15030060120240482,
                "tf.eye(num_rows)": 0.002004008016032064,
                "tf.eye(num_rows, num_columns)": 0.002004008016032064,
                "tf.eye(num_rows, dtype)": 0.002004008016032064,
                "tf.fill(dims, value)": 0.002004008016032064,
                "tf.gather(params, indices)": 0.002004008016032064,
                "tf.gather(params, indices, axis, batch_dims)": 0.002004008016032064,
                "tf.gather_nd(params, indices)": 0.002004008016032064,
                "tf.gather_nd(params, indices, batch_dims)": 0.002004008016032064,
                "tf.greater(x, y)": 0.002004008016032064,
                "tf.greater_equal(x, y)": 0.002004008016032064,
                "tf.math.bincount(arr)": 0.002004008016032064,
                "tf.math.ceil(x)": 0.002004008016032064,
                "tf.math.count_nonzero(input)": 0.002004008016032064,
                "tf.math.count_nonzero(input, axis)": 0.002004008016032064,
                "tf.math.cumsum(x, axis)": 0.002004008016032064,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.002004008016032064,
                "tf.math.divide_no_nan(x, y)": 0.002004008016032064,
                "tf.math.floor(x)": 0.002004008016032064,
                "tf.math.log(x)": 0.002004008016032064,
                "tf.math.logical_and(x, y)": 0.002004008016032064,
                "tf.math.logical_not(x)": 0.002004008016032064,
                "tf.math.logical_or(x, y)": 0.002004008016032064,
                "tf.math.logical_xor(x, y)": 0.002004008016032064,
                "tf.math.negative(x)": 0.002004008016032064,
                "tf.math.reciprocal(x)": 0.002004008016032064,
                "tf.math.reciprocal_no_nan(x)": 0.002004008016032064,
                "tf.math.segment_max(data, segment_ids)": 0.002004008016032064,
                "tf.math.segment_mean(data, segment_ids)": 0.002004008016032064,
                "tf.math.segment_min(data, segment_ids)": 0.002004008016032064,
                "tf.math.segment_prod(data, segment_ids)": 0.002004008016032064,
                "tf.math.segment_sum(data, segment_ids)": 0.002004008016032064,
                "tf.math.squared_difference(x, y)": 0.002004008016032064,
                "tf.math.top_k(input, k)": 0.002004008016032064,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.002004008016032064,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.002004008016032064,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.002004008016032064,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.002004008016032064,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.002004008016032064,
                "tf.matmul(a, b)": 0.002004008016032064,
                "tf.maximum(x, y)": 0.002004008016032064,
                "tf.minimum(x, y)": 0.002004008016032064,
                "tf.multiply(x, y)": 0.10020040080160321,
                "tf.not_equal(x, y)": 0.002004008016032064,
                "tf.one_hot(indices, depth)": 0.002004008016032064,
                "tf.ones(shape)": 0.002004008016032064,
                "tf.ones_like(input)": 0.002004008016032064,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.002004008016032064,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.002004008016032064,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.002004008016032064,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.002004008016032064,
                "tf.range(start)": 0.002004008016032064,
                "tf.range(start, limit, delta)": 0.002004008016032064,
                "tf.reduce_any(input_tensor, axis)": 0.002004008016032064,
                "tf.reduce_all(input_tensor, axis)": 0.002004008016032064,
                "tf.reduce_max(input_tensor)": 0.002004008016032064,
                "tf.reduce_max(input_tensor, axis)": 0.002004008016032064,
                "tf.reduce_mean(input_tensor)": 0.002004008016032064,
                "tf.reduce_mean(input_tensor, axis)": 0.002004008016032064,
                "tf.reduce_min(input_tensor)": 0.002004008016032064,
                "tf.reduce_min(input_tensor, axis)": 0.002004008016032064,
                "tf.reduce_prod(input_tensor, axis)": 0.002004008016032064,
                "tf.reduce_sum(input_tensor)": 0.002004008016032064,
                "tf.reduce_sum(input_tensor, axis)": 0.002004008016032064,
                "tf.repeat(input, repeats)": 0.002004008016032064,
                "tf.repeat(input, repeats, axis)": 0.002004008016032064,
                "tf.reshape(tensor, shape)": 0.022044088176352707,
                "tf.reverse(tensor, axis)": 0.002004008016032064,
                "tf.roll(input, shift, axis)": 0.002004008016032064,
                "tf.round(x)": 0.002004008016032064,
                "tf.scatter_nd(indices, updates, shape)": 0.002004008016032064,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.002004008016032064,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.002004008016032064,
                "tf.sequence_mask(lengths)": 0.002004008016032064,
                "tf.sequence_mask(lengths, maxlen)": 0.002004008016032064,
                "tf.shape(input)": 0.004008016032064128,
                "tf.sign(x)": 0.002004008016032064,
                "tf.sort(values, axis)": 0.002004008016032064,
                "tf.sort(values, axis, direction='DESCENDING')": 0.002004008016032064,
                "tf.sqrt(x)": 0.002004008016032064,
                "tf.square(x)": 0.002004008016032064,
                "tf.squeeze(input)": 0.002004008016032064,
                "tf.squeeze(input, axis)": 0.002004008016032064,
                "tf.stack(values, axis)": 0.002004008016032064,
                "tf.subtract(x, y)": 0.002004008016032064,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.002004008016032064,
                "tf.tensordot(a, b, axes)": 0.002004008016032064,
                "tf.tile(input, multiples)": 0.002004008016032064,
                "tf.transpose(a)": 0.002004008016032064,
                "tf.transpose(a, perm)": 0.002004008016032064,
                "tf.unique_with_counts(x)": 0.002004008016032064,
                "tf.unstack(value, axis)": 0.002004008016032064,
                "tf.where(condition)": 0.002004008016032064,
                "tf.where(condition, x, y)": 0.002004008016032064,
                "tf.zeros(shape)": 0.002004008016032064,
                "tf.zeros_like(input)": 0.002004008016032064,
                "tf.SparseTensor(indices, values, dense_shape)": 0.002004008016032064,
                "tf.sparse.add(a, b)": 0.002004008016032064,
                "tf.sparse.concat(axis, sp_inputs)": 0.002004008016032064,
                "tf.sparse.expand_dims(sp_input, axis)": 0.002004008016032064,
                "tf.sparse.from_dense(tensor)": 0.002004008016032064,
                "tf.sparse.maximum(sp_a, sp_b)": 0.002004008016032064,
                "tf.sparse.minimum(sp_a, sp_b)": 0.002004008016032064,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.002004008016032064,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.002004008016032064,
                "tf.sparse.reset_shape(sp_input)": 0.002004008016032064,
                "tf.sparse.reshape(sp_input, shape)": 0.002004008016032064,
                "tf.sparse.retain(sp_input, to_retain)": 0.002004008016032064,
                "tf.sparse.slice(sp_input, start, size)": 0.002004008016032064,
                "tf.sparse.split(sp_input, num_split, axis)": 0.002004008016032064,
                "tf.sparse.to_dense(sp_input)": 0.002004008016032064,
                "tf.sparse.to_dense(sp_input, default_value)": 0.002004008016032064,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.002004008016032064,
                "tf.sparse.transpose(sp_input)": 0.002004008016032064,
                "tf.sparse.transpose(sp_input, perm)": 0.002004008016032064,
                "IndexingAxis1Operation": 0.002004008016032064,
                "IndexingOperation": 0.004008016032064128,
                "PairCreationOperation": 0.008016032064128256,
                "SingletonTupleCreationOperation": 0.002004008016032064,
                "SlicingAxis0BothOperation": 0.002004008016032064,
                "SlicingAxis0LeftOperation": 0.002004008016032064,
                "SlicingAxis0RightOperation": 0.002004008016032064,
                "SlicingAxis1BothOperation": 0.002004008016032064,
                "SlicingAxis1LeftOperation": 0.002004008016032064,
                "SlicingAxis1RightOperation": 0.002004008016032064,
                "TripleCreationOperation": 0.002004008016032064,
                "PROVIDED_CONSTANT_WEIGHT": 0.002004008016032064,
                "COMMON_CONSTANT_WEIGHT": 0.1903807615230461,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.002004008016032064,
                "INPUT_VARIABLE_WEIGHT": 0.20440881763527055,
                "AXIS_CONSTANT_WEIGHT": 0.02404809619238477,
                "SHAPE_CONSTANT_WEIGHT": 0.002004008016032064,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.002004008016032064,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.002004008016032064,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.002004008016032064,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.002004008016032064,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.002004008016032064
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 9,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 9,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 9,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 3,
                "tf.eye(num_rows)": 9,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 9,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 3,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 9,
                "tf.ones(shape)": 9,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 9,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 6,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 9,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 9,
                "tf.sequence_mask(lengths, maxlen)": 9,
                "tf.shape(input)": 8,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 9,
                "tf.transpose(a)": 9,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 9,
                "IndexingOperation": 8,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 9,
                "PROVIDED_CONSTANT_WEIGHT": 9,
                "COMMON_CONSTANT_WEIGHT": 2,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 5,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    },
    {
        "name": "stackoverflow_50",
        "description": "create a binary matrix where a specified column is set to one",
        "target_program": "tf.cast(tf.one_hot(tf.fill((in1,), in3), in2), tf.int32)",
        "source": "https://stackoverflow.com/questions/58537495/tensorflow-initialize-a-sparse-tensor-with-only-one-line-column-not-zero",
        "constants": "[]",
        "examples": {
            "inputs": "[5]",
            "outputs": "[[0, 0, 0, 1, 0, 0],    [0, 0, 0, 1, 0, 0],    [0, 0, 0, 1, 0, 0],    [0, 0, 0, 1, 0, 0],    [0, 0, 0, 1, 0, 0]]"
        },
        "completions": [
            "return tf.one_hot(in1, depth=6)\n",
            "return tf.one_hot(in1, depth=6)[:, :, 3]\n",
            "return tf.one_hot(in1, 6)\n",
            "return tf.one_hot(in1, depth=6)\n",
            "return tf.one_hot(tf.fill([5], 3), 6)\n",
            "return tf.cast(tf.one_hot(in1, depth=6, on_value=1, off_value=0), tf.int32)\n",
            "def transform(in1):\n    col_index = in1\n    num_rows = 5\n    num_columns = 6\n    indices = tf.constant([[tf.range(num_rows)], [col_index * tf.ones(num_rows, dtype=tf.int32)]], dtype=tf.int32)\n    updates = tf.ones(num_rows, dtype=tf.int32)\n    result = tf.scatter_nd(indices=tf.transpose(indices), updates=updates, shape=[num_rows, num_columns])\n    return result\n",
            "return tf.one_hot([4], in1)\n",
            "return tf.cast(tf.one_hot(in1, depth=6), tf.int32)\n",
            "return tf.sequence_mask(6)[:,in1]\n",
            "return tf.one_hot(in1, depth=6)\n",
            "def transform(in1):\n    return tf.one_hot(in1, depth=6)\n",
            "return tf.equal(tf.range(6), tf.ones(6) * in1)\n",
            "return tf.one_hot(in1, depth=6)\n",
            "return tf.one_hot(in1, 6)\n",
            "return tf.one_hot(in1, depth=6)\n",
            "return tf.one_hot(tf.fill([5], 3), 6)\n",
            "return tf.one_hot(tf.constant(in1), 6)\n",
            "return tf.one_hot([in1], depth=6)\n",
            "return tf.one_hot([4], in1)\n",
            "return tf.one_hot(in1, depth=6)\n",
            "return tf.one_hot(in1, depth=6)\n  ",
            "return tf.equal(tf.range(6), in1)",
            "return tf.one_hot(in1, 6)\n",
            "def transform(in1):\n    return tf.one_hot(in1, 6)\n",
            "return tf.one_hot(indices=in1, depth=6)\n",
            "return tf.one_hot(tf.fill([5], in1), 6)\n",
            "result = tf.sequence_mask(in1, 6)\nresult = tf.cast(result, tf.int32)\nresult = tf.expand_dims(result, axis=1)\nresult = tf.tile(result, [1, 6, 1])\nreturn result\n",
            "return tf.one_hot(in1, 6)",
            "column_idx = 3\nreturn tf.equal(tf.range(6), column_idx)\n",
            "return tf.one_hot(in1, depth=6)\n",
            "return tf.cast(tf.one_hot(in1, 6, on_value=1, off_value=0, axis=1), tf.int32)\n",
            "return tf.one_hot(in1, 6)\n",
            "return tf.one_hot(in1, 6, [0, 0, 0, 1, 0, 0])\n",
            "def transform(in1):\n    column_index = 3\n    num_rows = 5\n    result = tf.one_hot(indices=column_index, depth=num_rows)\n    return result\n",
            "return tf.one_hot(in1, depth=6)\n",
            "return tf.one_hot([3], in1)\n",
            "return tf.one_hot(in1, 6)\n",
            "return tf.transpose(tf.one_hot(indices=in1, depth=6))\n",
            "return tf.equal(tf.range(6), in1)\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(tf.one_hot(in1, depth=6), axis=0), repeats=5, axis=0)\n",
            "return tf.one_hot(in1, depth=6)\n",
            "return tf.one_hot(in1, depth=6)\n",
            "return tf.one_hot(in1, depth=6)",
            "return tf.one_hot(in1, 6)\n",
            "return tf.one_hot([3], depth=6)\n",
            "def transform(in1):\n    return tf.one_hot(in1, depth=6)\n",
            "return tf.eye(5)[:, 3]\n",
            "return tf.one_hot(in1, depth=6)\n",
            "return tf.one_hot(in1, depth=6)\n"
        ],
        "tf_operators": {
            "tf.one_hot": 42,
            "tf.fill": 3,
            "tf.cast": 4,
            "tf.int32": 5,
            "tf.transpose": 2,
            "tf.scatter_nd": 1,
            "tf.range": 5,
            "tf.ones": 2,
            "tf.constant": 2,
            "tf.sequence_mask": 2,
            "tf.equal": 4,
            "tf.tile": 1,
            "tf.expand_dims": 2,
            "tf.repeat": 1,
            "tf.eye": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                6
            ],
            [
                6,
                3
            ],
            [
                6
            ],
            [
                6
            ],
            [
                5,
                3,
                6
            ],
            [
                6,
                1,
                0
            ],
            [
                5,
                6
            ],
            [
                4
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6,
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                5,
                3,
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                4
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                5,
                6
            ],
            [
                6,
                1,
                1,
                6,
                1
            ],
            [
                6
            ],
            [
                3,
                6
            ],
            [
                6
            ],
            [
                6,
                1,
                0,
                1
            ],
            [
                6
            ],
            [
                6,
                0,
                0,
                0,
                1,
                0,
                0
            ],
            [
                3,
                5
            ],
            [
                6
            ],
            [
                3
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6,
                0,
                5,
                0
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                3,
                6
            ],
            [
                6
            ],
            [
                5,
                3
            ],
            [
                6
            ],
            [
                6
            ]
        ],
        "all_constants": [
            0,
            1,
            3,
            4,
            5,
            6
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 3,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 47,
            "shape": 0,
            "tf_bool": 0,
            "provided": 62,
            "common": 16,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 7
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0027548209366391185,
                "tf.add(x, y)": 0.0027548209366391185,
                "tf.add_n(inputs)": 0.0027548209366391185,
                "tf.argmax(input, axis)": 0.0027548209366391185,
                "tf.argmin(input, axis)": 0.0027548209366391185,
                "tf.argsort(values, axis, stable=True)": 0.0027548209366391185,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 0.0027548209366391185,
                "tf.boolean_mask(tensor, mask)": 0.0027548209366391185,
                "tf.broadcast_to(input, shape)": 0.0027548209366391185,
                "tf.cast(x, dtype)": 0.013774104683195593,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0027548209366391185,
                "tf.concat(values, axis)": 0.0027548209366391185,
                "tf.constant(value)": 0.005509641873278237,
                "tf.constant(value, dtype)": 0.0027548209366391185,
                "tf.divide(x, y)": 0.0027548209366391185,
                "tf.equal(x, y)": 0.013774104683195593,
                "tf.exp(x)": 0.0027548209366391185,
                "tf.expand_dims(input, axis)": 0.008264462809917356,
                "tf.eye(num_rows)": 0.005509641873278237,
                "tf.eye(num_rows, num_columns)": 0.0027548209366391185,
                "tf.eye(num_rows, dtype)": 0.0027548209366391185,
                "tf.fill(dims, value)": 0.011019283746556474,
                "tf.gather(params, indices)": 0.0027548209366391185,
                "tf.gather(params, indices, axis, batch_dims)": 0.0027548209366391185,
                "tf.gather_nd(params, indices)": 0.0027548209366391185,
                "tf.gather_nd(params, indices, batch_dims)": 0.0027548209366391185,
                "tf.greater(x, y)": 0.0027548209366391185,
                "tf.greater_equal(x, y)": 0.0027548209366391185,
                "tf.math.bincount(arr)": 0.0027548209366391185,
                "tf.math.ceil(x)": 0.0027548209366391185,
                "tf.math.count_nonzero(input)": 0.0027548209366391185,
                "tf.math.count_nonzero(input, axis)": 0.0027548209366391185,
                "tf.math.cumsum(x, axis)": 0.0027548209366391185,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0027548209366391185,
                "tf.math.divide_no_nan(x, y)": 0.0027548209366391185,
                "tf.math.floor(x)": 0.0027548209366391185,
                "tf.math.log(x)": 0.0027548209366391185,
                "tf.math.logical_and(x, y)": 0.0027548209366391185,
                "tf.math.logical_not(x)": 0.0027548209366391185,
                "tf.math.logical_or(x, y)": 0.0027548209366391185,
                "tf.math.logical_xor(x, y)": 0.0027548209366391185,
                "tf.math.negative(x)": 0.0027548209366391185,
                "tf.math.reciprocal(x)": 0.0027548209366391185,
                "tf.math.reciprocal_no_nan(x)": 0.0027548209366391185,
                "tf.math.segment_max(data, segment_ids)": 0.0027548209366391185,
                "tf.math.segment_mean(data, segment_ids)": 0.0027548209366391185,
                "tf.math.segment_min(data, segment_ids)": 0.0027548209366391185,
                "tf.math.segment_prod(data, segment_ids)": 0.0027548209366391185,
                "tf.math.segment_sum(data, segment_ids)": 0.0027548209366391185,
                "tf.math.squared_difference(x, y)": 0.0027548209366391185,
                "tf.math.top_k(input, k)": 0.0027548209366391185,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0027548209366391185,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0027548209366391185,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0027548209366391185,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0027548209366391185,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0027548209366391185,
                "tf.matmul(a, b)": 0.0027548209366391185,
                "tf.maximum(x, y)": 0.0027548209366391185,
                "tf.minimum(x, y)": 0.0027548209366391185,
                "tf.multiply(x, y)": 0.0027548209366391185,
                "tf.not_equal(x, y)": 0.0027548209366391185,
                "tf.one_hot(indices, depth)": 0.1184573002754821,
                "tf.ones(shape)": 0.011019283746556474,
                "tf.ones_like(input)": 0.0027548209366391185,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 0.0027548209366391185,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 0.0027548209366391185,
                "tf.pad(tensor, paddings, mode='REFLECT')": 0.0027548209366391185,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 0.0027548209366391185,
                "tf.range(start)": 0.01652892561983471,
                "tf.range(start, limit, delta)": 0.0027548209366391185,
                "tf.reduce_any(input_tensor, axis)": 0.0027548209366391185,
                "tf.reduce_all(input_tensor, axis)": 0.0027548209366391185,
                "tf.reduce_max(input_tensor)": 0.0027548209366391185,
                "tf.reduce_max(input_tensor, axis)": 0.0027548209366391185,
                "tf.reduce_mean(input_tensor)": 0.0027548209366391185,
                "tf.reduce_mean(input_tensor, axis)": 0.0027548209366391185,
                "tf.reduce_min(input_tensor)": 0.0027548209366391185,
                "tf.reduce_min(input_tensor, axis)": 0.0027548209366391185,
                "tf.reduce_prod(input_tensor, axis)": 0.0027548209366391185,
                "tf.reduce_sum(input_tensor)": 0.0027548209366391185,
                "tf.reduce_sum(input_tensor, axis)": 0.0027548209366391185,
                "tf.repeat(input, repeats)": 0.0027548209366391185,
                "tf.repeat(input, repeats, axis)": 0.0027548209366391185,
                "tf.reshape(tensor, shape)": 0.0027548209366391185,
                "tf.reverse(tensor, axis)": 0.0027548209366391185,
                "tf.roll(input, shift, axis)": 0.0027548209366391185,
                "tf.round(x)": 0.0027548209366391185,
                "tf.scatter_nd(indices, updates, shape)": 0.005509641873278237,
                "tf.searchsorted(sorted_sequence, values, side='left')": 0.0027548209366391185,
                "tf.searchsorted(sorted_sequence, values, side='right')": 0.0027548209366391185,
                "tf.sequence_mask(lengths)": 0.005509641873278237,
                "tf.sequence_mask(lengths, maxlen)": 0.005509641873278237,
                "tf.shape(input)": 0.0027548209366391185,
                "tf.sign(x)": 0.0027548209366391185,
                "tf.sort(values, axis)": 0.0027548209366391185,
                "tf.sort(values, axis, direction='DESCENDING')": 0.0027548209366391185,
                "tf.sqrt(x)": 0.0027548209366391185,
                "tf.square(x)": 0.0027548209366391185,
                "tf.squeeze(input)": 0.0027548209366391185,
                "tf.squeeze(input, axis)": 0.0027548209366391185,
                "tf.stack(values, axis)": 0.0027548209366391185,
                "tf.subtract(x, y)": 0.0027548209366391185,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0027548209366391185,
                "tf.tensordot(a, b, axes)": 0.0027548209366391185,
                "tf.tile(input, multiples)": 0.005509641873278237,
                "tf.transpose(a)": 0.008264462809917356,
                "tf.transpose(a, perm)": 0.0027548209366391185,
                "tf.unique_with_counts(x)": 0.0027548209366391185,
                "tf.unstack(value, axis)": 0.0027548209366391185,
                "tf.where(condition)": 0.0027548209366391185,
                "tf.where(condition, x, y)": 0.0027548209366391185,
                "tf.zeros(shape)": 0.0027548209366391185,
                "tf.zeros_like(input)": 0.0027548209366391185,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0027548209366391185,
                "tf.sparse.add(a, b)": 0.0027548209366391185,
                "tf.sparse.concat(axis, sp_inputs)": 0.0027548209366391185,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0027548209366391185,
                "tf.sparse.from_dense(tensor)": 0.0027548209366391185,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0027548209366391185,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0027548209366391185,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0027548209366391185,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0027548209366391185,
                "tf.sparse.reset_shape(sp_input)": 0.0027548209366391185,
                "tf.sparse.reshape(sp_input, shape)": 0.0027548209366391185,
                "tf.sparse.retain(sp_input, to_retain)": 0.0027548209366391185,
                "tf.sparse.slice(sp_input, start, size)": 0.0027548209366391185,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0027548209366391185,
                "tf.sparse.to_dense(sp_input)": 0.0027548209366391185,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0027548209366391185,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0027548209366391185,
                "tf.sparse.transpose(sp_input)": 0.0027548209366391185,
                "tf.sparse.transpose(sp_input, perm)": 0.0027548209366391185,
                "IndexingAxis1Operation": 0.008264462809917356,
                "IndexingOperation": 0.0027548209366391185,
                "PairCreationOperation": 0.008264462809917356,
                "SingletonTupleCreationOperation": 0.0027548209366391185,
                "SlicingAxis0BothOperation": 0.0027548209366391185,
                "SlicingAxis0LeftOperation": 0.0027548209366391185,
                "SlicingAxis0RightOperation": 0.0027548209366391185,
                "SlicingAxis1BothOperation": 0.0027548209366391185,
                "SlicingAxis1LeftOperation": 0.0027548209366391185,
                "SlicingAxis1RightOperation": 0.0027548209366391185,
                "TripleCreationOperation": 0.005509641873278237,
                "PROVIDED_CONSTANT_WEIGHT": 0.17355371900826447,
                "COMMON_CONSTANT_WEIGHT": 0.046831955922865015,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0027548209366391185,
                "INPUT_VARIABLE_WEIGHT": 0.1322314049586777,
                "AXIS_CONSTANT_WEIGHT": 0.0027548209366391185,
                "SHAPE_CONSTANT_WEIGHT": 0.0027548209366391185,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0027548209366391185,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.02203856749311295,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0027548209366391185,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0027548209366391185,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0027548209366391185
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 9,
                "tf.add(x, y)": 9,
                "tf.add_n(inputs)": 9,
                "tf.argmax(input, axis)": 9,
                "tf.argmin(input, axis)": 9,
                "tf.argsort(values, axis, stable=True)": 9,
                "tf.argsort(values, axis, direction='DESCENDING', stable=True)": 9,
                "tf.boolean_mask(tensor, mask)": 9,
                "tf.broadcast_to(input, shape)": 9,
                "tf.cast(x, dtype)": 6,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 9,
                "tf.concat(values, axis)": 9,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 9,
                "tf.divide(x, y)": 9,
                "tf.equal(x, y)": 6,
                "tf.exp(x)": 9,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 9,
                "tf.eye(num_rows, dtype)": 9,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 9,
                "tf.gather(params, indices, axis, batch_dims)": 9,
                "tf.gather_nd(params, indices)": 9,
                "tf.gather_nd(params, indices, batch_dims)": 9,
                "tf.greater(x, y)": 9,
                "tf.greater_equal(x, y)": 9,
                "tf.math.bincount(arr)": 9,
                "tf.math.ceil(x)": 9,
                "tf.math.count_nonzero(input)": 9,
                "tf.math.count_nonzero(input, axis)": 9,
                "tf.math.cumsum(x, axis)": 9,
                "tf.math.cumsum(x, axis, exclusive=True)": 9,
                "tf.math.divide_no_nan(x, y)": 9,
                "tf.math.floor(x)": 9,
                "tf.math.log(x)": 9,
                "tf.math.logical_and(x, y)": 9,
                "tf.math.logical_not(x)": 9,
                "tf.math.logical_or(x, y)": 9,
                "tf.math.logical_xor(x, y)": 9,
                "tf.math.negative(x)": 9,
                "tf.math.reciprocal(x)": 9,
                "tf.math.reciprocal_no_nan(x)": 9,
                "tf.math.segment_max(data, segment_ids)": 9,
                "tf.math.segment_mean(data, segment_ids)": 9,
                "tf.math.segment_min(data, segment_ids)": 9,
                "tf.math.segment_prod(data, segment_ids)": 9,
                "tf.math.segment_sum(data, segment_ids)": 9,
                "tf.math.squared_difference(x, y)": 9,
                "tf.math.top_k(input, k)": 9,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 9,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 9,
                "tf.matmul(a, b)": 9,
                "tf.maximum(x, y)": 9,
                "tf.minimum(x, y)": 9,
                "tf.multiply(x, y)": 9,
                "tf.not_equal(x, y)": 9,
                "tf.one_hot(indices, depth)": 3,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT')": 9,
                "tf.pad(tensor, paddings, mode='CONSTANT', constant_values)": 9,
                "tf.pad(tensor, paddings, mode='REFLECT')": 9,
                "tf.pad(tensor, paddings, mode='SYMMETRIC')": 9,
                "tf.range(start)": 6,
                "tf.range(start, limit, delta)": 9,
                "tf.reduce_any(input_tensor, axis)": 9,
                "tf.reduce_all(input_tensor, axis)": 9,
                "tf.reduce_max(input_tensor)": 9,
                "tf.reduce_max(input_tensor, axis)": 9,
                "tf.reduce_mean(input_tensor)": 9,
                "tf.reduce_mean(input_tensor, axis)": 9,
                "tf.reduce_min(input_tensor)": 9,
                "tf.reduce_min(input_tensor, axis)": 9,
                "tf.reduce_prod(input_tensor, axis)": 9,
                "tf.reduce_sum(input_tensor)": 9,
                "tf.reduce_sum(input_tensor, axis)": 9,
                "tf.repeat(input, repeats)": 9,
                "tf.repeat(input, repeats, axis)": 9,
                "tf.reshape(tensor, shape)": 9,
                "tf.reverse(tensor, axis)": 9,
                "tf.roll(input, shift, axis)": 9,
                "tf.round(x)": 9,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side='left')": 9,
                "tf.searchsorted(sorted_sequence, values, side='right')": 9,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 9,
                "tf.sign(x)": 9,
                "tf.sort(values, axis)": 9,
                "tf.sort(values, axis, direction='DESCENDING')": 9,
                "tf.sqrt(x)": 9,
                "tf.square(x)": 9,
                "tf.squeeze(input)": 9,
                "tf.squeeze(input, axis)": 9,
                "tf.stack(values, axis)": 9,
                "tf.subtract(x, y)": 9,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 9,
                "tf.tensordot(a, b, axes)": 9,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 9,
                "tf.unique_with_counts(x)": 9,
                "tf.unstack(value, axis)": 9,
                "tf.where(condition)": 9,
                "tf.where(condition, x, y)": 9,
                "tf.zeros(shape)": 9,
                "tf.zeros_like(input)": 9,
                "tf.SparseTensor(indices, values, dense_shape)": 9,
                "tf.sparse.add(a, b)": 9,
                "tf.sparse.concat(axis, sp_inputs)": 9,
                "tf.sparse.expand_dims(sp_input, axis)": 9,
                "tf.sparse.from_dense(tensor)": 9,
                "tf.sparse.maximum(sp_a, sp_b)": 9,
                "tf.sparse.minimum(sp_a, sp_b)": 9,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 9,
                "tf.sparse.reset_shape(sp_input)": 9,
                "tf.sparse.reshape(sp_input, shape)": 9,
                "tf.sparse.retain(sp_input, to_retain)": 9,
                "tf.sparse.slice(sp_input, start, size)": 9,
                "tf.sparse.split(sp_input, num_split, axis)": 9,
                "tf.sparse.to_dense(sp_input)": 9,
                "tf.sparse.to_dense(sp_input, default_value)": 9,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 9,
                "tf.sparse.transpose(sp_input)": 9,
                "tf.sparse.transpose(sp_input, perm)": 9,
                "IndexingAxis1Operation": 7,
                "IndexingOperation": 9,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 9,
                "SlicingAxis0BothOperation": 9,
                "SlicingAxis0LeftOperation": 9,
                "SlicingAxis0RightOperation": 9,
                "SlicingAxis1BothOperation": 9,
                "SlicingAxis1LeftOperation": 9,
                "SlicingAxis1RightOperation": 9,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 3,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 9,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 9,
                "SHAPE_CONSTANT_WEIGHT": 9,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 6,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 9,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 9
            }
        }
    }
]