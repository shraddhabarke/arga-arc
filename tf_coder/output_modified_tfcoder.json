[
    {
        "task_id": "google_01",
        "completions": [
            "\ndef convert_to_pairs(tensor):\n    return tf.reshape(tensor, (-1, 2))\n\ntensor = tf.constant([0, 0, 0, 1, 3, 3])\npairs = convert_to_pairs(tensor)\n",
            "\ndef convert_indices(indices):\n    indices = tf.constant(indices)\n    second_elements = tf.where(indices)\n    first_elements = tf.subtract(second_elements, 1)\n    index_pairs = tf.stack([first_elements, second_elements], axis=-1)\n    return index_pairs\n\nindices = [0, 0, 0, 1, 3, 3]\n",
            "\ntensor = tf.constant([0, 0, 0, 1, 3, 3])\n\nsorted_tensor = tf.sort(tensor)\nduplicates = tf.equal(sorted_tensor, tf.roll(sorted_tensor, shift=1))\n\nindices = tf.where(duplicates)\n\npairs = tf.gather(tensor, indices)\n\npairs = tf.squeeze(pairs)\n\n",
            "\ndef index_to_pairs(indices):\n    tensor = tf.constant(indices)\n    unique_indices, counts = tf.unique_with_counts(tensor)\n    pairs = tf.transpose(tf.stack([unique_indices, counts]))\n    return pairs\n",
            "\ndef convert_index_to_pairs(index_tensor):\n    unique, counts = tf.unique_with_counts(index_tensor)\n    indices = tf.where(counts > 1)\n    pairs = tf.gather(unique, indices)\n    return pairs\n",
            "\ndef index_to_pairs(index_tensor):\n    unique_elements, _ = tf.unique_with_counts(index_tensor)\n    return tf.reshape(unique_elements, (-1, 2))\n",
            "\ndef index_to_pairs(index_tensor):\n    unique, counts = tf.unique_with_counts(index_tensor)\n    return tf.transpose(tf.stack([unique, counts]))\n\nindex_tensor = tf.constant([0, 0, 0, 1, 3, 3])\n",
            "\ndef tensor_to_pairs(tensor):\n    return tf.reshape(tensor, [-1, 2])\n\ntensor = tf.constant([0, 0, 0, 1, 3, 3])\n",
            "\ndef convert_indices(input_tensor):\n    condition = tf.equal(input_tensor, input_tensor)\n    output = tf.where(condition)\n    return output\n",
            "\ndef index_to_pairs(indices):\n    indices = tf.constant(indices)\n    unique_indices, counts = tf.unique_with_counts(indices)\n    row_indices = tf.expand_dims(unique_indices, -1)\n    col_indices = tf.expand_dims(tf.range(tf.size(unique_indices)), -1)\n    pairs = tf.stack([row_indices, col_indices], axis=-1)\n    return pairs\n\nindices = [0, 0, 0, 1, 3, 3]\npairs = index_to_pairs(indices)\n"
        ],
        "target-program": "tf.cast(tf.where(tf.sequence_mask(tf.math.bincount(in1))), tf.int32)",
        "description": "Convert index tensor into pairs for SparseTensor indexing",
        "tf_operators": {
            "tf.constant": 7,
            "tf.reshape": 3,
            "tf.stack": 4,
            "tf.where": 4,
            "tf.subtract": 1,
            "tf.squeeze": 1,
            "tf.gather": 2,
            "tf.roll": 1,
            "tf.sort": 1,
            "tf.equal": 2,
            "tf.unique_with_counts": 5,
            "tf.transpose": 2,
            "tf.expand_dims": 1,
            "tf.range": 1,
            "tf.size": 1
        },
        "coverage_percentage": 20.0,
        "total_in_target": 5,
        "total_covered": 1,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005434782608695652,
                "tf.add(x, y)": 0.005434782608695652,
                "tf.add_n(inputs)": 0.005434782608695652,
                "tf.argmax(input, axis)": 0.005434782608695652,
                "tf.argmin(input, axis)": 0.005434782608695652,
                "tf.argsort(values, axis, stable=True)": 0.005434782608695652,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005434782608695652,
                "tf.boolean_mask(tensor, mask)": 0.005434782608695652,
                "tf.broadcast_to(input, shape)": 0.005434782608695652,
                "tf.cast(x, dtype)": 0.005434782608695652,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005434782608695652,
                "tf.concat(values, axis)": 0.005434782608695652,
                "tf.constant(value)": 0.043478260869565216,
                "tf.constant(value, dtype)": 0.005434782608695652,
                "tf.divide(x, y)": 0.005434782608695652,
                "tf.equal(x, y)": 0.016304347826086956,
                "tf.exp(x)": 0.005434782608695652,
                "tf.expand_dims(input, axis)": 0.016304347826086956,
                "tf.eye(num_rows)": 0.005434782608695652,
                "tf.eye(num_rows, num_columns)": 0.005434782608695652,
                "tf.eye(num_rows, dtype)": 0.005434782608695652,
                "tf.fill(dims, value)": 0.005434782608695652,
                "tf.gather(params, indices)": 0.016304347826086956,
                "tf.gather(params, indices, axis, batch_dims)": 0.005434782608695652,
                "tf.gather_nd(params, indices)": 0.005434782608695652,
                "tf.gather_nd(params, indices, batch_dims)": 0.005434782608695652,
                "tf.greater(x, y)": 0.005434782608695652,
                "tf.greater_equal(x, y)": 0.005434782608695652,
                "tf.math.bincount(arr)": 0.005434782608695652,
                "tf.math.ceil(x)": 0.005434782608695652,
                "tf.math.count_nonzero(input)": 0.005434782608695652,
                "tf.math.count_nonzero(input, axis)": 0.005434782608695652,
                "tf.math.cumsum(x, axis)": 0.005434782608695652,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005434782608695652,
                "tf.math.divide_no_nan(x, y)": 0.005434782608695652,
                "tf.math.floor(x)": 0.005434782608695652,
                "tf.math.log(x)": 0.005434782608695652,
                "tf.math.logical_and(x, y)": 0.005434782608695652,
                "tf.math.logical_not(x)": 0.005434782608695652,
                "tf.math.logical_or(x, y)": 0.005434782608695652,
                "tf.math.logical_xor(x, y)": 0.005434782608695652,
                "tf.math.negative(x)": 0.005434782608695652,
                "tf.math.reciprocal(x)": 0.005434782608695652,
                "tf.math.reciprocal_no_nan(x)": 0.005434782608695652,
                "tf.math.segment_max(data, segment_ids)": 0.005434782608695652,
                "tf.math.segment_mean(data, segment_ids)": 0.005434782608695652,
                "tf.math.segment_min(data, segment_ids)": 0.005434782608695652,
                "tf.math.segment_prod(data, segment_ids)": 0.005434782608695652,
                "tf.math.segment_sum(data, segment_ids)": 0.005434782608695652,
                "tf.math.squared_difference(x, y)": 0.005434782608695652,
                "tf.math.top_k(input, k)": 0.005434782608695652,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005434782608695652,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005434782608695652,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005434782608695652,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005434782608695652,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005434782608695652,
                "tf.matmul(a, b)": 0.005434782608695652,
                "tf.maximum(x, y)": 0.005434782608695652,
                "tf.minimum(x, y)": 0.005434782608695652,
                "tf.multiply(x, y)": 0.005434782608695652,
                "tf.not_equal(x, y)": 0.005434782608695652,
                "tf.one_hot(indices, depth)": 0.005434782608695652,
                "tf.ones(shape)": 0.005434782608695652,
                "tf.ones_like(input)": 0.005434782608695652,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005434782608695652,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005434782608695652,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005434782608695652,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005434782608695652,
                "tf.range(start)": 0.010869565217391304,
                "tf.range(start, limit, delta)": 0.005434782608695652,
                "tf.reduce_any(input_tensor, axis)": 0.005434782608695652,
                "tf.reduce_all(input_tensor, axis)": 0.005434782608695652,
                "tf.reduce_max(input_tensor)": 0.005434782608695652,
                "tf.reduce_max(input_tensor, axis)": 0.005434782608695652,
                "tf.reduce_mean(input_tensor)": 0.005434782608695652,
                "tf.reduce_mean(input_tensor, axis)": 0.005434782608695652,
                "tf.reduce_min(input_tensor)": 0.005434782608695652,
                "tf.reduce_min(input_tensor, axis)": 0.005434782608695652,
                "tf.reduce_prod(input_tensor, axis)": 0.005434782608695652,
                "tf.reduce_sum(input_tensor)": 0.005434782608695652,
                "tf.reduce_sum(input_tensor, axis)": 0.005434782608695652,
                "tf.repeat(input, repeats)": 0.005434782608695652,
                "tf.repeat(input, repeats, axis)": 0.005434782608695652,
                "tf.reshape(tensor, shape)": 0.021739130434782608,
                "tf.reverse(tensor, axis)": 0.005434782608695652,
                "tf.roll(input, shift, axis)": 0.010869565217391304,
                "tf.round(x)": 0.005434782608695652,
                "tf.scatter_nd(indices, updates, shape)": 0.005434782608695652,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005434782608695652,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005434782608695652,
                "tf.sequence_mask(lengths)": 0.005434782608695652,
                "tf.sequence_mask(lengths, maxlen)": 0.005434782608695652,
                "tf.shape(input)": 0.005434782608695652,
                "tf.sign(x)": 0.005434782608695652,
                "tf.sort(values, axis)": 0.005434782608695652,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005434782608695652,
                "tf.sqrt(x)": 0.005434782608695652,
                "tf.square(x)": 0.005434782608695652,
                "tf.squeeze(input)": 0.010869565217391304,
                "tf.squeeze(input, axis)": 0.005434782608695652,
                "tf.stack(values, axis)": 0.02717391304347826,
                "tf.subtract(x, y)": 0.010869565217391304,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005434782608695652,
                "tf.tensordot(a, b, axes)": 0.005434782608695652,
                "tf.tile(input, multiples)": 0.005434782608695652,
                "tf.transpose(a)": 0.016304347826086956,
                "tf.transpose(a, perm)": 0.005434782608695652,
                "tf.unique_with_counts(x)": 0.03260869565217391,
                "tf.unstack(value, axis)": 0.005434782608695652,
                "tf.where(condition)": 0.02717391304347826,
                "tf.where(condition, x, y)": 0.005434782608695652,
                "tf.zeros(shape)": 0.005434782608695652,
                "tf.zeros_like(input)": 0.005434782608695652,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005434782608695652,
                "tf.sparse.add(a, b)": 0.005434782608695652,
                "tf.sparse.concat(axis, sp_inputs)": 0.005434782608695652,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005434782608695652,
                "tf.sparse.from_dense(tensor)": 0.005434782608695652,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005434782608695652,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005434782608695652,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005434782608695652,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005434782608695652,
                "tf.sparse.reset_shape(sp_input)": 0.005434782608695652,
                "tf.sparse.reshape(sp_input, shape)": 0.005434782608695652,
                "tf.sparse.retain(sp_input, to_retain)": 0.005434782608695652,
                "tf.sparse.slice(sp_input, start, size)": 0.005434782608695652,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005434782608695652,
                "tf.sparse.to_dense(sp_input)": 0.005434782608695652,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005434782608695652,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005434782608695652,
                "tf.sparse.transpose(sp_input)": 0.005434782608695652,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005434782608695652,
                "IndexingOperation": 0.005434782608695652,
                "PairCreationOperation": 0.043478260869565216,
                "SingletonTupleCreationOperation": 0.005434782608695652,
                "SlicingAxis0BothOperation": 0.005434782608695652,
                "SlicingAxis0LeftOperation": 0.005434782608695652,
                "SlicingAxis0RightOperation": 0.005434782608695652,
                "SlicingAxis1BothOperation": 0.005434782608695652,
                "SlicingAxis1LeftOperation": 0.005434782608695652,
                "SlicingAxis1RightOperation": 0.005434782608695652,
                "TripleCreationOperation": 0.005434782608695652
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 5,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 6,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 6,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 6,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 6,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 5,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 6,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 5,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 5,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 5,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8
            }
        }
    },
    {
        "task_id": "google_02",
        "completions": [
            "\nx = tf.constant([[0.0, 1.0, 0.0, 0.0], [0.0, 1.0, 1.0, 0.0], [1.0, 1.0, 1.0, 1.0]])\n\nrow_sum = tf.reshape(tf.reduce_sum(x, axis=1), (-1, 1))\n\nresult = tf.divide(x, row_sum)\n\n",
            "\ndata = [[0.0, 1.0, 0.0, 0.0], [0.0, 1.0, 1.0, 0.0], [1.0, 1.0, 1.0, 1.0]]\n\ntensor = tf.constant(data)\n\nrow_sums = tf.reduce_sum(tensor, axis=1)\n\nrow_sums = tf.reshape(row_sums, [-1, 1])\n\noutput = tf.divide(tensor, row_sums)\n\n",
            "\ninput_tensor = tf.constant([[0.0, 1.0, 0.0, 0.0], [0.0, 1.0, 1.0, 0.0], [1.0, 1.0, 1.0, 1.0]])\n\nrow_sums = tf.reduce_sum(input_tensor, axis=1, keepdims=True)\n\noutput_tensor = tf.divide(input_tensor, row_sums)\n\n",
            "\nlst = [[0.0, 1.0, 0.0, 0.0], [0.0, 1.0, 1.0, 0.0], [1.0, 1.0, 1.0, 1.0]]\n\ntensor = tf.constant(lst)\n\nrow_sum = tf.reduce_sum(tensor, axis=1)\n\nrow_sum_expanded = tf.expand_dims(row_sum, axis=1)\n\noutput = tf.divide(tensor, row_sum_expanded)\n\n",
            "\ndata = tf.constant([[0.0, 1.0, 0.0, 0.0], [0.0, 1.0, 1.0, 0.0], [1.0, 1.0, 1.0, 1.0]])\n\nrow_sums = tf.reduce_sum(data, axis=1)\n\nrow_sums = tf.reshape(row_sums, [-1, 1])\n\nnormalized_data = tf.divide(data, row_sums)\n\n",
            "\ndata = [[0.0, 1.0, 0.0, 0.0], [0.0, 1.0, 1.0, 0.0], [1.0, 1.0, 1.0, 1.0]]\n\ndata_tf = tf.constant(data)\n\nrow_sum = tf.reduce_sum(data_tf, axis=1)\n\nrow_sum_reshaped = tf.reshape(row_sum, [-1, 1])\n\noutput = tf.divide(data_tf, row_sum_reshaped)\n\n",
            "\nmatrix = tf.constant([[0.0, 1.0, 0.0, 0.0], [0.0, 1.0, 1.0, 0.0], [1.0, 1.0, 1.0, 1.0]])\n\nrow_sums = tf.reduce_sum(matrix, axis=1)\n\nrow_sums = tf.expand_dims(row_sums, axis=1)\n\nnormalized_matrix = tf.divide(matrix, row_sums)\n\n",
            "\ndef normalize_rows(input):\n    input_tensor = tf.constant(input)\n    row_sums = tf.reduce_sum(input_tensor, axis=1)\n    row_sums_reshaped = tf.reshape(row_sums, [-1, 1])\n    output = tf.divide(input_tensor, row_sums_reshaped)\n    return output\n\ninput = [[0.0, 1.0, 0.0, 0.0], [0.0, 1.0, 1.0, 0.0], [1.0, 1.0, 1.0, 1.0]]\n",
            "\ndata = [[0.0, 1.0, 0.0, 0.0], [0.0, 1.0, 1.0, 0.0], [1.0, 1.0, 1.0, 1.0]]\n\ntensor = tf.constant(data)\n\nrow_sums = tf.reduce_sum(tensor, axis=1)\n\nrow_sums_reshaped = tf.reshape(row_sums, [-1, 1])\n\nresult = tf.divide(tensor, row_sums_reshaped)\n\n",
            "\ndata = [[0.0, 1.0, 0.0, 0.0], [0.0, 1.0, 1.0, 0.0], [1.0, 1.0, 1.0, 1.0]]\n\ndata_tensor = tf.constant(data)\n\nrow_sum = tf.reduce_sum(data_tensor, axis=1)\n\nrow_sum_expanded = tf.expand_dims(row_sum, axis=1)\n\noutput = tf.divide(data_tensor, row_sum_expanded)\n\n"
        ],
        "target-program": "tf.divide(in1, tf.expand_dims(tf.reduce_sum(in1, axis=1), 1))",
        "description": "Divide each row by the sum of that row",
        "tf_operators": {
            "tf.reduce_sum": 10,
            "tf.divide": 10,
            "tf.reshape": 6,
            "tf.constant": 10,
            "tf.expand_dims": 3
        },
        "coverage_percentage": 100.0,
        "total_in_target": 3,
        "total_covered": 3,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005813953488372093,
                "tf.add(x, y)": 0.005813953488372093,
                "tf.add_n(inputs)": 0.005813953488372093,
                "tf.argmax(input, axis)": 0.005813953488372093,
                "tf.argmin(input, axis)": 0.005813953488372093,
                "tf.argsort(values, axis, stable=True)": 0.005813953488372093,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005813953488372093,
                "tf.boolean_mask(tensor, mask)": 0.005813953488372093,
                "tf.broadcast_to(input, shape)": 0.005813953488372093,
                "tf.cast(x, dtype)": 0.005813953488372093,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005813953488372093,
                "tf.concat(values, axis)": 0.005813953488372093,
                "tf.constant(value)": 0.06395348837209303,
                "tf.constant(value, dtype)": 0.005813953488372093,
                "tf.divide(x, y)": 0.06395348837209303,
                "tf.equal(x, y)": 0.005813953488372093,
                "tf.exp(x)": 0.005813953488372093,
                "tf.expand_dims(input, axis)": 0.023255813953488372,
                "tf.eye(num_rows)": 0.005813953488372093,
                "tf.eye(num_rows, num_columns)": 0.005813953488372093,
                "tf.eye(num_rows, dtype)": 0.005813953488372093,
                "tf.fill(dims, value)": 0.005813953488372093,
                "tf.gather(params, indices)": 0.005813953488372093,
                "tf.gather(params, indices, axis, batch_dims)": 0.005813953488372093,
                "tf.gather_nd(params, indices)": 0.005813953488372093,
                "tf.gather_nd(params, indices, batch_dims)": 0.005813953488372093,
                "tf.greater(x, y)": 0.005813953488372093,
                "tf.greater_equal(x, y)": 0.005813953488372093,
                "tf.math.bincount(arr)": 0.005813953488372093,
                "tf.math.ceil(x)": 0.005813953488372093,
                "tf.math.count_nonzero(input)": 0.005813953488372093,
                "tf.math.count_nonzero(input, axis)": 0.005813953488372093,
                "tf.math.cumsum(x, axis)": 0.005813953488372093,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005813953488372093,
                "tf.math.divide_no_nan(x, y)": 0.005813953488372093,
                "tf.math.floor(x)": 0.005813953488372093,
                "tf.math.log(x)": 0.005813953488372093,
                "tf.math.logical_and(x, y)": 0.005813953488372093,
                "tf.math.logical_not(x)": 0.005813953488372093,
                "tf.math.logical_or(x, y)": 0.005813953488372093,
                "tf.math.logical_xor(x, y)": 0.005813953488372093,
                "tf.math.negative(x)": 0.005813953488372093,
                "tf.math.reciprocal(x)": 0.005813953488372093,
                "tf.math.reciprocal_no_nan(x)": 0.005813953488372093,
                "tf.math.segment_max(data, segment_ids)": 0.005813953488372093,
                "tf.math.segment_mean(data, segment_ids)": 0.005813953488372093,
                "tf.math.segment_min(data, segment_ids)": 0.005813953488372093,
                "tf.math.segment_prod(data, segment_ids)": 0.005813953488372093,
                "tf.math.segment_sum(data, segment_ids)": 0.005813953488372093,
                "tf.math.squared_difference(x, y)": 0.005813953488372093,
                "tf.math.top_k(input, k)": 0.005813953488372093,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005813953488372093,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005813953488372093,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005813953488372093,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005813953488372093,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005813953488372093,
                "tf.matmul(a, b)": 0.005813953488372093,
                "tf.maximum(x, y)": 0.005813953488372093,
                "tf.minimum(x, y)": 0.005813953488372093,
                "tf.multiply(x, y)": 0.005813953488372093,
                "tf.not_equal(x, y)": 0.005813953488372093,
                "tf.one_hot(indices, depth)": 0.005813953488372093,
                "tf.ones(shape)": 0.005813953488372093,
                "tf.ones_like(input)": 0.005813953488372093,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005813953488372093,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005813953488372093,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005813953488372093,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005813953488372093,
                "tf.range(start)": 0.005813953488372093,
                "tf.range(start, limit, delta)": 0.005813953488372093,
                "tf.reduce_any(input_tensor, axis)": 0.005813953488372093,
                "tf.reduce_all(input_tensor, axis)": 0.005813953488372093,
                "tf.reduce_max(input_tensor)": 0.005813953488372093,
                "tf.reduce_max(input_tensor, axis)": 0.005813953488372093,
                "tf.reduce_mean(input_tensor)": 0.005813953488372093,
                "tf.reduce_mean(input_tensor, axis)": 0.005813953488372093,
                "tf.reduce_min(input_tensor)": 0.005813953488372093,
                "tf.reduce_min(input_tensor, axis)": 0.005813953488372093,
                "tf.reduce_prod(input_tensor, axis)": 0.005813953488372093,
                "tf.reduce_sum(input_tensor)": 0.005813953488372093,
                "tf.reduce_sum(input_tensor, axis)": 0.005813953488372093,
                "tf.repeat(input, repeats)": 0.005813953488372093,
                "tf.repeat(input, repeats, axis)": 0.005813953488372093,
                "tf.reshape(tensor, shape)": 0.040697674418604654,
                "tf.reverse(tensor, axis)": 0.005813953488372093,
                "tf.roll(input, shift, axis)": 0.005813953488372093,
                "tf.round(x)": 0.005813953488372093,
                "tf.scatter_nd(indices, updates, shape)": 0.005813953488372093,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005813953488372093,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005813953488372093,
                "tf.sequence_mask(lengths)": 0.005813953488372093,
                "tf.sequence_mask(lengths, maxlen)": 0.005813953488372093,
                "tf.shape(input)": 0.005813953488372093,
                "tf.sign(x)": 0.005813953488372093,
                "tf.sort(values, axis)": 0.005813953488372093,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005813953488372093,
                "tf.sqrt(x)": 0.005813953488372093,
                "tf.square(x)": 0.005813953488372093,
                "tf.squeeze(input)": 0.005813953488372093,
                "tf.squeeze(input, axis)": 0.005813953488372093,
                "tf.stack(values, axis)": 0.005813953488372093,
                "tf.subtract(x, y)": 0.005813953488372093,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005813953488372093,
                "tf.tensordot(a, b, axes)": 0.005813953488372093,
                "tf.tile(input, multiples)": 0.005813953488372093,
                "tf.transpose(a)": 0.005813953488372093,
                "tf.transpose(a, perm)": 0.005813953488372093,
                "tf.unique_with_counts(x)": 0.005813953488372093,
                "tf.unstack(value, axis)": 0.005813953488372093,
                "tf.where(condition)": 0.005813953488372093,
                "tf.where(condition, x, y)": 0.005813953488372093,
                "tf.zeros(shape)": 0.005813953488372093,
                "tf.zeros_like(input)": 0.005813953488372093,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005813953488372093,
                "tf.sparse.add(a, b)": 0.005813953488372093,
                "tf.sparse.concat(axis, sp_inputs)": 0.005813953488372093,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005813953488372093,
                "tf.sparse.from_dense(tensor)": 0.005813953488372093,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005813953488372093,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005813953488372093,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005813953488372093,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005813953488372093,
                "tf.sparse.reset_shape(sp_input)": 0.005813953488372093,
                "tf.sparse.reshape(sp_input, shape)": 0.005813953488372093,
                "tf.sparse.retain(sp_input, to_retain)": 0.005813953488372093,
                "tf.sparse.slice(sp_input, start, size)": 0.005813953488372093,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005813953488372093,
                "tf.sparse.to_dense(sp_input)": 0.005813953488372093,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005813953488372093,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005813953488372093,
                "tf.sparse.transpose(sp_input)": 0.005813953488372093,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005813953488372093,
                "IndexingOperation": 0.005813953488372093,
                "PairCreationOperation": 0.011627906976744186,
                "SingletonTupleCreationOperation": 0.005813953488372093,
                "SlicingAxis0BothOperation": 0.005813953488372093,
                "SlicingAxis0LeftOperation": 0.005813953488372093,
                "SlicingAxis0RightOperation": 0.005813953488372093,
                "SlicingAxis1BothOperation": 0.005813953488372093,
                "SlicingAxis1LeftOperation": 0.005813953488372093,
                "SlicingAxis1RightOperation": 0.005813953488372093,
                "TripleCreationOperation": 0.005813953488372093
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 4,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 5,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 5,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 6,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "google_03",
        "completions": [
            "def slice_sparse_tensor_8(sparse_tensor):\n    is_first_dim = tf.equal(sparse_tensor.indices[:, 0], 0)\n    new_indices = tf.boolean_mask(sparse_tensor.indices, is_first_dim)\n    new_values = tf.boolean_mask(sparse_tensor.values, is_first_dim)\n    new_shape = [1, sparse_tensor.dense_shape[1], sparse_tensor.dense_shape[2]]\n    return tf.SparseTensor(indices=new_indices, values=new_values, dense_shape=tf.constant(new_shape))",
            "def slice_sparse_tensor_7(sparse_tensor):\n    mask = tf.squeeze(tf.where(tf.equal(sparse_tensor.indices[:, 0], 0)), axis=1)\n    new_indices = tf.gather(sparse_tensor.indices, mask)\n    new_values = tf.gather(sparse_tensor.values, mask)\n    new_shape = tf.concat([[1], sparse_tensor.dense_shape[1:]], 0)\n    return tf.SparseTensor(indices=new_indices, values=new_values, dense_shape=new_shape)",
            "\ndef slice_first_dimension(sparse_tensor):\n    return tf.sparse.slice(sparse_tensor, start=[0, 0], size=[1, -1])\n",
            "\nindices = tf.constant([[0, 0], [1, 2]], dtype=tf.int64)\nvalues = tf.constant([1, 2], dtype=tf.int32)\ndense_shape = tf.constant([3, 4], dtype=tf.int64)\nsparse_tensor = tf.SparseTensor(indices, values, dense_shape)\n\nsliced_sparse_tensor = tf.sparse.slice(sparse_tensor, start=[0, 0], size=[1, -1])\n",
            "\nindices = tf.constant([[0, 0], [1, 2]])\nvalues = tf.constant([1, 2], dtype=tf.int32)\ndense_shape = tf.constant([3, 4])\nsparse_tensor = tf.SparseTensor(indices, values, dense_shape)\n\nstart = tf.constant([0, 0], dtype=tf.int64)\nsize = tf.constant([1, -1], dtype=tf.int64)\nsliced = tf.sparse.slice(sparse_tensor, start, size)\n",
            "\ndef slice_first_dim(char):\n    # Convert the character to a SparseTensor\n    indices = [[0, 0]]\n    values = [char]\n    dense_shape = [1, 1]\n    sparse_tensor = tf.SparseTensor(indices, values, dense_shape)\n\n    # Slice the first dimension\n    sliced = tf.sparse.slice(sparse_tensor, start=[0, 0], size=[1, 1])\n\n    # Convert back to dense and return the first element\n    return tf.sparse.to_dense(sliced)[0][0].numpy().decode()\n",
            "def slice_sparse_tensor_9(sparse_tensor):\n    mask = sparse_tensor.indices[:, 0] < 1\n    filtered_indices = tf.boolean_mask(sparse_tensor.indices, mask)\n    filtered_values = tf.boolean_mask(sparse_tensor.values, mask)\n    new_shape = tf.concat([[1], sparse_tensor.dense_shape[1:]], axis=0)\n    return tf.SparseTensor(indices=filtered_indices, values=filtered_values, dense_shape=new_shape)",
            "def slice_sparse_tensor_5(sparse_tensor):\n    condition = tf.equal(sparse_tensor.indices[:, 0], 0)\n    new_indices = tf.ragged.boolean_mask(sparse_tensor.indices, condition).to_tensor()\n    new_values = tf.boolean_mask(sparse_tensor.values, condition)\n    new_shape = tf.concat([[1], sparse_tensor.dense_shape[1:]], axis=0)\n    return tf.SparseTensor(indices=new_indices, values=new_values, dense_shape=new_shape)",
            "def slice_sparse_tensor_10(sparse_tensor):\n    mask = sparse_tensor.indices[:, 0] == 0\n    new_indices = sparse_tensor.indices[mask]\n    new_values = sparse_tensor.values[mask]\n    new_shape = tf.concat([[1], sparse_tensor.dense_shape[1:]], axis=0)\n    return tf.SparseTensor(indices=new_indices, values=new_values, dense_shape=new_shape)\n    output = tf.sparse.slice(sparse_tensor, start=[0], size=[1])\n"
        ],
        "target-program": "tf.divide(in1, tf.expand_dims(tf.reduce_sum(in1, axis=1), 1))",
        "description": "Slice the first dimension of a SparseTensor",
        "tf_operators": {
            "tf.sparse.slice": 7,
            "tf.constant": 2,
            "tf.int64": 2,
            "tf.SparseTensor": 3,
            "tf.int32": 2,
            "tf.sparse.to_dense": 1
        },
        "coverage_percentage": 0.0,
        "total_in_target": 3,
        "total_covered": 0,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005319148936170213,
                "tf.add(x, y)": 0.005319148936170213,
                "tf.add_n(inputs)": 0.005319148936170213,
                "tf.argmax(input, axis)": 0.005319148936170213,
                "tf.argmin(input, axis)": 0.005319148936170213,
                "tf.argsort(values, axis, stable=True)": 0.005319148936170213,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005319148936170213,
                "tf.boolean_mask(tensor, mask)": 0.031914893617021274,
                "tf.broadcast_to(input, shape)": 0.005319148936170213,
                "tf.cast(x, dtype)": 0.005319148936170213,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005319148936170213,
                "tf.concat(values, axis)": 0.026595744680851064,
                "tf.constant(value)": 0.02127659574468085,
                "tf.constant(value, dtype)": 0.005319148936170213,
                "tf.divide(x, y)": 0.005319148936170213,
                "tf.equal(x, y)": 0.02127659574468085,
                "tf.exp(x)": 0.005319148936170213,
                "tf.expand_dims(input, axis)": 0.005319148936170213,
                "tf.eye(num_rows)": 0.005319148936170213,
                "tf.eye(num_rows, num_columns)": 0.005319148936170213,
                "tf.eye(num_rows, dtype)": 0.005319148936170213,
                "tf.fill(dims, value)": 0.005319148936170213,
                "tf.gather(params, indices)": 0.015957446808510637,
                "tf.gather(params, indices, axis, batch_dims)": 0.005319148936170213,
                "tf.gather_nd(params, indices)": 0.005319148936170213,
                "tf.gather_nd(params, indices, batch_dims)": 0.005319148936170213,
                "tf.greater(x, y)": 0.005319148936170213,
                "tf.greater_equal(x, y)": 0.005319148936170213,
                "tf.math.bincount(arr)": 0.005319148936170213,
                "tf.math.ceil(x)": 0.005319148936170213,
                "tf.math.count_nonzero(input)": 0.005319148936170213,
                "tf.math.count_nonzero(input, axis)": 0.005319148936170213,
                "tf.math.cumsum(x, axis)": 0.005319148936170213,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005319148936170213,
                "tf.math.divide_no_nan(x, y)": 0.005319148936170213,
                "tf.math.floor(x)": 0.005319148936170213,
                "tf.math.log(x)": 0.005319148936170213,
                "tf.math.logical_and(x, y)": 0.005319148936170213,
                "tf.math.logical_not(x)": 0.005319148936170213,
                "tf.math.logical_or(x, y)": 0.005319148936170213,
                "tf.math.logical_xor(x, y)": 0.005319148936170213,
                "tf.math.negative(x)": 0.005319148936170213,
                "tf.math.reciprocal(x)": 0.005319148936170213,
                "tf.math.reciprocal_no_nan(x)": 0.005319148936170213,
                "tf.math.segment_max(data, segment_ids)": 0.005319148936170213,
                "tf.math.segment_mean(data, segment_ids)": 0.005319148936170213,
                "tf.math.segment_min(data, segment_ids)": 0.005319148936170213,
                "tf.math.segment_prod(data, segment_ids)": 0.005319148936170213,
                "tf.math.segment_sum(data, segment_ids)": 0.005319148936170213,
                "tf.math.squared_difference(x, y)": 0.005319148936170213,
                "tf.math.top_k(input, k)": 0.005319148936170213,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005319148936170213,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005319148936170213,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005319148936170213,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005319148936170213,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005319148936170213,
                "tf.matmul(a, b)": 0.005319148936170213,
                "tf.maximum(x, y)": 0.005319148936170213,
                "tf.minimum(x, y)": 0.005319148936170213,
                "tf.multiply(x, y)": 0.005319148936170213,
                "tf.not_equal(x, y)": 0.005319148936170213,
                "tf.one_hot(indices, depth)": 0.005319148936170213,
                "tf.ones(shape)": 0.005319148936170213,
                "tf.ones_like(input)": 0.005319148936170213,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005319148936170213,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005319148936170213,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005319148936170213,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005319148936170213,
                "tf.range(start)": 0.005319148936170213,
                "tf.range(start, limit, delta)": 0.005319148936170213,
                "tf.reduce_any(input_tensor, axis)": 0.005319148936170213,
                "tf.reduce_all(input_tensor, axis)": 0.005319148936170213,
                "tf.reduce_max(input_tensor)": 0.005319148936170213,
                "tf.reduce_max(input_tensor, axis)": 0.005319148936170213,
                "tf.reduce_mean(input_tensor)": 0.005319148936170213,
                "tf.reduce_mean(input_tensor, axis)": 0.005319148936170213,
                "tf.reduce_min(input_tensor)": 0.005319148936170213,
                "tf.reduce_min(input_tensor, axis)": 0.005319148936170213,
                "tf.reduce_prod(input_tensor, axis)": 0.005319148936170213,
                "tf.reduce_sum(input_tensor)": 0.005319148936170213,
                "tf.reduce_sum(input_tensor, axis)": 0.005319148936170213,
                "tf.repeat(input, repeats)": 0.005319148936170213,
                "tf.repeat(input, repeats, axis)": 0.005319148936170213,
                "tf.reshape(tensor, shape)": 0.005319148936170213,
                "tf.reverse(tensor, axis)": 0.005319148936170213,
                "tf.roll(input, shift, axis)": 0.005319148936170213,
                "tf.round(x)": 0.005319148936170213,
                "tf.scatter_nd(indices, updates, shape)": 0.005319148936170213,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005319148936170213,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005319148936170213,
                "tf.sequence_mask(lengths)": 0.005319148936170213,
                "tf.sequence_mask(lengths, maxlen)": 0.005319148936170213,
                "tf.shape(input)": 0.005319148936170213,
                "tf.sign(x)": 0.005319148936170213,
                "tf.sort(values, axis)": 0.005319148936170213,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005319148936170213,
                "tf.sqrt(x)": 0.005319148936170213,
                "tf.square(x)": 0.005319148936170213,
                "tf.squeeze(input)": 0.005319148936170213,
                "tf.squeeze(input, axis)": 0.005319148936170213,
                "tf.stack(values, axis)": 0.005319148936170213,
                "tf.subtract(x, y)": 0.005319148936170213,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005319148936170213,
                "tf.tensordot(a, b, axes)": 0.005319148936170213,
                "tf.tile(input, multiples)": 0.005319148936170213,
                "tf.transpose(a)": 0.005319148936170213,
                "tf.transpose(a, perm)": 0.005319148936170213,
                "tf.unique_with_counts(x)": 0.005319148936170213,
                "tf.unstack(value, axis)": 0.005319148936170213,
                "tf.where(condition)": 0.010638297872340425,
                "tf.where(condition, x, y)": 0.005319148936170213,
                "tf.zeros(shape)": 0.005319148936170213,
                "tf.zeros_like(input)": 0.005319148936170213,
                "tf.SparseTensor(indices, values, dense_shape)": 0.047872340425531915,
                "tf.sparse.add(a, b)": 0.005319148936170213,
                "tf.sparse.concat(axis, sp_inputs)": 0.005319148936170213,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005319148936170213,
                "tf.sparse.from_dense(tensor)": 0.005319148936170213,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005319148936170213,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005319148936170213,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005319148936170213,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005319148936170213,
                "tf.sparse.reset_shape(sp_input)": 0.005319148936170213,
                "tf.sparse.reshape(sp_input, shape)": 0.005319148936170213,
                "tf.sparse.retain(sp_input, to_retain)": 0.005319148936170213,
                "tf.sparse.slice(sp_input, start, size)": 0.005319148936170213,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005319148936170213,
                "tf.sparse.to_dense(sp_input)": 0.005319148936170213,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005319148936170213,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005319148936170213,
                "tf.sparse.transpose(sp_input)": 0.005319148936170213,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005319148936170213,
                "IndexingOperation": 0.03723404255319149,
                "PairCreationOperation": 0.031914893617021274,
                "SingletonTupleCreationOperation": 0.005319148936170213,
                "SlicingAxis0BothOperation": 0.005319148936170213,
                "SlicingAxis0LeftOperation": 0.026595744680851064,
                "SlicingAxis0RightOperation": 0.005319148936170213,
                "SlicingAxis1BothOperation": 0.005319148936170213,
                "SlicingAxis1LeftOperation": 0.005319148936170213,
                "SlicingAxis1RightOperation": 0.005319148936170213,
                "TripleCreationOperation": 0.005319148936170213
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 5,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 5,
                "tf.constant(value)": 6,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 6,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 6,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 4,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 8,
                "IndexingOperation": 5,
                "PairCreationOperation": 5,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 5,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8
            }
        }
    },
    {
        "task_id": "google_04",
        "completions": [
            "\ninput_list = [111, 112, 121, 122, 131, 132, 211, 212, 221, 222, 231, 232, 311, 312, 321, 322, 331, 332, 411, 412, 421, 422, 431, 432]\ntensor = tf.constant(input_list)\nreshaped_tensor = tf.reshape(tensor, [4, 3, 2])\n",
            "\ninput_list = [111, 112, 121, 122, 131, 132, 211, 212, 221, 222, 231, 232, 311, 312, 321, 322, 331, 332, 411, 412, 421, 422, 431, 432]\n\ninput_tensor = tf.constant(input_list)\n\noutput_tensor = tf.reshape(input_tensor, [6, 4, 2])\n\n",
            "\ntensor = tf.constant([111, 112, 121, 122, 131, 132, 211, 212, 221, 222, 231, 232, 311, 312, 321, 322, 331, 332, 411, 412, 421, 422, 431, 432])\n\nreshaped_tensor = tf.reshape(tensor, (6, 4, 2))\n\n",
            "\nlst = [111, 112, 121, 122, 131, 132, 211, 212, 221, 222, 231, 232, 311, 312, 321, 322, 331, 332, 411, 412, 421, 422, 431, 432]\n\ntensor = tf.constant(lst)\n\nreshaped_tensor = tf.reshape(tensor, [3, 4, 2])\n\n",
            "\narr = [111, 112, 121, 122, 131, 132, 211, 212, 221, 222, 231, 232, 311, 312, 321, 322, 331, 332, 411, 412, 421, 422, 431, 432]\n\ntensor = tf.constant(arr)\n\nreshaped_tensor = tf.reshape(tensor, [4, 3, 2])\n\n",
            "\nflat_array = [111, 112, 121, 122, 131, 132, 211, 212, 221, 222, 231, 232, 311, 312, 321, 322, 331, 332, 411, 412, 421, 422, 431, 432]\n\ntensor = tf.constant(flat_array)\n\nreshaped_tensor = tf.reshape(tensor, [4, 3, 2])\n\n",
            "\narray = [111, 112, 121, 122, 131, 132, 211, 212, 221, 222, 231, 232, 311, 312, 321, 322, 331, 332, 411, 412, 421, 422, 431, 432]\n\ntensor = tf.reshape(array, (-1, 3, 2))\n\n",
            "\nlst = [111, 112, 121, 122, 131, 132, 211, 212, 221, 222, 231, 232, 311, 312, 321, 322, 331, 332, 411, 412, 421, 422, 431, 432]\n\ntensor = tf.constant(lst)\n\nreshaped_tensor = tf.reshape(tensor, (3, 3, 2))\n\n",
            "\ninput_array = [111, 112, 121, 122, 131, 132, 211, 212, 221, 222, 231, 232, 311, 312, 321, 322, 331, 332, 411, 412, 421, 422, 431, 432]\n\ninput_tensor = tf.constant(input_array)\n\noutput_tensor = tf.reshape(input_tensor, (4, 3, 2))\n\n",
            "\nlst = [111, 112, 121, 122, 131, 132, 211, 212, 221, 222, 231, 232, 311, 312, 321, 322, 331, 332, 411, 412, 421, 422, 431, 432]\n\ntensor = tf.constant(lst)\n\nreshaped_tensor = tf.reshape(tensor, [4, 3, 2])\n\n"
        ],
        "target-program": "tf.reshape(in1, shape=(4, 3, 2))",
        "description": "Reshape a flat array into a rank 3 tensor",
        "tf_operators": {
            "tf.reshape": 10,
            "tf.constant": 9
        },
        "coverage_percentage": 100.0,
        "total_in_target": 1,
        "total_covered": 1,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.006060606060606061,
                "tf.add(x, y)": 0.006060606060606061,
                "tf.add_n(inputs)": 0.006060606060606061,
                "tf.argmax(input, axis)": 0.006060606060606061,
                "tf.argmin(input, axis)": 0.006060606060606061,
                "tf.argsort(values, axis, stable=True)": 0.006060606060606061,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.006060606060606061,
                "tf.boolean_mask(tensor, mask)": 0.006060606060606061,
                "tf.broadcast_to(input, shape)": 0.006060606060606061,
                "tf.cast(x, dtype)": 0.006060606060606061,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.006060606060606061,
                "tf.concat(values, axis)": 0.006060606060606061,
                "tf.constant(value)": 0.06060606060606061,
                "tf.constant(value, dtype)": 0.006060606060606061,
                "tf.divide(x, y)": 0.006060606060606061,
                "tf.equal(x, y)": 0.006060606060606061,
                "tf.exp(x)": 0.006060606060606061,
                "tf.expand_dims(input, axis)": 0.006060606060606061,
                "tf.eye(num_rows)": 0.006060606060606061,
                "tf.eye(num_rows, num_columns)": 0.006060606060606061,
                "tf.eye(num_rows, dtype)": 0.006060606060606061,
                "tf.fill(dims, value)": 0.006060606060606061,
                "tf.gather(params, indices)": 0.006060606060606061,
                "tf.gather(params, indices, axis, batch_dims)": 0.006060606060606061,
                "tf.gather_nd(params, indices)": 0.006060606060606061,
                "tf.gather_nd(params, indices, batch_dims)": 0.006060606060606061,
                "tf.greater(x, y)": 0.006060606060606061,
                "tf.greater_equal(x, y)": 0.006060606060606061,
                "tf.math.bincount(arr)": 0.006060606060606061,
                "tf.math.ceil(x)": 0.006060606060606061,
                "tf.math.count_nonzero(input)": 0.006060606060606061,
                "tf.math.count_nonzero(input, axis)": 0.006060606060606061,
                "tf.math.cumsum(x, axis)": 0.006060606060606061,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.006060606060606061,
                "tf.math.divide_no_nan(x, y)": 0.006060606060606061,
                "tf.math.floor(x)": 0.006060606060606061,
                "tf.math.log(x)": 0.006060606060606061,
                "tf.math.logical_and(x, y)": 0.006060606060606061,
                "tf.math.logical_not(x)": 0.006060606060606061,
                "tf.math.logical_or(x, y)": 0.006060606060606061,
                "tf.math.logical_xor(x, y)": 0.006060606060606061,
                "tf.math.negative(x)": 0.006060606060606061,
                "tf.math.reciprocal(x)": 0.006060606060606061,
                "tf.math.reciprocal_no_nan(x)": 0.006060606060606061,
                "tf.math.segment_max(data, segment_ids)": 0.006060606060606061,
                "tf.math.segment_mean(data, segment_ids)": 0.006060606060606061,
                "tf.math.segment_min(data, segment_ids)": 0.006060606060606061,
                "tf.math.segment_prod(data, segment_ids)": 0.006060606060606061,
                "tf.math.segment_sum(data, segment_ids)": 0.006060606060606061,
                "tf.math.squared_difference(x, y)": 0.006060606060606061,
                "tf.math.top_k(input, k)": 0.006060606060606061,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.006060606060606061,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.006060606060606061,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.006060606060606061,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.006060606060606061,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.006060606060606061,
                "tf.matmul(a, b)": 0.006060606060606061,
                "tf.maximum(x, y)": 0.006060606060606061,
                "tf.minimum(x, y)": 0.006060606060606061,
                "tf.multiply(x, y)": 0.006060606060606061,
                "tf.not_equal(x, y)": 0.006060606060606061,
                "tf.one_hot(indices, depth)": 0.006060606060606061,
                "tf.ones(shape)": 0.006060606060606061,
                "tf.ones_like(input)": 0.006060606060606061,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.006060606060606061,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.006060606060606061,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.006060606060606061,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.006060606060606061,
                "tf.range(start)": 0.006060606060606061,
                "tf.range(start, limit, delta)": 0.006060606060606061,
                "tf.reduce_any(input_tensor, axis)": 0.006060606060606061,
                "tf.reduce_all(input_tensor, axis)": 0.006060606060606061,
                "tf.reduce_max(input_tensor)": 0.006060606060606061,
                "tf.reduce_max(input_tensor, axis)": 0.006060606060606061,
                "tf.reduce_mean(input_tensor)": 0.006060606060606061,
                "tf.reduce_mean(input_tensor, axis)": 0.006060606060606061,
                "tf.reduce_min(input_tensor)": 0.006060606060606061,
                "tf.reduce_min(input_tensor, axis)": 0.006060606060606061,
                "tf.reduce_prod(input_tensor, axis)": 0.006060606060606061,
                "tf.reduce_sum(input_tensor)": 0.006060606060606061,
                "tf.reduce_sum(input_tensor, axis)": 0.006060606060606061,
                "tf.repeat(input, repeats)": 0.006060606060606061,
                "tf.repeat(input, repeats, axis)": 0.006060606060606061,
                "tf.reshape(tensor, shape)": 0.06666666666666667,
                "tf.reverse(tensor, axis)": 0.006060606060606061,
                "tf.roll(input, shift, axis)": 0.006060606060606061,
                "tf.round(x)": 0.006060606060606061,
                "tf.scatter_nd(indices, updates, shape)": 0.006060606060606061,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.006060606060606061,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.006060606060606061,
                "tf.sequence_mask(lengths)": 0.006060606060606061,
                "tf.sequence_mask(lengths, maxlen)": 0.006060606060606061,
                "tf.shape(input)": 0.006060606060606061,
                "tf.sign(x)": 0.006060606060606061,
                "tf.sort(values, axis)": 0.006060606060606061,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.006060606060606061,
                "tf.sqrt(x)": 0.006060606060606061,
                "tf.square(x)": 0.006060606060606061,
                "tf.squeeze(input)": 0.006060606060606061,
                "tf.squeeze(input, axis)": 0.006060606060606061,
                "tf.stack(values, axis)": 0.006060606060606061,
                "tf.subtract(x, y)": 0.006060606060606061,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.006060606060606061,
                "tf.tensordot(a, b, axes)": 0.006060606060606061,
                "tf.tile(input, multiples)": 0.006060606060606061,
                "tf.transpose(a)": 0.006060606060606061,
                "tf.transpose(a, perm)": 0.006060606060606061,
                "tf.unique_with_counts(x)": 0.006060606060606061,
                "tf.unstack(value, axis)": 0.006060606060606061,
                "tf.where(condition)": 0.006060606060606061,
                "tf.where(condition, x, y)": 0.006060606060606061,
                "tf.zeros(shape)": 0.006060606060606061,
                "tf.zeros_like(input)": 0.006060606060606061,
                "tf.SparseTensor(indices, values, dense_shape)": 0.006060606060606061,
                "tf.sparse.add(a, b)": 0.006060606060606061,
                "tf.sparse.concat(axis, sp_inputs)": 0.006060606060606061,
                "tf.sparse.expand_dims(sp_input, axis)": 0.006060606060606061,
                "tf.sparse.from_dense(tensor)": 0.006060606060606061,
                "tf.sparse.maximum(sp_a, sp_b)": 0.006060606060606061,
                "tf.sparse.minimum(sp_a, sp_b)": 0.006060606060606061,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.006060606060606061,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.006060606060606061,
                "tf.sparse.reset_shape(sp_input)": 0.006060606060606061,
                "tf.sparse.reshape(sp_input, shape)": 0.006060606060606061,
                "tf.sparse.retain(sp_input, to_retain)": 0.006060606060606061,
                "tf.sparse.slice(sp_input, start, size)": 0.006060606060606061,
                "tf.sparse.split(sp_input, num_split, axis)": 0.006060606060606061,
                "tf.sparse.to_dense(sp_input)": 0.006060606060606061,
                "tf.sparse.to_dense(sp_input, default_value)": 0.006060606060606061,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.006060606060606061,
                "tf.sparse.transpose(sp_input)": 0.006060606060606061,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.006060606060606061,
                "IndexingOperation": 0.006060606060606061,
                "PairCreationOperation": 0.006060606060606061,
                "SingletonTupleCreationOperation": 0.006060606060606061,
                "SlicingAxis0BothOperation": 0.006060606060606061,
                "SlicingAxis0LeftOperation": 0.006060606060606061,
                "SlicingAxis0RightOperation": 0.006060606060606061,
                "SlicingAxis1BothOperation": 0.006060606060606061,
                "SlicingAxis1LeftOperation": 0.006060606060606061,
                "SlicingAxis1RightOperation": 0.006060606060606061,
                "TripleCreationOperation": 0.030303030303030304
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 4,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 5
            }
        }
    },
    {
        "task_id": "google_05",
        "completions": [
            "\ninput = tf.constant([[1, 2, 3, 4], [5, 6, 7, 8]])\n\noutput = tf.repeat(input, repeats=6, axis=0)\n\n",
            "\ninput_tensor = tf.constant([[1, 2, 3, 4], [5, 6, 7, 8]])\n\noutput_tensor = tf.repeat(input_tensor, repeats=6, axis=0)\n\n",
            "\ninput_data = tf.constant([[1, 2, 3, 4], [5, 6, 7, 8]])\n\noutput_data = tf.repeat(input_data, repeats=6, axis=0)\n\n",
            "\ninput_tensor = tf.constant([[1, 2, 3, 4], [5, 6, 7, 8]])\noutput_tensor = tf.repeat(input_tensor, repeats=6, axis=0)\n\n",
            "\ninput_data = [[1, 2, 3, 4], [5, 6, 7, 8]]\n\ninput_tensor = tf.constant(input_data)\n\noutput = tf.repeat(input_tensor, repeats=6, axis=0)\n\n",
            "\ninput = tf.constant([[1, 2, 3, 4], [5, 6, 7, 8]])\noutput = tf.repeat(input, repeats=6, axis=0)\n",
            "\ninput_data = tf.constant([[1, 2, 3, 4], [5, 6, 7, 8]])\noutput = tf.repeat(input_data, repeats=6, axis=0)\n",
            "\ninput = tf.constant([[1, 2, 3, 4], [5, 6, 7, 8]])\noutput = tf.repeat(input, repeats=6, axis=0)\n\n",
            "\ndef repeat_entries(input):\n    return tf.repeat(input, repeats=6, axis=0)\n\ninput = tf.constant([[1, 2, 3, 4], [5, 6, 7, 8]])\noutput = repeat_entries(input)\n",
            "\ninput_data = tf.constant([[1, 2, 3, 4], [5, 6, 7, 8]])\n\noutput_data = tf.repeat(input_data, repeats=6, axis=0)\n\n"
        ],
        "target-program": "tf.tile(tf.expand_dims(in1, 1), (1, 6, 1))",
        "description": "Repeat each input entry 6 times",
        "tf_operators": {
            "tf.repeat": 10,
            "tf.constant": 10
        },
        "coverage_percentage": 0.0,
        "total_in_target": 2,
        "total_covered": 0,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.006578947368421052,
                "tf.add(x, y)": 0.006578947368421052,
                "tf.add_n(inputs)": 0.006578947368421052,
                "tf.argmax(input, axis)": 0.006578947368421052,
                "tf.argmin(input, axis)": 0.006578947368421052,
                "tf.argsort(values, axis, stable=True)": 0.006578947368421052,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.006578947368421052,
                "tf.boolean_mask(tensor, mask)": 0.006578947368421052,
                "tf.broadcast_to(input, shape)": 0.006578947368421052,
                "tf.cast(x, dtype)": 0.006578947368421052,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.006578947368421052,
                "tf.concat(values, axis)": 0.006578947368421052,
                "tf.constant(value)": 0.07236842105263158,
                "tf.constant(value, dtype)": 0.006578947368421052,
                "tf.divide(x, y)": 0.006578947368421052,
                "tf.equal(x, y)": 0.006578947368421052,
                "tf.exp(x)": 0.006578947368421052,
                "tf.expand_dims(input, axis)": 0.006578947368421052,
                "tf.eye(num_rows)": 0.006578947368421052,
                "tf.eye(num_rows, num_columns)": 0.006578947368421052,
                "tf.eye(num_rows, dtype)": 0.006578947368421052,
                "tf.fill(dims, value)": 0.006578947368421052,
                "tf.gather(params, indices)": 0.006578947368421052,
                "tf.gather(params, indices, axis, batch_dims)": 0.006578947368421052,
                "tf.gather_nd(params, indices)": 0.006578947368421052,
                "tf.gather_nd(params, indices, batch_dims)": 0.006578947368421052,
                "tf.greater(x, y)": 0.006578947368421052,
                "tf.greater_equal(x, y)": 0.006578947368421052,
                "tf.math.bincount(arr)": 0.006578947368421052,
                "tf.math.ceil(x)": 0.006578947368421052,
                "tf.math.count_nonzero(input)": 0.006578947368421052,
                "tf.math.count_nonzero(input, axis)": 0.006578947368421052,
                "tf.math.cumsum(x, axis)": 0.006578947368421052,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.006578947368421052,
                "tf.math.divide_no_nan(x, y)": 0.006578947368421052,
                "tf.math.floor(x)": 0.006578947368421052,
                "tf.math.log(x)": 0.006578947368421052,
                "tf.math.logical_and(x, y)": 0.006578947368421052,
                "tf.math.logical_not(x)": 0.006578947368421052,
                "tf.math.logical_or(x, y)": 0.006578947368421052,
                "tf.math.logical_xor(x, y)": 0.006578947368421052,
                "tf.math.negative(x)": 0.006578947368421052,
                "tf.math.reciprocal(x)": 0.006578947368421052,
                "tf.math.reciprocal_no_nan(x)": 0.006578947368421052,
                "tf.math.segment_max(data, segment_ids)": 0.006578947368421052,
                "tf.math.segment_mean(data, segment_ids)": 0.006578947368421052,
                "tf.math.segment_min(data, segment_ids)": 0.006578947368421052,
                "tf.math.segment_prod(data, segment_ids)": 0.006578947368421052,
                "tf.math.segment_sum(data, segment_ids)": 0.006578947368421052,
                "tf.math.squared_difference(x, y)": 0.006578947368421052,
                "tf.math.top_k(input, k)": 0.006578947368421052,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.006578947368421052,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.006578947368421052,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.006578947368421052,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.006578947368421052,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.006578947368421052,
                "tf.matmul(a, b)": 0.006578947368421052,
                "tf.maximum(x, y)": 0.006578947368421052,
                "tf.minimum(x, y)": 0.006578947368421052,
                "tf.multiply(x, y)": 0.006578947368421052,
                "tf.not_equal(x, y)": 0.006578947368421052,
                "tf.one_hot(indices, depth)": 0.006578947368421052,
                "tf.ones(shape)": 0.006578947368421052,
                "tf.ones_like(input)": 0.006578947368421052,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.006578947368421052,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.006578947368421052,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.006578947368421052,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.006578947368421052,
                "tf.range(start)": 0.006578947368421052,
                "tf.range(start, limit, delta)": 0.006578947368421052,
                "tf.reduce_any(input_tensor, axis)": 0.006578947368421052,
                "tf.reduce_all(input_tensor, axis)": 0.006578947368421052,
                "tf.reduce_max(input_tensor)": 0.006578947368421052,
                "tf.reduce_max(input_tensor, axis)": 0.006578947368421052,
                "tf.reduce_mean(input_tensor)": 0.006578947368421052,
                "tf.reduce_mean(input_tensor, axis)": 0.006578947368421052,
                "tf.reduce_min(input_tensor)": 0.006578947368421052,
                "tf.reduce_min(input_tensor, axis)": 0.006578947368421052,
                "tf.reduce_prod(input_tensor, axis)": 0.006578947368421052,
                "tf.reduce_sum(input_tensor)": 0.006578947368421052,
                "tf.reduce_sum(input_tensor, axis)": 0.006578947368421052,
                "tf.repeat(input, repeats)": 0.006578947368421052,
                "tf.repeat(input, repeats, axis)": 0.006578947368421052,
                "tf.reshape(tensor, shape)": 0.006578947368421052,
                "tf.reverse(tensor, axis)": 0.006578947368421052,
                "tf.roll(input, shift, axis)": 0.006578947368421052,
                "tf.round(x)": 0.006578947368421052,
                "tf.scatter_nd(indices, updates, shape)": 0.006578947368421052,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.006578947368421052,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.006578947368421052,
                "tf.sequence_mask(lengths)": 0.006578947368421052,
                "tf.sequence_mask(lengths, maxlen)": 0.006578947368421052,
                "tf.shape(input)": 0.006578947368421052,
                "tf.sign(x)": 0.006578947368421052,
                "tf.sort(values, axis)": 0.006578947368421052,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.006578947368421052,
                "tf.sqrt(x)": 0.006578947368421052,
                "tf.square(x)": 0.006578947368421052,
                "tf.squeeze(input)": 0.006578947368421052,
                "tf.squeeze(input, axis)": 0.006578947368421052,
                "tf.stack(values, axis)": 0.006578947368421052,
                "tf.subtract(x, y)": 0.006578947368421052,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.006578947368421052,
                "tf.tensordot(a, b, axes)": 0.006578947368421052,
                "tf.tile(input, multiples)": 0.006578947368421052,
                "tf.transpose(a)": 0.006578947368421052,
                "tf.transpose(a, perm)": 0.006578947368421052,
                "tf.unique_with_counts(x)": 0.006578947368421052,
                "tf.unstack(value, axis)": 0.006578947368421052,
                "tf.where(condition)": 0.006578947368421052,
                "tf.where(condition, x, y)": 0.006578947368421052,
                "tf.zeros(shape)": 0.006578947368421052,
                "tf.zeros_like(input)": 0.006578947368421052,
                "tf.SparseTensor(indices, values, dense_shape)": 0.006578947368421052,
                "tf.sparse.add(a, b)": 0.006578947368421052,
                "tf.sparse.concat(axis, sp_inputs)": 0.006578947368421052,
                "tf.sparse.expand_dims(sp_input, axis)": 0.006578947368421052,
                "tf.sparse.from_dense(tensor)": 0.006578947368421052,
                "tf.sparse.maximum(sp_a, sp_b)": 0.006578947368421052,
                "tf.sparse.minimum(sp_a, sp_b)": 0.006578947368421052,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.006578947368421052,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.006578947368421052,
                "tf.sparse.reset_shape(sp_input)": 0.006578947368421052,
                "tf.sparse.reshape(sp_input, shape)": 0.006578947368421052,
                "tf.sparse.retain(sp_input, to_retain)": 0.006578947368421052,
                "tf.sparse.slice(sp_input, start, size)": 0.006578947368421052,
                "tf.sparse.split(sp_input, num_split, axis)": 0.006578947368421052,
                "tf.sparse.to_dense(sp_input)": 0.006578947368421052,
                "tf.sparse.to_dense(sp_input, default_value)": 0.006578947368421052,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.006578947368421052,
                "tf.sparse.transpose(sp_input)": 0.006578947368421052,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.006578947368421052,
                "IndexingOperation": 0.006578947368421052,
                "PairCreationOperation": 0.006578947368421052,
                "SingletonTupleCreationOperation": 0.006578947368421052,
                "SlicingAxis0BothOperation": 0.006578947368421052,
                "SlicingAxis0LeftOperation": 0.006578947368421052,
                "SlicingAxis0RightOperation": 0.006578947368421052,
                "SlicingAxis1BothOperation": 0.006578947368421052,
                "SlicingAxis1LeftOperation": 0.006578947368421052,
                "SlicingAxis1RightOperation": 0.006578947368421052,
                "TripleCreationOperation": 0.006578947368421052
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "google_06",
        "completions": [
            "\ndef max_group_element(input_list):\n    bincount = tf.math.bincount(input_list)\n    return tf.math.argmax(bincount).numpy()\n\n",
            "\ndef max_from_group(elements):\n    counts = tf.math.bincount(elements)\n    return tf.argmax(counts)\n\nelements = tf.constant([0, 1, 1, 2, 3, 3, 3, 3])\n\nelements = tf.constant([1, 3, 4, 5, 10, 8, 9, 4])\n",
            "\ndef max_from_each_group(elements):\n    # create a list of segment ids\n    segment_ids = []\n    current_id = 0\n    for i in range(len(elements)):\n        segment_ids.append(current_id)\n        if i + 1 < len(elements) and elements[i] != elements[i + 1]:\n            current_id += 1\n\n    # convert the elements and segment_ids to tensors\n    elements = tf.constant(elements)\n    segment_ids = tf.constant(segment_ids)\n\n    # use tf.math.segment_max to find the max of each group\n    return tf.math.segment_max(elements, segment_ids)\n",
            "\ndef max_in_segments(data, segment_ids):\n    return tf.math.segment_max(data, segment_ids)\n",
            "\ndef max_in_group(elements):\n    counts = tf.math.bincount(elements)\n    max_group = tf.argmax(counts)\n    return max_group.numpy()\n\n",
            "\ndef min_of_maxes(input):\n    # assuming segment_ids are 0, 1, 2, ..., n for n+1 unique elements in the array\n    segment_ids = tf.range(tf.reduce_max(input) + 1)\n    max_values = tf.math.segment_max(input, segment_ids)\n    return tf.reduce_min(max_values)\n",
            "\ndef max_from_groups(input):\n    counts = tf.math.bincount(input)\n    return tf.argmax(counts).numpy()\n\n",
            "\ndef max_frequency(arr):\n    count = tf.math.bincount(arr)\n    max_freq = tf.reduce_max(count)\n    return max_freq\n\n",
            "\ndef max_from_each_group(data):\n    return tf.math.segment_max(data, data)\n",
            "\ndef max_from_each_group(elements):\n    tensor = tf.constant(elements)\n    _, counts = tf.unique_with_counts(tensor)\n    max_count = tf.reduce_max(counts)\n    return max_count\n\n"
        ],
        "target-program": "tf.math.segment_max(in2, in1)",
        "description": "Take the max from each group of elements",
        "tf_operators": {
            "tf.math.bincount": 5,
            "tf.math.argmax": 1,
            "tf.constant": 3,
            "tf.argmax": 3,
            "tf.math.segment_max": 4,
            "tf.reduce_min": 1,
            "tf.range": 1,
            "tf.reduce_max": 3,
            "tf.unique_with_counts": 1
        },
        "coverage_percentage": 100.0,
        "total_in_target": 1,
        "total_covered": 1,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.006289308176100629,
                "tf.add(x, y)": 0.006289308176100629,
                "tf.add_n(inputs)": 0.006289308176100629,
                "tf.argmax(input, axis)": 0.025157232704402517,
                "tf.argmin(input, axis)": 0.006289308176100629,
                "tf.argsort(values, axis, stable=True)": 0.006289308176100629,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.006289308176100629,
                "tf.boolean_mask(tensor, mask)": 0.006289308176100629,
                "tf.broadcast_to(input, shape)": 0.006289308176100629,
                "tf.cast(x, dtype)": 0.006289308176100629,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.006289308176100629,
                "tf.concat(values, axis)": 0.006289308176100629,
                "tf.constant(value)": 0.03773584905660377,
                "tf.constant(value, dtype)": 0.006289308176100629,
                "tf.divide(x, y)": 0.006289308176100629,
                "tf.equal(x, y)": 0.006289308176100629,
                "tf.exp(x)": 0.006289308176100629,
                "tf.expand_dims(input, axis)": 0.006289308176100629,
                "tf.eye(num_rows)": 0.006289308176100629,
                "tf.eye(num_rows, num_columns)": 0.006289308176100629,
                "tf.eye(num_rows, dtype)": 0.006289308176100629,
                "tf.fill(dims, value)": 0.006289308176100629,
                "tf.gather(params, indices)": 0.006289308176100629,
                "tf.gather(params, indices, axis, batch_dims)": 0.006289308176100629,
                "tf.gather_nd(params, indices)": 0.006289308176100629,
                "tf.gather_nd(params, indices, batch_dims)": 0.006289308176100629,
                "tf.greater(x, y)": 0.006289308176100629,
                "tf.greater_equal(x, y)": 0.006289308176100629,
                "tf.math.bincount(arr)": 0.006289308176100629,
                "tf.math.ceil(x)": 0.006289308176100629,
                "tf.math.count_nonzero(input)": 0.006289308176100629,
                "tf.math.count_nonzero(input, axis)": 0.006289308176100629,
                "tf.math.cumsum(x, axis)": 0.006289308176100629,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.006289308176100629,
                "tf.math.divide_no_nan(x, y)": 0.006289308176100629,
                "tf.math.floor(x)": 0.006289308176100629,
                "tf.math.log(x)": 0.006289308176100629,
                "tf.math.logical_and(x, y)": 0.006289308176100629,
                "tf.math.logical_not(x)": 0.006289308176100629,
                "tf.math.logical_or(x, y)": 0.006289308176100629,
                "tf.math.logical_xor(x, y)": 0.006289308176100629,
                "tf.math.negative(x)": 0.006289308176100629,
                "tf.math.reciprocal(x)": 0.006289308176100629,
                "tf.math.reciprocal_no_nan(x)": 0.006289308176100629,
                "tf.math.segment_max(data, segment_ids)": 0.006289308176100629,
                "tf.math.segment_mean(data, segment_ids)": 0.006289308176100629,
                "tf.math.segment_min(data, segment_ids)": 0.006289308176100629,
                "tf.math.segment_prod(data, segment_ids)": 0.006289308176100629,
                "tf.math.segment_sum(data, segment_ids)": 0.006289308176100629,
                "tf.math.squared_difference(x, y)": 0.006289308176100629,
                "tf.math.top_k(input, k)": 0.006289308176100629,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.006289308176100629,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.006289308176100629,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.006289308176100629,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.006289308176100629,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.006289308176100629,
                "tf.matmul(a, b)": 0.006289308176100629,
                "tf.maximum(x, y)": 0.006289308176100629,
                "tf.minimum(x, y)": 0.006289308176100629,
                "tf.multiply(x, y)": 0.006289308176100629,
                "tf.not_equal(x, y)": 0.006289308176100629,
                "tf.one_hot(indices, depth)": 0.006289308176100629,
                "tf.ones(shape)": 0.006289308176100629,
                "tf.ones_like(input)": 0.006289308176100629,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.006289308176100629,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.006289308176100629,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.006289308176100629,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.006289308176100629,
                "tf.range(start)": 0.012578616352201259,
                "tf.range(start, limit, delta)": 0.006289308176100629,
                "tf.reduce_any(input_tensor, axis)": 0.006289308176100629,
                "tf.reduce_all(input_tensor, axis)": 0.006289308176100629,
                "tf.reduce_max(input_tensor)": 0.025157232704402517,
                "tf.reduce_max(input_tensor, axis)": 0.006289308176100629,
                "tf.reduce_mean(input_tensor)": 0.006289308176100629,
                "tf.reduce_mean(input_tensor, axis)": 0.006289308176100629,
                "tf.reduce_min(input_tensor)": 0.012578616352201259,
                "tf.reduce_min(input_tensor, axis)": 0.006289308176100629,
                "tf.reduce_prod(input_tensor, axis)": 0.006289308176100629,
                "tf.reduce_sum(input_tensor)": 0.006289308176100629,
                "tf.reduce_sum(input_tensor, axis)": 0.006289308176100629,
                "tf.repeat(input, repeats)": 0.006289308176100629,
                "tf.repeat(input, repeats, axis)": 0.006289308176100629,
                "tf.reshape(tensor, shape)": 0.006289308176100629,
                "tf.reverse(tensor, axis)": 0.006289308176100629,
                "tf.roll(input, shift, axis)": 0.006289308176100629,
                "tf.round(x)": 0.006289308176100629,
                "tf.scatter_nd(indices, updates, shape)": 0.006289308176100629,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.006289308176100629,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.006289308176100629,
                "tf.sequence_mask(lengths)": 0.006289308176100629,
                "tf.sequence_mask(lengths, maxlen)": 0.006289308176100629,
                "tf.shape(input)": 0.006289308176100629,
                "tf.sign(x)": 0.006289308176100629,
                "tf.sort(values, axis)": 0.006289308176100629,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.006289308176100629,
                "tf.sqrt(x)": 0.006289308176100629,
                "tf.square(x)": 0.006289308176100629,
                "tf.squeeze(input)": 0.006289308176100629,
                "tf.squeeze(input, axis)": 0.006289308176100629,
                "tf.stack(values, axis)": 0.006289308176100629,
                "tf.subtract(x, y)": 0.006289308176100629,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.006289308176100629,
                "tf.tensordot(a, b, axes)": 0.006289308176100629,
                "tf.tile(input, multiples)": 0.006289308176100629,
                "tf.transpose(a)": 0.006289308176100629,
                "tf.transpose(a, perm)": 0.006289308176100629,
                "tf.unique_with_counts(x)": 0.012578616352201259,
                "tf.unstack(value, axis)": 0.006289308176100629,
                "tf.where(condition)": 0.006289308176100629,
                "tf.where(condition, x, y)": 0.006289308176100629,
                "tf.zeros(shape)": 0.006289308176100629,
                "tf.zeros_like(input)": 0.006289308176100629,
                "tf.SparseTensor(indices, values, dense_shape)": 0.006289308176100629,
                "tf.sparse.add(a, b)": 0.006289308176100629,
                "tf.sparse.concat(axis, sp_inputs)": 0.006289308176100629,
                "tf.sparse.expand_dims(sp_input, axis)": 0.006289308176100629,
                "tf.sparse.from_dense(tensor)": 0.006289308176100629,
                "tf.sparse.maximum(sp_a, sp_b)": 0.006289308176100629,
                "tf.sparse.minimum(sp_a, sp_b)": 0.006289308176100629,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.006289308176100629,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.006289308176100629,
                "tf.sparse.reset_shape(sp_input)": 0.006289308176100629,
                "tf.sparse.reshape(sp_input, shape)": 0.006289308176100629,
                "tf.sparse.retain(sp_input, to_retain)": 0.006289308176100629,
                "tf.sparse.slice(sp_input, start, size)": 0.006289308176100629,
                "tf.sparse.split(sp_input, num_split, axis)": 0.006289308176100629,
                "tf.sparse.to_dense(sp_input)": 0.006289308176100629,
                "tf.sparse.to_dense(sp_input, default_value)": 0.006289308176100629,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.006289308176100629,
                "tf.sparse.transpose(sp_input)": 0.006289308176100629,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.006289308176100629,
                "IndexingOperation": 0.018867924528301886,
                "PairCreationOperation": 0.012578616352201259,
                "SingletonTupleCreationOperation": 0.006289308176100629,
                "SlicingAxis0BothOperation": 0.006289308176100629,
                "SlicingAxis0LeftOperation": 0.006289308176100629,
                "SlicingAxis0RightOperation": 0.006289308176100629,
                "SlicingAxis1BothOperation": 0.006289308176100629,
                "SlicingAxis1LeftOperation": 0.006289308176100629,
                "SlicingAxis1RightOperation": 0.006289308176100629,
                "TripleCreationOperation": 0.006289308176100629
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 5,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 5,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 6,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 5,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 6,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 6,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 6,
                "PairCreationOperation": 6,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "google_07",
        "completions": [
            "\ndef argmax_of_elements(input):\n    tensor = tf.constant(input)\n    return tf.argmax(tensor).numpy()\n\n",
            "\ndef argmax_group(input):\n    return tf.argmax(input).numpy()\n\n",
            "\ndef max_index_of_groups(elements, group_size):\n    # Convert the list to a tensor\n    tensor = tf.constant(elements, dtype=tf.int32)\n\n    # Reshape the tensor to a 2D tensor where each row represents a group\n    tensor = tf.reshape(tensor, [-1, group_size])\n\n    # Use tf.argmax to find the maximum index in each group\n    indices = tf.argmax(tensor, axis=1)\n\n    # Return the maximum index\n    return tf.reduce_max(indices)\n",
            "\ndef find_argmax(input_list):\n    tensor = tf.constant(input_list)\n    max_index = tf.argmax(tensor)\n    return max_index.numpy()\n\n",
            "\ndef get_argmax_of_groups(elements):\n    tensor = tf.constant(elements)\n    reshaped_tensor = tf.reshape(tensor, (-1, 4))\n    argmax_indices = tf.argmax(reshaped_tensor, axis=1)\n    return tf.reduce_max(argmax_indices)\n\nelements = [0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 4, 5, 5]\n\nelements = [4, 1, 8, 2, 5, 7, 9, 3, 7, 3, 1, 42, 1, 2, 4, 0]\n",
            "\ndef argmax_of_elements(input):\n    tensor = tf.constant(input)\n    return tf.math.argmax(tensor).numpy()\n",
            "\ndef get_mode(array):\n    counts = tf.math.bincount(array)\n    mode = tf.argmax(counts)\n    return mode\n\narray = tf.constant([0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 4, 5, 5])\n\narray = tf.constant([4, 1, 8, 2, 5, 7, 9, 3, 7, 3, 1, 42, 1, 2, 4, 0])\n",
            "\ndef argmax_of_elements(elements):\n    tensor = tf.constant(elements)\n    return tf.argmax(tensor).numpy()\n\n",
            "\ndef find_argmax(input_list):\n    tensor = tf.constant(input_list)\n    max_index = tf.argmax(tensor)\n    return max_index.numpy()\n\n",
            "\ndef get_argmax_of_groups(data, group_size):\n    # Convert the input list to a TensorFlow tensor\n    data_tensor = tf.constant(data)\n\n    # Compute the number of groups\n    num_groups = len(data) // group_size\n\n    # Create a tensor of segment IDs\n    segment_ids = tf.repeat(tf.range(num_groups), group_size)\n\n    # Compute the maximum value in each segment\n    segment_max = tf.math.segment_max(data_tensor, segment_ids)\n\n    # Compute the index of the maximum value in each segment\n    argmax_indices = tf.argmax(segment_max)\n\n    return argmax_indices\n"
        ],
        "target-program": "tf.cast(tf.argmax((tf.sequence_mask(tf.cumsum(tf.math.bincount(in1)), dtype=tf.int32) - tf.sequence_mask(tf.cumsum(tf.math.bincount(in1), exclusive=True), dtype=tf.int32, maxlen=in1.shape[0])) * in2, axis=1), tf.int32) - tf.cumsum(tf.math.bincount(in1), exclusive=True)",
        "description": "Take the argmax of each group of elements",
        "tf_operators": {
            "tf.argmax": 9,
            "tf.constant": 9,
            "tf.reduce_max": 2,
            "tf.reshape": 2,
            "tf.int32": 1,
            "tf.math.argmax": 1,
            "tf.math.bincount": 1,
            "tf.math.segment_max": 1,
            "tf.range": 1,
            "tf.repeat": 1
        },
        "coverage_percentage": 50.0,
        "total_in_target": 6,
        "total_covered": 3,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005988023952095809,
                "tf.add(x, y)": 0.005988023952095809,
                "tf.add_n(inputs)": 0.005988023952095809,
                "tf.argmax(input, axis)": 0.059880239520958084,
                "tf.argmin(input, axis)": 0.005988023952095809,
                "tf.argsort(values, axis, stable=True)": 0.005988023952095809,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005988023952095809,
                "tf.boolean_mask(tensor, mask)": 0.005988023952095809,
                "tf.broadcast_to(input, shape)": 0.005988023952095809,
                "tf.cast(x, dtype)": 0.005988023952095809,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005988023952095809,
                "tf.concat(values, axis)": 0.005988023952095809,
                "tf.constant(value)": 0.059880239520958084,
                "tf.constant(value, dtype)": 0.005988023952095809,
                "tf.divide(x, y)": 0.005988023952095809,
                "tf.equal(x, y)": 0.005988023952095809,
                "tf.exp(x)": 0.005988023952095809,
                "tf.expand_dims(input, axis)": 0.005988023952095809,
                "tf.eye(num_rows)": 0.005988023952095809,
                "tf.eye(num_rows, num_columns)": 0.005988023952095809,
                "tf.eye(num_rows, dtype)": 0.005988023952095809,
                "tf.fill(dims, value)": 0.005988023952095809,
                "tf.gather(params, indices)": 0.005988023952095809,
                "tf.gather(params, indices, axis, batch_dims)": 0.005988023952095809,
                "tf.gather_nd(params, indices)": 0.005988023952095809,
                "tf.gather_nd(params, indices, batch_dims)": 0.005988023952095809,
                "tf.greater(x, y)": 0.005988023952095809,
                "tf.greater_equal(x, y)": 0.005988023952095809,
                "tf.math.bincount(arr)": 0.005988023952095809,
                "tf.math.ceil(x)": 0.005988023952095809,
                "tf.math.count_nonzero(input)": 0.005988023952095809,
                "tf.math.count_nonzero(input, axis)": 0.005988023952095809,
                "tf.math.cumsum(x, axis)": 0.005988023952095809,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005988023952095809,
                "tf.math.divide_no_nan(x, y)": 0.005988023952095809,
                "tf.math.floor(x)": 0.005988023952095809,
                "tf.math.log(x)": 0.005988023952095809,
                "tf.math.logical_and(x, y)": 0.005988023952095809,
                "tf.math.logical_not(x)": 0.005988023952095809,
                "tf.math.logical_or(x, y)": 0.005988023952095809,
                "tf.math.logical_xor(x, y)": 0.005988023952095809,
                "tf.math.negative(x)": 0.005988023952095809,
                "tf.math.reciprocal(x)": 0.005988023952095809,
                "tf.math.reciprocal_no_nan(x)": 0.005988023952095809,
                "tf.math.segment_max(data, segment_ids)": 0.005988023952095809,
                "tf.math.segment_mean(data, segment_ids)": 0.005988023952095809,
                "tf.math.segment_min(data, segment_ids)": 0.005988023952095809,
                "tf.math.segment_prod(data, segment_ids)": 0.005988023952095809,
                "tf.math.segment_sum(data, segment_ids)": 0.005988023952095809,
                "tf.math.squared_difference(x, y)": 0.005988023952095809,
                "tf.math.top_k(input, k)": 0.005988023952095809,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005988023952095809,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005988023952095809,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005988023952095809,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005988023952095809,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005988023952095809,
                "tf.matmul(a, b)": 0.005988023952095809,
                "tf.maximum(x, y)": 0.005988023952095809,
                "tf.minimum(x, y)": 0.005988023952095809,
                "tf.multiply(x, y)": 0.005988023952095809,
                "tf.not_equal(x, y)": 0.005988023952095809,
                "tf.one_hot(indices, depth)": 0.005988023952095809,
                "tf.ones(shape)": 0.005988023952095809,
                "tf.ones_like(input)": 0.005988023952095809,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005988023952095809,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005988023952095809,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005988023952095809,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005988023952095809,
                "tf.range(start)": 0.011976047904191617,
                "tf.range(start, limit, delta)": 0.005988023952095809,
                "tf.reduce_any(input_tensor, axis)": 0.005988023952095809,
                "tf.reduce_all(input_tensor, axis)": 0.005988023952095809,
                "tf.reduce_max(input_tensor)": 0.017964071856287425,
                "tf.reduce_max(input_tensor, axis)": 0.005988023952095809,
                "tf.reduce_mean(input_tensor)": 0.005988023952095809,
                "tf.reduce_mean(input_tensor, axis)": 0.005988023952095809,
                "tf.reduce_min(input_tensor)": 0.005988023952095809,
                "tf.reduce_min(input_tensor, axis)": 0.005988023952095809,
                "tf.reduce_prod(input_tensor, axis)": 0.005988023952095809,
                "tf.reduce_sum(input_tensor)": 0.005988023952095809,
                "tf.reduce_sum(input_tensor, axis)": 0.005988023952095809,
                "tf.repeat(input, repeats)": 0.011976047904191617,
                "tf.repeat(input, repeats, axis)": 0.005988023952095809,
                "tf.reshape(tensor, shape)": 0.017964071856287425,
                "tf.reverse(tensor, axis)": 0.005988023952095809,
                "tf.roll(input, shift, axis)": 0.005988023952095809,
                "tf.round(x)": 0.005988023952095809,
                "tf.scatter_nd(indices, updates, shape)": 0.005988023952095809,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005988023952095809,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005988023952095809,
                "tf.sequence_mask(lengths)": 0.005988023952095809,
                "tf.sequence_mask(lengths, maxlen)": 0.005988023952095809,
                "tf.shape(input)": 0.005988023952095809,
                "tf.sign(x)": 0.005988023952095809,
                "tf.sort(values, axis)": 0.005988023952095809,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005988023952095809,
                "tf.sqrt(x)": 0.005988023952095809,
                "tf.square(x)": 0.005988023952095809,
                "tf.squeeze(input)": 0.005988023952095809,
                "tf.squeeze(input, axis)": 0.005988023952095809,
                "tf.stack(values, axis)": 0.005988023952095809,
                "tf.subtract(x, y)": 0.005988023952095809,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005988023952095809,
                "tf.tensordot(a, b, axes)": 0.005988023952095809,
                "tf.tile(input, multiples)": 0.005988023952095809,
                "tf.transpose(a)": 0.005988023952095809,
                "tf.transpose(a, perm)": 0.005988023952095809,
                "tf.unique_with_counts(x)": 0.005988023952095809,
                "tf.unstack(value, axis)": 0.005988023952095809,
                "tf.where(condition)": 0.005988023952095809,
                "tf.where(condition, x, y)": 0.005988023952095809,
                "tf.zeros(shape)": 0.005988023952095809,
                "tf.zeros_like(input)": 0.005988023952095809,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005988023952095809,
                "tf.sparse.add(a, b)": 0.005988023952095809,
                "tf.sparse.concat(axis, sp_inputs)": 0.005988023952095809,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005988023952095809,
                "tf.sparse.from_dense(tensor)": 0.005988023952095809,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005988023952095809,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005988023952095809,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005988023952095809,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005988023952095809,
                "tf.sparse.reset_shape(sp_input)": 0.005988023952095809,
                "tf.sparse.reshape(sp_input, shape)": 0.005988023952095809,
                "tf.sparse.retain(sp_input, to_retain)": 0.005988023952095809,
                "tf.sparse.slice(sp_input, start, size)": 0.005988023952095809,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005988023952095809,
                "tf.sparse.to_dense(sp_input)": 0.005988023952095809,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005988023952095809,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005988023952095809,
                "tf.sparse.transpose(sp_input)": 0.005988023952095809,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005988023952095809,
                "IndexingOperation": 0.005988023952095809,
                "PairCreationOperation": 0.011976047904191617,
                "SingletonTupleCreationOperation": 0.005988023952095809,
                "SlicingAxis0BothOperation": 0.005988023952095809,
                "SlicingAxis0LeftOperation": 0.005988023952095809,
                "SlicingAxis0RightOperation": 0.005988023952095809,
                "SlicingAxis1BothOperation": 0.005988023952095809,
                "SlicingAxis1LeftOperation": 0.005988023952095809,
                "SlicingAxis1RightOperation": 0.005988023952095809,
                "TripleCreationOperation": 0.005988023952095809
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 4,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 6,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 6,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 6,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 6,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 6,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "google_08",
        "completions": [
            "\nlengths = tf.constant([3, 4, 2, 1])\nmask = tf.sequence_mask(lengths, maxlen=5)\nmask = tf.cast(mask, dtype=tf.int32)\nmask = tf.reshape(mask, [-1])\n",
            "\nlengths = tf.constant([3, 4, 2, 1])\nmask = tf.sequence_mask(lengths)\n",
            "\ndef create_mask(lengths):\n    sequence = tf.range(tf.reduce_max(lengths))\n    mask = tf.less(sequence, lengths)\n    return tf.cast(mask, tf.int32)\n\nlengths = tf.constant([3, 4, 2, 1])\n",
            "\ndef create_mask(lengths):\n    max_length = tf.reduce_max(lengths)\n    sequence = tf.range(max_length)\n    mask = tf.less(sequence, lengths)\n    return tf.cast(mask, tf.int32)\n",
            "\ndef create_mask(lengths):\n    max_length = tf.reduce_max(lengths)\n    mask = tf.less(tf.range(max_length), lengths)\n    mask = tf.cast(mask, tf.int32)\n    return mask\n\nlengths = tf.constant([3, 4, 2, 1])\nmask = create_mask(lengths)\n",
            "\ndef create_mask(lengths):\n    mask = tf.sequence_mask(lengths)\n    return tf.cast(mask, dtype=tf.int32)\n\nlengths = [3, 4, 2, 1]\n",
            "\nlengths = [3, 4, 2, 1]\nmask = tf.sequence_mask(lengths)\n",
            "\ndef create_mask(lengths):\n    mask = tf.sequence_mask(lengths, maxlen=tf.reduce_max(lengths))\n    mask = tf.reshape(mask, [-1])\n    return mask\n\nlengths = tf.constant([3, 4, 2, 1])\nmask = create_mask(lengths)\n",
            "\ndef create_mask(lengths):\n    total_length = tf.reduce_sum(lengths)\n    mask = tf.sequence_mask(lengths[0], total_length)\n    return tf.cast(mask, dtype=tf.int32)\n\nlengths = tf.constant([3, 4, 2, 1])\n",
            "\nsequence_lengths = tf.constant([3, 4, 2, 1])\nmask = tf.sequence_mask(sequence_lengths, 5)\nmask = tf.cast(mask, tf.int32)\nmask = tf.reshape(mask, [-1])\n\n"
        ],
        "target-program": "tf.cast(tf.greater(tf.expand_dims(in1, 1), tf.range(5)), tf.int32)",
        "description": "create a mask for sequences of the given lengths",
        "tf_operators": {
            "tf.sequence_mask": 7,
            "tf.reshape": 3,
            "tf.cast": 7,
            "tf.int32": 7,
            "tf.constant": 7,
            "tf.reduce_max": 4,
            "tf.range": 3,
            "tf.less": 3,
            "tf.reduce_sum": 1
        },
        "coverage_percentage": 60.0,
        "total_in_target": 5,
        "total_covered": 3,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005780346820809248,
                "tf.add(x, y)": 0.005780346820809248,
                "tf.add_n(inputs)": 0.005780346820809248,
                "tf.argmax(input, axis)": 0.005780346820809248,
                "tf.argmin(input, axis)": 0.005780346820809248,
                "tf.argsort(values, axis, stable=True)": 0.005780346820809248,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005780346820809248,
                "tf.boolean_mask(tensor, mask)": 0.005780346820809248,
                "tf.broadcast_to(input, shape)": 0.005780346820809248,
                "tf.cast(x, dtype)": 0.046242774566473986,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005780346820809248,
                "tf.concat(values, axis)": 0.005780346820809248,
                "tf.constant(value)": 0.046242774566473986,
                "tf.constant(value, dtype)": 0.005780346820809248,
                "tf.divide(x, y)": 0.005780346820809248,
                "tf.equal(x, y)": 0.005780346820809248,
                "tf.exp(x)": 0.005780346820809248,
                "tf.expand_dims(input, axis)": 0.005780346820809248,
                "tf.eye(num_rows)": 0.005780346820809248,
                "tf.eye(num_rows, num_columns)": 0.005780346820809248,
                "tf.eye(num_rows, dtype)": 0.005780346820809248,
                "tf.fill(dims, value)": 0.005780346820809248,
                "tf.gather(params, indices)": 0.005780346820809248,
                "tf.gather(params, indices, axis, batch_dims)": 0.005780346820809248,
                "tf.gather_nd(params, indices)": 0.005780346820809248,
                "tf.gather_nd(params, indices, batch_dims)": 0.005780346820809248,
                "tf.greater(x, y)": 0.005780346820809248,
                "tf.greater_equal(x, y)": 0.005780346820809248,
                "tf.math.bincount(arr)": 0.005780346820809248,
                "tf.math.ceil(x)": 0.005780346820809248,
                "tf.math.count_nonzero(input)": 0.005780346820809248,
                "tf.math.count_nonzero(input, axis)": 0.005780346820809248,
                "tf.math.cumsum(x, axis)": 0.005780346820809248,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005780346820809248,
                "tf.math.divide_no_nan(x, y)": 0.005780346820809248,
                "tf.math.floor(x)": 0.005780346820809248,
                "tf.math.log(x)": 0.005780346820809248,
                "tf.math.logical_and(x, y)": 0.005780346820809248,
                "tf.math.logical_not(x)": 0.005780346820809248,
                "tf.math.logical_or(x, y)": 0.005780346820809248,
                "tf.math.logical_xor(x, y)": 0.005780346820809248,
                "tf.math.negative(x)": 0.005780346820809248,
                "tf.math.reciprocal(x)": 0.005780346820809248,
                "tf.math.reciprocal_no_nan(x)": 0.005780346820809248,
                "tf.math.segment_max(data, segment_ids)": 0.005780346820809248,
                "tf.math.segment_mean(data, segment_ids)": 0.005780346820809248,
                "tf.math.segment_min(data, segment_ids)": 0.005780346820809248,
                "tf.math.segment_prod(data, segment_ids)": 0.005780346820809248,
                "tf.math.segment_sum(data, segment_ids)": 0.005780346820809248,
                "tf.math.squared_difference(x, y)": 0.005780346820809248,
                "tf.math.top_k(input, k)": 0.005780346820809248,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005780346820809248,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005780346820809248,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005780346820809248,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005780346820809248,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005780346820809248,
                "tf.matmul(a, b)": 0.005780346820809248,
                "tf.maximum(x, y)": 0.005780346820809248,
                "tf.minimum(x, y)": 0.005780346820809248,
                "tf.multiply(x, y)": 0.005780346820809248,
                "tf.not_equal(x, y)": 0.005780346820809248,
                "tf.one_hot(indices, depth)": 0.005780346820809248,
                "tf.ones(shape)": 0.005780346820809248,
                "tf.ones_like(input)": 0.005780346820809248,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005780346820809248,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005780346820809248,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005780346820809248,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005780346820809248,
                "tf.range(start)": 0.023121387283236993,
                "tf.range(start, limit, delta)": 0.005780346820809248,
                "tf.reduce_any(input_tensor, axis)": 0.005780346820809248,
                "tf.reduce_all(input_tensor, axis)": 0.005780346820809248,
                "tf.reduce_max(input_tensor)": 0.028901734104046242,
                "tf.reduce_max(input_tensor, axis)": 0.005780346820809248,
                "tf.reduce_mean(input_tensor)": 0.005780346820809248,
                "tf.reduce_mean(input_tensor, axis)": 0.005780346820809248,
                "tf.reduce_min(input_tensor)": 0.005780346820809248,
                "tf.reduce_min(input_tensor, axis)": 0.005780346820809248,
                "tf.reduce_prod(input_tensor, axis)": 0.005780346820809248,
                "tf.reduce_sum(input_tensor)": 0.011560693641618497,
                "tf.reduce_sum(input_tensor, axis)": 0.005780346820809248,
                "tf.repeat(input, repeats)": 0.005780346820809248,
                "tf.repeat(input, repeats, axis)": 0.005780346820809248,
                "tf.reshape(tensor, shape)": 0.023121387283236993,
                "tf.reverse(tensor, axis)": 0.005780346820809248,
                "tf.roll(input, shift, axis)": 0.005780346820809248,
                "tf.round(x)": 0.005780346820809248,
                "tf.scatter_nd(indices, updates, shape)": 0.005780346820809248,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005780346820809248,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005780346820809248,
                "tf.sequence_mask(lengths)": 0.023121387283236993,
                "tf.sequence_mask(lengths, maxlen)": 0.017341040462427744,
                "tf.shape(input)": 0.005780346820809248,
                "tf.sign(x)": 0.005780346820809248,
                "tf.sort(values, axis)": 0.005780346820809248,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005780346820809248,
                "tf.sqrt(x)": 0.005780346820809248,
                "tf.square(x)": 0.005780346820809248,
                "tf.squeeze(input)": 0.005780346820809248,
                "tf.squeeze(input, axis)": 0.005780346820809248,
                "tf.stack(values, axis)": 0.005780346820809248,
                "tf.subtract(x, y)": 0.005780346820809248,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005780346820809248,
                "tf.tensordot(a, b, axes)": 0.005780346820809248,
                "tf.tile(input, multiples)": 0.005780346820809248,
                "tf.transpose(a)": 0.005780346820809248,
                "tf.transpose(a, perm)": 0.005780346820809248,
                "tf.unique_with_counts(x)": 0.005780346820809248,
                "tf.unstack(value, axis)": 0.005780346820809248,
                "tf.where(condition)": 0.005780346820809248,
                "tf.where(condition, x, y)": 0.005780346820809248,
                "tf.zeros(shape)": 0.005780346820809248,
                "tf.zeros_like(input)": 0.005780346820809248,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005780346820809248,
                "tf.sparse.add(a, b)": 0.005780346820809248,
                "tf.sparse.concat(axis, sp_inputs)": 0.005780346820809248,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005780346820809248,
                "tf.sparse.from_dense(tensor)": 0.005780346820809248,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005780346820809248,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005780346820809248,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005780346820809248,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005780346820809248,
                "tf.sparse.reset_shape(sp_input)": 0.005780346820809248,
                "tf.sparse.reshape(sp_input, shape)": 0.005780346820809248,
                "tf.sparse.retain(sp_input, to_retain)": 0.005780346820809248,
                "tf.sparse.slice(sp_input, start, size)": 0.005780346820809248,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005780346820809248,
                "tf.sparse.to_dense(sp_input)": 0.005780346820809248,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005780346820809248,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005780346820809248,
                "tf.sparse.transpose(sp_input)": 0.005780346820809248,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005780346820809248,
                "IndexingOperation": 0.011560693641618497,
                "PairCreationOperation": 0.005780346820809248,
                "SingletonTupleCreationOperation": 0.005780346820809248,
                "SlicingAxis0BothOperation": 0.005780346820809248,
                "SlicingAxis0LeftOperation": 0.005780346820809248,
                "SlicingAxis0RightOperation": 0.005780346820809248,
                "SlicingAxis1BothOperation": 0.005780346820809248,
                "SlicingAxis1LeftOperation": 0.005780346820809248,
                "SlicingAxis1RightOperation": 0.005780346820809248,
                "TripleCreationOperation": 0.005780346820809248
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 4,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 5,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 5,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 6,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 5,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 5,
                "tf.sequence_mask(lengths, maxlen)": 6,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 6,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "google_09",
        "completions": [
            "\ndef sort_segments(input):\n    segments = tf.constant(input)\n    segment_ids = tf.range(tf.size(segments))\n    sums = tf.math.unsorted_segment_sum(segments, segment_ids, tf.size(segments))\n    sorted_sums = tf.argsort(sums)\n    return sums[sorted_sums[1]]\n",
            "\ndef count_segments(lst):\n    tensor = tf.constant(lst)\n    bincount = tf.math.bincount(tensor)\n    return tf.reduce_sum(bincount)\n\n",
            "\ndef max_segment_sum(arr):\n    arr = tf.constant(arr)\n    segment_ids = tf.argsort(arr)\n    segment_sum = tf.math.segment_sum(arr, segment_ids)\n    max_value = tf.reduce_max(segment_sum)\n    return max_value.numpy()\n\n",
            "\ndef sort_segments(input):\n    data = tf.ones_like(input)\n    segment_sum = tf.math.segment_sum(data, input)\n    return tf.reduce_max(segment_sum)\n",
            "\ndef max_segment_sum(data):\n    # Compute the sum of segments\n    segment_sums = tf.math.segment_sum(data, data)\n    # Find the maximum value\n    max_sum = tf.reduce_max(segment_sums)\n    return max_sum\n\n",
            "\ndef sort_segments(input):\n  sorted_tensor = tf.sort(input)\n  middle_index = len(input) // 2\n  return sorted_tensor[middle_index]\n\ninput = tf.constant([10, 20, 30, 14, 15, 26])\n",
            "\ndef sort_segments(input):\n    # Define the segment ids\n    segment_ids = tf.constant([0, 0, 0, 1, 1, 2], dtype=tf.int32)\n    \n    # Calculate the sum of the segments\n    segment_sums = tf.math.unsorted_segment_sum(input, segment_ids, 3)\n    \n    # Sort the segment sums\n    sorted_sums = tf.sort(segment_sums)\n    \n    # Return the second element of the sorted array\n    return sorted_sums[1]\n\ninput1 = tf.constant([1, 1, 1, 0, 0, 2], dtype=tf.int32)\n\ninput2 = tf.constant([10, 20, 30, 14, 15, 26], dtype=tf.int32)\n",
            "\ndef sort_segments(input):\n    segment_sums = tf.math.segment_sum(input, input)\n    sorted_sums = tf.sort(segment_sums)\n    return tf.gather(sorted_sums, 1)\n",
            "\ndef sort_and_get_middle_value(input_list):\n    sorted_list = tf.sort(input_list)\n    middle_index = tf.shape(sorted_list)[0] // 2\n    middle_value = tf.gather(sorted_list, middle_index)\n    return middle_value.numpy()\n\n",
            "\ndef sort_segments(arr):\n  arr = tf.constant(arr)\n  _, idx = tf.unique(arr)\n  segment_sums = tf.math.unsorted_segment_sum(arr, idx, tf.size(tf.unique(arr).y))\n  sorted_sums = tf.sort(segment_sums)\n  return sorted_sums[1].numpy()\n\n"
        ],
        "target-program": "tf.gather(in2, tf.argsort(in1, stable=True))",
        "description": "sort the segments",
        "tf_operators": {
            "tf.math.unsorted_segment_sum": 3,
            "tf.range": 1,
            "tf.size": 2,
            "tf.argsort": 2,
            "tf.constant": 6,
            "tf.reduce_sum": 1,
            "tf.math.bincount": 1,
            "tf.math.segment_sum": 4,
            "tf.reduce_max": 3,
            "tf.ones_like": 1,
            "tf.sort": 5,
            "tf.int32": 1,
            "tf.gather": 2,
            "tf.shape": 1,
            "tf.unique": 1
        },
        "coverage_percentage": 100.0,
        "total_in_target": 2,
        "total_covered": 2,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.006134969325153374,
                "tf.add(x, y)": 0.006134969325153374,
                "tf.add_n(inputs)": 0.006134969325153374,
                "tf.argmax(input, axis)": 0.006134969325153374,
                "tf.argmin(input, axis)": 0.006134969325153374,
                "tf.argsort(values, axis, stable=True)": 0.006134969325153374,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.006134969325153374,
                "tf.boolean_mask(tensor, mask)": 0.006134969325153374,
                "tf.broadcast_to(input, shape)": 0.006134969325153374,
                "tf.cast(x, dtype)": 0.006134969325153374,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.006134969325153374,
                "tf.concat(values, axis)": 0.006134969325153374,
                "tf.constant(value)": 0.03680981595092025,
                "tf.constant(value, dtype)": 0.006134969325153374,
                "tf.divide(x, y)": 0.006134969325153374,
                "tf.equal(x, y)": 0.006134969325153374,
                "tf.exp(x)": 0.006134969325153374,
                "tf.expand_dims(input, axis)": 0.006134969325153374,
                "tf.eye(num_rows)": 0.006134969325153374,
                "tf.eye(num_rows, num_columns)": 0.006134969325153374,
                "tf.eye(num_rows, dtype)": 0.006134969325153374,
                "tf.fill(dims, value)": 0.006134969325153374,
                "tf.gather(params, indices)": 0.018404907975460124,
                "tf.gather(params, indices, axis, batch_dims)": 0.006134969325153374,
                "tf.gather_nd(params, indices)": 0.006134969325153374,
                "tf.gather_nd(params, indices, batch_dims)": 0.006134969325153374,
                "tf.greater(x, y)": 0.006134969325153374,
                "tf.greater_equal(x, y)": 0.006134969325153374,
                "tf.math.bincount(arr)": 0.006134969325153374,
                "tf.math.ceil(x)": 0.006134969325153374,
                "tf.math.count_nonzero(input)": 0.006134969325153374,
                "tf.math.count_nonzero(input, axis)": 0.006134969325153374,
                "tf.math.cumsum(x, axis)": 0.006134969325153374,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.006134969325153374,
                "tf.math.divide_no_nan(x, y)": 0.006134969325153374,
                "tf.math.floor(x)": 0.006134969325153374,
                "tf.math.log(x)": 0.006134969325153374,
                "tf.math.logical_and(x, y)": 0.006134969325153374,
                "tf.math.logical_not(x)": 0.006134969325153374,
                "tf.math.logical_or(x, y)": 0.006134969325153374,
                "tf.math.logical_xor(x, y)": 0.006134969325153374,
                "tf.math.negative(x)": 0.006134969325153374,
                "tf.math.reciprocal(x)": 0.006134969325153374,
                "tf.math.reciprocal_no_nan(x)": 0.006134969325153374,
                "tf.math.segment_max(data, segment_ids)": 0.006134969325153374,
                "tf.math.segment_mean(data, segment_ids)": 0.006134969325153374,
                "tf.math.segment_min(data, segment_ids)": 0.006134969325153374,
                "tf.math.segment_prod(data, segment_ids)": 0.006134969325153374,
                "tf.math.segment_sum(data, segment_ids)": 0.006134969325153374,
                "tf.math.squared_difference(x, y)": 0.006134969325153374,
                "tf.math.top_k(input, k)": 0.006134969325153374,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.006134969325153374,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.006134969325153374,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.006134969325153374,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.006134969325153374,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.006134969325153374,
                "tf.matmul(a, b)": 0.006134969325153374,
                "tf.maximum(x, y)": 0.006134969325153374,
                "tf.minimum(x, y)": 0.006134969325153374,
                "tf.multiply(x, y)": 0.006134969325153374,
                "tf.not_equal(x, y)": 0.006134969325153374,
                "tf.one_hot(indices, depth)": 0.006134969325153374,
                "tf.ones(shape)": 0.006134969325153374,
                "tf.ones_like(input)": 0.012269938650306749,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.006134969325153374,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.006134969325153374,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.006134969325153374,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.006134969325153374,
                "tf.range(start)": 0.012269938650306749,
                "tf.range(start, limit, delta)": 0.006134969325153374,
                "tf.reduce_any(input_tensor, axis)": 0.006134969325153374,
                "tf.reduce_all(input_tensor, axis)": 0.006134969325153374,
                "tf.reduce_max(input_tensor)": 0.024539877300613498,
                "tf.reduce_max(input_tensor, axis)": 0.006134969325153374,
                "tf.reduce_mean(input_tensor)": 0.006134969325153374,
                "tf.reduce_mean(input_tensor, axis)": 0.006134969325153374,
                "tf.reduce_min(input_tensor)": 0.006134969325153374,
                "tf.reduce_min(input_tensor, axis)": 0.006134969325153374,
                "tf.reduce_prod(input_tensor, axis)": 0.006134969325153374,
                "tf.reduce_sum(input_tensor)": 0.012269938650306749,
                "tf.reduce_sum(input_tensor, axis)": 0.006134969325153374,
                "tf.repeat(input, repeats)": 0.006134969325153374,
                "tf.repeat(input, repeats, axis)": 0.006134969325153374,
                "tf.reshape(tensor, shape)": 0.006134969325153374,
                "tf.reverse(tensor, axis)": 0.006134969325153374,
                "tf.roll(input, shift, axis)": 0.006134969325153374,
                "tf.round(x)": 0.006134969325153374,
                "tf.scatter_nd(indices, updates, shape)": 0.006134969325153374,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.006134969325153374,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.006134969325153374,
                "tf.sequence_mask(lengths)": 0.006134969325153374,
                "tf.sequence_mask(lengths, maxlen)": 0.006134969325153374,
                "tf.shape(input)": 0.012269938650306749,
                "tf.sign(x)": 0.006134969325153374,
                "tf.sort(values, axis)": 0.006134969325153374,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.006134969325153374,
                "tf.sqrt(x)": 0.006134969325153374,
                "tf.square(x)": 0.006134969325153374,
                "tf.squeeze(input)": 0.006134969325153374,
                "tf.squeeze(input, axis)": 0.006134969325153374,
                "tf.stack(values, axis)": 0.006134969325153374,
                "tf.subtract(x, y)": 0.006134969325153374,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.006134969325153374,
                "tf.tensordot(a, b, axes)": 0.006134969325153374,
                "tf.tile(input, multiples)": 0.006134969325153374,
                "tf.transpose(a)": 0.006134969325153374,
                "tf.transpose(a, perm)": 0.006134969325153374,
                "tf.unique_with_counts(x)": 0.006134969325153374,
                "tf.unstack(value, axis)": 0.006134969325153374,
                "tf.where(condition)": 0.006134969325153374,
                "tf.where(condition, x, y)": 0.006134969325153374,
                "tf.zeros(shape)": 0.006134969325153374,
                "tf.zeros_like(input)": 0.006134969325153374,
                "tf.SparseTensor(indices, values, dense_shape)": 0.006134969325153374,
                "tf.sparse.add(a, b)": 0.006134969325153374,
                "tf.sparse.concat(axis, sp_inputs)": 0.006134969325153374,
                "tf.sparse.expand_dims(sp_input, axis)": 0.006134969325153374,
                "tf.sparse.from_dense(tensor)": 0.006134969325153374,
                "tf.sparse.maximum(sp_a, sp_b)": 0.006134969325153374,
                "tf.sparse.minimum(sp_a, sp_b)": 0.006134969325153374,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.006134969325153374,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.006134969325153374,
                "tf.sparse.reset_shape(sp_input)": 0.006134969325153374,
                "tf.sparse.reshape(sp_input, shape)": 0.006134969325153374,
                "tf.sparse.retain(sp_input, to_retain)": 0.006134969325153374,
                "tf.sparse.slice(sp_input, start, size)": 0.006134969325153374,
                "tf.sparse.split(sp_input, num_split, axis)": 0.006134969325153374,
                "tf.sparse.to_dense(sp_input)": 0.006134969325153374,
                "tf.sparse.to_dense(sp_input, default_value)": 0.006134969325153374,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.006134969325153374,
                "tf.sparse.transpose(sp_input)": 0.006134969325153374,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.006134969325153374,
                "IndexingOperation": 0.04294478527607362,
                "PairCreationOperation": 0.012269938650306749,
                "SingletonTupleCreationOperation": 0.006134969325153374,
                "SlicingAxis0BothOperation": 0.006134969325153374,
                "SlicingAxis0LeftOperation": 0.006134969325153374,
                "SlicingAxis0RightOperation": 0.006134969325153374,
                "SlicingAxis1BothOperation": 0.006134969325153374,
                "SlicingAxis1LeftOperation": 0.006134969325153374,
                "SlicingAxis1RightOperation": 0.006134969325153374,
                "TripleCreationOperation": 0.006134969325153374
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 5,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 6,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 6,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 6,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 5,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 6,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 6,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 5,
                "PairCreationOperation": 6,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "google_10",
        "completions": [
            "\ndef gather_elements(list1, list2):\n    tensor1 = tf.constant(list1)\n    tensor2 = tf.constant(list2)\n    mask = tf.equal(tensor2, 1)\n    masked_tensor = tf.boolean_mask(tensor1, mask)\n    return tf.reduce_min(masked_tensor)\n",
            "\ndef gather_elements(data, mask):\n    data_tensor = tf.constant(data)\n    mask_tensor = tf.constant(mask)\n    mask_bool = tf.cast(mask_tensor, tf.bool)\n    result = tf.boolean_mask(data_tensor, mask_bool)\n    return result.numpy()\n\n",
            "\ndef gather_marked_elements(list1, list2):\n    tensor1 = tf.constant(list1)\n    tensor2 = tf.constant(list2, dtype=bool)\n    masked_tensor = tf.boolean_mask(tensor1, tensor2)\n    result = tf.gather(masked_tensor, 0)\n    return result\n\n",
            "\ndef gather_marked_elements(input_list):\n    tensor = tf.constant(input_list)\n    mask = tf.not_equal(tensor, 0)\n    non_zero_elements = tf.boolean_mask(tensor, mask)\n    return tf.gather(non_zero_elements, 0)\n\n",
            "\nlist = tf.constant([10, 20, 0, 40, 0, 30])\n\nmask = tf.constant([1, 1, 0, 1, 0, 1])\n\nmasked_list = tf.boolean_mask(list, mask)\n\noutput = tf.gather(masked_list, tf.where(masked_list > 0))\n\n",
            "\ndef gather_elements(numbers, mask):\n    numbers_tensor = tf.constant(numbers)\n    mask_tensor = tf.constant(mask, dtype=bool)\n    gathered_elements = tf.boolean_mask(numbers_tensor, mask_tensor)\n    return gathered_elements\n\nnumbers = [10, 20, 0, 40, 0, 30]\nmask = [1, 1, 0, 1, 0, 1]\nresult = gather_elements(numbers, mask)\n\nnumbers = [10, 20, 0, 40, 0, 30]\nmask = [1, 0, 0, 0, 0, 0]\nresult = gather_elements(numbers, mask)\n",
            "\ndef gather_marked_elements(values, mask):\n    values_tensor = tf.constant(values)\n    mask_tensor = tf.constant(mask, dtype=tf.bool)\n    return tf.boolean_mask(values_tensor, mask_tensor)\n",
            "\ndef gather_elements(input_list):\n    tensor = tf.constant(input_list)\n    marked_indices = [0, 3]  # Indices of the marked elements\n    gathered_elements = tf.gather(tensor, marked_indices)\n    return gathered_elements.numpy()\n\n",
            "\ndef gather_elements(data, mask):\n    data = tf.constant(data)\n    mask = tf.constant(mask)\n    mask = tf.equal(mask, 1)\n    gathered = tf.boolean_mask(data, mask)\n    return gathered.numpy()\n\n",
            "\ndef gather_marked_elements(input_list, marker_list):\n    # Create a Tensor from the input list\n    input_tensor = tf.constant(input_list)\n\n    # Create a boolean mask from the marker list\n    mask = tf.constant(marker_list, dtype=tf.bool)\n\n    # Gather the marked elements\n    gathered_elements = tf.boolean_mask(input_tensor, mask)\n\n    return gathered_elements.numpy()[0]  # Return the first element\n\n"
        ],
        "target-program": "tf.boolean_mask(in1, tf.cast(in2, tf.bool))",
        "description": "gather the marked elements",
        "tf_operators": {
            "tf.boolean_mask": 9,
            "tf.reduce_min": 1,
            "tf.equal": 2,
            "tf.constant": 10,
            "tf.bool": 3,
            "tf.cast": 1,
            "tf.gather": 4,
            "tf.not_equal": 1,
            "tf.where": 1
        },
        "coverage_percentage": 100.0,
        "total_in_target": 3,
        "total_covered": 3,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005681818181818182,
                "tf.add(x, y)": 0.005681818181818182,
                "tf.add_n(inputs)": 0.005681818181818182,
                "tf.argmax(input, axis)": 0.005681818181818182,
                "tf.argmin(input, axis)": 0.005681818181818182,
                "tf.argsort(values, axis, stable=True)": 0.005681818181818182,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005681818181818182,
                "tf.boolean_mask(tensor, mask)": 0.056818181818181816,
                "tf.broadcast_to(input, shape)": 0.005681818181818182,
                "tf.cast(x, dtype)": 0.011363636363636364,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005681818181818182,
                "tf.concat(values, axis)": 0.005681818181818182,
                "tf.constant(value)": 0.08522727272727272,
                "tf.constant(value, dtype)": 0.005681818181818182,
                "tf.divide(x, y)": 0.005681818181818182,
                "tf.equal(x, y)": 0.017045454545454544,
                "tf.exp(x)": 0.005681818181818182,
                "tf.expand_dims(input, axis)": 0.005681818181818182,
                "tf.eye(num_rows)": 0.005681818181818182,
                "tf.eye(num_rows, num_columns)": 0.005681818181818182,
                "tf.eye(num_rows, dtype)": 0.005681818181818182,
                "tf.fill(dims, value)": 0.005681818181818182,
                "tf.gather(params, indices)": 0.028409090909090908,
                "tf.gather(params, indices, axis, batch_dims)": 0.005681818181818182,
                "tf.gather_nd(params, indices)": 0.005681818181818182,
                "tf.gather_nd(params, indices, batch_dims)": 0.005681818181818182,
                "tf.greater(x, y)": 0.005681818181818182,
                "tf.greater_equal(x, y)": 0.005681818181818182,
                "tf.math.bincount(arr)": 0.005681818181818182,
                "tf.math.ceil(x)": 0.005681818181818182,
                "tf.math.count_nonzero(input)": 0.005681818181818182,
                "tf.math.count_nonzero(input, axis)": 0.005681818181818182,
                "tf.math.cumsum(x, axis)": 0.005681818181818182,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005681818181818182,
                "tf.math.divide_no_nan(x, y)": 0.005681818181818182,
                "tf.math.floor(x)": 0.005681818181818182,
                "tf.math.log(x)": 0.005681818181818182,
                "tf.math.logical_and(x, y)": 0.005681818181818182,
                "tf.math.logical_not(x)": 0.005681818181818182,
                "tf.math.logical_or(x, y)": 0.005681818181818182,
                "tf.math.logical_xor(x, y)": 0.005681818181818182,
                "tf.math.negative(x)": 0.005681818181818182,
                "tf.math.reciprocal(x)": 0.005681818181818182,
                "tf.math.reciprocal_no_nan(x)": 0.005681818181818182,
                "tf.math.segment_max(data, segment_ids)": 0.005681818181818182,
                "tf.math.segment_mean(data, segment_ids)": 0.005681818181818182,
                "tf.math.segment_min(data, segment_ids)": 0.005681818181818182,
                "tf.math.segment_prod(data, segment_ids)": 0.005681818181818182,
                "tf.math.segment_sum(data, segment_ids)": 0.005681818181818182,
                "tf.math.squared_difference(x, y)": 0.005681818181818182,
                "tf.math.top_k(input, k)": 0.005681818181818182,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005681818181818182,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005681818181818182,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005681818181818182,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005681818181818182,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005681818181818182,
                "tf.matmul(a, b)": 0.005681818181818182,
                "tf.maximum(x, y)": 0.005681818181818182,
                "tf.minimum(x, y)": 0.005681818181818182,
                "tf.multiply(x, y)": 0.005681818181818182,
                "tf.not_equal(x, y)": 0.011363636363636364,
                "tf.one_hot(indices, depth)": 0.005681818181818182,
                "tf.ones(shape)": 0.005681818181818182,
                "tf.ones_like(input)": 0.005681818181818182,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005681818181818182,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005681818181818182,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005681818181818182,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005681818181818182,
                "tf.range(start)": 0.005681818181818182,
                "tf.range(start, limit, delta)": 0.005681818181818182,
                "tf.reduce_any(input_tensor, axis)": 0.005681818181818182,
                "tf.reduce_all(input_tensor, axis)": 0.005681818181818182,
                "tf.reduce_max(input_tensor)": 0.005681818181818182,
                "tf.reduce_max(input_tensor, axis)": 0.005681818181818182,
                "tf.reduce_mean(input_tensor)": 0.005681818181818182,
                "tf.reduce_mean(input_tensor, axis)": 0.005681818181818182,
                "tf.reduce_min(input_tensor)": 0.011363636363636364,
                "tf.reduce_min(input_tensor, axis)": 0.005681818181818182,
                "tf.reduce_prod(input_tensor, axis)": 0.005681818181818182,
                "tf.reduce_sum(input_tensor)": 0.005681818181818182,
                "tf.reduce_sum(input_tensor, axis)": 0.005681818181818182,
                "tf.repeat(input, repeats)": 0.005681818181818182,
                "tf.repeat(input, repeats, axis)": 0.005681818181818182,
                "tf.reshape(tensor, shape)": 0.005681818181818182,
                "tf.reverse(tensor, axis)": 0.005681818181818182,
                "tf.roll(input, shift, axis)": 0.005681818181818182,
                "tf.round(x)": 0.005681818181818182,
                "tf.scatter_nd(indices, updates, shape)": 0.005681818181818182,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005681818181818182,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005681818181818182,
                "tf.sequence_mask(lengths)": 0.005681818181818182,
                "tf.sequence_mask(lengths, maxlen)": 0.005681818181818182,
                "tf.shape(input)": 0.005681818181818182,
                "tf.sign(x)": 0.005681818181818182,
                "tf.sort(values, axis)": 0.005681818181818182,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005681818181818182,
                "tf.sqrt(x)": 0.005681818181818182,
                "tf.square(x)": 0.005681818181818182,
                "tf.squeeze(input)": 0.005681818181818182,
                "tf.squeeze(input, axis)": 0.005681818181818182,
                "tf.stack(values, axis)": 0.005681818181818182,
                "tf.subtract(x, y)": 0.005681818181818182,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005681818181818182,
                "tf.tensordot(a, b, axes)": 0.005681818181818182,
                "tf.tile(input, multiples)": 0.005681818181818182,
                "tf.transpose(a)": 0.005681818181818182,
                "tf.transpose(a, perm)": 0.005681818181818182,
                "tf.unique_with_counts(x)": 0.005681818181818182,
                "tf.unstack(value, axis)": 0.005681818181818182,
                "tf.where(condition)": 0.011363636363636364,
                "tf.where(condition, x, y)": 0.005681818181818182,
                "tf.zeros(shape)": 0.005681818181818182,
                "tf.zeros_like(input)": 0.005681818181818182,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005681818181818182,
                "tf.sparse.add(a, b)": 0.005681818181818182,
                "tf.sparse.concat(axis, sp_inputs)": 0.005681818181818182,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005681818181818182,
                "tf.sparse.from_dense(tensor)": 0.005681818181818182,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005681818181818182,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005681818181818182,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005681818181818182,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005681818181818182,
                "tf.sparse.reset_shape(sp_input)": 0.005681818181818182,
                "tf.sparse.reshape(sp_input, shape)": 0.005681818181818182,
                "tf.sparse.retain(sp_input, to_retain)": 0.005681818181818182,
                "tf.sparse.slice(sp_input, start, size)": 0.005681818181818182,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005681818181818182,
                "tf.sparse.to_dense(sp_input)": 0.005681818181818182,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005681818181818182,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005681818181818182,
                "tf.sparse.transpose(sp_input)": 0.005681818181818182,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005681818181818182,
                "IndexingOperation": 0.011363636363636364,
                "PairCreationOperation": 0.005681818181818182,
                "SingletonTupleCreationOperation": 0.005681818181818182,
                "SlicingAxis0BothOperation": 0.005681818181818182,
                "SlicingAxis0LeftOperation": 0.005681818181818182,
                "SlicingAxis0RightOperation": 0.005681818181818182,
                "SlicingAxis1BothOperation": 0.005681818181818182,
                "SlicingAxis1LeftOperation": 0.005681818181818182,
                "SlicingAxis1RightOperation": 0.005681818181818182,
                "TripleCreationOperation": 0.005681818181818182
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 4,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 6,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 6,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 5,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 6,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 6,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 6,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 6,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "google_11",
        "completions": [
            "\ndef count_elements_greater_than_zero(input):\n    tensor = tf.constant(input)\n    greater_than_zero = tf.greater(tensor, 0)\n    int_tensor = tf.cast(greater_than_zero, tf.int32)\n    count_per_row = tf.reduce_sum(int_tensor, axis=1)\n    total_count = tf.reduce_sum(count_per_row)\n    return total_count\n\ninput = [[1.0, 0.3, -4.2, 0.0, 2.1, 0.4], [-0.1, 0.0, 1.4, -1.0, 0.4, 0.0], [0.1, 0.0, 0.7, -0.3, 0.5, -0.1], [1.4, 2.5, 0.3, 0.01, 0.0, 1.2]]\n",
            "\ndata = [[1.0, 0.3, -4.2, 0.0, 2.1, 0.4], [-0.1, 0.0, 1.4, -1.0, 0.4, 0.0], [0.1, 0.0, 0.7, -0.3, 0.5, -0.1], [1.4, 2.5, 0.3, 0.01, 0.0, 1.2]]\n\ntensor = tf.constant(data)\n\ngreater_than_zero = tf.math.greater(tensor, 0)\n\ncount = tf.math.count_nonzero(greater_than_zero, axis=1)\n\n",
            "\ndata = [[1.0, 0.3, -4.2, 0.0, 2.1, 0.4], [-0.1, 0.0, 1.4, -1.0, 0.4, 0.0], [0.1, 0.0, 0.7, -0.3, 0.5, -0.1], [1.4, 2.5, 0.3, 0.01, 0.0, 1.2]]\n\ntensor = tf.constant(data)\n\ngreater_than_zero = tf.greater(tensor, 0)\n\ngreater_than_zero_int = tf.cast(greater_than_zero, tf.int32)\n\ncount = tf.reduce_sum(greater_than_zero_int, axis=1)\n\n",
            "\nlst = [[1.0, 0.3, -4.2, 0.0, 2.1, 0.4], [-0.1, 0.0, 1.4, -1.0, 0.4, 0.0], [0.1, 0.0, 0.7, -0.3, 0.5, -0.1], [1.4, 2.5, 0.3, 0.01, 0.0, 1.2]]\n\ntensor = tf.constant(lst)\n\nbool_tensor = tf.greater(tensor, 0)\n\nint_tensor = tf.cast(bool_tensor, tf.int32)\n\nrow_sums = tf.reduce_sum(int_tensor, axis=1)\n\ntotal_count = tf.reduce_sum(row_sums)\n\n",
            "\ndef count_greater_than_zero(input_tensor):\n  greater_than_zero = tf.math.greater(input_tensor, 0)\n  count = tf.math.count_nonzero(greater_than_zero, axis=1)\n  total_count = tf.reduce_sum(count)\n  return total_count\n\ninput_tensor = tf.constant([[1.0, 0.3, -4.2, 0.0, 2.1, 0.4], [-0.1, 0.0, 1.4, -1.0, 0.4, 0.0], [0.1, 0.0, 0.7, -0.3, 0.5, -0.1], [1.4, 2.5, 0.3, 0.01, 0.0, 1.2]])\noutput = count_greater_than_zero(input_tensor)\n",
            "\narray = tf.constant([[1.0, 0.3, -4.2, 0.0, 2.1, 0.4], [-0.1, 0.0, 1.4, -1.0, 0.4, 0.0], [0.1, 0.0, 0.7, -0.3, 0.5, -0.1], [1.4, 2.5, 0.3, 0.01, 0.0, 1.2]])\n\nmask = tf.greater(array, 0)\n\nmask_int = tf.cast(mask, tf.int32)\n\ncount = tf.reduce_sum(mask_int, axis=1)\n\n",
            "\ndata = [[1.0, 0.3, -4.2, 0.0, 2.1, 0.4], [-0.1, 0.0, 1.4, -1.0, 0.4, 0.0], [0.1, 0.0, 0.7, -0.3, 0.5, -0.1], [1.4, 2.5, 0.3, 0.01, 0.0, 1.2]]\n\ntensor = tf.constant(data)\n\ngreater_than_zero = tf.math.greater(tensor, 0)\n\ncount = tf.math.count_nonzero(greater_than_zero, axis=1)\n",
            "\ndef count_elements_greater_than_zero(input_list):\n    tensor = tf.constant(input_list)\n    greater_than_zero = tf.greater(tensor, 0)\n    int_tensor = tf.cast(greater_than_zero, tf.int32)\n    count_per_row = tf.reduce_sum(int_tensor, axis=1)\n    total_count = tf.reduce_sum(count_per_row)\n    return total_count\n\ninput_list = [[1.0, 0.3, -4.2, 0.0, 2.1, 0.4], [-0.1, 0.0, 1.4, -1.0, 0.4, 0.0], [0.1, 0.0, 0.7, -0.3, 0.5, -0.1], [1.4, 2.5, 0.3, 0.01, 0.0, 1.2]]\n",
            "\ninput_list = [[1.0, 0.3, -4.2, 0.0, 2.1, 0.4], [-0.1, 0.0, 1.4, -1.0, 0.4, 0.0], [0.1, 0.0, 0.7, -0.3, 0.5, -0.1], [1.4, 2.5, 0.3, 0.01, 0.0, 1.2]]\n\ninput_tensor = tf.constant(input_list)\n\nboolean_mask = tf.greater(input_tensor, 0)\n\ninteger_mask = tf.cast(boolean_mask, tf.int32)\n\ncounts = tf.reduce_sum(integer_mask, axis=1)\n\n",
            "\ninput_tensor = tf.constant([[1.0, 0.3, -4.2, 0.0, 2.1, 0.4], [-0.1, 0.0, 1.4, -1.0, 0.4, 0.0], [0.1, 0.0, 0.7, -0.3, 0.5, -0.1], [1.4, 2.5, 0.3, 0.01, 0.0, 1.2]])\n\nbool_tensor = tf.greater(input_tensor, 0)\n\nint_tensor = tf.cast(bool_tensor, tf.int32)\n\nresult = tf.reduce_sum(int_tensor, axis=1)\n\n"
        ],
        "target-program": "tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)",
        "description": "count the number of elements greater than 0 in each row",
        "tf_operators": {
            "tf.cast": 7,
            "tf.int32": 7,
            "tf.reduce_sum": 8,
            "tf.greater": 7,
            "tf.constant": 10,
            "tf.math.greater": 3,
            "tf.math.count_nonzero": 3
        },
        "coverage_percentage": 100.0,
        "total_in_target": 4,
        "total_covered": 4,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0058823529411764705,
                "tf.add(x, y)": 0.0058823529411764705,
                "tf.add_n(inputs)": 0.0058823529411764705,
                "tf.argmax(input, axis)": 0.0058823529411764705,
                "tf.argmin(input, axis)": 0.0058823529411764705,
                "tf.argsort(values, axis, stable=True)": 0.0058823529411764705,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.0058823529411764705,
                "tf.boolean_mask(tensor, mask)": 0.0058823529411764705,
                "tf.broadcast_to(input, shape)": 0.0058823529411764705,
                "tf.cast(x, dtype)": 0.047058823529411764,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0058823529411764705,
                "tf.concat(values, axis)": 0.0058823529411764705,
                "tf.constant(value)": 0.06470588235294118,
                "tf.constant(value, dtype)": 0.0058823529411764705,
                "tf.divide(x, y)": 0.0058823529411764705,
                "tf.equal(x, y)": 0.0058823529411764705,
                "tf.exp(x)": 0.0058823529411764705,
                "tf.expand_dims(input, axis)": 0.0058823529411764705,
                "tf.eye(num_rows)": 0.0058823529411764705,
                "tf.eye(num_rows, num_columns)": 0.0058823529411764705,
                "tf.eye(num_rows, dtype)": 0.0058823529411764705,
                "tf.fill(dims, value)": 0.0058823529411764705,
                "tf.gather(params, indices)": 0.0058823529411764705,
                "tf.gather(params, indices, axis, batch_dims)": 0.0058823529411764705,
                "tf.gather_nd(params, indices)": 0.0058823529411764705,
                "tf.gather_nd(params, indices, batch_dims)": 0.0058823529411764705,
                "tf.greater(x, y)": 0.047058823529411764,
                "tf.greater_equal(x, y)": 0.0058823529411764705,
                "tf.math.bincount(arr)": 0.0058823529411764705,
                "tf.math.ceil(x)": 0.0058823529411764705,
                "tf.math.count_nonzero(input)": 0.0058823529411764705,
                "tf.math.count_nonzero(input, axis)": 0.0058823529411764705,
                "tf.math.cumsum(x, axis)": 0.0058823529411764705,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0058823529411764705,
                "tf.math.divide_no_nan(x, y)": 0.0058823529411764705,
                "tf.math.floor(x)": 0.0058823529411764705,
                "tf.math.log(x)": 0.0058823529411764705,
                "tf.math.logical_and(x, y)": 0.0058823529411764705,
                "tf.math.logical_not(x)": 0.0058823529411764705,
                "tf.math.logical_or(x, y)": 0.0058823529411764705,
                "tf.math.logical_xor(x, y)": 0.0058823529411764705,
                "tf.math.negative(x)": 0.0058823529411764705,
                "tf.math.reciprocal(x)": 0.0058823529411764705,
                "tf.math.reciprocal_no_nan(x)": 0.0058823529411764705,
                "tf.math.segment_max(data, segment_ids)": 0.0058823529411764705,
                "tf.math.segment_mean(data, segment_ids)": 0.0058823529411764705,
                "tf.math.segment_min(data, segment_ids)": 0.0058823529411764705,
                "tf.math.segment_prod(data, segment_ids)": 0.0058823529411764705,
                "tf.math.segment_sum(data, segment_ids)": 0.0058823529411764705,
                "tf.math.squared_difference(x, y)": 0.0058823529411764705,
                "tf.math.top_k(input, k)": 0.0058823529411764705,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0058823529411764705,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0058823529411764705,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0058823529411764705,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0058823529411764705,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0058823529411764705,
                "tf.matmul(a, b)": 0.0058823529411764705,
                "tf.maximum(x, y)": 0.0058823529411764705,
                "tf.minimum(x, y)": 0.0058823529411764705,
                "tf.multiply(x, y)": 0.0058823529411764705,
                "tf.not_equal(x, y)": 0.0058823529411764705,
                "tf.one_hot(indices, depth)": 0.0058823529411764705,
                "tf.ones(shape)": 0.0058823529411764705,
                "tf.ones_like(input)": 0.0058823529411764705,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.0058823529411764705,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.0058823529411764705,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.0058823529411764705,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.0058823529411764705,
                "tf.range(start)": 0.0058823529411764705,
                "tf.range(start, limit, delta)": 0.0058823529411764705,
                "tf.reduce_any(input_tensor, axis)": 0.0058823529411764705,
                "tf.reduce_all(input_tensor, axis)": 0.0058823529411764705,
                "tf.reduce_max(input_tensor)": 0.0058823529411764705,
                "tf.reduce_max(input_tensor, axis)": 0.0058823529411764705,
                "tf.reduce_mean(input_tensor)": 0.0058823529411764705,
                "tf.reduce_mean(input_tensor, axis)": 0.0058823529411764705,
                "tf.reduce_min(input_tensor)": 0.0058823529411764705,
                "tf.reduce_min(input_tensor, axis)": 0.0058823529411764705,
                "tf.reduce_prod(input_tensor, axis)": 0.0058823529411764705,
                "tf.reduce_sum(input_tensor)": 0.029411764705882353,
                "tf.reduce_sum(input_tensor, axis)": 0.0058823529411764705,
                "tf.repeat(input, repeats)": 0.0058823529411764705,
                "tf.repeat(input, repeats, axis)": 0.0058823529411764705,
                "tf.reshape(tensor, shape)": 0.0058823529411764705,
                "tf.reverse(tensor, axis)": 0.0058823529411764705,
                "tf.roll(input, shift, axis)": 0.0058823529411764705,
                "tf.round(x)": 0.0058823529411764705,
                "tf.scatter_nd(indices, updates, shape)": 0.0058823529411764705,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.0058823529411764705,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.0058823529411764705,
                "tf.sequence_mask(lengths)": 0.0058823529411764705,
                "tf.sequence_mask(lengths, maxlen)": 0.0058823529411764705,
                "tf.shape(input)": 0.0058823529411764705,
                "tf.sign(x)": 0.0058823529411764705,
                "tf.sort(values, axis)": 0.0058823529411764705,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.0058823529411764705,
                "tf.sqrt(x)": 0.0058823529411764705,
                "tf.square(x)": 0.0058823529411764705,
                "tf.squeeze(input)": 0.0058823529411764705,
                "tf.squeeze(input, axis)": 0.0058823529411764705,
                "tf.stack(values, axis)": 0.0058823529411764705,
                "tf.subtract(x, y)": 0.0058823529411764705,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0058823529411764705,
                "tf.tensordot(a, b, axes)": 0.0058823529411764705,
                "tf.tile(input, multiples)": 0.0058823529411764705,
                "tf.transpose(a)": 0.0058823529411764705,
                "tf.transpose(a, perm)": 0.0058823529411764705,
                "tf.unique_with_counts(x)": 0.0058823529411764705,
                "tf.unstack(value, axis)": 0.0058823529411764705,
                "tf.where(condition)": 0.0058823529411764705,
                "tf.where(condition, x, y)": 0.0058823529411764705,
                "tf.zeros(shape)": 0.0058823529411764705,
                "tf.zeros_like(input)": 0.0058823529411764705,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0058823529411764705,
                "tf.sparse.add(a, b)": 0.0058823529411764705,
                "tf.sparse.concat(axis, sp_inputs)": 0.0058823529411764705,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0058823529411764705,
                "tf.sparse.from_dense(tensor)": 0.0058823529411764705,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0058823529411764705,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0058823529411764705,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0058823529411764705,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0058823529411764705,
                "tf.sparse.reset_shape(sp_input)": 0.0058823529411764705,
                "tf.sparse.reshape(sp_input, shape)": 0.0058823529411764705,
                "tf.sparse.retain(sp_input, to_retain)": 0.0058823529411764705,
                "tf.sparse.slice(sp_input, start, size)": 0.0058823529411764705,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0058823529411764705,
                "tf.sparse.to_dense(sp_input)": 0.0058823529411764705,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0058823529411764705,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0058823529411764705,
                "tf.sparse.transpose(sp_input)": 0.0058823529411764705,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.0058823529411764705,
                "IndexingOperation": 0.0058823529411764705,
                "PairCreationOperation": 0.0058823529411764705,
                "SingletonTupleCreationOperation": 0.0058823529411764705,
                "SlicingAxis0BothOperation": 0.0058823529411764705,
                "SlicingAxis0LeftOperation": 0.0058823529411764705,
                "SlicingAxis0RightOperation": 0.0058823529411764705,
                "SlicingAxis1BothOperation": 0.0058823529411764705,
                "SlicingAxis1LeftOperation": 0.0058823529411764705,
                "SlicingAxis1RightOperation": 0.0058823529411764705,
                "TripleCreationOperation": 0.0058823529411764705
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 4,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 4,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 5,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "google_12",
        "completions": [
            "\ndata = [[1.0, 0.3, -4.2, 0.0, 2.1], [-0.1, 0.0, 1.4, -1.0, 0.4], [0.1, 0.0, 0.7, -0.3, 0.5], [1.4, 2.5, 0.3, -0.1, 0.0]]\n\ntensor = tf.constant(data)\n\ngreater_than_zero = tf.greater(tensor, 0)\nless_than_one = tf.less(tensor, 1)\n\nbetween_zero_and_one = tf.logical_and(greater_than_zero, less_than_one)\n\nresult = tf.cast(between_zero_and_one, tf.int32)\n\n",
            "\ndef count_elements_between_zero_and_one(input_list):\n    tensor = tf.constant(input_list, dtype=tf.float32)\n    mask = tf.logical_and(tf.greater(tensor, 0), tf.less(tensor, 1))\n    mask_int = tf.cast(mask, tf.int32)\n    result = tf.reduce_sum(mask_int, axis=1)\n    return result\n\ninput_list = [[1.0, 0.3, -4.2, 0.0, 2.1], [-0.1, 0.0, 1.4, -1.0, 0.4], [0.1, 0.0, 0.7, -0.3, 0.5], [1.4, 2.5, 0.3, -0.1, 0.0]]\n",
            "\ndef identify_elements_between_0_and_1(input_list):\n    tensor = tf.constant(input_list, dtype=tf.float32)\n    mask = tf.logical_and(tf.greater(tensor, 0), tf.less(tensor, 1))\n    return tf.cast(mask, tf.int32)\n",
            "\ndef count_elements_between_0_and_1(lst):\n    tensor = tf.constant(lst)\n    mask = tf.logical_and(tensor > 0, tensor < 1)\n    mask_int = tf.cast(mask, tf.int32)\n    result = tf.reduce_sum(mask_int, axis=-1)\n    return result.numpy()\n\nlst = [[1.0, 0.3, -4.2, 0.0, 2.1], [-0.1, 0.0, 1.4, -1.0, 0.4], [0.1, 0.0, 0.7, -0.3, 0.5], [1.4, 2.5, 0.3, -0.1, 0.0]]\n",
            "\ninput_list = [[1.0, 0.3, -4.2, 0.0, 2.1], [-0.1, 0.0, 1.4, -1.0, 0.4], [0.1, 0.0, 0.7, -0.3, 0.5], [1.4, 2.5, 0.3, -0.1, 0.0]]\n\ninput_tensor = tf.constant(input_list)\n\ngreater_than_zero = tf.greater(input_tensor, 0)\nless_than_one = tf.less(input_tensor, 1)\n\nbetween_zero_and_one = tf.logical_and(greater_than_zero, less_than_one)\n\noutput = tf.cast(between_zero_and_one, tf.int32)\n\n",
            "\ndef identify_elements_between_0_and_1(input_data):\n    tensor = tf.constant(input_data)\n    greater_than_0 = tf.greater(tensor, 0)\n    less_than_1 = tf.less(tensor, 1)\n    between_0_and_1 = tf.logical_and(greater_than_0, less_than_1)\n    contains_element_between_0_and_1 = tf.reduce_any(between_0_and_1, axis=1)\n    return tf.cast(contains_element_between_0_and_1, tf.int32).numpy().tolist()\n",
            "\ninput = tf.constant([[1.0, 0.3, -4.2, 0.0, 2.1], [-0.1, 0.0, 1.4, -1.0, 0.4], [0.1, 0.0, 0.7, -0.3, 0.5], [1.4, 2.5, 0.3, -0.1, 0.0]])\n\nbool_mask = tf.logical_and(input > 0, input < 1)\n\nint_mask = tf.cast(bool_mask, tf.int32)\n\noutput = tf.reduce_sum(int_mask, axis=1)\n\n",
            "\ndata = [[1.0, 0.3, -4.2, 0.0, 2.1], [-0.1, 0.0, 1.4, -1.0, 0.4], [0.1, 0.0, 0.7, -0.3, 0.5], [1.4, 2.5, 0.3, -0.1, 0.0]]\n\ntensor = tf.constant(data)\n\nmask = tf.logical_and(tf.greater_equal(tensor, 0), tf.less(tensor, 1))\n\nresult = tf.cast(mask, tf.int32)\n\nresult = tf.reshape(result, [-1])\n\n",
            "\ninput_tensor = tf.constant([[1.0, 0.3, -4.2, 0.0, 2.1], [-0.1, 0.0, 1.4, -1.0, 0.4], [0.1, 0.0, 0.7, -0.3, 0.5], [1.4, 2.5, 0.3, -0.1, 0.0]])\n\nbetween_0_and_1 = tf.logical_and(input_tensor > 0, input_tensor < 1)\n\noutput_tensor = tf.cast(between_0_and_1, tf.int32)\n\n",
            "\ndata = tf.constant([[1.0, 0.3, -4.2, 0.0, 2.1], [-0.1, 0.0, 1.4, -1.0, 0.4], [0.1, 0.0, 0.7, -0.3, 0.5], [1.4, 2.5, 0.3, -0.1, 0.0]])\n\nresult = tf.cast(tf.logical_and(tf.greater_equal(data, 0), tf.less_equal(data, 1)), tf.int32)\n\n"
        ],
        "target-program": "tf.cast(tf.logical_and(0 <= in1, in1 <= 1), tf.int32)",
        "description": "identify elements between 0 and 1",
        "tf_operators": {
            "tf.logical_and": 10,
            "tf.cast": 10,
            "tf.int32": 10,
            "tf.greater": 5,
            "tf.less": 6,
            "tf.constant": 10,
            "tf.float32": 2,
            "tf.reduce_sum": 3,
            "tf.reduce_any": 1,
            "tf.reshape": 1,
            "tf.greater_equal": 2,
            "tf.less_equal": 1
        },
        "coverage_percentage": 100.0,
        "total_in_target": 3,
        "total_covered": 3,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005917159763313609,
                "tf.add(x, y)": 0.005917159763313609,
                "tf.add_n(inputs)": 0.005917159763313609,
                "tf.argmax(input, axis)": 0.005917159763313609,
                "tf.argmin(input, axis)": 0.005917159763313609,
                "tf.argsort(values, axis, stable=True)": 0.005917159763313609,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005917159763313609,
                "tf.boolean_mask(tensor, mask)": 0.005917159763313609,
                "tf.broadcast_to(input, shape)": 0.005917159763313609,
                "tf.cast(x, dtype)": 0.0650887573964497,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005917159763313609,
                "tf.concat(values, axis)": 0.005917159763313609,
                "tf.constant(value)": 0.05325443786982249,
                "tf.constant(value, dtype)": 0.005917159763313609,
                "tf.divide(x, y)": 0.005917159763313609,
                "tf.equal(x, y)": 0.005917159763313609,
                "tf.exp(x)": 0.005917159763313609,
                "tf.expand_dims(input, axis)": 0.005917159763313609,
                "tf.eye(num_rows)": 0.005917159763313609,
                "tf.eye(num_rows, num_columns)": 0.005917159763313609,
                "tf.eye(num_rows, dtype)": 0.005917159763313609,
                "tf.fill(dims, value)": 0.005917159763313609,
                "tf.gather(params, indices)": 0.005917159763313609,
                "tf.gather(params, indices, axis, batch_dims)": 0.005917159763313609,
                "tf.gather_nd(params, indices)": 0.005917159763313609,
                "tf.gather_nd(params, indices, batch_dims)": 0.005917159763313609,
                "tf.greater(x, y)": 0.03550295857988166,
                "tf.greater_equal(x, y)": 0.01775147928994083,
                "tf.math.bincount(arr)": 0.005917159763313609,
                "tf.math.ceil(x)": 0.005917159763313609,
                "tf.math.count_nonzero(input)": 0.005917159763313609,
                "tf.math.count_nonzero(input, axis)": 0.005917159763313609,
                "tf.math.cumsum(x, axis)": 0.005917159763313609,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005917159763313609,
                "tf.math.divide_no_nan(x, y)": 0.005917159763313609,
                "tf.math.floor(x)": 0.005917159763313609,
                "tf.math.log(x)": 0.005917159763313609,
                "tf.math.logical_and(x, y)": 0.005917159763313609,
                "tf.math.logical_not(x)": 0.005917159763313609,
                "tf.math.logical_or(x, y)": 0.005917159763313609,
                "tf.math.logical_xor(x, y)": 0.005917159763313609,
                "tf.math.negative(x)": 0.005917159763313609,
                "tf.math.reciprocal(x)": 0.005917159763313609,
                "tf.math.reciprocal_no_nan(x)": 0.005917159763313609,
                "tf.math.segment_max(data, segment_ids)": 0.005917159763313609,
                "tf.math.segment_mean(data, segment_ids)": 0.005917159763313609,
                "tf.math.segment_min(data, segment_ids)": 0.005917159763313609,
                "tf.math.segment_prod(data, segment_ids)": 0.005917159763313609,
                "tf.math.segment_sum(data, segment_ids)": 0.005917159763313609,
                "tf.math.squared_difference(x, y)": 0.005917159763313609,
                "tf.math.top_k(input, k)": 0.005917159763313609,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005917159763313609,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005917159763313609,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005917159763313609,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005917159763313609,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005917159763313609,
                "tf.matmul(a, b)": 0.005917159763313609,
                "tf.maximum(x, y)": 0.005917159763313609,
                "tf.minimum(x, y)": 0.005917159763313609,
                "tf.multiply(x, y)": 0.005917159763313609,
                "tf.not_equal(x, y)": 0.005917159763313609,
                "tf.one_hot(indices, depth)": 0.005917159763313609,
                "tf.ones(shape)": 0.005917159763313609,
                "tf.ones_like(input)": 0.005917159763313609,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005917159763313609,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005917159763313609,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005917159763313609,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005917159763313609,
                "tf.range(start)": 0.005917159763313609,
                "tf.range(start, limit, delta)": 0.005917159763313609,
                "tf.reduce_any(input_tensor, axis)": 0.011834319526627219,
                "tf.reduce_all(input_tensor, axis)": 0.005917159763313609,
                "tf.reduce_max(input_tensor)": 0.005917159763313609,
                "tf.reduce_max(input_tensor, axis)": 0.005917159763313609,
                "tf.reduce_mean(input_tensor)": 0.005917159763313609,
                "tf.reduce_mean(input_tensor, axis)": 0.005917159763313609,
                "tf.reduce_min(input_tensor)": 0.005917159763313609,
                "tf.reduce_min(input_tensor, axis)": 0.005917159763313609,
                "tf.reduce_prod(input_tensor, axis)": 0.005917159763313609,
                "tf.reduce_sum(input_tensor)": 0.005917159763313609,
                "tf.reduce_sum(input_tensor, axis)": 0.005917159763313609,
                "tf.repeat(input, repeats)": 0.005917159763313609,
                "tf.repeat(input, repeats, axis)": 0.005917159763313609,
                "tf.reshape(tensor, shape)": 0.011834319526627219,
                "tf.reverse(tensor, axis)": 0.005917159763313609,
                "tf.roll(input, shift, axis)": 0.005917159763313609,
                "tf.round(x)": 0.005917159763313609,
                "tf.scatter_nd(indices, updates, shape)": 0.005917159763313609,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005917159763313609,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005917159763313609,
                "tf.sequence_mask(lengths)": 0.005917159763313609,
                "tf.sequence_mask(lengths, maxlen)": 0.005917159763313609,
                "tf.shape(input)": 0.005917159763313609,
                "tf.sign(x)": 0.005917159763313609,
                "tf.sort(values, axis)": 0.005917159763313609,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005917159763313609,
                "tf.sqrt(x)": 0.005917159763313609,
                "tf.square(x)": 0.005917159763313609,
                "tf.squeeze(input)": 0.005917159763313609,
                "tf.squeeze(input, axis)": 0.005917159763313609,
                "tf.stack(values, axis)": 0.005917159763313609,
                "tf.subtract(x, y)": 0.005917159763313609,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005917159763313609,
                "tf.tensordot(a, b, axes)": 0.005917159763313609,
                "tf.tile(input, multiples)": 0.005917159763313609,
                "tf.transpose(a)": 0.005917159763313609,
                "tf.transpose(a, perm)": 0.005917159763313609,
                "tf.unique_with_counts(x)": 0.005917159763313609,
                "tf.unstack(value, axis)": 0.005917159763313609,
                "tf.where(condition)": 0.005917159763313609,
                "tf.where(condition, x, y)": 0.005917159763313609,
                "tf.zeros(shape)": 0.005917159763313609,
                "tf.zeros_like(input)": 0.005917159763313609,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005917159763313609,
                "tf.sparse.add(a, b)": 0.005917159763313609,
                "tf.sparse.concat(axis, sp_inputs)": 0.005917159763313609,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005917159763313609,
                "tf.sparse.from_dense(tensor)": 0.005917159763313609,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005917159763313609,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005917159763313609,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005917159763313609,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005917159763313609,
                "tf.sparse.reset_shape(sp_input)": 0.005917159763313609,
                "tf.sparse.reshape(sp_input, shape)": 0.005917159763313609,
                "tf.sparse.retain(sp_input, to_retain)": 0.005917159763313609,
                "tf.sparse.slice(sp_input, start, size)": 0.005917159763313609,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005917159763313609,
                "tf.sparse.to_dense(sp_input)": 0.005917159763313609,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005917159763313609,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005917159763313609,
                "tf.sparse.transpose(sp_input)": 0.005917159763313609,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005917159763313609,
                "IndexingOperation": 0.005917159763313609,
                "PairCreationOperation": 0.005917159763313609,
                "SingletonTupleCreationOperation": 0.005917159763313609,
                "SlicingAxis0BothOperation": 0.005917159763313609,
                "SlicingAxis0LeftOperation": 0.005917159763313609,
                "SlicingAxis0RightOperation": 0.005917159763313609,
                "SlicingAxis1BothOperation": 0.005917159763313609,
                "SlicingAxis1LeftOperation": 0.005917159763313609,
                "SlicingAxis1RightOperation": 0.005917159763313609,
                "TripleCreationOperation": 0.005917159763313609
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 4,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 5,
                "tf.greater_equal(x, y)": 6,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 6,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 6,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "google_13",
        "completions": [
            "\ndef concat_sequences(sequences):\n    return tf.concat(sequences, axis=0)\n\nsequences = [[1, 2], [3, 4, 5]]\noutput = concat_sequences(sequences)\n",
            "\ndef concatenate_sequences(input):\n    return tf.concat(input, axis=0)\n",
            "\ndef concatenate_sequences(sequences):\n    return tf.concat(sequences, axis=0)\n\n",
            "\ndef concat_sequences(input_sequences):\n    return tf.concat(input_sequences, axis=0)\n\ninput_sequences = [[1, 2], [10, 20]]\n\ninput_sequences = [[3, 4, 5], [30, 40, 50]]\n",
            "\ndef concatenate_sequences(seq1, seq2):\n    tensor1 = tf.constant(seq1)\n    tensor2 = tf.constant(seq2)\n    result = tf.concat([tensor1, tensor2], 0)\n    return result.numpy().tolist()\n\n",
            "\ndef concatenate_sequences(sequences):\n    return tf.concat(sequences, axis=0)\n",
            "\ndef concatenate_sequences(input_list):\n    return tf.concat(input_list, 0)\n\ninput_list = [[1, 2], [10, 20]]\n\ninput_list = [[3, 4, 5], [30, 40, 50]]\n",
            "\nsequences = [[1, 2], [10, 20]]\n\nresult = tf.concat(sequences, axis=0)\n\n",
            "\ndef concatenate_sequences(input):\n    tensor_input = tf.constant(input)\n    tensor_output = tf.concat(tensor_input, axis=0)\n    output = tensor_output.numpy().tolist()\n    return output\n",
            "\ndef concat_batches(batches):\n    return tf.concat(batches, axis=0)\n\nbatches = [[1, 2], [10, 20]]\n"
        ],
        "target-program": "tf.concat([in1, in2], axis=1)",
        "description": "Concatenate batches of sequences",
        "tf_operators": {
            "tf.concat": 10,
            "tf.constant": 2
        },
        "coverage_percentage": 100.0,
        "total_in_target": 1,
        "total_covered": 1,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0064516129032258064,
                "tf.add(x, y)": 0.0064516129032258064,
                "tf.add_n(inputs)": 0.0064516129032258064,
                "tf.argmax(input, axis)": 0.0064516129032258064,
                "tf.argmin(input, axis)": 0.0064516129032258064,
                "tf.argsort(values, axis, stable=True)": 0.0064516129032258064,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.0064516129032258064,
                "tf.boolean_mask(tensor, mask)": 0.0064516129032258064,
                "tf.broadcast_to(input, shape)": 0.0064516129032258064,
                "tf.cast(x, dtype)": 0.0064516129032258064,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0064516129032258064,
                "tf.concat(values, axis)": 0.07096774193548387,
                "tf.constant(value)": 0.025806451612903226,
                "tf.constant(value, dtype)": 0.0064516129032258064,
                "tf.divide(x, y)": 0.0064516129032258064,
                "tf.equal(x, y)": 0.0064516129032258064,
                "tf.exp(x)": 0.0064516129032258064,
                "tf.expand_dims(input, axis)": 0.0064516129032258064,
                "tf.eye(num_rows)": 0.0064516129032258064,
                "tf.eye(num_rows, num_columns)": 0.0064516129032258064,
                "tf.eye(num_rows, dtype)": 0.0064516129032258064,
                "tf.fill(dims, value)": 0.0064516129032258064,
                "tf.gather(params, indices)": 0.0064516129032258064,
                "tf.gather(params, indices, axis, batch_dims)": 0.0064516129032258064,
                "tf.gather_nd(params, indices)": 0.0064516129032258064,
                "tf.gather_nd(params, indices, batch_dims)": 0.0064516129032258064,
                "tf.greater(x, y)": 0.0064516129032258064,
                "tf.greater_equal(x, y)": 0.0064516129032258064,
                "tf.math.bincount(arr)": 0.0064516129032258064,
                "tf.math.ceil(x)": 0.0064516129032258064,
                "tf.math.count_nonzero(input)": 0.0064516129032258064,
                "tf.math.count_nonzero(input, axis)": 0.0064516129032258064,
                "tf.math.cumsum(x, axis)": 0.0064516129032258064,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0064516129032258064,
                "tf.math.divide_no_nan(x, y)": 0.0064516129032258064,
                "tf.math.floor(x)": 0.0064516129032258064,
                "tf.math.log(x)": 0.0064516129032258064,
                "tf.math.logical_and(x, y)": 0.0064516129032258064,
                "tf.math.logical_not(x)": 0.0064516129032258064,
                "tf.math.logical_or(x, y)": 0.0064516129032258064,
                "tf.math.logical_xor(x, y)": 0.0064516129032258064,
                "tf.math.negative(x)": 0.0064516129032258064,
                "tf.math.reciprocal(x)": 0.0064516129032258064,
                "tf.math.reciprocal_no_nan(x)": 0.0064516129032258064,
                "tf.math.segment_max(data, segment_ids)": 0.0064516129032258064,
                "tf.math.segment_mean(data, segment_ids)": 0.0064516129032258064,
                "tf.math.segment_min(data, segment_ids)": 0.0064516129032258064,
                "tf.math.segment_prod(data, segment_ids)": 0.0064516129032258064,
                "tf.math.segment_sum(data, segment_ids)": 0.0064516129032258064,
                "tf.math.squared_difference(x, y)": 0.0064516129032258064,
                "tf.math.top_k(input, k)": 0.0064516129032258064,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0064516129032258064,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0064516129032258064,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0064516129032258064,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0064516129032258064,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0064516129032258064,
                "tf.matmul(a, b)": 0.0064516129032258064,
                "tf.maximum(x, y)": 0.0064516129032258064,
                "tf.minimum(x, y)": 0.0064516129032258064,
                "tf.multiply(x, y)": 0.0064516129032258064,
                "tf.not_equal(x, y)": 0.0064516129032258064,
                "tf.one_hot(indices, depth)": 0.0064516129032258064,
                "tf.ones(shape)": 0.0064516129032258064,
                "tf.ones_like(input)": 0.0064516129032258064,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.0064516129032258064,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.0064516129032258064,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.0064516129032258064,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.0064516129032258064,
                "tf.range(start)": 0.0064516129032258064,
                "tf.range(start, limit, delta)": 0.0064516129032258064,
                "tf.reduce_any(input_tensor, axis)": 0.0064516129032258064,
                "tf.reduce_all(input_tensor, axis)": 0.0064516129032258064,
                "tf.reduce_max(input_tensor)": 0.0064516129032258064,
                "tf.reduce_max(input_tensor, axis)": 0.0064516129032258064,
                "tf.reduce_mean(input_tensor)": 0.0064516129032258064,
                "tf.reduce_mean(input_tensor, axis)": 0.0064516129032258064,
                "tf.reduce_min(input_tensor)": 0.0064516129032258064,
                "tf.reduce_min(input_tensor, axis)": 0.0064516129032258064,
                "tf.reduce_prod(input_tensor, axis)": 0.0064516129032258064,
                "tf.reduce_sum(input_tensor)": 0.0064516129032258064,
                "tf.reduce_sum(input_tensor, axis)": 0.0064516129032258064,
                "tf.repeat(input, repeats)": 0.0064516129032258064,
                "tf.repeat(input, repeats, axis)": 0.0064516129032258064,
                "tf.reshape(tensor, shape)": 0.0064516129032258064,
                "tf.reverse(tensor, axis)": 0.0064516129032258064,
                "tf.roll(input, shift, axis)": 0.0064516129032258064,
                "tf.round(x)": 0.0064516129032258064,
                "tf.scatter_nd(indices, updates, shape)": 0.0064516129032258064,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.0064516129032258064,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.0064516129032258064,
                "tf.sequence_mask(lengths)": 0.0064516129032258064,
                "tf.sequence_mask(lengths, maxlen)": 0.0064516129032258064,
                "tf.shape(input)": 0.0064516129032258064,
                "tf.sign(x)": 0.0064516129032258064,
                "tf.sort(values, axis)": 0.0064516129032258064,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.0064516129032258064,
                "tf.sqrt(x)": 0.0064516129032258064,
                "tf.square(x)": 0.0064516129032258064,
                "tf.squeeze(input)": 0.0064516129032258064,
                "tf.squeeze(input, axis)": 0.0064516129032258064,
                "tf.stack(values, axis)": 0.0064516129032258064,
                "tf.subtract(x, y)": 0.0064516129032258064,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0064516129032258064,
                "tf.tensordot(a, b, axes)": 0.0064516129032258064,
                "tf.tile(input, multiples)": 0.0064516129032258064,
                "tf.transpose(a)": 0.0064516129032258064,
                "tf.transpose(a, perm)": 0.0064516129032258064,
                "tf.unique_with_counts(x)": 0.0064516129032258064,
                "tf.unstack(value, axis)": 0.0064516129032258064,
                "tf.where(condition)": 0.0064516129032258064,
                "tf.where(condition, x, y)": 0.0064516129032258064,
                "tf.zeros(shape)": 0.0064516129032258064,
                "tf.zeros_like(input)": 0.0064516129032258064,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0064516129032258064,
                "tf.sparse.add(a, b)": 0.0064516129032258064,
                "tf.sparse.concat(axis, sp_inputs)": 0.0064516129032258064,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0064516129032258064,
                "tf.sparse.from_dense(tensor)": 0.0064516129032258064,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0064516129032258064,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0064516129032258064,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0064516129032258064,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0064516129032258064,
                "tf.sparse.reset_shape(sp_input)": 0.0064516129032258064,
                "tf.sparse.reshape(sp_input, shape)": 0.0064516129032258064,
                "tf.sparse.retain(sp_input, to_retain)": 0.0064516129032258064,
                "tf.sparse.slice(sp_input, start, size)": 0.0064516129032258064,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0064516129032258064,
                "tf.sparse.to_dense(sp_input)": 0.0064516129032258064,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0064516129032258064,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0064516129032258064,
                "tf.sparse.transpose(sp_input)": 0.0064516129032258064,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.0064516129032258064,
                "IndexingOperation": 0.0064516129032258064,
                "PairCreationOperation": 0.0064516129032258064,
                "SingletonTupleCreationOperation": 0.0064516129032258064,
                "SlicingAxis0BothOperation": 0.0064516129032258064,
                "SlicingAxis0LeftOperation": 0.0064516129032258064,
                "SlicingAxis0RightOperation": 0.0064516129032258064,
                "SlicingAxis1BothOperation": 0.0064516129032258064,
                "SlicingAxis1LeftOperation": 0.0064516129032258064,
                "SlicingAxis1RightOperation": 0.0064516129032258064,
                "TripleCreationOperation": 0.0064516129032258064
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 4,
                "tf.constant(value)": 5,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "google_14",
        "completions": [
            "\ndef circular_buffer(input_tensor):\n    return tf.roll(input_tensor, shift=1, axis=0)[-1]\n\ninput_tensor = tf.constant([[1, 3, 2, 0, 0], [4, 6, 5, 0, 0], [8, 7, 9, 0, 0]])\noutput_tensor = circular_buffer(input_tensor)\n",
            "\ndef circular_buffer(arr):\n    return tf.roll(arr, shift=1, axis=-1)\n\narr = tf.constant([[1, 3, 2, 0, 0], [4, 6, 5, 0, 0], [8, 7, 9, 0, 0]])\n",
            "\ndata = [[1, 3, 2, 0, 0], [4, 6, 5, 0, 0], [8, 7, 9, 0, 0]]\n\ntensor = tf.constant(data)\n\noutput = tf.roll(tensor, shift=-1, axis=0)\n\n",
            "\ndef circular_buffer(data):\n    buffer = tf.zeros(shape=[5], dtype=tf.int32)\n    for sublist in data:\n        non_zero = tf.where(tf.not_equal(sublist, 0))[0, 0]\n        buffer = tf.roll(buffer, shift=-1, axis=0)\n        buffer = tf.tensor_scatter_nd_update(buffer, [[4]], [sublist[non_zero]])\n    return buffer\n\ndata = [[1, 3, 2, 0, 0], [4, 6, 5, 0, 0], [8, 7, 9, 0, 0]]\n",
            "\ndef circular_buffer(input):\n    input_tensor = tf.constant(input)\n    output_tensor = tf.roll(input_tensor, shift=1, axis=1)\n    return output_tensor.numpy().tolist()\n\n",
            "\ndef circular_buffer(input):\n    return tf.roll(input[0], shift=1, axis=-1)\n",
            "\ndef circular_buffer(input):\n    buffer_size = len(input[0])\n    buffer = tf.zeros(buffer_size, dtype=tf.int32)\n    for i, list in enumerate(input):\n        buffer = tf.roll(buffer, shift=-i, axis=0)\n        buffer = tf.tensor_scatter_nd_update(buffer, tf.reshape(tf.range(buffer_size), (-1, 1)), list)\n    return buffer.numpy().tolist()\n\ninput = [[1, 3, 2, 0, 0], [4, 6, 5, 0, 0], [8, 7, 9, 0, 0]]\n",
            "\ndata = [[1, 3, 2, 0, 0], [4, 6, 5, 0, 0], [8, 7, 9, 0, 0]]\n\ntensor_data = tf.constant(data)\n\nsum_data = tf.reduce_sum(tensor_data, axis=0)\n\ncircular_buffer = tf.roll(sum_data, shift=1, axis=0)\n\n",
            "\ndef circular_buffer(input):\n    tensor = tf.constant(input)\n    sum_tensor = tf.reduce_sum(tensor, axis=0)\n    result = tf.roll(sum_tensor, shift=1, axis=0)\n    return result\n\ninput = [[1, 3, 2, 0, 0], [4, 6, 5, 0, 0], [8, 7, 9, 0, 0]]\n",
            "\ndef circular_buffer(input):\n    return tf.roll(input, shift=1, axis=1)\n\ninput = tf.constant([[1, 3, 2, 0, 0], [4, 6, 5, 0, 0], [8, 7, 9, 0, 0]])\noutput = circular_buffer(input)\n"
        ],
        "target-program": "tf.roll(in1, 1, 1)",
        "description": "circular buffer",
        "tf_operators": {
            "tf.roll": 10,
            "tf.constant": 7,
            "tf.where": 1,
            "tf.int32": 2,
            "tf.zeros": 2,
            "tf.tensor_scatter_nd_update": 2,
            "tf.not_equal": 1,
            "tf.reshape": 1,
            "tf.range": 1,
            "tf.reduce_sum": 2
        },
        "coverage_percentage": 100.0,
        "total_in_target": 1,
        "total_covered": 1,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005747126436781609,
                "tf.add(x, y)": 0.005747126436781609,
                "tf.add_n(inputs)": 0.005747126436781609,
                "tf.argmax(input, axis)": 0.005747126436781609,
                "tf.argmin(input, axis)": 0.005747126436781609,
                "tf.argsort(values, axis, stable=True)": 0.005747126436781609,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005747126436781609,
                "tf.boolean_mask(tensor, mask)": 0.005747126436781609,
                "tf.broadcast_to(input, shape)": 0.005747126436781609,
                "tf.cast(x, dtype)": 0.005747126436781609,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005747126436781609,
                "tf.concat(values, axis)": 0.005747126436781609,
                "tf.constant(value)": 0.04597701149425287,
                "tf.constant(value, dtype)": 0.005747126436781609,
                "tf.divide(x, y)": 0.005747126436781609,
                "tf.equal(x, y)": 0.005747126436781609,
                "tf.exp(x)": 0.005747126436781609,
                "tf.expand_dims(input, axis)": 0.005747126436781609,
                "tf.eye(num_rows)": 0.005747126436781609,
                "tf.eye(num_rows, num_columns)": 0.005747126436781609,
                "tf.eye(num_rows, dtype)": 0.005747126436781609,
                "tf.fill(dims, value)": 0.005747126436781609,
                "tf.gather(params, indices)": 0.005747126436781609,
                "tf.gather(params, indices, axis, batch_dims)": 0.005747126436781609,
                "tf.gather_nd(params, indices)": 0.005747126436781609,
                "tf.gather_nd(params, indices, batch_dims)": 0.005747126436781609,
                "tf.greater(x, y)": 0.005747126436781609,
                "tf.greater_equal(x, y)": 0.005747126436781609,
                "tf.math.bincount(arr)": 0.005747126436781609,
                "tf.math.ceil(x)": 0.005747126436781609,
                "tf.math.count_nonzero(input)": 0.005747126436781609,
                "tf.math.count_nonzero(input, axis)": 0.005747126436781609,
                "tf.math.cumsum(x, axis)": 0.005747126436781609,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005747126436781609,
                "tf.math.divide_no_nan(x, y)": 0.005747126436781609,
                "tf.math.floor(x)": 0.005747126436781609,
                "tf.math.log(x)": 0.005747126436781609,
                "tf.math.logical_and(x, y)": 0.005747126436781609,
                "tf.math.logical_not(x)": 0.005747126436781609,
                "tf.math.logical_or(x, y)": 0.005747126436781609,
                "tf.math.logical_xor(x, y)": 0.005747126436781609,
                "tf.math.negative(x)": 0.005747126436781609,
                "tf.math.reciprocal(x)": 0.005747126436781609,
                "tf.math.reciprocal_no_nan(x)": 0.005747126436781609,
                "tf.math.segment_max(data, segment_ids)": 0.005747126436781609,
                "tf.math.segment_mean(data, segment_ids)": 0.005747126436781609,
                "tf.math.segment_min(data, segment_ids)": 0.005747126436781609,
                "tf.math.segment_prod(data, segment_ids)": 0.005747126436781609,
                "tf.math.segment_sum(data, segment_ids)": 0.005747126436781609,
                "tf.math.squared_difference(x, y)": 0.005747126436781609,
                "tf.math.top_k(input, k)": 0.005747126436781609,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005747126436781609,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005747126436781609,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005747126436781609,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005747126436781609,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005747126436781609,
                "tf.matmul(a, b)": 0.005747126436781609,
                "tf.maximum(x, y)": 0.005747126436781609,
                "tf.minimum(x, y)": 0.005747126436781609,
                "tf.multiply(x, y)": 0.005747126436781609,
                "tf.not_equal(x, y)": 0.011494252873563218,
                "tf.one_hot(indices, depth)": 0.005747126436781609,
                "tf.ones(shape)": 0.005747126436781609,
                "tf.ones_like(input)": 0.005747126436781609,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005747126436781609,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005747126436781609,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005747126436781609,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005747126436781609,
                "tf.range(start)": 0.011494252873563218,
                "tf.range(start, limit, delta)": 0.005747126436781609,
                "tf.reduce_any(input_tensor, axis)": 0.005747126436781609,
                "tf.reduce_all(input_tensor, axis)": 0.005747126436781609,
                "tf.reduce_max(input_tensor)": 0.005747126436781609,
                "tf.reduce_max(input_tensor, axis)": 0.005747126436781609,
                "tf.reduce_mean(input_tensor)": 0.005747126436781609,
                "tf.reduce_mean(input_tensor, axis)": 0.005747126436781609,
                "tf.reduce_min(input_tensor)": 0.005747126436781609,
                "tf.reduce_min(input_tensor, axis)": 0.005747126436781609,
                "tf.reduce_prod(input_tensor, axis)": 0.005747126436781609,
                "tf.reduce_sum(input_tensor)": 0.005747126436781609,
                "tf.reduce_sum(input_tensor, axis)": 0.005747126436781609,
                "tf.repeat(input, repeats)": 0.005747126436781609,
                "tf.repeat(input, repeats, axis)": 0.005747126436781609,
                "tf.reshape(tensor, shape)": 0.011494252873563218,
                "tf.reverse(tensor, axis)": 0.005747126436781609,
                "tf.roll(input, shift, axis)": 0.06321839080459771,
                "tf.round(x)": 0.005747126436781609,
                "tf.scatter_nd(indices, updates, shape)": 0.005747126436781609,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005747126436781609,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005747126436781609,
                "tf.sequence_mask(lengths)": 0.005747126436781609,
                "tf.sequence_mask(lengths, maxlen)": 0.005747126436781609,
                "tf.shape(input)": 0.005747126436781609,
                "tf.sign(x)": 0.005747126436781609,
                "tf.sort(values, axis)": 0.005747126436781609,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005747126436781609,
                "tf.sqrt(x)": 0.005747126436781609,
                "tf.square(x)": 0.005747126436781609,
                "tf.squeeze(input)": 0.005747126436781609,
                "tf.squeeze(input, axis)": 0.005747126436781609,
                "tf.stack(values, axis)": 0.005747126436781609,
                "tf.subtract(x, y)": 0.005747126436781609,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.017241379310344827,
                "tf.tensordot(a, b, axes)": 0.005747126436781609,
                "tf.tile(input, multiples)": 0.005747126436781609,
                "tf.transpose(a)": 0.005747126436781609,
                "tf.transpose(a, perm)": 0.005747126436781609,
                "tf.unique_with_counts(x)": 0.005747126436781609,
                "tf.unstack(value, axis)": 0.005747126436781609,
                "tf.where(condition)": 0.011494252873563218,
                "tf.where(condition, x, y)": 0.005747126436781609,
                "tf.zeros(shape)": 0.017241379310344827,
                "tf.zeros_like(input)": 0.005747126436781609,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005747126436781609,
                "tf.sparse.add(a, b)": 0.005747126436781609,
                "tf.sparse.concat(axis, sp_inputs)": 0.005747126436781609,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005747126436781609,
                "tf.sparse.from_dense(tensor)": 0.005747126436781609,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005747126436781609,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005747126436781609,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005747126436781609,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005747126436781609,
                "tf.sparse.reset_shape(sp_input)": 0.005747126436781609,
                "tf.sparse.reshape(sp_input, shape)": 0.005747126436781609,
                "tf.sparse.retain(sp_input, to_retain)": 0.005747126436781609,
                "tf.sparse.slice(sp_input, start, size)": 0.005747126436781609,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005747126436781609,
                "tf.sparse.to_dense(sp_input)": 0.005747126436781609,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005747126436781609,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005747126436781609,
                "tf.sparse.transpose(sp_input)": 0.005747126436781609,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005747126436781609,
                "IndexingOperation": 0.028735632183908046,
                "PairCreationOperation": 0.022988505747126436,
                "SingletonTupleCreationOperation": 0.005747126436781609,
                "SlicingAxis0BothOperation": 0.005747126436781609,
                "SlicingAxis0LeftOperation": 0.005747126436781609,
                "SlicingAxis0RightOperation": 0.005747126436781609,
                "SlicingAxis1BothOperation": 0.005747126436781609,
                "SlicingAxis1LeftOperation": 0.005747126436781609,
                "SlicingAxis1RightOperation": 0.005747126436781609,
                "TripleCreationOperation": 0.005747126436781609
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 6,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 6,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 6,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 4,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 6,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 6,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 6,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 5,
                "PairCreationOperation": 5,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "google_15",
        "completions": [
            "\ndata = [[1, 3, 5, 7], [2, 4, 6, 8]]\n\ntensor = tf.constant(data)\n\npaddings = tf.constant([[0, 0], [0, 1]])\n\npadded_tensor = tf.pad(tensor, paddings, \"CONSTANT\")\n\n",
            "\ninput = tf.constant([[1, 3, 5, 7], [2, 4, 6, 8]])\n\noutput = tf.pad(input, [[0, 0], [0, 1]])\n\n",
            "\ndata = [[1, 3, 5, 7], [2, 4, 6, 8]]\n\ntensor = tf.constant(data)\n\npadded_tensor = tf.pad(tensor, paddings=[[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n\n",
            "\ndata = [[1, 3, 5, 7], [2, 4, 6, 8]]\n\ntensor = tf.constant(data)\n\npaddings = tf.constant([[0, 0], [0, 1]])\n\nresult = tf.pad(tensor, paddings, \"CONSTANT\")\n\n",
            "\ndef pad_zero_column(lst):\n    tensor = tf.constant(lst)\n    paddings = tf.constant([[0, 0], [0, 1]])\n    padded_tensor = tf.pad(tensor, paddings, \"CONSTANT\")\n    return padded_tensor.numpy().tolist()\n\nlst = [[1, 3, 5, 7], [2, 4, 6, 8]]\n",
            "\ninput_list = [[1, 3, 5, 7], [2, 4, 6, 8]]\n\ntensor = tf.constant(input_list)\n\noutput = tf.pad(tensor, [[0, 0], [0, 1]])\n\n",
            "\ntensor = tf.constant([[1, 3, 5, 7], [2, 4, 6, 8]])\n\npaddings = tf.constant([[0, 0], [0, 1]])\n\nresult = tf.pad(tensor, paddings, \"CONSTANT\")\n\n",
            "\ninput_data = [[1, 3, 5, 7], [2, 4, 6, 8]]\n\ntensor = tf.constant(input_data)\n\npadded_tensor = tf.pad(tensor, paddings=[[0, 0], [0, 1]])\n\n",
            "\narray = [[1, 3, 5, 7], [2, 4, 6, 8]]\n\ntensor = tf.constant(array)\n\npaddings = [[0, 0], [0, 1]]\n\npadded_tensor = tf.pad(tensor, paddings, \"CONSTANT\")\n\n",
            "\narr = [[1, 3, 5, 7], [2, 4, 6, 8]]\n\ntensor = tf.constant(arr)\n\npaddings = tf.constant([[0, 0], [0, 1]])\n\nresult = tf.pad(tensor, paddings)\n\n"
        ],
        "target-program": "tf.pad(in1, [[0, 0], [0, 1]], 'CONSTANT')",
        "description": "pad a zero column",
        "tf_operators": {
            "tf.pad": 10,
            "tf.constant": 10
        },
        "coverage_percentage": 100.0,
        "total_in_target": 1,
        "total_covered": 1,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.006134969325153374,
                "tf.add(x, y)": 0.006134969325153374,
                "tf.add_n(inputs)": 0.006134969325153374,
                "tf.argmax(input, axis)": 0.006134969325153374,
                "tf.argmin(input, axis)": 0.006134969325153374,
                "tf.argsort(values, axis, stable=True)": 0.006134969325153374,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.006134969325153374,
                "tf.boolean_mask(tensor, mask)": 0.006134969325153374,
                "tf.broadcast_to(input, shape)": 0.006134969325153374,
                "tf.cast(x, dtype)": 0.006134969325153374,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.006134969325153374,
                "tf.concat(values, axis)": 0.006134969325153374,
                "tf.constant(value)": 0.09815950920245399,
                "tf.constant(value, dtype)": 0.006134969325153374,
                "tf.divide(x, y)": 0.006134969325153374,
                "tf.equal(x, y)": 0.006134969325153374,
                "tf.exp(x)": 0.006134969325153374,
                "tf.expand_dims(input, axis)": 0.006134969325153374,
                "tf.eye(num_rows)": 0.006134969325153374,
                "tf.eye(num_rows, num_columns)": 0.006134969325153374,
                "tf.eye(num_rows, dtype)": 0.006134969325153374,
                "tf.fill(dims, value)": 0.006134969325153374,
                "tf.gather(params, indices)": 0.006134969325153374,
                "tf.gather(params, indices, axis, batch_dims)": 0.006134969325153374,
                "tf.gather_nd(params, indices)": 0.006134969325153374,
                "tf.gather_nd(params, indices, batch_dims)": 0.006134969325153374,
                "tf.greater(x, y)": 0.006134969325153374,
                "tf.greater_equal(x, y)": 0.006134969325153374,
                "tf.math.bincount(arr)": 0.006134969325153374,
                "tf.math.ceil(x)": 0.006134969325153374,
                "tf.math.count_nonzero(input)": 0.006134969325153374,
                "tf.math.count_nonzero(input, axis)": 0.006134969325153374,
                "tf.math.cumsum(x, axis)": 0.006134969325153374,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.006134969325153374,
                "tf.math.divide_no_nan(x, y)": 0.006134969325153374,
                "tf.math.floor(x)": 0.006134969325153374,
                "tf.math.log(x)": 0.006134969325153374,
                "tf.math.logical_and(x, y)": 0.006134969325153374,
                "tf.math.logical_not(x)": 0.006134969325153374,
                "tf.math.logical_or(x, y)": 0.006134969325153374,
                "tf.math.logical_xor(x, y)": 0.006134969325153374,
                "tf.math.negative(x)": 0.006134969325153374,
                "tf.math.reciprocal(x)": 0.006134969325153374,
                "tf.math.reciprocal_no_nan(x)": 0.006134969325153374,
                "tf.math.segment_max(data, segment_ids)": 0.006134969325153374,
                "tf.math.segment_mean(data, segment_ids)": 0.006134969325153374,
                "tf.math.segment_min(data, segment_ids)": 0.006134969325153374,
                "tf.math.segment_prod(data, segment_ids)": 0.006134969325153374,
                "tf.math.segment_sum(data, segment_ids)": 0.006134969325153374,
                "tf.math.squared_difference(x, y)": 0.006134969325153374,
                "tf.math.top_k(input, k)": 0.006134969325153374,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.006134969325153374,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.006134969325153374,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.006134969325153374,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.006134969325153374,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.006134969325153374,
                "tf.matmul(a, b)": 0.006134969325153374,
                "tf.maximum(x, y)": 0.006134969325153374,
                "tf.minimum(x, y)": 0.006134969325153374,
                "tf.multiply(x, y)": 0.006134969325153374,
                "tf.not_equal(x, y)": 0.006134969325153374,
                "tf.one_hot(indices, depth)": 0.006134969325153374,
                "tf.ones(shape)": 0.006134969325153374,
                "tf.ones_like(input)": 0.006134969325153374,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.04294478527607362,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.006134969325153374,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.006134969325153374,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.006134969325153374,
                "tf.range(start)": 0.006134969325153374,
                "tf.range(start, limit, delta)": 0.006134969325153374,
                "tf.reduce_any(input_tensor, axis)": 0.006134969325153374,
                "tf.reduce_all(input_tensor, axis)": 0.006134969325153374,
                "tf.reduce_max(input_tensor)": 0.006134969325153374,
                "tf.reduce_max(input_tensor, axis)": 0.006134969325153374,
                "tf.reduce_mean(input_tensor)": 0.006134969325153374,
                "tf.reduce_mean(input_tensor, axis)": 0.006134969325153374,
                "tf.reduce_min(input_tensor)": 0.006134969325153374,
                "tf.reduce_min(input_tensor, axis)": 0.006134969325153374,
                "tf.reduce_prod(input_tensor, axis)": 0.006134969325153374,
                "tf.reduce_sum(input_tensor)": 0.006134969325153374,
                "tf.reduce_sum(input_tensor, axis)": 0.006134969325153374,
                "tf.repeat(input, repeats)": 0.006134969325153374,
                "tf.repeat(input, repeats, axis)": 0.006134969325153374,
                "tf.reshape(tensor, shape)": 0.006134969325153374,
                "tf.reverse(tensor, axis)": 0.006134969325153374,
                "tf.roll(input, shift, axis)": 0.006134969325153374,
                "tf.round(x)": 0.006134969325153374,
                "tf.scatter_nd(indices, updates, shape)": 0.006134969325153374,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.006134969325153374,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.006134969325153374,
                "tf.sequence_mask(lengths)": 0.006134969325153374,
                "tf.sequence_mask(lengths, maxlen)": 0.006134969325153374,
                "tf.shape(input)": 0.006134969325153374,
                "tf.sign(x)": 0.006134969325153374,
                "tf.sort(values, axis)": 0.006134969325153374,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.006134969325153374,
                "tf.sqrt(x)": 0.006134969325153374,
                "tf.square(x)": 0.006134969325153374,
                "tf.squeeze(input)": 0.006134969325153374,
                "tf.squeeze(input, axis)": 0.006134969325153374,
                "tf.stack(values, axis)": 0.006134969325153374,
                "tf.subtract(x, y)": 0.006134969325153374,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.006134969325153374,
                "tf.tensordot(a, b, axes)": 0.006134969325153374,
                "tf.tile(input, multiples)": 0.006134969325153374,
                "tf.transpose(a)": 0.006134969325153374,
                "tf.transpose(a, perm)": 0.006134969325153374,
                "tf.unique_with_counts(x)": 0.006134969325153374,
                "tf.unstack(value, axis)": 0.006134969325153374,
                "tf.where(condition)": 0.006134969325153374,
                "tf.where(condition, x, y)": 0.006134969325153374,
                "tf.zeros(shape)": 0.006134969325153374,
                "tf.zeros_like(input)": 0.006134969325153374,
                "tf.SparseTensor(indices, values, dense_shape)": 0.006134969325153374,
                "tf.sparse.add(a, b)": 0.006134969325153374,
                "tf.sparse.concat(axis, sp_inputs)": 0.006134969325153374,
                "tf.sparse.expand_dims(sp_input, axis)": 0.006134969325153374,
                "tf.sparse.from_dense(tensor)": 0.006134969325153374,
                "tf.sparse.maximum(sp_a, sp_b)": 0.006134969325153374,
                "tf.sparse.minimum(sp_a, sp_b)": 0.006134969325153374,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.006134969325153374,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.006134969325153374,
                "tf.sparse.reset_shape(sp_input)": 0.006134969325153374,
                "tf.sparse.reshape(sp_input, shape)": 0.006134969325153374,
                "tf.sparse.retain(sp_input, to_retain)": 0.006134969325153374,
                "tf.sparse.slice(sp_input, start, size)": 0.006134969325153374,
                "tf.sparse.split(sp_input, num_split, axis)": 0.006134969325153374,
                "tf.sparse.to_dense(sp_input)": 0.006134969325153374,
                "tf.sparse.to_dense(sp_input, default_value)": 0.006134969325153374,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.006134969325153374,
                "tf.sparse.transpose(sp_input)": 0.006134969325153374,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.006134969325153374,
                "IndexingOperation": 0.006134969325153374,
                "PairCreationOperation": 0.006134969325153374,
                "SingletonTupleCreationOperation": 0.006134969325153374,
                "SlicingAxis0BothOperation": 0.006134969325153374,
                "SlicingAxis0LeftOperation": 0.006134969325153374,
                "SlicingAxis0RightOperation": 0.006134969325153374,
                "SlicingAxis1BothOperation": 0.006134969325153374,
                "SlicingAxis1LeftOperation": 0.006134969325153374,
                "SlicingAxis1RightOperation": 0.006134969325153374,
                "TripleCreationOperation": 0.006134969325153374
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 3,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 5,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "google_16",
        "completions": [
            "\ndef min_repeats(arr):\n    _, _, count = tf.unique_with_counts(arr)\n    return tf.reduce_min(count)\n\n",
            "\ndef min_repeats(input_list):\n    _, _, count = tf.unique_with_counts(input_list)\n    return tf.reduce_min(count)\n\n",
            "\ndef replicate_elements(input_list):\n    counts = tf.math.bincount(input_list)\n    non_zero_counts = tf.boolean_mask(counts, counts > 0)\n    min_count = tf.reduce_min(non_zero_counts)\n    return min_count\n\n",
            "\ninput_list = [1, 2, 0, 3]\n\nrepeats = 2\n\ninput_tensor = tf.constant(input_list)\n\noutput = tf.repeat(input_tensor, repeats)\n\n",
            "\ndef replicate_elements(input, repeat_times):\n    return tf.repeat(input, repeat_times)\n\ninput = tf.constant([1, 2, 0, 3])\nrepeat_times = 1\noutput = replicate_elements(input, repeat_times)\n",
            "\ndef replicate_elements(arr):\n    counts = tf.math.bincount(arr)\n    max_count = tf.reduce_max(counts)\n    return max_count\n\narr = tf.constant([2, 1, 2, 3])\n",
            "\ndef count_unique_elements(lst):\n    unique_elements = tf.unique_with_counts(lst).y\n    return tf.shape(unique_elements)[0]\n\nlst = tf.constant([1, 2, 0, 3])\n\nlst = tf.constant([2, 1, 2, 3])\n",
            "\ninput_tensor = tf.constant([1, 2, 0, 3])\noutput_tensor = tf.repeat(input_tensor, 1)\n\n",
            "\ndef replicate_elements(lst):\n    _, _, count = tf.unique_with_counts(lst)\n    return tf.reduce_min(count)\n\nlst = tf.constant([1, 2, 0, 3])\n",
            "\ndef most_frequent_element_count(lst):\n    _, _, count = tf.unique_with_counts(lst)\n    max_count = tf.reduce_max(count)\n    return max_count\n\nlst = tf.constant([1, 2, 0, 3])\n\nlst = tf.constant([2, 1, 2, 3])\n"
        ],
        "target-program": "tf.gather(in1, tf.where(tf.sequence_mask(in2))[:, 0])",
        "description": "replicate elements a given number of times",
        "tf_operators": {
            "tf.unique_with_counts": 5,
            "tf.reduce_min": 4,
            "tf.math.bincount": 2,
            "tf.boolean_mask": 1,
            "tf.repeat": 3,
            "tf.constant": 7,
            "tf.reduce_max": 2,
            "tf.shape": 1
        },
        "coverage_percentage": 0.0,
        "total_in_target": 3,
        "total_covered": 0,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005813953488372093,
                "tf.add(x, y)": 0.005813953488372093,
                "tf.add_n(inputs)": 0.005813953488372093,
                "tf.argmax(input, axis)": 0.005813953488372093,
                "tf.argmin(input, axis)": 0.005813953488372093,
                "tf.argsort(values, axis, stable=True)": 0.005813953488372093,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005813953488372093,
                "tf.boolean_mask(tensor, mask)": 0.011627906976744186,
                "tf.broadcast_to(input, shape)": 0.005813953488372093,
                "tf.cast(x, dtype)": 0.005813953488372093,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005813953488372093,
                "tf.concat(values, axis)": 0.005813953488372093,
                "tf.constant(value)": 0.05813953488372093,
                "tf.constant(value, dtype)": 0.005813953488372093,
                "tf.divide(x, y)": 0.005813953488372093,
                "tf.equal(x, y)": 0.005813953488372093,
                "tf.exp(x)": 0.005813953488372093,
                "tf.expand_dims(input, axis)": 0.005813953488372093,
                "tf.eye(num_rows)": 0.005813953488372093,
                "tf.eye(num_rows, num_columns)": 0.005813953488372093,
                "tf.eye(num_rows, dtype)": 0.005813953488372093,
                "tf.fill(dims, value)": 0.005813953488372093,
                "tf.gather(params, indices)": 0.005813953488372093,
                "tf.gather(params, indices, axis, batch_dims)": 0.005813953488372093,
                "tf.gather_nd(params, indices)": 0.005813953488372093,
                "tf.gather_nd(params, indices, batch_dims)": 0.005813953488372093,
                "tf.greater(x, y)": 0.005813953488372093,
                "tf.greater_equal(x, y)": 0.005813953488372093,
                "tf.math.bincount(arr)": 0.005813953488372093,
                "tf.math.ceil(x)": 0.005813953488372093,
                "tf.math.count_nonzero(input)": 0.005813953488372093,
                "tf.math.count_nonzero(input, axis)": 0.005813953488372093,
                "tf.math.cumsum(x, axis)": 0.005813953488372093,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005813953488372093,
                "tf.math.divide_no_nan(x, y)": 0.005813953488372093,
                "tf.math.floor(x)": 0.005813953488372093,
                "tf.math.log(x)": 0.005813953488372093,
                "tf.math.logical_and(x, y)": 0.005813953488372093,
                "tf.math.logical_not(x)": 0.005813953488372093,
                "tf.math.logical_or(x, y)": 0.005813953488372093,
                "tf.math.logical_xor(x, y)": 0.005813953488372093,
                "tf.math.negative(x)": 0.005813953488372093,
                "tf.math.reciprocal(x)": 0.005813953488372093,
                "tf.math.reciprocal_no_nan(x)": 0.005813953488372093,
                "tf.math.segment_max(data, segment_ids)": 0.005813953488372093,
                "tf.math.segment_mean(data, segment_ids)": 0.005813953488372093,
                "tf.math.segment_min(data, segment_ids)": 0.005813953488372093,
                "tf.math.segment_prod(data, segment_ids)": 0.005813953488372093,
                "tf.math.segment_sum(data, segment_ids)": 0.005813953488372093,
                "tf.math.squared_difference(x, y)": 0.005813953488372093,
                "tf.math.top_k(input, k)": 0.005813953488372093,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005813953488372093,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005813953488372093,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005813953488372093,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005813953488372093,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005813953488372093,
                "tf.matmul(a, b)": 0.005813953488372093,
                "tf.maximum(x, y)": 0.005813953488372093,
                "tf.minimum(x, y)": 0.005813953488372093,
                "tf.multiply(x, y)": 0.005813953488372093,
                "tf.not_equal(x, y)": 0.005813953488372093,
                "tf.one_hot(indices, depth)": 0.005813953488372093,
                "tf.ones(shape)": 0.005813953488372093,
                "tf.ones_like(input)": 0.005813953488372093,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005813953488372093,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005813953488372093,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005813953488372093,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005813953488372093,
                "tf.range(start)": 0.005813953488372093,
                "tf.range(start, limit, delta)": 0.005813953488372093,
                "tf.reduce_any(input_tensor, axis)": 0.005813953488372093,
                "tf.reduce_all(input_tensor, axis)": 0.005813953488372093,
                "tf.reduce_max(input_tensor)": 0.01744186046511628,
                "tf.reduce_max(input_tensor, axis)": 0.005813953488372093,
                "tf.reduce_mean(input_tensor)": 0.005813953488372093,
                "tf.reduce_mean(input_tensor, axis)": 0.005813953488372093,
                "tf.reduce_min(input_tensor)": 0.029069767441860465,
                "tf.reduce_min(input_tensor, axis)": 0.005813953488372093,
                "tf.reduce_prod(input_tensor, axis)": 0.005813953488372093,
                "tf.reduce_sum(input_tensor)": 0.005813953488372093,
                "tf.reduce_sum(input_tensor, axis)": 0.005813953488372093,
                "tf.repeat(input, repeats)": 0.023255813953488372,
                "tf.repeat(input, repeats, axis)": 0.005813953488372093,
                "tf.reshape(tensor, shape)": 0.005813953488372093,
                "tf.reverse(tensor, axis)": 0.005813953488372093,
                "tf.roll(input, shift, axis)": 0.005813953488372093,
                "tf.round(x)": 0.005813953488372093,
                "tf.scatter_nd(indices, updates, shape)": 0.005813953488372093,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005813953488372093,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005813953488372093,
                "tf.sequence_mask(lengths)": 0.005813953488372093,
                "tf.sequence_mask(lengths, maxlen)": 0.005813953488372093,
                "tf.shape(input)": 0.011627906976744186,
                "tf.sign(x)": 0.005813953488372093,
                "tf.sort(values, axis)": 0.005813953488372093,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005813953488372093,
                "tf.sqrt(x)": 0.005813953488372093,
                "tf.square(x)": 0.005813953488372093,
                "tf.squeeze(input)": 0.005813953488372093,
                "tf.squeeze(input, axis)": 0.005813953488372093,
                "tf.stack(values, axis)": 0.005813953488372093,
                "tf.subtract(x, y)": 0.005813953488372093,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005813953488372093,
                "tf.tensordot(a, b, axes)": 0.005813953488372093,
                "tf.tile(input, multiples)": 0.005813953488372093,
                "tf.transpose(a)": 0.005813953488372093,
                "tf.transpose(a, perm)": 0.005813953488372093,
                "tf.unique_with_counts(x)": 0.03488372093023256,
                "tf.unstack(value, axis)": 0.005813953488372093,
                "tf.where(condition)": 0.005813953488372093,
                "tf.where(condition, x, y)": 0.005813953488372093,
                "tf.zeros(shape)": 0.005813953488372093,
                "tf.zeros_like(input)": 0.005813953488372093,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005813953488372093,
                "tf.sparse.add(a, b)": 0.005813953488372093,
                "tf.sparse.concat(axis, sp_inputs)": 0.005813953488372093,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005813953488372093,
                "tf.sparse.from_dense(tensor)": 0.005813953488372093,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005813953488372093,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005813953488372093,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005813953488372093,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005813953488372093,
                "tf.sparse.reset_shape(sp_input)": 0.005813953488372093,
                "tf.sparse.reshape(sp_input, shape)": 0.005813953488372093,
                "tf.sparse.retain(sp_input, to_retain)": 0.005813953488372093,
                "tf.sparse.slice(sp_input, start, size)": 0.005813953488372093,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005813953488372093,
                "tf.sparse.to_dense(sp_input)": 0.005813953488372093,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005813953488372093,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005813953488372093,
                "tf.sparse.transpose(sp_input)": 0.005813953488372093,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005813953488372093,
                "IndexingOperation": 0.011627906976744186,
                "PairCreationOperation": 0.005813953488372093,
                "SingletonTupleCreationOperation": 0.005813953488372093,
                "SlicingAxis0BothOperation": 0.005813953488372093,
                "SlicingAxis0LeftOperation": 0.005813953488372093,
                "SlicingAxis0RightOperation": 0.005813953488372093,
                "SlicingAxis1BothOperation": 0.005813953488372093,
                "SlicingAxis1LeftOperation": 0.005813953488372093,
                "SlicingAxis1RightOperation": 0.005813953488372093,
                "TripleCreationOperation": 0.029069767441860465
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 6,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 6,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 5,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 5,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 6,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 5,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 6,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 5
            }
        }
    },
    {
        "task_id": "google_17",
        "completions": [
            "\nbool_tensor = tf.constant([True, False, False, True, False])\ntrue_count = tf.math.count_nonzero(bool_tensor)\n\nnum_tensor = tf.constant([1, 2, 3, 4, 5])\nneg_sum = tf.math.negative(tf.reduce_sum(num_tensor))\n",
            "\nbool_tensor = tf.constant([True, False, False, True, False])\ncount_true = tf.math.count_nonzero(bool_tensor)\n\ntensor = tf.constant([1, 2, 3, 4, 5])\nneg_sum = tf.reduce_sum(tf.math.negative(tensor))\n",
            "\nbool_array = tf.constant([True, False, False, True, False])\ncount_true = tf.math.count_nonzero(bool_array)\n\nint_array = tf.constant([1, 2, 3, 4, 5])\nproduct = tf.reduce_prod(int_array)\n\n",
            "\nbool_tensor = tf.constant([True, False, False, True, False])\nresult = tf.math.count_nonzero(bool_tensor)\n",
            "\ndef sum_elements(input, condition):\n    input_tensor = tf.constant(input)\n    condition_tensor = tf.constant(condition)\n    mask = tf.boolean_mask(input_tensor, condition_tensor)\n    sum_elements = tf.reduce_sum(mask)\n    if tf.reduce_any(tf.math.logical_not(condition_tensor)):\n        sum_elements = tf.math.negative(sum_elements)\n    return sum_elements\n",
            "\nbool_tensor = tf.constant([True, False, False, True, False])\nint_tensor = tf.constant([1, 2, 3, 4, 5])\n\nresult_tensor = tf.where(bool_tensor, int_tensor, 0)\n",
            "\nbool_tensor = tf.constant([True, False, False, True, False])\nint_tensor = tf.cast(bool_tensor, tf.int32)\nsum_of_trues = tf.reduce_sum(int_tensor)\n",
            "\ninput_tensor = tf.constant([True, False, False, True, False])\n\noutput = tf.math.count_nonzero(input_tensor)\n\n",
            "\ndef check_tensor(bool_tensor, num_list):\n    bool_tensor = tf.constant(bool_tensor)\n    num_tensor = tf.constant(num_list)\n    \n    if tf.reduce_all(bool_tensor):\n        return 1\n    else:\n        return tf.math.negative(tf.reduce_sum(num_tensor))\n\n",
            "\ndef process_input(input):\n    tensor = tf.constant(input)\n    tensor = tf.cast(tensor, tf.int32)\n    sum = tf.reduce_sum(tensor)\n    return tf.math.negative(sum)\n"
        ],
        "target-program": "tf.where(in1, in2, tf.multiply(in2, -10))",
        "description": "use bool tensor as condition",
        "tf_operators": {
            "tf.math.negative": 5,
            "tf.math.count_nonzero": 4,
            "tf.reduce_sum": 5,
            "tf.constant": 8,
            "tf.reduce_prod": 1,
            "tf.boolean_mask": 1,
            "tf.reduce_any": 1,
            "tf.math.logical_not": 1,
            "tf.where": 1,
            "tf.reduce_all": 1,
            "tf.cast": 1,
            "tf.int32": 1
        },
        "coverage_percentage": 50.0,
        "total_in_target": 2,
        "total_covered": 1,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005847953216374269,
                "tf.add(x, y)": 0.005847953216374269,
                "tf.add_n(inputs)": 0.005847953216374269,
                "tf.argmax(input, axis)": 0.005847953216374269,
                "tf.argmin(input, axis)": 0.005847953216374269,
                "tf.argsort(values, axis, stable=True)": 0.005847953216374269,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005847953216374269,
                "tf.boolean_mask(tensor, mask)": 0.011695906432748537,
                "tf.broadcast_to(input, shape)": 0.005847953216374269,
                "tf.cast(x, dtype)": 0.017543859649122806,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005847953216374269,
                "tf.concat(values, axis)": 0.005847953216374269,
                "tf.constant(value)": 0.09941520467836257,
                "tf.constant(value, dtype)": 0.005847953216374269,
                "tf.divide(x, y)": 0.005847953216374269,
                "tf.equal(x, y)": 0.005847953216374269,
                "tf.exp(x)": 0.005847953216374269,
                "tf.expand_dims(input, axis)": 0.005847953216374269,
                "tf.eye(num_rows)": 0.005847953216374269,
                "tf.eye(num_rows, num_columns)": 0.005847953216374269,
                "tf.eye(num_rows, dtype)": 0.005847953216374269,
                "tf.fill(dims, value)": 0.005847953216374269,
                "tf.gather(params, indices)": 0.005847953216374269,
                "tf.gather(params, indices, axis, batch_dims)": 0.005847953216374269,
                "tf.gather_nd(params, indices)": 0.005847953216374269,
                "tf.gather_nd(params, indices, batch_dims)": 0.005847953216374269,
                "tf.greater(x, y)": 0.005847953216374269,
                "tf.greater_equal(x, y)": 0.005847953216374269,
                "tf.math.bincount(arr)": 0.005847953216374269,
                "tf.math.ceil(x)": 0.005847953216374269,
                "tf.math.count_nonzero(input)": 0.005847953216374269,
                "tf.math.count_nonzero(input, axis)": 0.005847953216374269,
                "tf.math.cumsum(x, axis)": 0.005847953216374269,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005847953216374269,
                "tf.math.divide_no_nan(x, y)": 0.005847953216374269,
                "tf.math.floor(x)": 0.005847953216374269,
                "tf.math.log(x)": 0.005847953216374269,
                "tf.math.logical_and(x, y)": 0.005847953216374269,
                "tf.math.logical_not(x)": 0.005847953216374269,
                "tf.math.logical_or(x, y)": 0.005847953216374269,
                "tf.math.logical_xor(x, y)": 0.005847953216374269,
                "tf.math.negative(x)": 0.005847953216374269,
                "tf.math.reciprocal(x)": 0.005847953216374269,
                "tf.math.reciprocal_no_nan(x)": 0.005847953216374269,
                "tf.math.segment_max(data, segment_ids)": 0.005847953216374269,
                "tf.math.segment_mean(data, segment_ids)": 0.005847953216374269,
                "tf.math.segment_min(data, segment_ids)": 0.005847953216374269,
                "tf.math.segment_prod(data, segment_ids)": 0.005847953216374269,
                "tf.math.segment_sum(data, segment_ids)": 0.005847953216374269,
                "tf.math.squared_difference(x, y)": 0.005847953216374269,
                "tf.math.top_k(input, k)": 0.005847953216374269,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005847953216374269,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005847953216374269,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005847953216374269,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005847953216374269,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005847953216374269,
                "tf.matmul(a, b)": 0.005847953216374269,
                "tf.maximum(x, y)": 0.005847953216374269,
                "tf.minimum(x, y)": 0.005847953216374269,
                "tf.multiply(x, y)": 0.005847953216374269,
                "tf.not_equal(x, y)": 0.005847953216374269,
                "tf.one_hot(indices, depth)": 0.005847953216374269,
                "tf.ones(shape)": 0.005847953216374269,
                "tf.ones_like(input)": 0.005847953216374269,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005847953216374269,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005847953216374269,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005847953216374269,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005847953216374269,
                "tf.range(start)": 0.005847953216374269,
                "tf.range(start, limit, delta)": 0.005847953216374269,
                "tf.reduce_any(input_tensor, axis)": 0.011695906432748537,
                "tf.reduce_all(input_tensor, axis)": 0.011695906432748537,
                "tf.reduce_max(input_tensor)": 0.005847953216374269,
                "tf.reduce_max(input_tensor, axis)": 0.005847953216374269,
                "tf.reduce_mean(input_tensor)": 0.005847953216374269,
                "tf.reduce_mean(input_tensor, axis)": 0.005847953216374269,
                "tf.reduce_min(input_tensor)": 0.005847953216374269,
                "tf.reduce_min(input_tensor, axis)": 0.005847953216374269,
                "tf.reduce_prod(input_tensor, axis)": 0.011695906432748537,
                "tf.reduce_sum(input_tensor)": 0.04093567251461988,
                "tf.reduce_sum(input_tensor, axis)": 0.005847953216374269,
                "tf.repeat(input, repeats)": 0.005847953216374269,
                "tf.repeat(input, repeats, axis)": 0.005847953216374269,
                "tf.reshape(tensor, shape)": 0.005847953216374269,
                "tf.reverse(tensor, axis)": 0.005847953216374269,
                "tf.roll(input, shift, axis)": 0.005847953216374269,
                "tf.round(x)": 0.005847953216374269,
                "tf.scatter_nd(indices, updates, shape)": 0.005847953216374269,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005847953216374269,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005847953216374269,
                "tf.sequence_mask(lengths)": 0.005847953216374269,
                "tf.sequence_mask(lengths, maxlen)": 0.005847953216374269,
                "tf.shape(input)": 0.005847953216374269,
                "tf.sign(x)": 0.005847953216374269,
                "tf.sort(values, axis)": 0.005847953216374269,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005847953216374269,
                "tf.sqrt(x)": 0.005847953216374269,
                "tf.square(x)": 0.005847953216374269,
                "tf.squeeze(input)": 0.005847953216374269,
                "tf.squeeze(input, axis)": 0.005847953216374269,
                "tf.stack(values, axis)": 0.005847953216374269,
                "tf.subtract(x, y)": 0.005847953216374269,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005847953216374269,
                "tf.tensordot(a, b, axes)": 0.005847953216374269,
                "tf.tile(input, multiples)": 0.005847953216374269,
                "tf.transpose(a)": 0.005847953216374269,
                "tf.transpose(a, perm)": 0.005847953216374269,
                "tf.unique_with_counts(x)": 0.005847953216374269,
                "tf.unstack(value, axis)": 0.005847953216374269,
                "tf.where(condition)": 0.005847953216374269,
                "tf.where(condition, x, y)": 0.011695906432748537,
                "tf.zeros(shape)": 0.005847953216374269,
                "tf.zeros_like(input)": 0.005847953216374269,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005847953216374269,
                "tf.sparse.add(a, b)": 0.005847953216374269,
                "tf.sparse.concat(axis, sp_inputs)": 0.005847953216374269,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005847953216374269,
                "tf.sparse.from_dense(tensor)": 0.005847953216374269,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005847953216374269,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005847953216374269,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005847953216374269,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005847953216374269,
                "tf.sparse.reset_shape(sp_input)": 0.005847953216374269,
                "tf.sparse.reshape(sp_input, shape)": 0.005847953216374269,
                "tf.sparse.retain(sp_input, to_retain)": 0.005847953216374269,
                "tf.sparse.slice(sp_input, start, size)": 0.005847953216374269,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005847953216374269,
                "tf.sparse.to_dense(sp_input)": 0.005847953216374269,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005847953216374269,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005847953216374269,
                "tf.sparse.transpose(sp_input)": 0.005847953216374269,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005847953216374269,
                "IndexingOperation": 0.005847953216374269,
                "PairCreationOperation": 0.005847953216374269,
                "SingletonTupleCreationOperation": 0.005847953216374269,
                "SlicingAxis0BothOperation": 0.005847953216374269,
                "SlicingAxis0LeftOperation": 0.005847953216374269,
                "SlicingAxis0RightOperation": 0.005847953216374269,
                "SlicingAxis1BothOperation": 0.005847953216374269,
                "SlicingAxis1LeftOperation": 0.005847953216374269,
                "SlicingAxis1RightOperation": 0.005847953216374269,
                "TripleCreationOperation": 0.005847953216374269
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 6,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 6,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 3,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 6,
                "tf.reduce_all(input_tensor, axis)": 6,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 6,
                "tf.reduce_sum(input_tensor)": 5,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 6,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "google_18",
        "completions": [
            "\ndef sum_partitioned_by_second_tensor(tensor1, tensor2):\n    num_segments = tf.reduce_max(tensor2) + 1\n    result = tf.math.unsorted_segment_sum(tensor1, tensor2, num_segments)\n    total_sum = tf.reduce_sum(result)\n    return total_sum\n\ntensor1 = tf.constant([5, 7, -12, 10, 20])\ntensor2 = tf.constant([1, 2, 3, 1, 2])\noutput = sum_partitioned_by_second_tensor(tensor1, tensor2)\n",
            "\ndef sum_partitioned_elements(tensor1, tensor2):\n    return tf.math.unsorted_segment_sum(tensor1, tensor2, tf.reduce_max(tensor2) + 1)\n\ntensor1 = tf.constant([5, 7, -12, 10, 20])\ntensor2 = tf.constant([0, 0, 1, 1, 1])\n\ntensor1 = tf.constant([1, 2, 3, 1, 2])\ntensor2 = tf.constant([0, 0, 0, 0, 0])\n",
            "\ndef sum_partitioned_by_second_tensor(tensor1, tensor2):\n    return tf.math.unsorted_segment_sum(tensor1, tensor2, tf.reduce_max(tensor2) + 1)\n\ntensor1 = tf.constant([5, 7, -12, 10, 20])\ntensor2 = tf.constant([1, 2, 3, 1, 2])\n",
            "\ndef sum_partitioned_elements(tensor1, tensor2):\n    num_segments = tf.reduce_max(tensor2) + 1\n    return tf.math.unsorted_segment_sum(tensor1, tensor2, num_segments)\n\ntensor1 = tf.constant([5, 7, -12, 10, 20])\ntensor2 = tf.constant([1, 2, 3, 1, 2])\n\n",
            "\ntensor1 = tf.constant([5, 7, -12, 10, 20])\ntensor2 = tf.constant([1, 2, 3, 1, 2])\n\nresult = tf.math.unsorted_segment_sum(tensor1, tensor2, tf.reduce_max(tensor2) + 1)\n\ntotal = tf.reduce_sum(result)\n\n",
            "\ndef segmented_sum(data, segments):\n    data_tf = tf.constant(data)\n    segments_tf = tf.constant(segments)\n    num_segments = tf.reduce_max(segments_tf) + 1\n    return tf.reduce_sum(tf.math.unsorted_segment_sum(data_tf, segments_tf, num_segments))\n\n",
            "\ndef sum_partitioned_elements(tensor1, tensor2):\n    return tf.reduce_sum(tf.math.unsorted_segment_sum(tensor1, tensor2, tf.reduce_max(tensor2) + 1))\n\ntensor1 = tf.constant([5, 7, -12, 10, 20])\ntensor2 = tf.constant([0, 1, 2, 0, 1])\n\n",
            "\ndef sum_elements_partitioned(data, segments):\n    return tf.math.unsorted_segment_sum(data, segments, tf.reduce_max(segments)+1)\n\ndata = tf.constant([5, 7, -12, 10, 20])\nsegments = tf.constant([1, 2, 3, 1, 2])\nresult = sum_elements_partitioned(data, segments)\n\ndata = tf.constant([1, 2, 3, 1, 2])\nsegments = tf.constant([1, 2, 3, 1, 2])\nresult = sum_elements_partitioned(data, segments)\n",
            "\ndef sum_partitioned_elements(tensor1, tensor2):\n    num_segments = tf.reduce_max(tensor2) + 1\n    return tf.math.unsorted_segment_sum(tensor1, tensor2, num_segments)\n\ntensor1 = tf.constant([5, 7, -12, 10, 20])\ntensor2 = tf.constant([0, 1, 0, 1, 0])\n\ntensor1 = tf.constant([1, 2, 3, 1, 2])\ntensor2 = tf.constant([0, 0, 0, 0, 0])\n",
            "\ndef sum_partitioned_elements(tensor1, tensor2):\n    num_segments = tf.reduce_max(tensor2) + 1\n    return tf.math.unsorted_segment_sum(tensor1, tensor2, num_segments)\n\ntensor1 = tf.constant([5, 7, -12, 10, 20])\ntensor2 = tf.constant([0, 0, 0, 0, 0])\n\ntensor1 = tf.constant([1, 2, 3, 1, 2])\ntensor2 = tf.constant([0, 0, 0, 0, 0])\n"
        ],
        "target-program": "tf.linalg.matvec(tf.cast(tf.equal(in2[:, None], in2), tf.int32), in1)",
        "description": "(\\'sum of elements in the first tensor but partitioned by the second tensor\\')",
        "tf_operators": {
            "tf.math.unsorted_segment_sum": 10,
            "tf.constant": 10,
            "tf.reduce_max": 10,
            "tf.reduce_sum": 4
        },
        "coverage_percentage": 0.0,
        "total_in_target": 4,
        "total_covered": 0,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005434782608695652,
                "tf.add(x, y)": 0.005434782608695652,
                "tf.add_n(inputs)": 0.005434782608695652,
                "tf.argmax(input, axis)": 0.005434782608695652,
                "tf.argmin(input, axis)": 0.005434782608695652,
                "tf.argsort(values, axis, stable=True)": 0.005434782608695652,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005434782608695652,
                "tf.boolean_mask(tensor, mask)": 0.005434782608695652,
                "tf.broadcast_to(input, shape)": 0.005434782608695652,
                "tf.cast(x, dtype)": 0.005434782608695652,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005434782608695652,
                "tf.concat(values, axis)": 0.005434782608695652,
                "tf.constant(value)": 0.15760869565217392,
                "tf.constant(value, dtype)": 0.005434782608695652,
                "tf.divide(x, y)": 0.005434782608695652,
                "tf.equal(x, y)": 0.005434782608695652,
                "tf.exp(x)": 0.005434782608695652,
                "tf.expand_dims(input, axis)": 0.005434782608695652,
                "tf.eye(num_rows)": 0.005434782608695652,
                "tf.eye(num_rows, num_columns)": 0.005434782608695652,
                "tf.eye(num_rows, dtype)": 0.005434782608695652,
                "tf.fill(dims, value)": 0.005434782608695652,
                "tf.gather(params, indices)": 0.005434782608695652,
                "tf.gather(params, indices, axis, batch_dims)": 0.005434782608695652,
                "tf.gather_nd(params, indices)": 0.005434782608695652,
                "tf.gather_nd(params, indices, batch_dims)": 0.005434782608695652,
                "tf.greater(x, y)": 0.005434782608695652,
                "tf.greater_equal(x, y)": 0.005434782608695652,
                "tf.math.bincount(arr)": 0.005434782608695652,
                "tf.math.ceil(x)": 0.005434782608695652,
                "tf.math.count_nonzero(input)": 0.005434782608695652,
                "tf.math.count_nonzero(input, axis)": 0.005434782608695652,
                "tf.math.cumsum(x, axis)": 0.005434782608695652,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005434782608695652,
                "tf.math.divide_no_nan(x, y)": 0.005434782608695652,
                "tf.math.floor(x)": 0.005434782608695652,
                "tf.math.log(x)": 0.005434782608695652,
                "tf.math.logical_and(x, y)": 0.005434782608695652,
                "tf.math.logical_not(x)": 0.005434782608695652,
                "tf.math.logical_or(x, y)": 0.005434782608695652,
                "tf.math.logical_xor(x, y)": 0.005434782608695652,
                "tf.math.negative(x)": 0.005434782608695652,
                "tf.math.reciprocal(x)": 0.005434782608695652,
                "tf.math.reciprocal_no_nan(x)": 0.005434782608695652,
                "tf.math.segment_max(data, segment_ids)": 0.005434782608695652,
                "tf.math.segment_mean(data, segment_ids)": 0.005434782608695652,
                "tf.math.segment_min(data, segment_ids)": 0.005434782608695652,
                "tf.math.segment_prod(data, segment_ids)": 0.005434782608695652,
                "tf.math.segment_sum(data, segment_ids)": 0.005434782608695652,
                "tf.math.squared_difference(x, y)": 0.005434782608695652,
                "tf.math.top_k(input, k)": 0.005434782608695652,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005434782608695652,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005434782608695652,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005434782608695652,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005434782608695652,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005434782608695652,
                "tf.matmul(a, b)": 0.005434782608695652,
                "tf.maximum(x, y)": 0.005434782608695652,
                "tf.minimum(x, y)": 0.005434782608695652,
                "tf.multiply(x, y)": 0.005434782608695652,
                "tf.not_equal(x, y)": 0.005434782608695652,
                "tf.one_hot(indices, depth)": 0.005434782608695652,
                "tf.ones(shape)": 0.005434782608695652,
                "tf.ones_like(input)": 0.005434782608695652,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005434782608695652,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005434782608695652,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005434782608695652,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005434782608695652,
                "tf.range(start)": 0.005434782608695652,
                "tf.range(start, limit, delta)": 0.005434782608695652,
                "tf.reduce_any(input_tensor, axis)": 0.005434782608695652,
                "tf.reduce_all(input_tensor, axis)": 0.005434782608695652,
                "tf.reduce_max(input_tensor)": 0.059782608695652176,
                "tf.reduce_max(input_tensor, axis)": 0.005434782608695652,
                "tf.reduce_mean(input_tensor)": 0.005434782608695652,
                "tf.reduce_mean(input_tensor, axis)": 0.005434782608695652,
                "tf.reduce_min(input_tensor)": 0.005434782608695652,
                "tf.reduce_min(input_tensor, axis)": 0.005434782608695652,
                "tf.reduce_prod(input_tensor, axis)": 0.005434782608695652,
                "tf.reduce_sum(input_tensor)": 0.02717391304347826,
                "tf.reduce_sum(input_tensor, axis)": 0.005434782608695652,
                "tf.repeat(input, repeats)": 0.005434782608695652,
                "tf.repeat(input, repeats, axis)": 0.005434782608695652,
                "tf.reshape(tensor, shape)": 0.005434782608695652,
                "tf.reverse(tensor, axis)": 0.005434782608695652,
                "tf.roll(input, shift, axis)": 0.005434782608695652,
                "tf.round(x)": 0.005434782608695652,
                "tf.scatter_nd(indices, updates, shape)": 0.005434782608695652,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005434782608695652,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005434782608695652,
                "tf.sequence_mask(lengths)": 0.005434782608695652,
                "tf.sequence_mask(lengths, maxlen)": 0.005434782608695652,
                "tf.shape(input)": 0.005434782608695652,
                "tf.sign(x)": 0.005434782608695652,
                "tf.sort(values, axis)": 0.005434782608695652,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005434782608695652,
                "tf.sqrt(x)": 0.005434782608695652,
                "tf.square(x)": 0.005434782608695652,
                "tf.squeeze(input)": 0.005434782608695652,
                "tf.squeeze(input, axis)": 0.005434782608695652,
                "tf.stack(values, axis)": 0.005434782608695652,
                "tf.subtract(x, y)": 0.005434782608695652,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005434782608695652,
                "tf.tensordot(a, b, axes)": 0.005434782608695652,
                "tf.tile(input, multiples)": 0.005434782608695652,
                "tf.transpose(a)": 0.005434782608695652,
                "tf.transpose(a, perm)": 0.005434782608695652,
                "tf.unique_with_counts(x)": 0.005434782608695652,
                "tf.unstack(value, axis)": 0.005434782608695652,
                "tf.where(condition)": 0.005434782608695652,
                "tf.where(condition, x, y)": 0.005434782608695652,
                "tf.zeros(shape)": 0.005434782608695652,
                "tf.zeros_like(input)": 0.005434782608695652,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005434782608695652,
                "tf.sparse.add(a, b)": 0.005434782608695652,
                "tf.sparse.concat(axis, sp_inputs)": 0.005434782608695652,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005434782608695652,
                "tf.sparse.from_dense(tensor)": 0.005434782608695652,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005434782608695652,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005434782608695652,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005434782608695652,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005434782608695652,
                "tf.sparse.reset_shape(sp_input)": 0.005434782608695652,
                "tf.sparse.reshape(sp_input, shape)": 0.005434782608695652,
                "tf.sparse.retain(sp_input, to_retain)": 0.005434782608695652,
                "tf.sparse.slice(sp_input, start, size)": 0.005434782608695652,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005434782608695652,
                "tf.sparse.to_dense(sp_input)": 0.005434782608695652,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005434782608695652,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005434782608695652,
                "tf.sparse.transpose(sp_input)": 0.005434782608695652,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005434782608695652,
                "IndexingOperation": 0.005434782608695652,
                "PairCreationOperation": 0.005434782608695652,
                "SingletonTupleCreationOperation": 0.005434782608695652,
                "SlicingAxis0BothOperation": 0.005434782608695652,
                "SlicingAxis0LeftOperation": 0.005434782608695652,
                "SlicingAxis0RightOperation": 0.005434782608695652,
                "SlicingAxis1BothOperation": 0.005434782608695652,
                "SlicingAxis1LeftOperation": 0.005434782608695652,
                "SlicingAxis1RightOperation": 0.005434782608695652,
                "TripleCreationOperation": 0.005434782608695652
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 3,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 4,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 5,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8
            }
        }
    },
    {
        "task_id": "google_19",
        "completions": [
            "\ndef scatter_tensor(input_tensor, output_indices):\n    return tf.gather(input_tensor, output_indices, axis=1)\n\ninput_tensor = tf.constant([[11, 12, 13], [30, 20, 10], [77, 88, 99]])\noutput_indices = tf.constant([[2, 0, 1], [1, 0, 2], [0, 2, 1]])\n\nresult = scatter_tensor(input_tensor, output_indices)\n",
            "\ndef rearrange_elements(input_tensor, indices_tensor):\n    return tf.map_fn(lambda x: tf.gather(x[0], x[1]), (input_tensor, indices_tensor), dtype=tf.int32)\n\ninput_tensor = tf.constant([[11, 12, 13], [30, 20, 10], [77, 88, 99]])\nindices_tensor = tf.constant([[2, 0, 1], [1, 0, 2], [0, 2, 1]])\n\noutput_tensor = rearrange_elements(input_tensor, indices_tensor)\n",
            "\ndef scatter_tensor(data_tensor, index_tensor):\n    result = []\n    for i in range(len(data_tensor)):\n        result.append(tf.gather(data_tensor[i], index_tensor[i]))\n    return result\n\ndata_tensor = tf.constant([[11, 12, 13], [30, 20, 10], [77, 88, 99]])\nindex_tensor = tf.constant([[2, 0, 1], [1, 0, 2], [0, 2, 1]])\n\noutput = scatter_tensor(data_tensor, index_tensor)\n",
            "\ntensor = tf.constant([[11, 12, 13], [30, 20, 10], [77, 88, 99]])\nindices = tf.constant([[2, 0, 1], [1, 0, 2], [0, 2, 1]])\n\noutput = tf.map_fn(lambda x: tf.gather(x[0], x[1]), (tensor, indices), dtype=tf.int32)\n\n",
            "\ndef scatter_tensor(input1, input2):\n    flat_input1 = tf.reshape(input1, [-1])\n    flat_input2 = tf.reshape(input2, [-1])\n    return tf.gather(flat_input2, flat_input1)\n\ninput1 = tf.constant([[11, 12, 13], [30, 20, 10], [77, 88, 99]])\ninput2 = tf.constant([[2, 0, 1], [1, 0, 2], [0, 2, 1]])\noutput = scatter_tensor(input1, input2)\n",
            "\ndef rearrange_elements(tensor, indices):\n    result = []\n    for i in range(tf.shape(tensor)[0]):\n        result.append(tf.gather(tensor[i], indices[i]))\n    return tf.stack(result)\n\ntensor = tf.constant([[11, 12, 13], [30, 20, 10], [77, 88, 99]])\nindices = tf.constant([[2, 0, 1], [1, 0, 2], [0, 2, 1]])\n\n",
            "\ndef scatter_tensor(tensor, indices):\n    tensor = tf.constant(tensor)\n    indices = tf.constant(indices)\n    return tf.gather(tensor, indices, axis=1)\n\ntensor = [[11, 12, 13], [30, 20, 10], [77, 88, 99]]\nindices = [[2, 0, 1], [1, 0, 2], [0, 2, 1]]\n",
            "\ndef scatter_tensor(tensor, indices):\n    tensor = tf.constant(tensor)\n    indices = tf.constant(indices)\n    result = tf.gather(tensor, indices)\n    return result.numpy()\n\ntensor = [[11, 12, 13], [30, 20, 10], [77, 88, 99]]\nindices = [[2, 0, 1], [1, 0, 2], [0, 2, 1]]\n",
            "\ndef scatter_2d_tensor(values, indices):\n    return tf.gather(values, indices, axis=1)\n\nvalues = tf.constant([[11, 12, 13], [30, 20, 10], [77, 88, 99]])\nindices = tf.constant([[2, 0, 1], [1, 0, 2], [0, 2, 1]])\n\noutput = scatter_2d_tensor(values, indices)\noutput\n",
            "\ndef scatter_tensor(input_list, indices_list):\n    input_tensor = tf.constant(input_list, dtype=tf.int32)\n    indices_tensor = tf.constant(indices_list, dtype=tf.int32)\n    output_list = []\n    for i in range(input_tensor.shape[0]):\n        output_list.append(tf.gather(input_tensor[i], indices_tensor[i]))\n    output_tensor = tf.stack(output_list)\n    return output_tensor\n\ninput_list = [[11, 12, 13], [30, 20, 10], [77, 88, 99]]\nindices_list = [[2, 0, 1], [1, 0, 2], [0, 2, 1]]\n"
        ],
        "target-program": "tf.gather(in1, tf.argsort(in2, axis=1), batch_dims=1)",
        "description": "scatter a 2-D tensor with indices",
        "tf_operators": {
            "tf.gather": 10,
            "tf.constant": 10,
            "tf.int32": 3,
            "tf.map_fn": 2,
            "tf.reshape": 1,
            "tf.shape": 1,
            "tf.stack": 2
        },
        "coverage_percentage": 50.0,
        "total_in_target": 2,
        "total_covered": 1,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005291005291005291,
                "tf.add(x, y)": 0.005291005291005291,
                "tf.add_n(inputs)": 0.005291005291005291,
                "tf.argmax(input, axis)": 0.005291005291005291,
                "tf.argmin(input, axis)": 0.005291005291005291,
                "tf.argsort(values, axis, stable=True)": 0.005291005291005291,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005291005291005291,
                "tf.boolean_mask(tensor, mask)": 0.005291005291005291,
                "tf.broadcast_to(input, shape)": 0.005291005291005291,
                "tf.cast(x, dtype)": 0.005291005291005291,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005291005291005291,
                "tf.concat(values, axis)": 0.005291005291005291,
                "tf.constant(value)": 0.10052910052910052,
                "tf.constant(value, dtype)": 0.005291005291005291,
                "tf.divide(x, y)": 0.005291005291005291,
                "tf.equal(x, y)": 0.005291005291005291,
                "tf.exp(x)": 0.005291005291005291,
                "tf.expand_dims(input, axis)": 0.005291005291005291,
                "tf.eye(num_rows)": 0.005291005291005291,
                "tf.eye(num_rows, num_columns)": 0.005291005291005291,
                "tf.eye(num_rows, dtype)": 0.005291005291005291,
                "tf.fill(dims, value)": 0.005291005291005291,
                "tf.gather(params, indices)": 0.042328042328042326,
                "tf.gather(params, indices, axis, batch_dims)": 0.021164021164021163,
                "tf.gather_nd(params, indices)": 0.005291005291005291,
                "tf.gather_nd(params, indices, batch_dims)": 0.005291005291005291,
                "tf.greater(x, y)": 0.005291005291005291,
                "tf.greater_equal(x, y)": 0.005291005291005291,
                "tf.math.bincount(arr)": 0.005291005291005291,
                "tf.math.ceil(x)": 0.005291005291005291,
                "tf.math.count_nonzero(input)": 0.005291005291005291,
                "tf.math.count_nonzero(input, axis)": 0.005291005291005291,
                "tf.math.cumsum(x, axis)": 0.005291005291005291,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005291005291005291,
                "tf.math.divide_no_nan(x, y)": 0.005291005291005291,
                "tf.math.floor(x)": 0.005291005291005291,
                "tf.math.log(x)": 0.005291005291005291,
                "tf.math.logical_and(x, y)": 0.005291005291005291,
                "tf.math.logical_not(x)": 0.005291005291005291,
                "tf.math.logical_or(x, y)": 0.005291005291005291,
                "tf.math.logical_xor(x, y)": 0.005291005291005291,
                "tf.math.negative(x)": 0.005291005291005291,
                "tf.math.reciprocal(x)": 0.005291005291005291,
                "tf.math.reciprocal_no_nan(x)": 0.005291005291005291,
                "tf.math.segment_max(data, segment_ids)": 0.005291005291005291,
                "tf.math.segment_mean(data, segment_ids)": 0.005291005291005291,
                "tf.math.segment_min(data, segment_ids)": 0.005291005291005291,
                "tf.math.segment_prod(data, segment_ids)": 0.005291005291005291,
                "tf.math.segment_sum(data, segment_ids)": 0.005291005291005291,
                "tf.math.squared_difference(x, y)": 0.005291005291005291,
                "tf.math.top_k(input, k)": 0.005291005291005291,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005291005291005291,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005291005291005291,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005291005291005291,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005291005291005291,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005291005291005291,
                "tf.matmul(a, b)": 0.005291005291005291,
                "tf.maximum(x, y)": 0.005291005291005291,
                "tf.minimum(x, y)": 0.005291005291005291,
                "tf.multiply(x, y)": 0.005291005291005291,
                "tf.not_equal(x, y)": 0.005291005291005291,
                "tf.one_hot(indices, depth)": 0.005291005291005291,
                "tf.ones(shape)": 0.005291005291005291,
                "tf.ones_like(input)": 0.005291005291005291,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005291005291005291,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005291005291005291,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005291005291005291,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005291005291005291,
                "tf.range(start)": 0.005291005291005291,
                "tf.range(start, limit, delta)": 0.005291005291005291,
                "tf.reduce_any(input_tensor, axis)": 0.005291005291005291,
                "tf.reduce_all(input_tensor, axis)": 0.005291005291005291,
                "tf.reduce_max(input_tensor)": 0.005291005291005291,
                "tf.reduce_max(input_tensor, axis)": 0.005291005291005291,
                "tf.reduce_mean(input_tensor)": 0.005291005291005291,
                "tf.reduce_mean(input_tensor, axis)": 0.005291005291005291,
                "tf.reduce_min(input_tensor)": 0.005291005291005291,
                "tf.reduce_min(input_tensor, axis)": 0.005291005291005291,
                "tf.reduce_prod(input_tensor, axis)": 0.005291005291005291,
                "tf.reduce_sum(input_tensor)": 0.005291005291005291,
                "tf.reduce_sum(input_tensor, axis)": 0.005291005291005291,
                "tf.repeat(input, repeats)": 0.005291005291005291,
                "tf.repeat(input, repeats, axis)": 0.005291005291005291,
                "tf.reshape(tensor, shape)": 0.015873015873015872,
                "tf.reverse(tensor, axis)": 0.005291005291005291,
                "tf.roll(input, shift, axis)": 0.005291005291005291,
                "tf.round(x)": 0.005291005291005291,
                "tf.scatter_nd(indices, updates, shape)": 0.005291005291005291,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005291005291005291,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005291005291005291,
                "tf.sequence_mask(lengths)": 0.005291005291005291,
                "tf.sequence_mask(lengths, maxlen)": 0.005291005291005291,
                "tf.shape(input)": 0.010582010582010581,
                "tf.sign(x)": 0.005291005291005291,
                "tf.sort(values, axis)": 0.005291005291005291,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005291005291005291,
                "tf.sqrt(x)": 0.005291005291005291,
                "tf.square(x)": 0.005291005291005291,
                "tf.squeeze(input)": 0.005291005291005291,
                "tf.squeeze(input, axis)": 0.005291005291005291,
                "tf.stack(values, axis)": 0.015873015873015872,
                "tf.subtract(x, y)": 0.005291005291005291,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005291005291005291,
                "tf.tensordot(a, b, axes)": 0.005291005291005291,
                "tf.tile(input, multiples)": 0.005291005291005291,
                "tf.transpose(a)": 0.005291005291005291,
                "tf.transpose(a, perm)": 0.005291005291005291,
                "tf.unique_with_counts(x)": 0.005291005291005291,
                "tf.unstack(value, axis)": 0.005291005291005291,
                "tf.where(condition)": 0.005291005291005291,
                "tf.where(condition, x, y)": 0.005291005291005291,
                "tf.zeros(shape)": 0.005291005291005291,
                "tf.zeros_like(input)": 0.005291005291005291,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005291005291005291,
                "tf.sparse.add(a, b)": 0.005291005291005291,
                "tf.sparse.concat(axis, sp_inputs)": 0.005291005291005291,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005291005291005291,
                "tf.sparse.from_dense(tensor)": 0.005291005291005291,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005291005291005291,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005291005291005291,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005291005291005291,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005291005291005291,
                "tf.sparse.reset_shape(sp_input)": 0.005291005291005291,
                "tf.sparse.reshape(sp_input, shape)": 0.005291005291005291,
                "tf.sparse.retain(sp_input, to_retain)": 0.005291005291005291,
                "tf.sparse.slice(sp_input, start, size)": 0.005291005291005291,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005291005291005291,
                "tf.sparse.to_dense(sp_input)": 0.005291005291005291,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005291005291005291,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005291005291005291,
                "tf.sparse.transpose(sp_input)": 0.005291005291005291,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005291005291005291,
                "IndexingOperation": 0.06878306878306878,
                "PairCreationOperation": 0.015873015873015872,
                "SingletonTupleCreationOperation": 0.005291005291005291,
                "SlicingAxis0BothOperation": 0.005291005291005291,
                "SlicingAxis0LeftOperation": 0.005291005291005291,
                "SlicingAxis0RightOperation": 0.005291005291005291,
                "SlicingAxis1BothOperation": 0.005291005291005291,
                "SlicingAxis1LeftOperation": 0.005291005291005291,
                "SlicingAxis1RightOperation": 0.005291005291005291,
                "TripleCreationOperation": 0.005291005291005291
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 3,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 5,
                "tf.gather(params, indices, axis, batch_dims)": 6,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 6,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 7,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 6,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 8,
                "IndexingOperation": 4,
                "PairCreationOperation": 6,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8
            }
        }
    },
    {
        "task_id": "google_20",
        "completions": [
            "\ntensor = tf.constant([10, 7, 4, 3, 2, 8])\n\nsorted_indices = tf.argsort(tensor)\n\n",
            "\ninput_tensor = tf.constant([10, 7, 4, 3, 2, 8])\n\nsorted_indices = tf.argsort(input_tensor, axis=0)\n\n",
            "\ntensor = tf.constant([10, 7, 4, 3, 2, 8])\n\nsorted_indices = tf.argsort(tensor)\n\n",
            "\ntensor = tf.constant([10, 7, 4, 3, 2, 8])\n\nsorted_indices = tf.argsort(tensor)\n\nresult = tf.argsort(sorted_indices)\n\n",
            "\ntensor = tf.constant([10, 7, 4, 3, 2, 8])\n\nsorted_indices = tf.argsort(tensor)\n\n",
            "\ntensor = tf.constant([10, 7, 4, 3, 2, 8])\n\nsorted_indices = tf.argsort(tensor)\n\n",
            "\ninput_tensor = tf.constant([10, 7, 4, 3, 2, 8])\n\nsorted_indices = tf.argsort(input_tensor)\n\nsorted_index_in_original_order = tf.argsort(sorted_indices)\n\n",
            "\ntensor = tf.constant([10, 7, 4, 3, 2, 8])\n\nsorted_index = tf.argsort(tensor)\n\n",
            "\ndef sort_tensor_get_indices(t):\n    sorted_indices = tf.argsort(t)\n    sorted_indices_original_order = tf.argsort(sorted_indices)\n    return sorted_indices_original_order\n\nt = tf.constant([10, 7, 4, 3, 2, 8])\n",
            "\ntensor = tf.constant([10, 7, 4, 3, 2, 8])\n\nsorted_indices = tf.argsort(tensor)\n\n"
        ],
        "target-program": "tf.cast(tf.argsort(tf.argsort(in1)), tf.int32)",
        "description": "sort a tensor and return sorted index in original order",
        "tf_operators": {
            "tf.argsort": 10,
            "tf.constant": 10
        },
        "coverage_percentage": 33.33333333333333,
        "total_in_target": 3,
        "total_covered": 1,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.006535947712418301,
                "tf.add(x, y)": 0.006535947712418301,
                "tf.add_n(inputs)": 0.006535947712418301,
                "tf.argmax(input, axis)": 0.006535947712418301,
                "tf.argmin(input, axis)": 0.006535947712418301,
                "tf.argsort(values, axis, stable=True)": 0.013071895424836602,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.006535947712418301,
                "tf.boolean_mask(tensor, mask)": 0.006535947712418301,
                "tf.broadcast_to(input, shape)": 0.006535947712418301,
                "tf.cast(x, dtype)": 0.006535947712418301,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.006535947712418301,
                "tf.concat(values, axis)": 0.006535947712418301,
                "tf.constant(value)": 0.0718954248366013,
                "tf.constant(value, dtype)": 0.006535947712418301,
                "tf.divide(x, y)": 0.006535947712418301,
                "tf.equal(x, y)": 0.006535947712418301,
                "tf.exp(x)": 0.006535947712418301,
                "tf.expand_dims(input, axis)": 0.006535947712418301,
                "tf.eye(num_rows)": 0.006535947712418301,
                "tf.eye(num_rows, num_columns)": 0.006535947712418301,
                "tf.eye(num_rows, dtype)": 0.006535947712418301,
                "tf.fill(dims, value)": 0.006535947712418301,
                "tf.gather(params, indices)": 0.006535947712418301,
                "tf.gather(params, indices, axis, batch_dims)": 0.006535947712418301,
                "tf.gather_nd(params, indices)": 0.006535947712418301,
                "tf.gather_nd(params, indices, batch_dims)": 0.006535947712418301,
                "tf.greater(x, y)": 0.006535947712418301,
                "tf.greater_equal(x, y)": 0.006535947712418301,
                "tf.math.bincount(arr)": 0.006535947712418301,
                "tf.math.ceil(x)": 0.006535947712418301,
                "tf.math.count_nonzero(input)": 0.006535947712418301,
                "tf.math.count_nonzero(input, axis)": 0.006535947712418301,
                "tf.math.cumsum(x, axis)": 0.006535947712418301,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.006535947712418301,
                "tf.math.divide_no_nan(x, y)": 0.006535947712418301,
                "tf.math.floor(x)": 0.006535947712418301,
                "tf.math.log(x)": 0.006535947712418301,
                "tf.math.logical_and(x, y)": 0.006535947712418301,
                "tf.math.logical_not(x)": 0.006535947712418301,
                "tf.math.logical_or(x, y)": 0.006535947712418301,
                "tf.math.logical_xor(x, y)": 0.006535947712418301,
                "tf.math.negative(x)": 0.006535947712418301,
                "tf.math.reciprocal(x)": 0.006535947712418301,
                "tf.math.reciprocal_no_nan(x)": 0.006535947712418301,
                "tf.math.segment_max(data, segment_ids)": 0.006535947712418301,
                "tf.math.segment_mean(data, segment_ids)": 0.006535947712418301,
                "tf.math.segment_min(data, segment_ids)": 0.006535947712418301,
                "tf.math.segment_prod(data, segment_ids)": 0.006535947712418301,
                "tf.math.segment_sum(data, segment_ids)": 0.006535947712418301,
                "tf.math.squared_difference(x, y)": 0.006535947712418301,
                "tf.math.top_k(input, k)": 0.006535947712418301,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.006535947712418301,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.006535947712418301,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.006535947712418301,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.006535947712418301,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.006535947712418301,
                "tf.matmul(a, b)": 0.006535947712418301,
                "tf.maximum(x, y)": 0.006535947712418301,
                "tf.minimum(x, y)": 0.006535947712418301,
                "tf.multiply(x, y)": 0.006535947712418301,
                "tf.not_equal(x, y)": 0.006535947712418301,
                "tf.one_hot(indices, depth)": 0.006535947712418301,
                "tf.ones(shape)": 0.006535947712418301,
                "tf.ones_like(input)": 0.006535947712418301,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.006535947712418301,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.006535947712418301,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.006535947712418301,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.006535947712418301,
                "tf.range(start)": 0.006535947712418301,
                "tf.range(start, limit, delta)": 0.006535947712418301,
                "tf.reduce_any(input_tensor, axis)": 0.006535947712418301,
                "tf.reduce_all(input_tensor, axis)": 0.006535947712418301,
                "tf.reduce_max(input_tensor)": 0.006535947712418301,
                "tf.reduce_max(input_tensor, axis)": 0.006535947712418301,
                "tf.reduce_mean(input_tensor)": 0.006535947712418301,
                "tf.reduce_mean(input_tensor, axis)": 0.006535947712418301,
                "tf.reduce_min(input_tensor)": 0.006535947712418301,
                "tf.reduce_min(input_tensor, axis)": 0.006535947712418301,
                "tf.reduce_prod(input_tensor, axis)": 0.006535947712418301,
                "tf.reduce_sum(input_tensor)": 0.006535947712418301,
                "tf.reduce_sum(input_tensor, axis)": 0.006535947712418301,
                "tf.repeat(input, repeats)": 0.006535947712418301,
                "tf.repeat(input, repeats, axis)": 0.006535947712418301,
                "tf.reshape(tensor, shape)": 0.006535947712418301,
                "tf.reverse(tensor, axis)": 0.006535947712418301,
                "tf.roll(input, shift, axis)": 0.006535947712418301,
                "tf.round(x)": 0.006535947712418301,
                "tf.scatter_nd(indices, updates, shape)": 0.006535947712418301,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.006535947712418301,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.006535947712418301,
                "tf.sequence_mask(lengths)": 0.006535947712418301,
                "tf.sequence_mask(lengths, maxlen)": 0.006535947712418301,
                "tf.shape(input)": 0.006535947712418301,
                "tf.sign(x)": 0.006535947712418301,
                "tf.sort(values, axis)": 0.006535947712418301,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.006535947712418301,
                "tf.sqrt(x)": 0.006535947712418301,
                "tf.square(x)": 0.006535947712418301,
                "tf.squeeze(input)": 0.006535947712418301,
                "tf.squeeze(input, axis)": 0.006535947712418301,
                "tf.stack(values, axis)": 0.006535947712418301,
                "tf.subtract(x, y)": 0.006535947712418301,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.006535947712418301,
                "tf.tensordot(a, b, axes)": 0.006535947712418301,
                "tf.tile(input, multiples)": 0.006535947712418301,
                "tf.transpose(a)": 0.006535947712418301,
                "tf.transpose(a, perm)": 0.006535947712418301,
                "tf.unique_with_counts(x)": 0.006535947712418301,
                "tf.unstack(value, axis)": 0.006535947712418301,
                "tf.where(condition)": 0.006535947712418301,
                "tf.where(condition, x, y)": 0.006535947712418301,
                "tf.zeros(shape)": 0.006535947712418301,
                "tf.zeros_like(input)": 0.006535947712418301,
                "tf.SparseTensor(indices, values, dense_shape)": 0.006535947712418301,
                "tf.sparse.add(a, b)": 0.006535947712418301,
                "tf.sparse.concat(axis, sp_inputs)": 0.006535947712418301,
                "tf.sparse.expand_dims(sp_input, axis)": 0.006535947712418301,
                "tf.sparse.from_dense(tensor)": 0.006535947712418301,
                "tf.sparse.maximum(sp_a, sp_b)": 0.006535947712418301,
                "tf.sparse.minimum(sp_a, sp_b)": 0.006535947712418301,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.006535947712418301,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.006535947712418301,
                "tf.sparse.reset_shape(sp_input)": 0.006535947712418301,
                "tf.sparse.reshape(sp_input, shape)": 0.006535947712418301,
                "tf.sparse.retain(sp_input, to_retain)": 0.006535947712418301,
                "tf.sparse.slice(sp_input, start, size)": 0.006535947712418301,
                "tf.sparse.split(sp_input, num_split, axis)": 0.006535947712418301,
                "tf.sparse.to_dense(sp_input)": 0.006535947712418301,
                "tf.sparse.to_dense(sp_input, default_value)": 0.006535947712418301,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.006535947712418301,
                "tf.sparse.transpose(sp_input)": 0.006535947712418301,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.006535947712418301,
                "IndexingOperation": 0.006535947712418301,
                "PairCreationOperation": 0.006535947712418301,
                "SingletonTupleCreationOperation": 0.006535947712418301,
                "SlicingAxis0BothOperation": 0.006535947712418301,
                "SlicingAxis0LeftOperation": 0.006535947712418301,
                "SlicingAxis0RightOperation": 0.006535947712418301,
                "SlicingAxis1BothOperation": 0.006535947712418301,
                "SlicingAxis1LeftOperation": 0.006535947712418301,
                "SlicingAxis1RightOperation": 0.006535947712418301,
                "TripleCreationOperation": 0.006535947712418301
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 6,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "google_21",
        "completions": [
            "\ntensor = tf.constant([0, 2, -2, 4, 5])\n\nindices = tf.constant([[4], [-1], [6], [-3], [8]])\n\nupdates = tf.constant([7, 8, -2, 10, -4])\n\nupdated_tensor = tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "\ntensor = tf.constant([0, 2, -2, 4, 5])\nindices = tf.constant([4, -1, 6, -3, 8])\nupdates = tf.constant([7, 8, -2, 10, -4])\n\nindices = tf.expand_dims(indices, axis=-1)\nupdated_tensor = tf.tensor_scatter_nd_update(tensor, indices, updates)\n\n",
            "\ntensor = tf.constant([0, 2, -2, 4, 5])\n\nindices = tf.constant([[4], [-1], [6], [-3], [8]])\n\nupdates = tf.constant([7, 8, -2, 10, -4])\n\nupdated_tensor = tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "\ntensor = tf.constant([0, 2, -2, 4, 5])\nindices = tf.constant([4, -1, 6, -3, 8])\nupdates = tf.constant([7, 8, -2, 10, -4])\n\nindices = tf.reshape(indices, [-1, 1])\n\nupdated_tensor = tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "\ntensor = tf.constant([0, 2, -2, 4, 5])\nindices = tf.constant([[4], [-1], [6], [-3], [8]])\nupdates = tf.constant([7, 8, -2, 10, -4])\n\nupdated_tensor = tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "\ntensor = tf.constant([0, 2, -2, 4, 5])\nindices = tf.constant([[4], [-1], [6], [-3], [8]])\nupdates = tf.constant([7, 8, -2, 10, -4])\n\nupdated_tensor = tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "\ntensor = tf.constant([0, 2, -2, 4, 5])\n\nindices = tf.constant([[4], [-1], [6], [-3], [8]])\n\nupdates = tf.constant([7, 8, -2, 10, -4])\n\nupdated_tensor = tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "\ntensor = tf.constant([0, 2, -2, 4, 5])\nindices = tf.constant([[4], [-1], [6], [-3], [8]])\nupdates = tf.constant([7, 8, -2, 10, -4])\n\nupdated_tensor = tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "\ntensor = tf.constant([0, 2, -2, 4, 5])\nindices = tf.constant([[4], [-1], [6], [-3], [8]])\nupdates = tf.constant([7, 8, -2, 10, -4])\n\nupdated_tensor = tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "\ntensor = tf.constant([0, 2, -2, 4, 5])\nindices = tf.constant([[4], [-1], [6], [-3], [8]])\nupdates = tf.constant([7, 8, -2, 10, -4])\n\nupdated_tensor = tf.tensor_scatter_nd_update(tensor, indices, updates)\n"
        ],
        "target-program": "tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, (-1,)))",
        "description": "update a tensor at the given indices",
        "tf_operators": {
            "tf.tensor_scatter_nd_update": 10,
            "tf.constant": 10,
            "tf.expand_dims": 1,
            "tf.reshape": 1
        },
        "coverage_percentage": 100.0,
        "total_in_target": 2,
        "total_covered": 2,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005434782608695652,
                "tf.add(x, y)": 0.005434782608695652,
                "tf.add_n(inputs)": 0.005434782608695652,
                "tf.argmax(input, axis)": 0.005434782608695652,
                "tf.argmin(input, axis)": 0.005434782608695652,
                "tf.argsort(values, axis, stable=True)": 0.005434782608695652,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005434782608695652,
                "tf.boolean_mask(tensor, mask)": 0.005434782608695652,
                "tf.broadcast_to(input, shape)": 0.005434782608695652,
                "tf.cast(x, dtype)": 0.005434782608695652,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005434782608695652,
                "tf.concat(values, axis)": 0.005434782608695652,
                "tf.constant(value)": 0.16847826086956522,
                "tf.constant(value, dtype)": 0.005434782608695652,
                "tf.divide(x, y)": 0.005434782608695652,
                "tf.equal(x, y)": 0.005434782608695652,
                "tf.exp(x)": 0.005434782608695652,
                "tf.expand_dims(input, axis)": 0.010869565217391304,
                "tf.eye(num_rows)": 0.005434782608695652,
                "tf.eye(num_rows, num_columns)": 0.005434782608695652,
                "tf.eye(num_rows, dtype)": 0.005434782608695652,
                "tf.fill(dims, value)": 0.005434782608695652,
                "tf.gather(params, indices)": 0.005434782608695652,
                "tf.gather(params, indices, axis, batch_dims)": 0.005434782608695652,
                "tf.gather_nd(params, indices)": 0.005434782608695652,
                "tf.gather_nd(params, indices, batch_dims)": 0.005434782608695652,
                "tf.greater(x, y)": 0.005434782608695652,
                "tf.greater_equal(x, y)": 0.005434782608695652,
                "tf.math.bincount(arr)": 0.005434782608695652,
                "tf.math.ceil(x)": 0.005434782608695652,
                "tf.math.count_nonzero(input)": 0.005434782608695652,
                "tf.math.count_nonzero(input, axis)": 0.005434782608695652,
                "tf.math.cumsum(x, axis)": 0.005434782608695652,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005434782608695652,
                "tf.math.divide_no_nan(x, y)": 0.005434782608695652,
                "tf.math.floor(x)": 0.005434782608695652,
                "tf.math.log(x)": 0.005434782608695652,
                "tf.math.logical_and(x, y)": 0.005434782608695652,
                "tf.math.logical_not(x)": 0.005434782608695652,
                "tf.math.logical_or(x, y)": 0.005434782608695652,
                "tf.math.logical_xor(x, y)": 0.005434782608695652,
                "tf.math.negative(x)": 0.005434782608695652,
                "tf.math.reciprocal(x)": 0.005434782608695652,
                "tf.math.reciprocal_no_nan(x)": 0.005434782608695652,
                "tf.math.segment_max(data, segment_ids)": 0.005434782608695652,
                "tf.math.segment_mean(data, segment_ids)": 0.005434782608695652,
                "tf.math.segment_min(data, segment_ids)": 0.005434782608695652,
                "tf.math.segment_prod(data, segment_ids)": 0.005434782608695652,
                "tf.math.segment_sum(data, segment_ids)": 0.005434782608695652,
                "tf.math.squared_difference(x, y)": 0.005434782608695652,
                "tf.math.top_k(input, k)": 0.005434782608695652,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005434782608695652,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005434782608695652,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005434782608695652,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005434782608695652,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005434782608695652,
                "tf.matmul(a, b)": 0.005434782608695652,
                "tf.maximum(x, y)": 0.005434782608695652,
                "tf.minimum(x, y)": 0.005434782608695652,
                "tf.multiply(x, y)": 0.005434782608695652,
                "tf.not_equal(x, y)": 0.005434782608695652,
                "tf.one_hot(indices, depth)": 0.005434782608695652,
                "tf.ones(shape)": 0.005434782608695652,
                "tf.ones_like(input)": 0.005434782608695652,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005434782608695652,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005434782608695652,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005434782608695652,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005434782608695652,
                "tf.range(start)": 0.005434782608695652,
                "tf.range(start, limit, delta)": 0.005434782608695652,
                "tf.reduce_any(input_tensor, axis)": 0.005434782608695652,
                "tf.reduce_all(input_tensor, axis)": 0.005434782608695652,
                "tf.reduce_max(input_tensor)": 0.005434782608695652,
                "tf.reduce_max(input_tensor, axis)": 0.005434782608695652,
                "tf.reduce_mean(input_tensor)": 0.005434782608695652,
                "tf.reduce_mean(input_tensor, axis)": 0.005434782608695652,
                "tf.reduce_min(input_tensor)": 0.005434782608695652,
                "tf.reduce_min(input_tensor, axis)": 0.005434782608695652,
                "tf.reduce_prod(input_tensor, axis)": 0.005434782608695652,
                "tf.reduce_sum(input_tensor)": 0.005434782608695652,
                "tf.reduce_sum(input_tensor, axis)": 0.005434782608695652,
                "tf.repeat(input, repeats)": 0.005434782608695652,
                "tf.repeat(input, repeats, axis)": 0.005434782608695652,
                "tf.reshape(tensor, shape)": 0.010869565217391304,
                "tf.reverse(tensor, axis)": 0.005434782608695652,
                "tf.roll(input, shift, axis)": 0.005434782608695652,
                "tf.round(x)": 0.005434782608695652,
                "tf.scatter_nd(indices, updates, shape)": 0.005434782608695652,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005434782608695652,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005434782608695652,
                "tf.sequence_mask(lengths)": 0.005434782608695652,
                "tf.sequence_mask(lengths, maxlen)": 0.005434782608695652,
                "tf.shape(input)": 0.005434782608695652,
                "tf.sign(x)": 0.005434782608695652,
                "tf.sort(values, axis)": 0.005434782608695652,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005434782608695652,
                "tf.sqrt(x)": 0.005434782608695652,
                "tf.square(x)": 0.005434782608695652,
                "tf.squeeze(input)": 0.005434782608695652,
                "tf.squeeze(input, axis)": 0.005434782608695652,
                "tf.stack(values, axis)": 0.005434782608695652,
                "tf.subtract(x, y)": 0.005434782608695652,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.059782608695652176,
                "tf.tensordot(a, b, axes)": 0.005434782608695652,
                "tf.tile(input, multiples)": 0.005434782608695652,
                "tf.transpose(a)": 0.005434782608695652,
                "tf.transpose(a, perm)": 0.005434782608695652,
                "tf.unique_with_counts(x)": 0.005434782608695652,
                "tf.unstack(value, axis)": 0.005434782608695652,
                "tf.where(condition)": 0.005434782608695652,
                "tf.where(condition, x, y)": 0.005434782608695652,
                "tf.zeros(shape)": 0.005434782608695652,
                "tf.zeros_like(input)": 0.005434782608695652,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005434782608695652,
                "tf.sparse.add(a, b)": 0.005434782608695652,
                "tf.sparse.concat(axis, sp_inputs)": 0.005434782608695652,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005434782608695652,
                "tf.sparse.from_dense(tensor)": 0.005434782608695652,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005434782608695652,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005434782608695652,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005434782608695652,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005434782608695652,
                "tf.sparse.reset_shape(sp_input)": 0.005434782608695652,
                "tf.sparse.reshape(sp_input, shape)": 0.005434782608695652,
                "tf.sparse.retain(sp_input, to_retain)": 0.005434782608695652,
                "tf.sparse.slice(sp_input, start, size)": 0.005434782608695652,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005434782608695652,
                "tf.sparse.to_dense(sp_input)": 0.005434782608695652,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005434782608695652,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005434782608695652,
                "tf.sparse.transpose(sp_input)": 0.005434782608695652,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005434782608695652,
                "IndexingOperation": 0.005434782608695652,
                "PairCreationOperation": 0.005434782608695652,
                "SingletonTupleCreationOperation": 0.005434782608695652,
                "SlicingAxis0BothOperation": 0.005434782608695652,
                "SlicingAxis0LeftOperation": 0.005434782608695652,
                "SlicingAxis0RightOperation": 0.005434782608695652,
                "SlicingAxis1BothOperation": 0.005434782608695652,
                "SlicingAxis1LeftOperation": 0.005434782608695652,
                "SlicingAxis1RightOperation": 0.005434782608695652,
                "TripleCreationOperation": 0.005434782608695652
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 3,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 4,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8
            }
        }
    },
    {
        "task_id": "google_22",
        "completions": [
            "\ndata = [[0, 2], [1, 3], [2, 4]]\n\ntensor = tf.constant(data)\n\nindices = tf.where(tf.range(tf.shape(tensor)[0]) == tensor[:, 0])\n\noutput = indices[:, 0]\n\n",
            "\ndef pair_with_row_index(data):\n    data = tf.constant(data)\n    indices = tf.range(tf.shape(data)[0])\n    indices = tf.tile(indices, [tf.shape(data)[1]])\n    indices = tf.reshape(indices, tf.shape(data))\n    return indices\n\ndata = [[0, 2], [1, 3], [2, 4]]\n",
            "\ndata = [[0, 2], [1, 3], [2, 4]]\n\ntensor = tf.constant(data)\n\noutput = tf.argmin(tensor, axis=1)\n\n",
            "\ndef pair_with_row_index(input):\n    return tf.argmin(input, axis=1)\n\ninput = tf.constant([[0, 2], [1, 3], [2, 4]])\noutput = pair_with_row_index(input)\n",
            "\ninput_tensor = tf.constant([[0, 2], [1, 3], [2, 4]])\n\nindices = tf.where(tf.ones_like(input_tensor))\n\nrow_indices = indices[:, 0]\n\nrow_indices_list = row_indices.numpy().tolist()\n\n",
            "\ndata = tf.constant([[0, 2], [1, 3], [2, 4]])\n\ncondition = tf.ones_like(data, dtype=tf.bool)\n\nindices = tf.where(condition)\n\nrow_indices = indices[:, 0]\n\n",
            "\ndata = tf.constant([[0, 2], [1, 3], [2, 4]])\n\nfirst_column = tf.slice(data, [0, 0], [-1, 1])\n\nrow_indices = tf.range(tf.shape(data)[0])\n\ncondition = tf.equal(tf.squeeze(first_column), row_indices)\n\noutput = tf.where(condition)\n\n",
            "\ndef pair_with_row_index(arr):\n    return tf.argmax(arr, axis=1)\n",
            "\ndef pair_with_row_index(matrix):\n    row_indices = tf.range(tf.shape(matrix)[0])\n    row_indices = tf.tile(row_indices[:, tf.newaxis], [1, tf.shape(matrix)[1]])\n    pairs = tf.stack([row_indices, matrix], axis=-1)\n    return pairs\n\nmatrix = tf.constant([[0, 2], [1, 3], [2, 4]])\n",
            "\ndef pair_with_row_index(arr):\n    indices = tf.range(tf.shape(arr)[0])\n    indices = tf.tile(indices[:, tf.newaxis], [1, tf.shape(arr)[1]])\n    return tf.stack([indices, arr], axis=-1)\n\narr = tf.constant([[0, 2], [1, 3], [2, 4]])\n"
        ],
        "target-program": "tf.cast(tf.where(tf.reduce_max(tf.one_hot(in1, tf.reduce_max(in1) + 1), axis=1)), tf.int32)",
        "description": "pair with row index",
        "tf_operators": {
            "tf.shape": 5,
            "tf.where": 4,
            "tf.range": 5,
            "tf.constant": 9,
            "tf.tile": 3,
            "tf.reshape": 1,
            "tf.argmin": 2,
            "tf.ones_like": 2,
            "tf.bool": 1,
            "tf.squeeze": 1,
            "tf.equal": 1,
            "tf.slice": 1,
            "tf.argmax": 1,
            "tf.newaxis": 2,
            "tf.stack": 2
        },
        "coverage_percentage": 20.0,
        "total_in_target": 5,
        "total_covered": 1,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0049504950495049506,
                "tf.add(x, y)": 0.0049504950495049506,
                "tf.add_n(inputs)": 0.0049504950495049506,
                "tf.argmax(input, axis)": 0.009900990099009901,
                "tf.argmin(input, axis)": 0.01485148514851485,
                "tf.argsort(values, axis, stable=True)": 0.0049504950495049506,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.0049504950495049506,
                "tf.boolean_mask(tensor, mask)": 0.0049504950495049506,
                "tf.broadcast_to(input, shape)": 0.0049504950495049506,
                "tf.cast(x, dtype)": 0.0049504950495049506,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0049504950495049506,
                "tf.concat(values, axis)": 0.0049504950495049506,
                "tf.constant(value)": 0.04950495049504951,
                "tf.constant(value, dtype)": 0.0049504950495049506,
                "tf.divide(x, y)": 0.0049504950495049506,
                "tf.equal(x, y)": 0.009900990099009901,
                "tf.exp(x)": 0.0049504950495049506,
                "tf.expand_dims(input, axis)": 0.0049504950495049506,
                "tf.eye(num_rows)": 0.0049504950495049506,
                "tf.eye(num_rows, num_columns)": 0.0049504950495049506,
                "tf.eye(num_rows, dtype)": 0.0049504950495049506,
                "tf.fill(dims, value)": 0.0049504950495049506,
                "tf.gather(params, indices)": 0.0049504950495049506,
                "tf.gather(params, indices, axis, batch_dims)": 0.0049504950495049506,
                "tf.gather_nd(params, indices)": 0.0049504950495049506,
                "tf.gather_nd(params, indices, batch_dims)": 0.0049504950495049506,
                "tf.greater(x, y)": 0.0049504950495049506,
                "tf.greater_equal(x, y)": 0.0049504950495049506,
                "tf.math.bincount(arr)": 0.0049504950495049506,
                "tf.math.ceil(x)": 0.0049504950495049506,
                "tf.math.count_nonzero(input)": 0.0049504950495049506,
                "tf.math.count_nonzero(input, axis)": 0.0049504950495049506,
                "tf.math.cumsum(x, axis)": 0.0049504950495049506,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0049504950495049506,
                "tf.math.divide_no_nan(x, y)": 0.0049504950495049506,
                "tf.math.floor(x)": 0.0049504950495049506,
                "tf.math.log(x)": 0.0049504950495049506,
                "tf.math.logical_and(x, y)": 0.0049504950495049506,
                "tf.math.logical_not(x)": 0.0049504950495049506,
                "tf.math.logical_or(x, y)": 0.0049504950495049506,
                "tf.math.logical_xor(x, y)": 0.0049504950495049506,
                "tf.math.negative(x)": 0.0049504950495049506,
                "tf.math.reciprocal(x)": 0.0049504950495049506,
                "tf.math.reciprocal_no_nan(x)": 0.0049504950495049506,
                "tf.math.segment_max(data, segment_ids)": 0.0049504950495049506,
                "tf.math.segment_mean(data, segment_ids)": 0.0049504950495049506,
                "tf.math.segment_min(data, segment_ids)": 0.0049504950495049506,
                "tf.math.segment_prod(data, segment_ids)": 0.0049504950495049506,
                "tf.math.segment_sum(data, segment_ids)": 0.0049504950495049506,
                "tf.math.squared_difference(x, y)": 0.0049504950495049506,
                "tf.math.top_k(input, k)": 0.0049504950495049506,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0049504950495049506,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0049504950495049506,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0049504950495049506,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0049504950495049506,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0049504950495049506,
                "tf.matmul(a, b)": 0.0049504950495049506,
                "tf.maximum(x, y)": 0.0049504950495049506,
                "tf.minimum(x, y)": 0.0049504950495049506,
                "tf.multiply(x, y)": 0.0049504950495049506,
                "tf.not_equal(x, y)": 0.0049504950495049506,
                "tf.one_hot(indices, depth)": 0.0049504950495049506,
                "tf.ones(shape)": 0.0049504950495049506,
                "tf.ones_like(input)": 0.01485148514851485,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.0049504950495049506,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.0049504950495049506,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.0049504950495049506,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.0049504950495049506,
                "tf.range(start)": 0.0297029702970297,
                "tf.range(start, limit, delta)": 0.0049504950495049506,
                "tf.reduce_any(input_tensor, axis)": 0.0049504950495049506,
                "tf.reduce_all(input_tensor, axis)": 0.0049504950495049506,
                "tf.reduce_max(input_tensor)": 0.0049504950495049506,
                "tf.reduce_max(input_tensor, axis)": 0.0049504950495049506,
                "tf.reduce_mean(input_tensor)": 0.0049504950495049506,
                "tf.reduce_mean(input_tensor, axis)": 0.0049504950495049506,
                "tf.reduce_min(input_tensor)": 0.0049504950495049506,
                "tf.reduce_min(input_tensor, axis)": 0.0049504950495049506,
                "tf.reduce_prod(input_tensor, axis)": 0.0049504950495049506,
                "tf.reduce_sum(input_tensor)": 0.0049504950495049506,
                "tf.reduce_sum(input_tensor, axis)": 0.0049504950495049506,
                "tf.repeat(input, repeats)": 0.0049504950495049506,
                "tf.repeat(input, repeats, axis)": 0.0049504950495049506,
                "tf.reshape(tensor, shape)": 0.009900990099009901,
                "tf.reverse(tensor, axis)": 0.0049504950495049506,
                "tf.roll(input, shift, axis)": 0.0049504950495049506,
                "tf.round(x)": 0.0049504950495049506,
                "tf.scatter_nd(indices, updates, shape)": 0.0049504950495049506,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.0049504950495049506,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.0049504950495049506,
                "tf.sequence_mask(lengths)": 0.0049504950495049506,
                "tf.sequence_mask(lengths, maxlen)": 0.0049504950495049506,
                "tf.shape(input)": 0.04950495049504951,
                "tf.sign(x)": 0.0049504950495049506,
                "tf.sort(values, axis)": 0.0049504950495049506,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.0049504950495049506,
                "tf.sqrt(x)": 0.0049504950495049506,
                "tf.square(x)": 0.0049504950495049506,
                "tf.squeeze(input)": 0.009900990099009901,
                "tf.squeeze(input, axis)": 0.0049504950495049506,
                "tf.stack(values, axis)": 0.01485148514851485,
                "tf.subtract(x, y)": 0.0049504950495049506,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0049504950495049506,
                "tf.tensordot(a, b, axes)": 0.0049504950495049506,
                "tf.tile(input, multiples)": 0.019801980198019802,
                "tf.transpose(a)": 0.0049504950495049506,
                "tf.transpose(a, perm)": 0.0049504950495049506,
                "tf.unique_with_counts(x)": 0.0049504950495049506,
                "tf.unstack(value, axis)": 0.0049504950495049506,
                "tf.where(condition)": 0.024752475247524754,
                "tf.where(condition, x, y)": 0.0049504950495049506,
                "tf.zeros(shape)": 0.0049504950495049506,
                "tf.zeros_like(input)": 0.0049504950495049506,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0049504950495049506,
                "tf.sparse.add(a, b)": 0.0049504950495049506,
                "tf.sparse.concat(axis, sp_inputs)": 0.0049504950495049506,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0049504950495049506,
                "tf.sparse.from_dense(tensor)": 0.0049504950495049506,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0049504950495049506,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0049504950495049506,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0049504950495049506,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0049504950495049506,
                "tf.sparse.reset_shape(sp_input)": 0.0049504950495049506,
                "tf.sparse.reshape(sp_input, shape)": 0.0049504950495049506,
                "tf.sparse.retain(sp_input, to_retain)": 0.0049504950495049506,
                "tf.sparse.slice(sp_input, start, size)": 0.0049504950495049506,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0049504950495049506,
                "tf.sparse.to_dense(sp_input)": 0.0049504950495049506,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0049504950495049506,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0049504950495049506,
                "tf.sparse.transpose(sp_input)": 0.0049504950495049506,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.0049504950495049506,
                "IndexingOperation": 0.04455445544554455,
                "PairCreationOperation": 0.034653465346534656,
                "SingletonTupleCreationOperation": 0.0049504950495049506,
                "SlicingAxis0BothOperation": 0.0049504950495049506,
                "SlicingAxis0LeftOperation": 0.0049504950495049506,
                "SlicingAxis0RightOperation": 0.0049504950495049506,
                "SlicingAxis1BothOperation": 0.0049504950495049506,
                "SlicingAxis1LeftOperation": 0.0049504950495049506,
                "SlicingAxis1RightOperation": 0.0049504950495049506,
                "TripleCreationOperation": 0.0049504950495049506
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 6,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 6,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 5,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 4,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 6,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 6,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 5,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 8,
                "IndexingOperation": 4,
                "PairCreationOperation": 5,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8
            }
        }
    },
    {
        "task_id": "stackoverflow_01",
        "completions": [
            "\ndata = [[5.0, 2.0], [1.0, 3.0], [0.0, -1.0]]\n\ntensor = tf.constant(data)\n\nfirst_column = tf.gather(tensor, indices=[0], axis=1)\n\nreshaped_column = tf.reshape(first_column, shape=[-1, 1])\n\noutput = tf.concat([reshaped_column, reshaped_column], axis=1)\n\n",
            "\ndata = [[5.0, 2.0], [1.0, 3.0], [0.0, -1.0]]\n\ntensor = tf.constant(data)\n\nshape = tf.shape(tensor)\n\nnew_shape = [shape[0], shape[1]*2]\n\nreshaped_tensor = tf.reshape(tensor, new_shape)\n\n",
            "\ninput_list = [[5.0, 2.0], [1.0, 3.0], [0.0, -1.0]]\n\ninput_tensor = tf.constant(input_list)\n\nreshaped_tensor = tf.reshape(input_tensor[:,0], (-1, 1))\n\noutput = tf.repeat(reshaped_tensor, 2, axis=1)\n\n",
            "\ndef reshape_tensor(input_tensor):\n    first_column = tf.slice(input_tensor, [0, 0], [-1, 1])\n    reshaped_tensor = tf.reshape(first_column, [-1, 2])\n    return reshaped_tensor\n\ninput_tensor = tf.constant([[5.0, 2.0], [1.0, 3.0], [0.0, -1.0]])\noutput_tensor = reshape_tensor(input_tensor)\n",
            "\ndata = [[5.0, 2.0], [1.0, 3.0], [0.0, -1.0]]\ntensor = tf.constant(data)\n\nreshaped_tensor = tf.reshape(tensor[:, 0], shape=(-1, 1))\n\noutput = tf.tile(reshaped_tensor, multiples=[1, 2])\n\n",
            "\ndef reshape_and_duplicate(input):\n    tensor = tf.constant(input)\n    first_column = tf.reshape(tensor[:, 0], shape=(-1, 1))\n    duplicated_first_column = tf.repeat(first_column, repeats=[2], axis=1)\n    return duplicated_first_column.numpy().tolist()\n\ninput = [[5.0, 2.0], [1.0, 3.0], [0.0, -1.0]]\noutput = reshape_and_duplicate(input)\n",
            "\ndef reshape_tensor(input):\n    input = tf.constant(input)\n    first_column = input[:, 0] # get the first column\n    first_column = tf.expand_dims(first_column, axis=-1) # add a new dimension\n    output = tf.tile(first_column, [1, 2]) # duplicate the column\n    return output\n\ninput = [[5.0, 2.0], [1.0, 3.0], [0.0, -1.0]]\n",
            "\ndef reshape_input(input):\n    tensor = tf.constant(input)\n    columns = tf.unstack(tensor, axis=1)\n    output = tf.stack([columns[0], columns[0]], axis=1)\n    return output\n\ninput = [[5.0, 2.0], [1.0, 3.0], [0.0, -1.0]]\n",
            "\ninput_tensor = tf.constant([[5.0, 2.0], [1.0, 3.0], [0.0, -1.0]])\n\nfirst_column = tf.gather(input_tensor, indices=[0], axis=1)\n\noutput = tf.reshape(first_column, tf.shape(input_tensor))\n\n",
            "\ndata = [[5.0, 2.0], [1.0, 3.0], [0.0, -1.0]]\n\ntensor = tf.constant(data)\n\nreshaped_tensor = tf.reshape(tf.tile(tf.expand_dims(tensor[:, 0], axis=-1), [1, 2]), tf.shape(tensor))\n\n"
        ],
        "target-program": "tf.transpose(tf.cast((in1, in1), tf.float32))",
        "description": "reshape by separating and duplicating columns",
        "tf_operators": {
            "tf.gather": 2,
            "tf.concat": 1,
            "tf.reshape": 8,
            "tf.constant": 10,
            "tf.shape": 3,
            "tf.repeat": 2,
            "tf.slice": 1,
            "tf.tile": 3,
            "tf.expand_dims": 2,
            "tf.unstack": 1,
            "tf.stack": 1
        },
        "coverage_percentage": 0.0,
        "total_in_target": 3,
        "total_covered": 0,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005319148936170213,
                "tf.add(x, y)": 0.005319148936170213,
                "tf.add_n(inputs)": 0.005319148936170213,
                "tf.argmax(input, axis)": 0.005319148936170213,
                "tf.argmin(input, axis)": 0.005319148936170213,
                "tf.argsort(values, axis, stable=True)": 0.005319148936170213,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005319148936170213,
                "tf.boolean_mask(tensor, mask)": 0.005319148936170213,
                "tf.broadcast_to(input, shape)": 0.005319148936170213,
                "tf.cast(x, dtype)": 0.005319148936170213,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005319148936170213,
                "tf.concat(values, axis)": 0.010638297872340425,
                "tf.constant(value)": 0.05851063829787234,
                "tf.constant(value, dtype)": 0.005319148936170213,
                "tf.divide(x, y)": 0.005319148936170213,
                "tf.equal(x, y)": 0.005319148936170213,
                "tf.exp(x)": 0.005319148936170213,
                "tf.expand_dims(input, axis)": 0.015957446808510637,
                "tf.eye(num_rows)": 0.005319148936170213,
                "tf.eye(num_rows, num_columns)": 0.005319148936170213,
                "tf.eye(num_rows, dtype)": 0.005319148936170213,
                "tf.fill(dims, value)": 0.005319148936170213,
                "tf.gather(params, indices)": 0.005319148936170213,
                "tf.gather(params, indices, axis, batch_dims)": 0.005319148936170213,
                "tf.gather_nd(params, indices)": 0.005319148936170213,
                "tf.gather_nd(params, indices, batch_dims)": 0.005319148936170213,
                "tf.greater(x, y)": 0.005319148936170213,
                "tf.greater_equal(x, y)": 0.005319148936170213,
                "tf.math.bincount(arr)": 0.005319148936170213,
                "tf.math.ceil(x)": 0.005319148936170213,
                "tf.math.count_nonzero(input)": 0.005319148936170213,
                "tf.math.count_nonzero(input, axis)": 0.005319148936170213,
                "tf.math.cumsum(x, axis)": 0.005319148936170213,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005319148936170213,
                "tf.math.divide_no_nan(x, y)": 0.005319148936170213,
                "tf.math.floor(x)": 0.005319148936170213,
                "tf.math.log(x)": 0.005319148936170213,
                "tf.math.logical_and(x, y)": 0.005319148936170213,
                "tf.math.logical_not(x)": 0.005319148936170213,
                "tf.math.logical_or(x, y)": 0.005319148936170213,
                "tf.math.logical_xor(x, y)": 0.005319148936170213,
                "tf.math.negative(x)": 0.005319148936170213,
                "tf.math.reciprocal(x)": 0.005319148936170213,
                "tf.math.reciprocal_no_nan(x)": 0.005319148936170213,
                "tf.math.segment_max(data, segment_ids)": 0.005319148936170213,
                "tf.math.segment_mean(data, segment_ids)": 0.005319148936170213,
                "tf.math.segment_min(data, segment_ids)": 0.005319148936170213,
                "tf.math.segment_prod(data, segment_ids)": 0.005319148936170213,
                "tf.math.segment_sum(data, segment_ids)": 0.005319148936170213,
                "tf.math.squared_difference(x, y)": 0.005319148936170213,
                "tf.math.top_k(input, k)": 0.005319148936170213,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005319148936170213,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005319148936170213,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005319148936170213,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005319148936170213,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005319148936170213,
                "tf.matmul(a, b)": 0.005319148936170213,
                "tf.maximum(x, y)": 0.005319148936170213,
                "tf.minimum(x, y)": 0.005319148936170213,
                "tf.multiply(x, y)": 0.005319148936170213,
                "tf.not_equal(x, y)": 0.005319148936170213,
                "tf.one_hot(indices, depth)": 0.005319148936170213,
                "tf.ones(shape)": 0.005319148936170213,
                "tf.ones_like(input)": 0.005319148936170213,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005319148936170213,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005319148936170213,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005319148936170213,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005319148936170213,
                "tf.range(start)": 0.005319148936170213,
                "tf.range(start, limit, delta)": 0.005319148936170213,
                "tf.reduce_any(input_tensor, axis)": 0.005319148936170213,
                "tf.reduce_all(input_tensor, axis)": 0.005319148936170213,
                "tf.reduce_max(input_tensor)": 0.005319148936170213,
                "tf.reduce_max(input_tensor, axis)": 0.005319148936170213,
                "tf.reduce_mean(input_tensor)": 0.005319148936170213,
                "tf.reduce_mean(input_tensor, axis)": 0.005319148936170213,
                "tf.reduce_min(input_tensor)": 0.005319148936170213,
                "tf.reduce_min(input_tensor, axis)": 0.005319148936170213,
                "tf.reduce_prod(input_tensor, axis)": 0.005319148936170213,
                "tf.reduce_sum(input_tensor)": 0.005319148936170213,
                "tf.reduce_sum(input_tensor, axis)": 0.005319148936170213,
                "tf.repeat(input, repeats)": 0.005319148936170213,
                "tf.repeat(input, repeats, axis)": 0.005319148936170213,
                "tf.reshape(tensor, shape)": 0.047872340425531915,
                "tf.reverse(tensor, axis)": 0.005319148936170213,
                "tf.roll(input, shift, axis)": 0.005319148936170213,
                "tf.round(x)": 0.005319148936170213,
                "tf.scatter_nd(indices, updates, shape)": 0.005319148936170213,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005319148936170213,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005319148936170213,
                "tf.sequence_mask(lengths)": 0.005319148936170213,
                "tf.sequence_mask(lengths, maxlen)": 0.005319148936170213,
                "tf.shape(input)": 0.02127659574468085,
                "tf.sign(x)": 0.005319148936170213,
                "tf.sort(values, axis)": 0.005319148936170213,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005319148936170213,
                "tf.sqrt(x)": 0.005319148936170213,
                "tf.square(x)": 0.005319148936170213,
                "tf.squeeze(input)": 0.005319148936170213,
                "tf.squeeze(input, axis)": 0.005319148936170213,
                "tf.stack(values, axis)": 0.010638297872340425,
                "tf.subtract(x, y)": 0.005319148936170213,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005319148936170213,
                "tf.tensordot(a, b, axes)": 0.005319148936170213,
                "tf.tile(input, multiples)": 0.02127659574468085,
                "tf.transpose(a)": 0.005319148936170213,
                "tf.transpose(a, perm)": 0.005319148936170213,
                "tf.unique_with_counts(x)": 0.005319148936170213,
                "tf.unstack(value, axis)": 0.010638297872340425,
                "tf.where(condition)": 0.005319148936170213,
                "tf.where(condition, x, y)": 0.005319148936170213,
                "tf.zeros(shape)": 0.005319148936170213,
                "tf.zeros_like(input)": 0.005319148936170213,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005319148936170213,
                "tf.sparse.add(a, b)": 0.005319148936170213,
                "tf.sparse.concat(axis, sp_inputs)": 0.005319148936170213,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005319148936170213,
                "tf.sparse.from_dense(tensor)": 0.005319148936170213,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005319148936170213,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005319148936170213,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005319148936170213,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005319148936170213,
                "tf.sparse.reset_shape(sp_input)": 0.005319148936170213,
                "tf.sparse.reshape(sp_input, shape)": 0.005319148936170213,
                "tf.sparse.retain(sp_input, to_retain)": 0.005319148936170213,
                "tf.sparse.slice(sp_input, start, size)": 0.005319148936170213,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005319148936170213,
                "tf.sparse.to_dense(sp_input)": 0.005319148936170213,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005319148936170213,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005319148936170213,
                "tf.sparse.transpose(sp_input)": 0.005319148936170213,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005319148936170213,
                "IndexingOperation": 0.026595744680851064,
                "PairCreationOperation": 0.047872340425531915,
                "SingletonTupleCreationOperation": 0.005319148936170213,
                "SlicingAxis0BothOperation": 0.005319148936170213,
                "SlicingAxis0LeftOperation": 0.005319148936170213,
                "SlicingAxis0RightOperation": 0.005319148936170213,
                "SlicingAxis1BothOperation": 0.005319148936170213,
                "SlicingAxis1LeftOperation": 0.005319148936170213,
                "SlicingAxis1RightOperation": 0.005319148936170213,
                "TripleCreationOperation": 0.005319148936170213
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 6,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 4,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 6,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 6,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 8,
                "IndexingOperation": 5,
                "PairCreationOperation": 4,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8
            }
        }
    },
    {
        "task_id": "stackoverflow_02",
        "completions": [
            "\nvalues = tf.constant([5, 1, 0, 3, 0, -1, 2, -10, 2])\nclipped_values = tf.clip_by_value(values, clip_value_min=-tf.float32.max, clip_value_max=1)\n",
            "\ninput_tensor = tf.constant([5, 1, 0, 3, 0, -1, 2, -10, 2], dtype=tf.float32)\n\noutput_tensor = tf.clip_by_value(input_tensor, clip_value_min=-tf.float32.max, clip_value_max=1)\n\n",
            "\ninput_list = [5, 1, 0, 3, 0, -1, 2, -10, 2]\n\ninput_tensor = tf.constant(input_list, dtype=tf.float32)\n\noutput_tensor = tf.clip_by_value(input_tensor, clip_value_min=tf.float32.min, clip_value_max=1)\n\n",
            "\ninput_tensor = tf.constant([5, 1, 0, 3, 0, -1, 2, -10, 2], dtype=tf.float32)\n\noutput_tensor = tf.clip_by_value(input_tensor, clip_value_min=float('-inf'), clip_value_max=1)\n\n",
            "\ntensor = tf.constant([5, 1, 0, 3, 0, -1, 2, -10, 2], dtype=tf.float32)\n\nclipped_tensor = tf.clip_by_value(tensor, clip_value_min=tf.float32.min, clip_value_max=1)\n\n",
            "\ndef clip_values(tensor):\n    return tf.clip_by_value(tensor, clip_value_min=-tf.float32.max, clip_value_max=1)\n\ntensor = tf.constant([5, 1, 0, 3, 0, -1, 2, -10, 2], dtype=tf.float32)\n",
            "\ninput_tensor = tf.constant([5, 1, 0, 3, 0, -1, 2, -10, 2])\n\noutput_tensor = tf.clip_by_value(input_tensor, clip_value_min=-tf.float32.max, clip_value_max=1)\n\n",
            "import numpy as np\n\ninput_tensor = tf.constant([5, 1, 0, 3, 0, -1, 2, -10, 2])\n\noutput_tensor = tf.clip_by_value(input_tensor, -np.inf, 1)\n\n",
            "\ninput_list = [5, 1, 0, 3, 0, -1, 2, -10, 2]\n\ninput_tensor = tf.constant(input_list)\n\noutput_tensor = tf.clip_by_value(input_tensor, clip_value_min=float('-inf'), clip_value_max=1)\n\n",
            "\ninput_tensor = tf.constant([5, 1, 0, 3, 0, -1, 2, -10, 2])\n\noutput_tensor = tf.clip_by_value(input_tensor, clip_value_min=-1e10, clip_value_max=1)\n\n"
        ],
        "target-program": "tf.minimum(in1, tf.constant(1))",
        "description": "clip values that are greater than 1",
        "tf_operators": {
            "tf.float32.max": 4,
            "tf.clip_by_value": 10,
            "tf.constant": 10,
            "tf.float32": 5,
            "tf.float32.min": 2
        },
        "coverage_percentage": 50.0,
        "total_in_target": 2,
        "total_covered": 1,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.006369426751592357,
                "tf.add(x, y)": 0.006369426751592357,
                "tf.add_n(inputs)": 0.006369426751592357,
                "tf.argmax(input, axis)": 0.006369426751592357,
                "tf.argmin(input, axis)": 0.006369426751592357,
                "tf.argsort(values, axis, stable=True)": 0.006369426751592357,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.006369426751592357,
                "tf.boolean_mask(tensor, mask)": 0.006369426751592357,
                "tf.broadcast_to(input, shape)": 0.006369426751592357,
                "tf.cast(x, dtype)": 0.006369426751592357,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.07006369426751592,
                "tf.concat(values, axis)": 0.006369426751592357,
                "tf.constant(value)": 0.03821656050955414,
                "tf.constant(value, dtype)": 0.006369426751592357,
                "tf.divide(x, y)": 0.006369426751592357,
                "tf.equal(x, y)": 0.006369426751592357,
                "tf.exp(x)": 0.006369426751592357,
                "tf.expand_dims(input, axis)": 0.006369426751592357,
                "tf.eye(num_rows)": 0.006369426751592357,
                "tf.eye(num_rows, num_columns)": 0.006369426751592357,
                "tf.eye(num_rows, dtype)": 0.006369426751592357,
                "tf.fill(dims, value)": 0.006369426751592357,
                "tf.gather(params, indices)": 0.006369426751592357,
                "tf.gather(params, indices, axis, batch_dims)": 0.006369426751592357,
                "tf.gather_nd(params, indices)": 0.006369426751592357,
                "tf.gather_nd(params, indices, batch_dims)": 0.006369426751592357,
                "tf.greater(x, y)": 0.006369426751592357,
                "tf.greater_equal(x, y)": 0.006369426751592357,
                "tf.math.bincount(arr)": 0.006369426751592357,
                "tf.math.ceil(x)": 0.006369426751592357,
                "tf.math.count_nonzero(input)": 0.006369426751592357,
                "tf.math.count_nonzero(input, axis)": 0.006369426751592357,
                "tf.math.cumsum(x, axis)": 0.006369426751592357,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.006369426751592357,
                "tf.math.divide_no_nan(x, y)": 0.006369426751592357,
                "tf.math.floor(x)": 0.006369426751592357,
                "tf.math.log(x)": 0.006369426751592357,
                "tf.math.logical_and(x, y)": 0.006369426751592357,
                "tf.math.logical_not(x)": 0.006369426751592357,
                "tf.math.logical_or(x, y)": 0.006369426751592357,
                "tf.math.logical_xor(x, y)": 0.006369426751592357,
                "tf.math.negative(x)": 0.006369426751592357,
                "tf.math.reciprocal(x)": 0.006369426751592357,
                "tf.math.reciprocal_no_nan(x)": 0.006369426751592357,
                "tf.math.segment_max(data, segment_ids)": 0.006369426751592357,
                "tf.math.segment_mean(data, segment_ids)": 0.006369426751592357,
                "tf.math.segment_min(data, segment_ids)": 0.006369426751592357,
                "tf.math.segment_prod(data, segment_ids)": 0.006369426751592357,
                "tf.math.segment_sum(data, segment_ids)": 0.006369426751592357,
                "tf.math.squared_difference(x, y)": 0.006369426751592357,
                "tf.math.top_k(input, k)": 0.006369426751592357,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.006369426751592357,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.006369426751592357,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.006369426751592357,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.006369426751592357,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.006369426751592357,
                "tf.matmul(a, b)": 0.006369426751592357,
                "tf.maximum(x, y)": 0.006369426751592357,
                "tf.minimum(x, y)": 0.006369426751592357,
                "tf.multiply(x, y)": 0.006369426751592357,
                "tf.not_equal(x, y)": 0.006369426751592357,
                "tf.one_hot(indices, depth)": 0.006369426751592357,
                "tf.ones(shape)": 0.006369426751592357,
                "tf.ones_like(input)": 0.006369426751592357,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.006369426751592357,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.006369426751592357,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.006369426751592357,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.006369426751592357,
                "tf.range(start)": 0.006369426751592357,
                "tf.range(start, limit, delta)": 0.006369426751592357,
                "tf.reduce_any(input_tensor, axis)": 0.006369426751592357,
                "tf.reduce_all(input_tensor, axis)": 0.006369426751592357,
                "tf.reduce_max(input_tensor)": 0.006369426751592357,
                "tf.reduce_max(input_tensor, axis)": 0.006369426751592357,
                "tf.reduce_mean(input_tensor)": 0.006369426751592357,
                "tf.reduce_mean(input_tensor, axis)": 0.006369426751592357,
                "tf.reduce_min(input_tensor)": 0.006369426751592357,
                "tf.reduce_min(input_tensor, axis)": 0.006369426751592357,
                "tf.reduce_prod(input_tensor, axis)": 0.006369426751592357,
                "tf.reduce_sum(input_tensor)": 0.006369426751592357,
                "tf.reduce_sum(input_tensor, axis)": 0.006369426751592357,
                "tf.repeat(input, repeats)": 0.006369426751592357,
                "tf.repeat(input, repeats, axis)": 0.006369426751592357,
                "tf.reshape(tensor, shape)": 0.006369426751592357,
                "tf.reverse(tensor, axis)": 0.006369426751592357,
                "tf.roll(input, shift, axis)": 0.006369426751592357,
                "tf.round(x)": 0.006369426751592357,
                "tf.scatter_nd(indices, updates, shape)": 0.006369426751592357,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.006369426751592357,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.006369426751592357,
                "tf.sequence_mask(lengths)": 0.006369426751592357,
                "tf.sequence_mask(lengths, maxlen)": 0.006369426751592357,
                "tf.shape(input)": 0.006369426751592357,
                "tf.sign(x)": 0.006369426751592357,
                "tf.sort(values, axis)": 0.006369426751592357,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.006369426751592357,
                "tf.sqrt(x)": 0.006369426751592357,
                "tf.square(x)": 0.006369426751592357,
                "tf.squeeze(input)": 0.006369426751592357,
                "tf.squeeze(input, axis)": 0.006369426751592357,
                "tf.stack(values, axis)": 0.006369426751592357,
                "tf.subtract(x, y)": 0.006369426751592357,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.006369426751592357,
                "tf.tensordot(a, b, axes)": 0.006369426751592357,
                "tf.tile(input, multiples)": 0.006369426751592357,
                "tf.transpose(a)": 0.006369426751592357,
                "tf.transpose(a, perm)": 0.006369426751592357,
                "tf.unique_with_counts(x)": 0.006369426751592357,
                "tf.unstack(value, axis)": 0.006369426751592357,
                "tf.where(condition)": 0.006369426751592357,
                "tf.where(condition, x, y)": 0.006369426751592357,
                "tf.zeros(shape)": 0.006369426751592357,
                "tf.zeros_like(input)": 0.006369426751592357,
                "tf.SparseTensor(indices, values, dense_shape)": 0.006369426751592357,
                "tf.sparse.add(a, b)": 0.006369426751592357,
                "tf.sparse.concat(axis, sp_inputs)": 0.006369426751592357,
                "tf.sparse.expand_dims(sp_input, axis)": 0.006369426751592357,
                "tf.sparse.from_dense(tensor)": 0.006369426751592357,
                "tf.sparse.maximum(sp_a, sp_b)": 0.006369426751592357,
                "tf.sparse.minimum(sp_a, sp_b)": 0.006369426751592357,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.006369426751592357,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.006369426751592357,
                "tf.sparse.reset_shape(sp_input)": 0.006369426751592357,
                "tf.sparse.reshape(sp_input, shape)": 0.006369426751592357,
                "tf.sparse.retain(sp_input, to_retain)": 0.006369426751592357,
                "tf.sparse.slice(sp_input, start, size)": 0.006369426751592357,
                "tf.sparse.split(sp_input, num_split, axis)": 0.006369426751592357,
                "tf.sparse.to_dense(sp_input)": 0.006369426751592357,
                "tf.sparse.to_dense(sp_input, default_value)": 0.006369426751592357,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.006369426751592357,
                "tf.sparse.transpose(sp_input)": 0.006369426751592357,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.006369426751592357,
                "IndexingOperation": 0.006369426751592357,
                "PairCreationOperation": 0.006369426751592357,
                "SingletonTupleCreationOperation": 0.006369426751592357,
                "SlicingAxis0BothOperation": 0.006369426751592357,
                "SlicingAxis0LeftOperation": 0.006369426751592357,
                "SlicingAxis0RightOperation": 0.006369426751592357,
                "SlicingAxis1BothOperation": 0.006369426751592357,
                "SlicingAxis1LeftOperation": 0.006369426751592357,
                "SlicingAxis1RightOperation": 0.006369426751592357,
                "TripleCreationOperation": 0.006369426751592357
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 4,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 5,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "stackoverflow_03",
        "completions": [
            "\ntensor1 = tf.constant([[11, 22, 33, 44, 55, 66, 77], [70, 60, 50, 40, 30, 20, 10]])\n\ntensor2 = tf.constant([[-6, -5], [14, 15]])\n\nindices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n\nupdated_tensor = tf.tensor_scatter_nd_update(tensor1, indices, tf.reshape(tensor2, [-1]))\n\n",
            "\ntensor1 = tf.constant([[11, 22, 33, 44, 55, 66, 77], [70, 60, 50, 40, 30, 20, 10]])\n\nindices = tf.constant([[0,3], [0,4], [1,3], [1,4]])\nupdates = tf.constant([-6, -5, 14, 15])\n\ntensor1_updated = tf.tensor_scatter_nd_update(tensor1, indices, updates)\n\n",
            "\ntensor1 = tf.constant([[11, 22, 33, 44, 55, 66, 77], [70, 60, 50, 40, 30, 20, 10]])\n\ntensor2 = tf.constant([[-6, -5], [14, 15]])\n\nindices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n\nupdates = tf.reshape(tensor2, [-1])\n\noutput = tf.tensor_scatter_nd_update(tensor1, indices, updates)\n\n",
            "\ntensor1 = tf.constant([[11, 22, 33, 44, 55, 66, 77], [70, 60, 50, 40, 30, 20, 10]])\ntensor2 = tf.constant([[-6, -5], [14, 15]])\n\nindices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n\nupdates = tf.gather_nd(tensor2, [[0, 0], [0, 1], [1, 0], [1, 1]])\n\noutput = tf.tensor_scatter_nd_update(tensor1, indices, updates)\n\n",
            "\na = tf.constant([[11, 22, 33, 44, 55, 66, 77], [70, 60, 50, 40, 30, 20, 10]])\nb = tf.constant([[-6, -5], [14, 15]])\n\nindices = tf.constant([[0,3],[0,4],[1,3],[1,4]])\n\nupdates = tf.reshape(b, [-1])\n\nresult = tf.tensor_scatter_nd_update(a, indices, updates)\n\n",
            "\ntensor1 = tf.constant([[11, 22, 33, 44, 55, 66, 77], [70, 60, 50, 40, 30, 20, 10]])\ntensor2 = tf.constant([[-6, -5], [14, 15]])\n\nindices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n\nupdates = tf.reshape(tensor2, [-1])\n\nresult = tf.tensor_scatter_nd_update(tensor1, indices, updates)\n\n",
            "\ntensor1 = tf.constant([[11, 22, 33, 44, 55, 66, 77], [70, 60, 50, 40, 30, 20, 10]])\ntensor2 = tf.constant([[1, 2, 3, -6, -5, 6, 7], [10, 20, 30, 14, 15, 40, 50]])\n\nindices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n\nupdates = tf.gather_nd(tensor2, indices)\n\noutput = tf.tensor_scatter_nd_update(tensor1, indices, updates)\n\n",
            "\ntensor1 = tf.constant([[11, 22, 33, 44, 55, 66, 77], [70, 60, 50, 40, 30, 20, 10]])\n\ntensor2 = tf.constant([[-6, -5], [14, 15]])\n\nindices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n\nresult = tf.tensor_scatter_nd_update(tensor1, indices, tf.reshape(tensor2, [-1]))\n\n",
            "\ntensor1 = tf.constant([[11, 22, 33, 44, 55, 66, 77], [70, 60, 50, 40, 30, 20, 10]])\ntensor2 = tf.constant([[-6, -5], [14, 15]])\n\nindices = tf.constant([[0,3],[0,4],[1,3],[1,4]])\n\nupdates = tf.gather(tensor2, [0, 1], axis=1)\n\noutput = tf.tensor_scatter_nd_update(tensor1, indices, updates)\n\n",
            "\ntensor = tf.constant([[11, 22, 33, 44, 55, 66, 77], [70, 60, 50, 40, 30, 20, 10]])\n\nupdates = tf.constant([[-6, -5], [14, 15]])\n\nindices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n\nupdates = tf.reshape(updates, [-1])\n\nresult = tf.tensor_scatter_nd_update(tensor, indices, updates)\n"
        ],
        "target-program": "tf.reduce_sum(tf.one_hot(tf.range(3, 5), depth=in1.shape[1], dtype=tf.int32), axis=0) * in2 + (1 - tf.reduce_sum(tf.one_hot(tf.range(3, 5), depth=in1.shape[1], dtype=tf.int32), axis=0)) * in1",
        "description": "replace certain columns with columns from the other tensor",
        "tf_operators": {
            "tf.reshape": 6,
            "tf.tensor_scatter_nd_update": 10,
            "tf.constant": 10,
            "tf.gather_nd": 2,
            "tf.gather": 1
        },
        "coverage_percentage": 0.0,
        "total_in_target": 4,
        "total_covered": 0,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005235602094240838,
                "tf.add(x, y)": 0.005235602094240838,
                "tf.add_n(inputs)": 0.005235602094240838,
                "tf.argmax(input, axis)": 0.005235602094240838,
                "tf.argmin(input, axis)": 0.005235602094240838,
                "tf.argsort(values, axis, stable=True)": 0.005235602094240838,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005235602094240838,
                "tf.boolean_mask(tensor, mask)": 0.005235602094240838,
                "tf.broadcast_to(input, shape)": 0.005235602094240838,
                "tf.cast(x, dtype)": 0.005235602094240838,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005235602094240838,
                "tf.concat(values, axis)": 0.005235602094240838,
                "tf.constant(value)": 0.16230366492146597,
                "tf.constant(value, dtype)": 0.005235602094240838,
                "tf.divide(x, y)": 0.005235602094240838,
                "tf.equal(x, y)": 0.005235602094240838,
                "tf.exp(x)": 0.005235602094240838,
                "tf.expand_dims(input, axis)": 0.005235602094240838,
                "tf.eye(num_rows)": 0.005235602094240838,
                "tf.eye(num_rows, num_columns)": 0.005235602094240838,
                "tf.eye(num_rows, dtype)": 0.005235602094240838,
                "tf.fill(dims, value)": 0.005235602094240838,
                "tf.gather(params, indices)": 0.005235602094240838,
                "tf.gather(params, indices, axis, batch_dims)": 0.010471204188481676,
                "tf.gather_nd(params, indices)": 0.015706806282722512,
                "tf.gather_nd(params, indices, batch_dims)": 0.005235602094240838,
                "tf.greater(x, y)": 0.005235602094240838,
                "tf.greater_equal(x, y)": 0.005235602094240838,
                "tf.math.bincount(arr)": 0.005235602094240838,
                "tf.math.ceil(x)": 0.005235602094240838,
                "tf.math.count_nonzero(input)": 0.005235602094240838,
                "tf.math.count_nonzero(input, axis)": 0.005235602094240838,
                "tf.math.cumsum(x, axis)": 0.005235602094240838,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005235602094240838,
                "tf.math.divide_no_nan(x, y)": 0.005235602094240838,
                "tf.math.floor(x)": 0.005235602094240838,
                "tf.math.log(x)": 0.005235602094240838,
                "tf.math.logical_and(x, y)": 0.005235602094240838,
                "tf.math.logical_not(x)": 0.005235602094240838,
                "tf.math.logical_or(x, y)": 0.005235602094240838,
                "tf.math.logical_xor(x, y)": 0.005235602094240838,
                "tf.math.negative(x)": 0.005235602094240838,
                "tf.math.reciprocal(x)": 0.005235602094240838,
                "tf.math.reciprocal_no_nan(x)": 0.005235602094240838,
                "tf.math.segment_max(data, segment_ids)": 0.005235602094240838,
                "tf.math.segment_mean(data, segment_ids)": 0.005235602094240838,
                "tf.math.segment_min(data, segment_ids)": 0.005235602094240838,
                "tf.math.segment_prod(data, segment_ids)": 0.005235602094240838,
                "tf.math.segment_sum(data, segment_ids)": 0.005235602094240838,
                "tf.math.squared_difference(x, y)": 0.005235602094240838,
                "tf.math.top_k(input, k)": 0.005235602094240838,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005235602094240838,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005235602094240838,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005235602094240838,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005235602094240838,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005235602094240838,
                "tf.matmul(a, b)": 0.005235602094240838,
                "tf.maximum(x, y)": 0.005235602094240838,
                "tf.minimum(x, y)": 0.005235602094240838,
                "tf.multiply(x, y)": 0.005235602094240838,
                "tf.not_equal(x, y)": 0.005235602094240838,
                "tf.one_hot(indices, depth)": 0.005235602094240838,
                "tf.ones(shape)": 0.005235602094240838,
                "tf.ones_like(input)": 0.005235602094240838,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005235602094240838,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005235602094240838,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005235602094240838,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005235602094240838,
                "tf.range(start)": 0.005235602094240838,
                "tf.range(start, limit, delta)": 0.005235602094240838,
                "tf.reduce_any(input_tensor, axis)": 0.005235602094240838,
                "tf.reduce_all(input_tensor, axis)": 0.005235602094240838,
                "tf.reduce_max(input_tensor)": 0.005235602094240838,
                "tf.reduce_max(input_tensor, axis)": 0.005235602094240838,
                "tf.reduce_mean(input_tensor)": 0.005235602094240838,
                "tf.reduce_mean(input_tensor, axis)": 0.005235602094240838,
                "tf.reduce_min(input_tensor)": 0.005235602094240838,
                "tf.reduce_min(input_tensor, axis)": 0.005235602094240838,
                "tf.reduce_prod(input_tensor, axis)": 0.005235602094240838,
                "tf.reduce_sum(input_tensor)": 0.005235602094240838,
                "tf.reduce_sum(input_tensor, axis)": 0.005235602094240838,
                "tf.repeat(input, repeats)": 0.005235602094240838,
                "tf.repeat(input, repeats, axis)": 0.005235602094240838,
                "tf.reshape(tensor, shape)": 0.03664921465968586,
                "tf.reverse(tensor, axis)": 0.005235602094240838,
                "tf.roll(input, shift, axis)": 0.005235602094240838,
                "tf.round(x)": 0.005235602094240838,
                "tf.scatter_nd(indices, updates, shape)": 0.005235602094240838,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005235602094240838,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005235602094240838,
                "tf.sequence_mask(lengths)": 0.005235602094240838,
                "tf.sequence_mask(lengths, maxlen)": 0.005235602094240838,
                "tf.shape(input)": 0.005235602094240838,
                "tf.sign(x)": 0.005235602094240838,
                "tf.sort(values, axis)": 0.005235602094240838,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005235602094240838,
                "tf.sqrt(x)": 0.005235602094240838,
                "tf.square(x)": 0.005235602094240838,
                "tf.squeeze(input)": 0.005235602094240838,
                "tf.squeeze(input, axis)": 0.005235602094240838,
                "tf.stack(values, axis)": 0.005235602094240838,
                "tf.subtract(x, y)": 0.005235602094240838,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.05759162303664921,
                "tf.tensordot(a, b, axes)": 0.005235602094240838,
                "tf.tile(input, multiples)": 0.005235602094240838,
                "tf.transpose(a)": 0.005235602094240838,
                "tf.transpose(a, perm)": 0.005235602094240838,
                "tf.unique_with_counts(x)": 0.005235602094240838,
                "tf.unstack(value, axis)": 0.005235602094240838,
                "tf.where(condition)": 0.005235602094240838,
                "tf.where(condition, x, y)": 0.005235602094240838,
                "tf.zeros(shape)": 0.005235602094240838,
                "tf.zeros_like(input)": 0.005235602094240838,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005235602094240838,
                "tf.sparse.add(a, b)": 0.005235602094240838,
                "tf.sparse.concat(axis, sp_inputs)": 0.005235602094240838,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005235602094240838,
                "tf.sparse.from_dense(tensor)": 0.005235602094240838,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005235602094240838,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005235602094240838,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005235602094240838,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005235602094240838,
                "tf.sparse.reset_shape(sp_input)": 0.005235602094240838,
                "tf.sparse.reshape(sp_input, shape)": 0.005235602094240838,
                "tf.sparse.retain(sp_input, to_retain)": 0.005235602094240838,
                "tf.sparse.slice(sp_input, start, size)": 0.005235602094240838,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005235602094240838,
                "tf.sparse.to_dense(sp_input)": 0.005235602094240838,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005235602094240838,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005235602094240838,
                "tf.sparse.transpose(sp_input)": 0.005235602094240838,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005235602094240838,
                "IndexingOperation": 0.005235602094240838,
                "PairCreationOperation": 0.005235602094240838,
                "SingletonTupleCreationOperation": 0.005235602094240838,
                "SlicingAxis0BothOperation": 0.005235602094240838,
                "SlicingAxis0LeftOperation": 0.005235602094240838,
                "SlicingAxis0RightOperation": 0.005235602094240838,
                "SlicingAxis1BothOperation": 0.005235602094240838,
                "SlicingAxis1LeftOperation": 0.005235602094240838,
                "SlicingAxis1RightOperation": 0.005235602094240838,
                "TripleCreationOperation": 0.005235602094240838
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 3,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 6,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 5,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 4,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8
            }
        }
    },
    {
        "task_id": "stackoverflow_04",
        "completions": [
            "\ndef gather_index_zero(tensor):\n    indices = tf.constant([0, 0])\n    result = tf.gather(tensor, indices, axis=1)\n    return result\n\ntensor = tf.constant([[5.0, 2.0], [1.0, 3.0], [0.0, -1.0]])\n",
            "\ninput_tensor = tf.constant([[5.0, 2.0], [1.0, 3.0], [0.0, -1.0]])\n\nfirst_column = tf.gather(input_tensor, [0], axis=1)\n\noutput_tensor = tf.stack([first_column, first_column], axis=2)\n\noutput_tensor = tf.squeeze(output_tensor, axis=1)\n\n",
            "\ntensor = tf.constant([[5.0, 2.0], [1.0, 3.0], [0.0, -1.0]])\n\nindices = tf.constant([0, 0])\n\nresult = tf.gather(tensor, indices, axis=1)\n\n",
            "\ninput_tensor = tf.constant([[5.0, 2.0], [1.0, 3.0], [0.0, -1.0]])\n\nindices = tf.constant([0])\n\noutput = tf.gather(input_tensor, indices, axis=1)\n\noutput = tf.repeat(output, 2, axis=1)\n\n",
            "\ndata = [[5.0, 2.0], [1.0, 3.0], [0.0, -1.0]]\n\ntensor = tf.constant(data)\n\nindices = tf.stack([tf.range(tf.shape(tensor)[0]), tf.ones_like(tensor[:, 0], dtype=tf.int32)], axis=1)\n\nresult = tf.tensor_scatter_nd_update(tensor, indices, tensor[:, 0])\n\n",
            "\ntensor = tf.constant([[5.0, 2.0], [1.0, 3.0], [0.0, -1.0]])\n\nindices = tf.constant([[0, 1], [1, 1], [2, 1]])\n\nupdates = tf.gather_nd(tensor, tf.constant([[0, 0], [1, 0], [2, 0]]))\n\nresult = tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "\ndef index_into_tensor(input):\n    tensor = tf.constant(input)\n    output = tf.gather(tensor, [0, 0], axis=1)\n    return output\n\ninput = [[5.0, 2.0], [1.0, 3.0], [0.0, -1.0]]\n",
            "\ninput_list = [[5.0, 2.0], [1.0, 3.0], [0.0, -1.0]]\n\ninput_tensor = tf.constant(input_list)\n\nindices = tf.constant([0])\n\ngathered_elements = tf.gather(input_tensor, indices, axis=1)\n\noutput = tf.stack([gathered_elements, gathered_elements], axis=2)\n\noutput = tf.reshape(output, tf.shape(input_tensor))\n\n",
            "\ntensor = tf.constant([[5.0, 2.0], [1.0, 3.0], [0.0, -1.0]])\n\nresult = tf.gather(tensor, [0, 0], axis=1)\n\n",
            "\ndef index_into_tensor(input_tensor):\n    tensor = tf.constant(input_tensor)\n    indices = tf.stack([tf.range(tf.shape(tensor)[0]), tf.ones(tf.shape(tensor)[0], dtype=tf.int32)], axis=1)\n    updates = tensor[:, 0]\n    output = tf.tensor_scatter_nd_update(tensor, indices, updates)\n    return output\n\ninput_tensor = [[5.0, 2.0], [1.0, 3.0], [0.0, -1.0]]\n"
        ],
        "target-program": "tf.gather_nd(in1, tf.stack((in2, in3), axis=-1))",
        "description": "index into the tensor",
        "tf_operators": {
            "tf.gather": 7,
            "tf.constant": 10,
            "tf.squeeze": 1,
            "tf.stack": 4,
            "tf.repeat": 1,
            "tf.int32": 2,
            "tf.range": 2,
            "tf.shape": 3,
            "tf.ones_like": 1,
            "tf.tensor_scatter_nd_update": 3,
            "tf.gather_nd": 1,
            "tf.reshape": 1,
            "tf.ones": 1
        },
        "coverage_percentage": 100.0,
        "total_in_target": 2,
        "total_covered": 2,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005235602094240838,
                "tf.add(x, y)": 0.005235602094240838,
                "tf.add_n(inputs)": 0.005235602094240838,
                "tf.argmax(input, axis)": 0.005235602094240838,
                "tf.argmin(input, axis)": 0.005235602094240838,
                "tf.argsort(values, axis, stable=True)": 0.005235602094240838,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005235602094240838,
                "tf.boolean_mask(tensor, mask)": 0.005235602094240838,
                "tf.broadcast_to(input, shape)": 0.005235602094240838,
                "tf.cast(x, dtype)": 0.005235602094240838,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005235602094240838,
                "tf.concat(values, axis)": 0.005235602094240838,
                "tf.constant(value)": 0.08900523560209424,
                "tf.constant(value, dtype)": 0.005235602094240838,
                "tf.divide(x, y)": 0.005235602094240838,
                "tf.equal(x, y)": 0.005235602094240838,
                "tf.exp(x)": 0.005235602094240838,
                "tf.expand_dims(input, axis)": 0.005235602094240838,
                "tf.eye(num_rows)": 0.005235602094240838,
                "tf.eye(num_rows, num_columns)": 0.005235602094240838,
                "tf.eye(num_rows, dtype)": 0.005235602094240838,
                "tf.fill(dims, value)": 0.005235602094240838,
                "tf.gather(params, indices)": 0.005235602094240838,
                "tf.gather(params, indices, axis, batch_dims)": 0.041884816753926704,
                "tf.gather_nd(params, indices)": 0.010471204188481676,
                "tf.gather_nd(params, indices, batch_dims)": 0.005235602094240838,
                "tf.greater(x, y)": 0.005235602094240838,
                "tf.greater_equal(x, y)": 0.005235602094240838,
                "tf.math.bincount(arr)": 0.005235602094240838,
                "tf.math.ceil(x)": 0.005235602094240838,
                "tf.math.count_nonzero(input)": 0.005235602094240838,
                "tf.math.count_nonzero(input, axis)": 0.005235602094240838,
                "tf.math.cumsum(x, axis)": 0.005235602094240838,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005235602094240838,
                "tf.math.divide_no_nan(x, y)": 0.005235602094240838,
                "tf.math.floor(x)": 0.005235602094240838,
                "tf.math.log(x)": 0.005235602094240838,
                "tf.math.logical_and(x, y)": 0.005235602094240838,
                "tf.math.logical_not(x)": 0.005235602094240838,
                "tf.math.logical_or(x, y)": 0.005235602094240838,
                "tf.math.logical_xor(x, y)": 0.005235602094240838,
                "tf.math.negative(x)": 0.005235602094240838,
                "tf.math.reciprocal(x)": 0.005235602094240838,
                "tf.math.reciprocal_no_nan(x)": 0.005235602094240838,
                "tf.math.segment_max(data, segment_ids)": 0.005235602094240838,
                "tf.math.segment_mean(data, segment_ids)": 0.005235602094240838,
                "tf.math.segment_min(data, segment_ids)": 0.005235602094240838,
                "tf.math.segment_prod(data, segment_ids)": 0.005235602094240838,
                "tf.math.segment_sum(data, segment_ids)": 0.005235602094240838,
                "tf.math.squared_difference(x, y)": 0.005235602094240838,
                "tf.math.top_k(input, k)": 0.005235602094240838,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005235602094240838,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005235602094240838,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005235602094240838,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005235602094240838,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005235602094240838,
                "tf.matmul(a, b)": 0.005235602094240838,
                "tf.maximum(x, y)": 0.005235602094240838,
                "tf.minimum(x, y)": 0.005235602094240838,
                "tf.multiply(x, y)": 0.005235602094240838,
                "tf.not_equal(x, y)": 0.005235602094240838,
                "tf.one_hot(indices, depth)": 0.005235602094240838,
                "tf.ones(shape)": 0.010471204188481676,
                "tf.ones_like(input)": 0.010471204188481676,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005235602094240838,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005235602094240838,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005235602094240838,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005235602094240838,
                "tf.range(start)": 0.015706806282722512,
                "tf.range(start, limit, delta)": 0.005235602094240838,
                "tf.reduce_any(input_tensor, axis)": 0.005235602094240838,
                "tf.reduce_all(input_tensor, axis)": 0.005235602094240838,
                "tf.reduce_max(input_tensor)": 0.005235602094240838,
                "tf.reduce_max(input_tensor, axis)": 0.005235602094240838,
                "tf.reduce_mean(input_tensor)": 0.005235602094240838,
                "tf.reduce_mean(input_tensor, axis)": 0.005235602094240838,
                "tf.reduce_min(input_tensor)": 0.005235602094240838,
                "tf.reduce_min(input_tensor, axis)": 0.005235602094240838,
                "tf.reduce_prod(input_tensor, axis)": 0.005235602094240838,
                "tf.reduce_sum(input_tensor)": 0.005235602094240838,
                "tf.reduce_sum(input_tensor, axis)": 0.005235602094240838,
                "tf.repeat(input, repeats)": 0.005235602094240838,
                "tf.repeat(input, repeats, axis)": 0.005235602094240838,
                "tf.reshape(tensor, shape)": 0.010471204188481676,
                "tf.reverse(tensor, axis)": 0.005235602094240838,
                "tf.roll(input, shift, axis)": 0.005235602094240838,
                "tf.round(x)": 0.005235602094240838,
                "tf.scatter_nd(indices, updates, shape)": 0.005235602094240838,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005235602094240838,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005235602094240838,
                "tf.sequence_mask(lengths)": 0.005235602094240838,
                "tf.sequence_mask(lengths, maxlen)": 0.005235602094240838,
                "tf.shape(input)": 0.02617801047120419,
                "tf.sign(x)": 0.005235602094240838,
                "tf.sort(values, axis)": 0.005235602094240838,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005235602094240838,
                "tf.sqrt(x)": 0.005235602094240838,
                "tf.square(x)": 0.005235602094240838,
                "tf.squeeze(input)": 0.005235602094240838,
                "tf.squeeze(input, axis)": 0.005235602094240838,
                "tf.stack(values, axis)": 0.02617801047120419,
                "tf.subtract(x, y)": 0.005235602094240838,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.020942408376963352,
                "tf.tensordot(a, b, axes)": 0.005235602094240838,
                "tf.tile(input, multiples)": 0.005235602094240838,
                "tf.transpose(a)": 0.005235602094240838,
                "tf.transpose(a, perm)": 0.005235602094240838,
                "tf.unique_with_counts(x)": 0.005235602094240838,
                "tf.unstack(value, axis)": 0.005235602094240838,
                "tf.where(condition)": 0.005235602094240838,
                "tf.where(condition, x, y)": 0.005235602094240838,
                "tf.zeros(shape)": 0.005235602094240838,
                "tf.zeros_like(input)": 0.005235602094240838,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005235602094240838,
                "tf.sparse.add(a, b)": 0.005235602094240838,
                "tf.sparse.concat(axis, sp_inputs)": 0.005235602094240838,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005235602094240838,
                "tf.sparse.from_dense(tensor)": 0.005235602094240838,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005235602094240838,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005235602094240838,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005235602094240838,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005235602094240838,
                "tf.sparse.reset_shape(sp_input)": 0.005235602094240838,
                "tf.sparse.reshape(sp_input, shape)": 0.005235602094240838,
                "tf.sparse.retain(sp_input, to_retain)": 0.005235602094240838,
                "tf.sparse.slice(sp_input, start, size)": 0.005235602094240838,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005235602094240838,
                "tf.sparse.to_dense(sp_input)": 0.005235602094240838,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005235602094240838,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005235602094240838,
                "tf.sparse.transpose(sp_input)": 0.005235602094240838,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005235602094240838,
                "IndexingOperation": 0.020942408376963352,
                "PairCreationOperation": 0.020942408376963352,
                "SingletonTupleCreationOperation": 0.005235602094240838,
                "SlicingAxis0BothOperation": 0.005235602094240838,
                "SlicingAxis0LeftOperation": 0.005235602094240838,
                "SlicingAxis0RightOperation": 0.005235602094240838,
                "SlicingAxis1BothOperation": 0.005235602094240838,
                "SlicingAxis1LeftOperation": 0.005235602094240838,
                "SlicingAxis1RightOperation": 0.005235602094240838,
                "TripleCreationOperation": 0.005235602094240838
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 3,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 5,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 6,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 5,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 5,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 6,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 8,
                "IndexingOperation": 6,
                "PairCreationOperation": 6,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8
            }
        }
    },
    {
        "task_id": "stackoverflow_05",
        "completions": [
            "\ndef tensor_multiply(tensor1, tensor2):\n    return tf.tensordot(tensor1, tensor2, axes=[[1],[0]])\n\ntensor1 = tf.constant([[4, 3, 1], [6, 5, 2]])\ntensor2 = tf.constant([[1, 2], [3, 4], [5, 6]])\n\ntensor1 = tf.constant([[[5, 5]], [[1, 5]], [[6, 0]]])\ntensor2 = tf.constant([[1, 2], [3, 4]])\n",
            "\ndef tensor_multiplication(tensor1, tensor2):\n    result = tf.tensordot(tensor1, tensor2, axes=1)\n    return result\n\ntensor1 = tf.constant([[4, 3, 1], [6, 5, 2]])\ntensor2 = tf.constant([[5, 5]], tf.int32)\n\n",
            "\ndef tensor_multiplication(input):\n    a = tf.constant(input)\n    b = tf.constant([[1], [2], [3]])\n    result = tf.tensordot(a, b, axes=1)\n    return result.numpy().tolist()\n\n",
            "\ntensor1 = tf.constant([[4, 3, 1], [6, 5, 2]])\ntensor2 = tf.constant([[1, 2], [3, 4], [5, 6]])\nresult = tf.tensordot(tensor1, tensor2, axes=1)\n\ntensor1 = tf.constant([[[5, 5]], [[1, 5]], [[6, 0]]])\ntensor2 = tf.constant([[1, 2], [3, 4], [5, 6]])\nresult = tf.tensordot(tensor1, tensor2, axes=1)\n",
            "\na = tf.constant([[4, 3, 1], [6, 5, 2]])\nb = tf.constant([[5, 5]], shape=(1, 2, 3))\n\nresult = tf.tensordot(a, b, axes=1)\n\n",
            "\ndef tensor_multiplication(input):\n    return tf.tensordot(input, input, axes=1)\n\ninput = [[4, 3, 1], [6, 5, 2]]\noutput = tensor_multiplication(input)\n\ninput = [[[5, 5]], [[1, 5]], [[6, 0]]]\noutput = tensor_multiplication(input)\n",
            "\ndef tensor_multiplication(input):\n    tensor = tf.constant(input)\n    result = tf.tensordot(tensor, tensor, axes=1)\n    return result.numpy().tolist()\n\n",
            "\ndef tensor_multiplication(input):\n    tensor = tf.constant(input)\n    result = tf.tensordot(tensor, tf.transpose(tensor), axes=1)\n    return result.numpy().tolist()\n\n",
            "\ndef tensor_multiplication(input):\n    tensor = tf.constant(input)\n    result = tf.tensordot(tensor, tensor, axes=[[1], [0]])\n    return result.numpy().tolist()\n\n",
            "\ndef tensor_multiplication(input):\n    tensor_a = tf.constant(input)\n    tensor_b = tf.constant([[1], [2], [3]])\n    result = tf.tensordot(tensor_a, tensor_b, axes=1)\n    return result.numpy()\n"
        ],
        "target-program": "tf.tensordot(in1, in2, 1)",
        "description": "tensor multiplication like np.tensordot",
        "tf_operators": {
            "tf.tensordot": 10,
            "tf.constant": 9,
            "tf.int32": 1,
            "tf.transpose": 1
        },
        "coverage_percentage": 100.0,
        "total_in_target": 1,
        "total_covered": 1,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005780346820809248,
                "tf.add(x, y)": 0.005780346820809248,
                "tf.add_n(inputs)": 0.005780346820809248,
                "tf.argmax(input, axis)": 0.005780346820809248,
                "tf.argmin(input, axis)": 0.005780346820809248,
                "tf.argsort(values, axis, stable=True)": 0.005780346820809248,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005780346820809248,
                "tf.boolean_mask(tensor, mask)": 0.005780346820809248,
                "tf.broadcast_to(input, shape)": 0.005780346820809248,
                "tf.cast(x, dtype)": 0.005780346820809248,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005780346820809248,
                "tf.concat(values, axis)": 0.005780346820809248,
                "tf.constant(value)": 0.10404624277456648,
                "tf.constant(value, dtype)": 0.011560693641618497,
                "tf.divide(x, y)": 0.005780346820809248,
                "tf.equal(x, y)": 0.005780346820809248,
                "tf.exp(x)": 0.005780346820809248,
                "tf.expand_dims(input, axis)": 0.005780346820809248,
                "tf.eye(num_rows)": 0.005780346820809248,
                "tf.eye(num_rows, num_columns)": 0.005780346820809248,
                "tf.eye(num_rows, dtype)": 0.005780346820809248,
                "tf.fill(dims, value)": 0.005780346820809248,
                "tf.gather(params, indices)": 0.005780346820809248,
                "tf.gather(params, indices, axis, batch_dims)": 0.005780346820809248,
                "tf.gather_nd(params, indices)": 0.005780346820809248,
                "tf.gather_nd(params, indices, batch_dims)": 0.005780346820809248,
                "tf.greater(x, y)": 0.005780346820809248,
                "tf.greater_equal(x, y)": 0.005780346820809248,
                "tf.math.bincount(arr)": 0.005780346820809248,
                "tf.math.ceil(x)": 0.005780346820809248,
                "tf.math.count_nonzero(input)": 0.005780346820809248,
                "tf.math.count_nonzero(input, axis)": 0.005780346820809248,
                "tf.math.cumsum(x, axis)": 0.005780346820809248,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005780346820809248,
                "tf.math.divide_no_nan(x, y)": 0.005780346820809248,
                "tf.math.floor(x)": 0.005780346820809248,
                "tf.math.log(x)": 0.005780346820809248,
                "tf.math.logical_and(x, y)": 0.005780346820809248,
                "tf.math.logical_not(x)": 0.005780346820809248,
                "tf.math.logical_or(x, y)": 0.005780346820809248,
                "tf.math.logical_xor(x, y)": 0.005780346820809248,
                "tf.math.negative(x)": 0.005780346820809248,
                "tf.math.reciprocal(x)": 0.005780346820809248,
                "tf.math.reciprocal_no_nan(x)": 0.005780346820809248,
                "tf.math.segment_max(data, segment_ids)": 0.005780346820809248,
                "tf.math.segment_mean(data, segment_ids)": 0.005780346820809248,
                "tf.math.segment_min(data, segment_ids)": 0.005780346820809248,
                "tf.math.segment_prod(data, segment_ids)": 0.005780346820809248,
                "tf.math.segment_sum(data, segment_ids)": 0.005780346820809248,
                "tf.math.squared_difference(x, y)": 0.005780346820809248,
                "tf.math.top_k(input, k)": 0.005780346820809248,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005780346820809248,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005780346820809248,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005780346820809248,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005780346820809248,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005780346820809248,
                "tf.matmul(a, b)": 0.005780346820809248,
                "tf.maximum(x, y)": 0.005780346820809248,
                "tf.minimum(x, y)": 0.005780346820809248,
                "tf.multiply(x, y)": 0.005780346820809248,
                "tf.not_equal(x, y)": 0.005780346820809248,
                "tf.one_hot(indices, depth)": 0.005780346820809248,
                "tf.ones(shape)": 0.005780346820809248,
                "tf.ones_like(input)": 0.005780346820809248,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005780346820809248,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005780346820809248,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005780346820809248,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005780346820809248,
                "tf.range(start)": 0.005780346820809248,
                "tf.range(start, limit, delta)": 0.005780346820809248,
                "tf.reduce_any(input_tensor, axis)": 0.005780346820809248,
                "tf.reduce_all(input_tensor, axis)": 0.005780346820809248,
                "tf.reduce_max(input_tensor)": 0.005780346820809248,
                "tf.reduce_max(input_tensor, axis)": 0.005780346820809248,
                "tf.reduce_mean(input_tensor)": 0.005780346820809248,
                "tf.reduce_mean(input_tensor, axis)": 0.005780346820809248,
                "tf.reduce_min(input_tensor)": 0.005780346820809248,
                "tf.reduce_min(input_tensor, axis)": 0.005780346820809248,
                "tf.reduce_prod(input_tensor, axis)": 0.005780346820809248,
                "tf.reduce_sum(input_tensor)": 0.005780346820809248,
                "tf.reduce_sum(input_tensor, axis)": 0.005780346820809248,
                "tf.repeat(input, repeats)": 0.005780346820809248,
                "tf.repeat(input, repeats, axis)": 0.005780346820809248,
                "tf.reshape(tensor, shape)": 0.005780346820809248,
                "tf.reverse(tensor, axis)": 0.005780346820809248,
                "tf.roll(input, shift, axis)": 0.005780346820809248,
                "tf.round(x)": 0.005780346820809248,
                "tf.scatter_nd(indices, updates, shape)": 0.005780346820809248,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005780346820809248,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005780346820809248,
                "tf.sequence_mask(lengths)": 0.005780346820809248,
                "tf.sequence_mask(lengths, maxlen)": 0.005780346820809248,
                "tf.shape(input)": 0.005780346820809248,
                "tf.sign(x)": 0.005780346820809248,
                "tf.sort(values, axis)": 0.005780346820809248,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005780346820809248,
                "tf.sqrt(x)": 0.005780346820809248,
                "tf.square(x)": 0.005780346820809248,
                "tf.squeeze(input)": 0.005780346820809248,
                "tf.squeeze(input, axis)": 0.005780346820809248,
                "tf.stack(values, axis)": 0.005780346820809248,
                "tf.subtract(x, y)": 0.005780346820809248,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005780346820809248,
                "tf.tensordot(a, b, axes)": 0.06936416184971098,
                "tf.tile(input, multiples)": 0.005780346820809248,
                "tf.transpose(a)": 0.011560693641618497,
                "tf.transpose(a, perm)": 0.005780346820809248,
                "tf.unique_with_counts(x)": 0.005780346820809248,
                "tf.unstack(value, axis)": 0.005780346820809248,
                "tf.where(condition)": 0.005780346820809248,
                "tf.where(condition, x, y)": 0.005780346820809248,
                "tf.zeros(shape)": 0.005780346820809248,
                "tf.zeros_like(input)": 0.005780346820809248,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005780346820809248,
                "tf.sparse.add(a, b)": 0.005780346820809248,
                "tf.sparse.concat(axis, sp_inputs)": 0.005780346820809248,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005780346820809248,
                "tf.sparse.from_dense(tensor)": 0.005780346820809248,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005780346820809248,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005780346820809248,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005780346820809248,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005780346820809248,
                "tf.sparse.reset_shape(sp_input)": 0.005780346820809248,
                "tf.sparse.reshape(sp_input, shape)": 0.005780346820809248,
                "tf.sparse.retain(sp_input, to_retain)": 0.005780346820809248,
                "tf.sparse.slice(sp_input, start, size)": 0.005780346820809248,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005780346820809248,
                "tf.sparse.to_dense(sp_input)": 0.005780346820809248,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005780346820809248,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005780346820809248,
                "tf.sparse.transpose(sp_input)": 0.005780346820809248,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005780346820809248,
                "IndexingOperation": 0.005780346820809248,
                "PairCreationOperation": 0.005780346820809248,
                "SingletonTupleCreationOperation": 0.005780346820809248,
                "SlicingAxis0BothOperation": 0.005780346820809248,
                "SlicingAxis0LeftOperation": 0.005780346820809248,
                "SlicingAxis0RightOperation": 0.005780346820809248,
                "SlicingAxis1BothOperation": 0.005780346820809248,
                "SlicingAxis1LeftOperation": 0.005780346820809248,
                "SlicingAxis1RightOperation": 0.005780346820809248,
                "TripleCreationOperation": 0.011560693641618497
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 3,
                "tf.constant(value, dtype)": 6,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 4,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 6,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 6
            }
        }
    },
    {
        "task_id": "stackoverflow_06",
        "completions": [
            "\ndef binary_tensor_from_vector(vector):\n    first_element = vector[0]\n    equal_to_first = tf.equal(vector, first_element)\n    binary_tensor = tf.cast(equal_to_first, tf.float32)\n    return binary_tensor\n\nvector = tf.constant([3, 5, 0, 2, 3, 3, 0])\noutput = binary_tensor_from_vector(vector)\n",
            "\nvec = tf.constant([3, 5, 0, 2, 3, 3, 0])\n\nequal_to_first = tf.equal(vec, vec[0])\n\nbinary_tensor = tf.cast(equal_to_first, tf.float32)\n\n",
            "\nvector = tf.constant([3, 5, 0, 2, 3, 3, 0])\n\nbinary_tensor = tf.equal(vector, vector[0])\n\nbinary_tensor = tf.cast(binary_tensor, tf.float32)\n\n",
            "\ndef binary_tensor_from_vector(vector):\n    tensor = tf.constant(vector)\n    first_element = tensor[0]\n    binary_tensor = tf.cast(tf.equal(tensor, first_element), tf.float32)\n    return binary_tensor\n",
            "\ndef binary_tensor_from_vector(vector):\n    tensor = tf.constant(vector)\n    binary_tensor = tf.cast(tf.equal(tensor, tensor[0]), tf.float32)\n    return binary_tensor\n",
            "\ndef binary_tensor_from_vector(vector):\n    tensor = tf.constant(vector)\n    first_element = tensor[0]\n    equal_to_first = tf.equal(tensor, first_element)\n    binary_tensor = tf.cast(equal_to_first, tf.float32)\n    return binary_tensor\n",
            "\ndef binary_tensor_from_vector(vector):\n    tensor = tf.constant(vector)\n    binary_tensor = tf.cast(tf.equal(tensor, tensor[0]), tf.float32)\n    return binary_tensor\n\nvector = [3, 5, 0, 2, 3, 3, 0]\n",
            "\ndef binary_tensor_from_vector(vector):\n    tensor = tf.constant(vector)\n    binary_tensor = tf.cast(tf.equal(tensor, tensor[0]), tf.float32)\n    return binary_tensor\n\nvector = [3, 5, 0, 2, 3, 3, 0]\n",
            "\ndef binary_tensor_from_vector(vector):\n    first_element = tf.constant(vector[0])\n    equals_first_element = tf.equal(vector, first_element)\n    binary_tensor = tf.cast(equals_first_element, tf.float32)\n    return binary_tensor\n\nvector = [3, 5, 0, 2, 3, 3, 0]\n",
            "\ndef binary_tensor_from_vector(vector):\n    first_element = vector[0]\n    binary_tensor = tf.cast(tf.equal(vector, first_element), tf.float32)\n    return binary_tensor\n\nvector = [3, 5, 0, 2, 3, 3, 0]\n"
        ],
        "target-program": "tf.cast(tf.equal(in1, tf.expand_dims(in1, 1)), tf.float32)",
        "description": "binary tensor from vector indicating if elements are equal",
        "tf_operators": {
            "tf.cast": 10,
            "tf.equal": 10,
            "tf.float32": 10,
            "tf.constant": 9
        },
        "coverage_percentage": 75.0,
        "total_in_target": 4,
        "total_covered": 3,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0055248618784530384,
                "tf.add(x, y)": 0.0055248618784530384,
                "tf.add_n(inputs)": 0.0055248618784530384,
                "tf.argmax(input, axis)": 0.0055248618784530384,
                "tf.argmin(input, axis)": 0.0055248618784530384,
                "tf.argsort(values, axis, stable=True)": 0.0055248618784530384,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.0055248618784530384,
                "tf.boolean_mask(tensor, mask)": 0.0055248618784530384,
                "tf.broadcast_to(input, shape)": 0.0055248618784530384,
                "tf.cast(x, dtype)": 0.06077348066298342,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0055248618784530384,
                "tf.concat(values, axis)": 0.0055248618784530384,
                "tf.constant(value)": 0.055248618784530384,
                "tf.constant(value, dtype)": 0.0055248618784530384,
                "tf.divide(x, y)": 0.0055248618784530384,
                "tf.equal(x, y)": 0.06077348066298342,
                "tf.exp(x)": 0.0055248618784530384,
                "tf.expand_dims(input, axis)": 0.0055248618784530384,
                "tf.eye(num_rows)": 0.0055248618784530384,
                "tf.eye(num_rows, num_columns)": 0.0055248618784530384,
                "tf.eye(num_rows, dtype)": 0.0055248618784530384,
                "tf.fill(dims, value)": 0.0055248618784530384,
                "tf.gather(params, indices)": 0.0055248618784530384,
                "tf.gather(params, indices, axis, batch_dims)": 0.0055248618784530384,
                "tf.gather_nd(params, indices)": 0.0055248618784530384,
                "tf.gather_nd(params, indices, batch_dims)": 0.0055248618784530384,
                "tf.greater(x, y)": 0.0055248618784530384,
                "tf.greater_equal(x, y)": 0.0055248618784530384,
                "tf.math.bincount(arr)": 0.0055248618784530384,
                "tf.math.ceil(x)": 0.0055248618784530384,
                "tf.math.count_nonzero(input)": 0.0055248618784530384,
                "tf.math.count_nonzero(input, axis)": 0.0055248618784530384,
                "tf.math.cumsum(x, axis)": 0.0055248618784530384,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0055248618784530384,
                "tf.math.divide_no_nan(x, y)": 0.0055248618784530384,
                "tf.math.floor(x)": 0.0055248618784530384,
                "tf.math.log(x)": 0.0055248618784530384,
                "tf.math.logical_and(x, y)": 0.0055248618784530384,
                "tf.math.logical_not(x)": 0.0055248618784530384,
                "tf.math.logical_or(x, y)": 0.0055248618784530384,
                "tf.math.logical_xor(x, y)": 0.0055248618784530384,
                "tf.math.negative(x)": 0.0055248618784530384,
                "tf.math.reciprocal(x)": 0.0055248618784530384,
                "tf.math.reciprocal_no_nan(x)": 0.0055248618784530384,
                "tf.math.segment_max(data, segment_ids)": 0.0055248618784530384,
                "tf.math.segment_mean(data, segment_ids)": 0.0055248618784530384,
                "tf.math.segment_min(data, segment_ids)": 0.0055248618784530384,
                "tf.math.segment_prod(data, segment_ids)": 0.0055248618784530384,
                "tf.math.segment_sum(data, segment_ids)": 0.0055248618784530384,
                "tf.math.squared_difference(x, y)": 0.0055248618784530384,
                "tf.math.top_k(input, k)": 0.0055248618784530384,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0055248618784530384,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0055248618784530384,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0055248618784530384,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0055248618784530384,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0055248618784530384,
                "tf.matmul(a, b)": 0.0055248618784530384,
                "tf.maximum(x, y)": 0.0055248618784530384,
                "tf.minimum(x, y)": 0.0055248618784530384,
                "tf.multiply(x, y)": 0.0055248618784530384,
                "tf.not_equal(x, y)": 0.0055248618784530384,
                "tf.one_hot(indices, depth)": 0.0055248618784530384,
                "tf.ones(shape)": 0.0055248618784530384,
                "tf.ones_like(input)": 0.0055248618784530384,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.0055248618784530384,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.0055248618784530384,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.0055248618784530384,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.0055248618784530384,
                "tf.range(start)": 0.0055248618784530384,
                "tf.range(start, limit, delta)": 0.0055248618784530384,
                "tf.reduce_any(input_tensor, axis)": 0.0055248618784530384,
                "tf.reduce_all(input_tensor, axis)": 0.0055248618784530384,
                "tf.reduce_max(input_tensor)": 0.0055248618784530384,
                "tf.reduce_max(input_tensor, axis)": 0.0055248618784530384,
                "tf.reduce_mean(input_tensor)": 0.0055248618784530384,
                "tf.reduce_mean(input_tensor, axis)": 0.0055248618784530384,
                "tf.reduce_min(input_tensor)": 0.0055248618784530384,
                "tf.reduce_min(input_tensor, axis)": 0.0055248618784530384,
                "tf.reduce_prod(input_tensor, axis)": 0.0055248618784530384,
                "tf.reduce_sum(input_tensor)": 0.0055248618784530384,
                "tf.reduce_sum(input_tensor, axis)": 0.0055248618784530384,
                "tf.repeat(input, repeats)": 0.0055248618784530384,
                "tf.repeat(input, repeats, axis)": 0.0055248618784530384,
                "tf.reshape(tensor, shape)": 0.0055248618784530384,
                "tf.reverse(tensor, axis)": 0.0055248618784530384,
                "tf.roll(input, shift, axis)": 0.0055248618784530384,
                "tf.round(x)": 0.0055248618784530384,
                "tf.scatter_nd(indices, updates, shape)": 0.0055248618784530384,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.0055248618784530384,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.0055248618784530384,
                "tf.sequence_mask(lengths)": 0.0055248618784530384,
                "tf.sequence_mask(lengths, maxlen)": 0.0055248618784530384,
                "tf.shape(input)": 0.0055248618784530384,
                "tf.sign(x)": 0.0055248618784530384,
                "tf.sort(values, axis)": 0.0055248618784530384,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.0055248618784530384,
                "tf.sqrt(x)": 0.0055248618784530384,
                "tf.square(x)": 0.0055248618784530384,
                "tf.squeeze(input)": 0.0055248618784530384,
                "tf.squeeze(input, axis)": 0.0055248618784530384,
                "tf.stack(values, axis)": 0.0055248618784530384,
                "tf.subtract(x, y)": 0.0055248618784530384,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0055248618784530384,
                "tf.tensordot(a, b, axes)": 0.0055248618784530384,
                "tf.tile(input, multiples)": 0.0055248618784530384,
                "tf.transpose(a)": 0.0055248618784530384,
                "tf.transpose(a, perm)": 0.0055248618784530384,
                "tf.unique_with_counts(x)": 0.0055248618784530384,
                "tf.unstack(value, axis)": 0.0055248618784530384,
                "tf.where(condition)": 0.0055248618784530384,
                "tf.where(condition, x, y)": 0.0055248618784530384,
                "tf.zeros(shape)": 0.0055248618784530384,
                "tf.zeros_like(input)": 0.0055248618784530384,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0055248618784530384,
                "tf.sparse.add(a, b)": 0.0055248618784530384,
                "tf.sparse.concat(axis, sp_inputs)": 0.0055248618784530384,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0055248618784530384,
                "tf.sparse.from_dense(tensor)": 0.0055248618784530384,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0055248618784530384,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0055248618784530384,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0055248618784530384,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0055248618784530384,
                "tf.sparse.reset_shape(sp_input)": 0.0055248618784530384,
                "tf.sparse.reshape(sp_input, shape)": 0.0055248618784530384,
                "tf.sparse.retain(sp_input, to_retain)": 0.0055248618784530384,
                "tf.sparse.slice(sp_input, start, size)": 0.0055248618784530384,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0055248618784530384,
                "tf.sparse.to_dense(sp_input)": 0.0055248618784530384,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0055248618784530384,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0055248618784530384,
                "tf.sparse.transpose(sp_input)": 0.0055248618784530384,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.0055248618784530384,
                "IndexingOperation": 0.06077348066298342,
                "PairCreationOperation": 0.0055248618784530384,
                "SingletonTupleCreationOperation": 0.0055248618784530384,
                "SlicingAxis0BothOperation": 0.0055248618784530384,
                "SlicingAxis0LeftOperation": 0.0055248618784530384,
                "SlicingAxis0RightOperation": 0.0055248618784530384,
                "SlicingAxis1BothOperation": 0.0055248618784530384,
                "SlicingAxis1LeftOperation": 0.0055248618784530384,
                "SlicingAxis1RightOperation": 0.0055248618784530384,
                "TripleCreationOperation": 0.0055248618784530384
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 4,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 4,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 4,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "stackoverflow_07",
        "completions": [
            "\ndef swap_dimensions(tensor):\n    return tf.transpose(tensor, perm=[1, 0, 2])[0]\n\ntensor = tf.constant([[[8, 4, 6], [2, 12, 3]], [[11, 12, 5], [9, 12, 12]], [[9, 2, 13], [7, 0, 7]], [[2, 10, 5], [7, 1, 2]]])\n",
            "\ntensor = tf.constant([[[8, 4, 6], [2, 12, 3]], [[11, 12, 5], [9, 12, 12]], [[9, 2, 13], [7, 0, 7]], [[2, 10, 5], [7, 1, 2]]])\n\noutput = tf.transpose(tensor, [1, 0, 2])\n\n",
            "\ndef swap_dimensions(tensor):\n    return tf.transpose(tensor, perm=[1, 0, 2])[0]\n\ntensor = tf.constant([[[8, 4, 6], [2, 12, 3]], [[11, 12, 5], [9, 12, 12]], [[9, 2, 13], [7, 0, 7]], [[2, 10, 5], [7, 1, 2]]])\n",
            "\ntensor = tf.constant([[[8, 4, 6], [2, 12, 3]], [[11, 12, 5], [9, 12, 12]], [[9, 2, 13], [7, 0, 7]], [[2, 10, 5], [7, 1, 2]]])\n\noutput = tf.transpose(tensor, perm=[1, 0, 2])\n\n",
            "\ntensor = tf.constant([[[8, 4, 6], [2, 12, 3]], [[11, 12, 5], [9, 12, 12]], [[9, 2, 13], [7, 0, 7]], [[2, 10, 5], [7, 1, 2]]])\n\nswapped_tensor = tf.transpose(tensor, perm=[1, 0, 2])\n\noutput = swapped_tensor[0]\n\n",
            "\ntensor = tf.constant([[[8, 4, 6], [2, 12, 3]], [[11, 12, 5], [9, 12, 12]], [[9, 2, 13], [7, 0, 7]], [[2, 10, 5], [7, 1, 2]]])\n\nswapped_tensor = tf.transpose(tensor, perm=[1, 0, 2])\n\n",
            "\ntensor = tf.constant([[[8, 4, 6], [2, 12, 3]], [[11, 12, 5], [9, 12, 12]], [[9, 2, 13], [7, 0, 7]], [[2, 10, 5], [7, 1, 2]]])\n\noutput = tf.transpose(tensor, perm=[1, 0, 2])\n\n",
            "\ntensor = tf.constant([[[8, 4, 6], [2, 12, 3]], [[11, 12, 5], [9, 12, 12]], [[9, 2, 13], [7, 0, 7]], [[2, 10, 5], [7, 1, 2]]])\n\nresult = tf.transpose(tensor, perm=[1, 0, 2])\n\n",
            "\ntensor = tf.constant([[[8, 4, 6], [2, 12, 3]], [[11, 12, 5], [9, 12, 12]], [[9, 2, 13], [7, 0, 7]], [[2, 10, 5], [7, 1, 2]]])\n\nswapped_tensor = tf.transpose(tensor, perm=[1, 0, 2])\n\noutput = swapped_tensor[0]\n",
            "\ntensor = tf.constant([[[8, 4, 6], [2, 12, 3]], [[11, 12, 5], [9, 12, 12]], [[9, 2, 13], [7, 0, 7]], [[2, 10, 5], [7, 1, 2]]])\n\ntransposed_tensor = tf.transpose(tensor, perm=[1, 0, 2])\n\noutput = transposed_tensor[0]\n"
        ],
        "target-program": "tf.cast(tf.unstack(in1, axis=1), tf.int32)",
        "description": "swap the first two dimensions of the tensor",
        "tf_operators": {
            "tf.constant": 10,
            "tf.transpose": 10
        },
        "coverage_percentage": 0.0,
        "total_in_target": 3,
        "total_covered": 0,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.006329113924050633,
                "tf.add(x, y)": 0.006329113924050633,
                "tf.add_n(inputs)": 0.006329113924050633,
                "tf.argmax(input, axis)": 0.006329113924050633,
                "tf.argmin(input, axis)": 0.006329113924050633,
                "tf.argsort(values, axis, stable=True)": 0.006329113924050633,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.006329113924050633,
                "tf.boolean_mask(tensor, mask)": 0.006329113924050633,
                "tf.broadcast_to(input, shape)": 0.006329113924050633,
                "tf.cast(x, dtype)": 0.006329113924050633,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.006329113924050633,
                "tf.concat(values, axis)": 0.006329113924050633,
                "tf.constant(value)": 0.06962025316455696,
                "tf.constant(value, dtype)": 0.006329113924050633,
                "tf.divide(x, y)": 0.006329113924050633,
                "tf.equal(x, y)": 0.006329113924050633,
                "tf.exp(x)": 0.006329113924050633,
                "tf.expand_dims(input, axis)": 0.006329113924050633,
                "tf.eye(num_rows)": 0.006329113924050633,
                "tf.eye(num_rows, num_columns)": 0.006329113924050633,
                "tf.eye(num_rows, dtype)": 0.006329113924050633,
                "tf.fill(dims, value)": 0.006329113924050633,
                "tf.gather(params, indices)": 0.006329113924050633,
                "tf.gather(params, indices, axis, batch_dims)": 0.006329113924050633,
                "tf.gather_nd(params, indices)": 0.006329113924050633,
                "tf.gather_nd(params, indices, batch_dims)": 0.006329113924050633,
                "tf.greater(x, y)": 0.006329113924050633,
                "tf.greater_equal(x, y)": 0.006329113924050633,
                "tf.math.bincount(arr)": 0.006329113924050633,
                "tf.math.ceil(x)": 0.006329113924050633,
                "tf.math.count_nonzero(input)": 0.006329113924050633,
                "tf.math.count_nonzero(input, axis)": 0.006329113924050633,
                "tf.math.cumsum(x, axis)": 0.006329113924050633,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.006329113924050633,
                "tf.math.divide_no_nan(x, y)": 0.006329113924050633,
                "tf.math.floor(x)": 0.006329113924050633,
                "tf.math.log(x)": 0.006329113924050633,
                "tf.math.logical_and(x, y)": 0.006329113924050633,
                "tf.math.logical_not(x)": 0.006329113924050633,
                "tf.math.logical_or(x, y)": 0.006329113924050633,
                "tf.math.logical_xor(x, y)": 0.006329113924050633,
                "tf.math.negative(x)": 0.006329113924050633,
                "tf.math.reciprocal(x)": 0.006329113924050633,
                "tf.math.reciprocal_no_nan(x)": 0.006329113924050633,
                "tf.math.segment_max(data, segment_ids)": 0.006329113924050633,
                "tf.math.segment_mean(data, segment_ids)": 0.006329113924050633,
                "tf.math.segment_min(data, segment_ids)": 0.006329113924050633,
                "tf.math.segment_prod(data, segment_ids)": 0.006329113924050633,
                "tf.math.segment_sum(data, segment_ids)": 0.006329113924050633,
                "tf.math.squared_difference(x, y)": 0.006329113924050633,
                "tf.math.top_k(input, k)": 0.006329113924050633,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.006329113924050633,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.006329113924050633,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.006329113924050633,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.006329113924050633,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.006329113924050633,
                "tf.matmul(a, b)": 0.006329113924050633,
                "tf.maximum(x, y)": 0.006329113924050633,
                "tf.minimum(x, y)": 0.006329113924050633,
                "tf.multiply(x, y)": 0.006329113924050633,
                "tf.not_equal(x, y)": 0.006329113924050633,
                "tf.one_hot(indices, depth)": 0.006329113924050633,
                "tf.ones(shape)": 0.006329113924050633,
                "tf.ones_like(input)": 0.006329113924050633,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.006329113924050633,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.006329113924050633,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.006329113924050633,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.006329113924050633,
                "tf.range(start)": 0.006329113924050633,
                "tf.range(start, limit, delta)": 0.006329113924050633,
                "tf.reduce_any(input_tensor, axis)": 0.006329113924050633,
                "tf.reduce_all(input_tensor, axis)": 0.006329113924050633,
                "tf.reduce_max(input_tensor)": 0.006329113924050633,
                "tf.reduce_max(input_tensor, axis)": 0.006329113924050633,
                "tf.reduce_mean(input_tensor)": 0.006329113924050633,
                "tf.reduce_mean(input_tensor, axis)": 0.006329113924050633,
                "tf.reduce_min(input_tensor)": 0.006329113924050633,
                "tf.reduce_min(input_tensor, axis)": 0.006329113924050633,
                "tf.reduce_prod(input_tensor, axis)": 0.006329113924050633,
                "tf.reduce_sum(input_tensor)": 0.006329113924050633,
                "tf.reduce_sum(input_tensor, axis)": 0.006329113924050633,
                "tf.repeat(input, repeats)": 0.006329113924050633,
                "tf.repeat(input, repeats, axis)": 0.006329113924050633,
                "tf.reshape(tensor, shape)": 0.006329113924050633,
                "tf.reverse(tensor, axis)": 0.006329113924050633,
                "tf.roll(input, shift, axis)": 0.006329113924050633,
                "tf.round(x)": 0.006329113924050633,
                "tf.scatter_nd(indices, updates, shape)": 0.006329113924050633,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.006329113924050633,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.006329113924050633,
                "tf.sequence_mask(lengths)": 0.006329113924050633,
                "tf.sequence_mask(lengths, maxlen)": 0.006329113924050633,
                "tf.shape(input)": 0.006329113924050633,
                "tf.sign(x)": 0.006329113924050633,
                "tf.sort(values, axis)": 0.006329113924050633,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.006329113924050633,
                "tf.sqrt(x)": 0.006329113924050633,
                "tf.square(x)": 0.006329113924050633,
                "tf.squeeze(input)": 0.006329113924050633,
                "tf.squeeze(input, axis)": 0.006329113924050633,
                "tf.stack(values, axis)": 0.006329113924050633,
                "tf.subtract(x, y)": 0.006329113924050633,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.006329113924050633,
                "tf.tensordot(a, b, axes)": 0.006329113924050633,
                "tf.tile(input, multiples)": 0.006329113924050633,
                "tf.transpose(a)": 0.006329113924050633,
                "tf.transpose(a, perm)": 0.012658227848101266,
                "tf.unique_with_counts(x)": 0.006329113924050633,
                "tf.unstack(value, axis)": 0.006329113924050633,
                "tf.where(condition)": 0.006329113924050633,
                "tf.where(condition, x, y)": 0.006329113924050633,
                "tf.zeros(shape)": 0.006329113924050633,
                "tf.zeros_like(input)": 0.006329113924050633,
                "tf.SparseTensor(indices, values, dense_shape)": 0.006329113924050633,
                "tf.sparse.add(a, b)": 0.006329113924050633,
                "tf.sparse.concat(axis, sp_inputs)": 0.006329113924050633,
                "tf.sparse.expand_dims(sp_input, axis)": 0.006329113924050633,
                "tf.sparse.from_dense(tensor)": 0.006329113924050633,
                "tf.sparse.maximum(sp_a, sp_b)": 0.006329113924050633,
                "tf.sparse.minimum(sp_a, sp_b)": 0.006329113924050633,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.006329113924050633,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.006329113924050633,
                "tf.sparse.reset_shape(sp_input)": 0.006329113924050633,
                "tf.sparse.reshape(sp_input, shape)": 0.006329113924050633,
                "tf.sparse.retain(sp_input, to_retain)": 0.006329113924050633,
                "tf.sparse.slice(sp_input, start, size)": 0.006329113924050633,
                "tf.sparse.split(sp_input, num_split, axis)": 0.006329113924050633,
                "tf.sparse.to_dense(sp_input)": 0.006329113924050633,
                "tf.sparse.to_dense(sp_input, default_value)": 0.006329113924050633,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.006329113924050633,
                "tf.sparse.transpose(sp_input)": 0.006329113924050633,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.006329113924050633,
                "IndexingOperation": 0.0379746835443038,
                "PairCreationOperation": 0.006329113924050633,
                "SingletonTupleCreationOperation": 0.006329113924050633,
                "SlicingAxis0BothOperation": 0.006329113924050633,
                "SlicingAxis0LeftOperation": 0.006329113924050633,
                "SlicingAxis0RightOperation": 0.006329113924050633,
                "SlicingAxis1BothOperation": 0.006329113924050633,
                "SlicingAxis1LeftOperation": 0.006329113924050633,
                "SlicingAxis1RightOperation": 0.006329113924050633,
                "TripleCreationOperation": 0.006329113924050633
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 6,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 5,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "stackoverflow_08",
        "completions": [
            "\ntensor1 = tf.constant([12, 3, 45, 6, 7, 8, 9, 87, 65, 4, 32])\ntensor2 = tf.range(tf.size(tensor1))\n\nmask = tf.greater(tensor1, 1)\n\nselected_values = tf.boolean_mask(tensor2, mask)\n\n",
            "\ntensor1 = tf.constant([-1, 0, -3, 2, 1, 3, 5, -1, -9, 2, 10])\n\ntensor2 = tf.constant([12, 3, 45, 6, 7, 8, 9, 87, 65, 4, 32])\n\nmask = tf.greater(tensor1, 1)\n\nresult = tf.boolean_mask(tensor2, mask)\n\n",
            "\ndef select_values(tensor1, tensor2):\n    tensor1 = tf.constant(tensor1)\n    tensor2 = tf.constant(tensor2)\n    \n    mask = tf.greater(tensor1, 1)\n    selected = tf.boolean_mask(tensor2, mask)\n    \n    return tf.shape(selected)[0]\n",
            "\ndef select_values(tensor1, tensor2):\n    tensor1 = tf.constant(tensor1)\n    tensor2 = tf.constant(tensor2)\n    mask = tf.greater(tensor1, 1)\n    selected_values = tf.boolean_mask(tensor2, mask)\n    return tf.shape(selected_values)[0]\n",
            "\ndef select_values(tensor1, tensor2):\n    mask = tf.greater(tensor1, 1)\n    selected_values = tf.boolean_mask(tensor2, mask)\n    return tf.size(selected_values)\n\ntensor1 = tf.constant([-1, 0, -3, 2, 1, 3, 5, -1, -9, 2, 10])\ntensor2 = tf.constant([12, 3, 45, 6, 7, 8, 9, 87, 65, 4, 32])\n",
            "\ndef select_values(tensor1, tensor2):\n    mask = tf.greater(tensor1, 1)\n    result = tf.boolean_mask(tensor2, mask)\n    return result\n\ntensor1 = tf.constant([-1, 0, -3, 2, 1, 3, 5, -1, -9, 2, 10])\ntensor2 = tf.range(tf.size(tensor1))\noutput = select_values(tensor1, tensor2)\n\ntensor1 = tf.constant([12, 3, 45, 6, 7, 8, 9, 87, 65, 4, 32])\ntensor2 = tf.range(tf.size(tensor1))\noutput = select_values(tensor1, tensor2)\n",
            "\ndef select_values(tensor):\n    tensor1 = tf.constant(tensor)\n    tensor2 = tf.range(len(tensor))\n\n    mask = tf.greater(tensor1, 1)\n    output = tf.boolean_mask(tensor2, mask)\n\n    return output.numpy().size\n\n",
            "\ndef select_values(tensor1, tensor2):\n    tensor1 = tf.constant(tensor1)\n    tensor2 = tf.constant(tensor2)\n    mask = tf.greater(tensor1, 1)\n    selected_values = tf.boolean_mask(tensor2, mask)\n    return selected_values\n",
            "\ndef select_values(input_values):\n    tensor1 = tf.constant(input_values)\n    tensor2 = tf.range(tf.size(input_values))\n\n    mask = tf.greater(tensor1, 1)\n    masked_tensor = tf.boolean_mask(tensor2, mask)\n\n    return tf.shape(masked_tensor)[0]\n",
            "\ndef select_values(tensor1, tensor2):\n    mask = tf.greater(tensor1, 1)\n    return tf.boolean_mask(tensor2, mask)\n"
        ],
        "target-program": "tf.boolean_mask(in2, tf.greater(in1, tf.constant(1)))",
        "description": "(\\'select the values in the second tensor where the first tensor is greater than 1\\')",
        "tf_operators": {
            "tf.range": 4,
            "tf.size": 4,
            "tf.boolean_mask": 10,
            "tf.greater": 10,
            "tf.constant": 9,
            "tf.shape": 3
        },
        "coverage_percentage": 100.0,
        "total_in_target": 3,
        "total_covered": 3,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005319148936170213,
                "tf.add(x, y)": 0.005319148936170213,
                "tf.add_n(inputs)": 0.005319148936170213,
                "tf.argmax(input, axis)": 0.005319148936170213,
                "tf.argmin(input, axis)": 0.005319148936170213,
                "tf.argsort(values, axis, stable=True)": 0.005319148936170213,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005319148936170213,
                "tf.boolean_mask(tensor, mask)": 0.05851063829787234,
                "tf.broadcast_to(input, shape)": 0.005319148936170213,
                "tf.cast(x, dtype)": 0.005319148936170213,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005319148936170213,
                "tf.concat(values, axis)": 0.005319148936170213,
                "tf.constant(value)": 0.0851063829787234,
                "tf.constant(value, dtype)": 0.005319148936170213,
                "tf.divide(x, y)": 0.005319148936170213,
                "tf.equal(x, y)": 0.005319148936170213,
                "tf.exp(x)": 0.005319148936170213,
                "tf.expand_dims(input, axis)": 0.005319148936170213,
                "tf.eye(num_rows)": 0.005319148936170213,
                "tf.eye(num_rows, num_columns)": 0.005319148936170213,
                "tf.eye(num_rows, dtype)": 0.005319148936170213,
                "tf.fill(dims, value)": 0.005319148936170213,
                "tf.gather(params, indices)": 0.005319148936170213,
                "tf.gather(params, indices, axis, batch_dims)": 0.005319148936170213,
                "tf.gather_nd(params, indices)": 0.005319148936170213,
                "tf.gather_nd(params, indices, batch_dims)": 0.005319148936170213,
                "tf.greater(x, y)": 0.05851063829787234,
                "tf.greater_equal(x, y)": 0.005319148936170213,
                "tf.math.bincount(arr)": 0.005319148936170213,
                "tf.math.ceil(x)": 0.005319148936170213,
                "tf.math.count_nonzero(input)": 0.005319148936170213,
                "tf.math.count_nonzero(input, axis)": 0.005319148936170213,
                "tf.math.cumsum(x, axis)": 0.005319148936170213,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005319148936170213,
                "tf.math.divide_no_nan(x, y)": 0.005319148936170213,
                "tf.math.floor(x)": 0.005319148936170213,
                "tf.math.log(x)": 0.005319148936170213,
                "tf.math.logical_and(x, y)": 0.005319148936170213,
                "tf.math.logical_not(x)": 0.005319148936170213,
                "tf.math.logical_or(x, y)": 0.005319148936170213,
                "tf.math.logical_xor(x, y)": 0.005319148936170213,
                "tf.math.negative(x)": 0.005319148936170213,
                "tf.math.reciprocal(x)": 0.005319148936170213,
                "tf.math.reciprocal_no_nan(x)": 0.005319148936170213,
                "tf.math.segment_max(data, segment_ids)": 0.005319148936170213,
                "tf.math.segment_mean(data, segment_ids)": 0.005319148936170213,
                "tf.math.segment_min(data, segment_ids)": 0.005319148936170213,
                "tf.math.segment_prod(data, segment_ids)": 0.005319148936170213,
                "tf.math.segment_sum(data, segment_ids)": 0.005319148936170213,
                "tf.math.squared_difference(x, y)": 0.005319148936170213,
                "tf.math.top_k(input, k)": 0.005319148936170213,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005319148936170213,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005319148936170213,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005319148936170213,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005319148936170213,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005319148936170213,
                "tf.matmul(a, b)": 0.005319148936170213,
                "tf.maximum(x, y)": 0.005319148936170213,
                "tf.minimum(x, y)": 0.005319148936170213,
                "tf.multiply(x, y)": 0.005319148936170213,
                "tf.not_equal(x, y)": 0.005319148936170213,
                "tf.one_hot(indices, depth)": 0.005319148936170213,
                "tf.ones(shape)": 0.005319148936170213,
                "tf.ones_like(input)": 0.005319148936170213,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005319148936170213,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005319148936170213,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005319148936170213,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005319148936170213,
                "tf.range(start)": 0.031914893617021274,
                "tf.range(start, limit, delta)": 0.005319148936170213,
                "tf.reduce_any(input_tensor, axis)": 0.005319148936170213,
                "tf.reduce_all(input_tensor, axis)": 0.005319148936170213,
                "tf.reduce_max(input_tensor)": 0.005319148936170213,
                "tf.reduce_max(input_tensor, axis)": 0.005319148936170213,
                "tf.reduce_mean(input_tensor)": 0.005319148936170213,
                "tf.reduce_mean(input_tensor, axis)": 0.005319148936170213,
                "tf.reduce_min(input_tensor)": 0.005319148936170213,
                "tf.reduce_min(input_tensor, axis)": 0.005319148936170213,
                "tf.reduce_prod(input_tensor, axis)": 0.005319148936170213,
                "tf.reduce_sum(input_tensor)": 0.005319148936170213,
                "tf.reduce_sum(input_tensor, axis)": 0.005319148936170213,
                "tf.repeat(input, repeats)": 0.005319148936170213,
                "tf.repeat(input, repeats, axis)": 0.005319148936170213,
                "tf.reshape(tensor, shape)": 0.005319148936170213,
                "tf.reverse(tensor, axis)": 0.005319148936170213,
                "tf.roll(input, shift, axis)": 0.005319148936170213,
                "tf.round(x)": 0.005319148936170213,
                "tf.scatter_nd(indices, updates, shape)": 0.005319148936170213,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005319148936170213,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005319148936170213,
                "tf.sequence_mask(lengths)": 0.005319148936170213,
                "tf.sequence_mask(lengths, maxlen)": 0.005319148936170213,
                "tf.shape(input)": 0.02127659574468085,
                "tf.sign(x)": 0.005319148936170213,
                "tf.sort(values, axis)": 0.005319148936170213,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005319148936170213,
                "tf.sqrt(x)": 0.005319148936170213,
                "tf.square(x)": 0.005319148936170213,
                "tf.squeeze(input)": 0.005319148936170213,
                "tf.squeeze(input, axis)": 0.005319148936170213,
                "tf.stack(values, axis)": 0.005319148936170213,
                "tf.subtract(x, y)": 0.005319148936170213,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005319148936170213,
                "tf.tensordot(a, b, axes)": 0.005319148936170213,
                "tf.tile(input, multiples)": 0.005319148936170213,
                "tf.transpose(a)": 0.005319148936170213,
                "tf.transpose(a, perm)": 0.005319148936170213,
                "tf.unique_with_counts(x)": 0.005319148936170213,
                "tf.unstack(value, axis)": 0.005319148936170213,
                "tf.where(condition)": 0.005319148936170213,
                "tf.where(condition, x, y)": 0.005319148936170213,
                "tf.zeros(shape)": 0.005319148936170213,
                "tf.zeros_like(input)": 0.005319148936170213,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005319148936170213,
                "tf.sparse.add(a, b)": 0.005319148936170213,
                "tf.sparse.concat(axis, sp_inputs)": 0.005319148936170213,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005319148936170213,
                "tf.sparse.from_dense(tensor)": 0.005319148936170213,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005319148936170213,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005319148936170213,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005319148936170213,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005319148936170213,
                "tf.sparse.reset_shape(sp_input)": 0.005319148936170213,
                "tf.sparse.reshape(sp_input, shape)": 0.005319148936170213,
                "tf.sparse.retain(sp_input, to_retain)": 0.005319148936170213,
                "tf.sparse.slice(sp_input, start, size)": 0.005319148936170213,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005319148936170213,
                "tf.sparse.to_dense(sp_input)": 0.005319148936170213,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005319148936170213,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005319148936170213,
                "tf.sparse.transpose(sp_input)": 0.005319148936170213,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005319148936170213,
                "IndexingOperation": 0.02127659574468085,
                "PairCreationOperation": 0.005319148936170213,
                "SingletonTupleCreationOperation": 0.005319148936170213,
                "SlicingAxis0BothOperation": 0.005319148936170213,
                "SlicingAxis0LeftOperation": 0.005319148936170213,
                "SlicingAxis0RightOperation": 0.005319148936170213,
                "SlicingAxis1BothOperation": 0.005319148936170213,
                "SlicingAxis1LeftOperation": 0.005319148936170213,
                "SlicingAxis1RightOperation": 0.005319148936170213,
                "TripleCreationOperation": 0.005319148936170213
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 4,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 4,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 5,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 6,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 8,
                "IndexingOperation": 6,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8
            }
        }
    },
    {
        "task_id": "stackoverflow_09",
        "completions": [
            "\ndef group_items_by_value(input):\n    _, idx, _ = tf.unique_with_counts(input)\n    return idx\n\ninput = tf.constant([37, 42, 42, 37, 28, 15, 42, 15])\noutput = group_items_by_value(input)\n",
            "\ninput_list = [37, 42, 42, 37, 28, 15, 42, 15]\n\ninput_tensor = tf.constant(input_list)\n\n_, _, indices = tf.unique_with_counts(input_tensor)\n\n",
            "\ninput_list = [37, 42, 42, 37, 28, 15, 42, 15]\n\ntensor = tf.constant(input_list)\n\n_, indices = tf.unique_with_counts(tensor)\n\n",
            "\ndef get_most_frequent_group_index(input):\n    _, _, count = tf.unique_with_counts(input)\n    index = tf.argmax(count)\n    return index.numpy()\n\ninput = [37, 42, 42, 37, 28, 15, 42, 15]\n",
            "\ndef group_items_by_value_and_get_indices(x):\n    _, idx, _ = tf.unique_with_counts(x)\n    return idx\n\nx = tf.constant([37, 42, 42, 37, 28, 15, 42, 15])\n",
            "\narr = tf.constant([37, 42, 42, 37, 28, 15, 42, 15])\noutput = tf.math.bincount(arr)\n",
            "\ndef group_items(input_list):\n    _, idx = tf.unique_with_counts(input_list)\n    return idx\n\ninput_list = [37, 42, 42, 37, 28, 15, 42, 15]\n",
            "\ninput_list = [37, 42, 42, 37, 28, 15, 42, 15]\n\ntensor = tf.constant(input_list)\n\nunique, idx, count = tf.unique_with_counts(tensor)\n\nindices = tf.where(tf.equal(tensor, unique[0]))\n\n",
            "\ndef group_items(input):\n    _, idx, _ = tf.unique_with_counts(input)\n    return idx\n\ninput = [37, 42, 42, 37, 28, 15, 42, 15]\n",
            "\ndef group_items(input):\n    y, idx, count = tf.unique_with_counts(input)\n    return idx.numpy()\n\ninput = tf.constant([37, 42, 42, 37, 28, 15, 42, 15])\n"
        ],
        "target-program": "tf.unique_with_counts(in1)[1]",
        "description": "group items by value and get the group indices",
        "tf_operators": {
            "tf.unique_with_counts": 9,
            "tf.constant": 7,
            "tf.argmax": 1,
            "tf.math.bincount": 1,
            "tf.equal": 1,
            "tf.where": 1
        },
        "coverage_percentage": 100.0,
        "total_in_target": 1,
        "total_covered": 1,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005847953216374269,
                "tf.add(x, y)": 0.005847953216374269,
                "tf.add_n(inputs)": 0.005847953216374269,
                "tf.argmax(input, axis)": 0.011695906432748537,
                "tf.argmin(input, axis)": 0.005847953216374269,
                "tf.argsort(values, axis, stable=True)": 0.005847953216374269,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005847953216374269,
                "tf.boolean_mask(tensor, mask)": 0.005847953216374269,
                "tf.broadcast_to(input, shape)": 0.005847953216374269,
                "tf.cast(x, dtype)": 0.005847953216374269,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005847953216374269,
                "tf.concat(values, axis)": 0.005847953216374269,
                "tf.constant(value)": 0.04678362573099415,
                "tf.constant(value, dtype)": 0.005847953216374269,
                "tf.divide(x, y)": 0.005847953216374269,
                "tf.equal(x, y)": 0.011695906432748537,
                "tf.exp(x)": 0.005847953216374269,
                "tf.expand_dims(input, axis)": 0.005847953216374269,
                "tf.eye(num_rows)": 0.005847953216374269,
                "tf.eye(num_rows, num_columns)": 0.005847953216374269,
                "tf.eye(num_rows, dtype)": 0.005847953216374269,
                "tf.fill(dims, value)": 0.005847953216374269,
                "tf.gather(params, indices)": 0.005847953216374269,
                "tf.gather(params, indices, axis, batch_dims)": 0.005847953216374269,
                "tf.gather_nd(params, indices)": 0.005847953216374269,
                "tf.gather_nd(params, indices, batch_dims)": 0.005847953216374269,
                "tf.greater(x, y)": 0.005847953216374269,
                "tf.greater_equal(x, y)": 0.005847953216374269,
                "tf.math.bincount(arr)": 0.005847953216374269,
                "tf.math.ceil(x)": 0.005847953216374269,
                "tf.math.count_nonzero(input)": 0.005847953216374269,
                "tf.math.count_nonzero(input, axis)": 0.005847953216374269,
                "tf.math.cumsum(x, axis)": 0.005847953216374269,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005847953216374269,
                "tf.math.divide_no_nan(x, y)": 0.005847953216374269,
                "tf.math.floor(x)": 0.005847953216374269,
                "tf.math.log(x)": 0.005847953216374269,
                "tf.math.logical_and(x, y)": 0.005847953216374269,
                "tf.math.logical_not(x)": 0.005847953216374269,
                "tf.math.logical_or(x, y)": 0.005847953216374269,
                "tf.math.logical_xor(x, y)": 0.005847953216374269,
                "tf.math.negative(x)": 0.005847953216374269,
                "tf.math.reciprocal(x)": 0.005847953216374269,
                "tf.math.reciprocal_no_nan(x)": 0.005847953216374269,
                "tf.math.segment_max(data, segment_ids)": 0.005847953216374269,
                "tf.math.segment_mean(data, segment_ids)": 0.005847953216374269,
                "tf.math.segment_min(data, segment_ids)": 0.005847953216374269,
                "tf.math.segment_prod(data, segment_ids)": 0.005847953216374269,
                "tf.math.segment_sum(data, segment_ids)": 0.005847953216374269,
                "tf.math.squared_difference(x, y)": 0.005847953216374269,
                "tf.math.top_k(input, k)": 0.005847953216374269,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005847953216374269,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005847953216374269,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005847953216374269,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005847953216374269,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005847953216374269,
                "tf.matmul(a, b)": 0.005847953216374269,
                "tf.maximum(x, y)": 0.005847953216374269,
                "tf.minimum(x, y)": 0.005847953216374269,
                "tf.multiply(x, y)": 0.005847953216374269,
                "tf.not_equal(x, y)": 0.005847953216374269,
                "tf.one_hot(indices, depth)": 0.005847953216374269,
                "tf.ones(shape)": 0.005847953216374269,
                "tf.ones_like(input)": 0.005847953216374269,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005847953216374269,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005847953216374269,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005847953216374269,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005847953216374269,
                "tf.range(start)": 0.005847953216374269,
                "tf.range(start, limit, delta)": 0.005847953216374269,
                "tf.reduce_any(input_tensor, axis)": 0.005847953216374269,
                "tf.reduce_all(input_tensor, axis)": 0.005847953216374269,
                "tf.reduce_max(input_tensor)": 0.005847953216374269,
                "tf.reduce_max(input_tensor, axis)": 0.005847953216374269,
                "tf.reduce_mean(input_tensor)": 0.005847953216374269,
                "tf.reduce_mean(input_tensor, axis)": 0.005847953216374269,
                "tf.reduce_min(input_tensor)": 0.005847953216374269,
                "tf.reduce_min(input_tensor, axis)": 0.005847953216374269,
                "tf.reduce_prod(input_tensor, axis)": 0.005847953216374269,
                "tf.reduce_sum(input_tensor)": 0.005847953216374269,
                "tf.reduce_sum(input_tensor, axis)": 0.005847953216374269,
                "tf.repeat(input, repeats)": 0.005847953216374269,
                "tf.repeat(input, repeats, axis)": 0.005847953216374269,
                "tf.reshape(tensor, shape)": 0.005847953216374269,
                "tf.reverse(tensor, axis)": 0.005847953216374269,
                "tf.roll(input, shift, axis)": 0.005847953216374269,
                "tf.round(x)": 0.005847953216374269,
                "tf.scatter_nd(indices, updates, shape)": 0.005847953216374269,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005847953216374269,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005847953216374269,
                "tf.sequence_mask(lengths)": 0.005847953216374269,
                "tf.sequence_mask(lengths, maxlen)": 0.005847953216374269,
                "tf.shape(input)": 0.005847953216374269,
                "tf.sign(x)": 0.005847953216374269,
                "tf.sort(values, axis)": 0.005847953216374269,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005847953216374269,
                "tf.sqrt(x)": 0.005847953216374269,
                "tf.square(x)": 0.005847953216374269,
                "tf.squeeze(input)": 0.005847953216374269,
                "tf.squeeze(input, axis)": 0.005847953216374269,
                "tf.stack(values, axis)": 0.005847953216374269,
                "tf.subtract(x, y)": 0.005847953216374269,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005847953216374269,
                "tf.tensordot(a, b, axes)": 0.005847953216374269,
                "tf.tile(input, multiples)": 0.005847953216374269,
                "tf.transpose(a)": 0.005847953216374269,
                "tf.transpose(a, perm)": 0.005847953216374269,
                "tf.unique_with_counts(x)": 0.05847953216374269,
                "tf.unstack(value, axis)": 0.005847953216374269,
                "tf.where(condition)": 0.011695906432748537,
                "tf.where(condition, x, y)": 0.005847953216374269,
                "tf.zeros(shape)": 0.005847953216374269,
                "tf.zeros_like(input)": 0.005847953216374269,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005847953216374269,
                "tf.sparse.add(a, b)": 0.005847953216374269,
                "tf.sparse.concat(axis, sp_inputs)": 0.005847953216374269,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005847953216374269,
                "tf.sparse.from_dense(tensor)": 0.005847953216374269,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005847953216374269,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005847953216374269,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005847953216374269,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005847953216374269,
                "tf.sparse.reset_shape(sp_input)": 0.005847953216374269,
                "tf.sparse.reshape(sp_input, shape)": 0.005847953216374269,
                "tf.sparse.retain(sp_input, to_retain)": 0.005847953216374269,
                "tf.sparse.slice(sp_input, start, size)": 0.005847953216374269,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005847953216374269,
                "tf.sparse.to_dense(sp_input)": 0.005847953216374269,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005847953216374269,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005847953216374269,
                "tf.sparse.transpose(sp_input)": 0.005847953216374269,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005847953216374269,
                "IndexingOperation": 0.011695906432748537,
                "PairCreationOperation": 0.017543859649122806,
                "SingletonTupleCreationOperation": 0.005847953216374269,
                "SlicingAxis0BothOperation": 0.005847953216374269,
                "SlicingAxis0LeftOperation": 0.005847953216374269,
                "SlicingAxis0RightOperation": 0.005847953216374269,
                "SlicingAxis1BothOperation": 0.005847953216374269,
                "SlicingAxis1LeftOperation": 0.005847953216374269,
                "SlicingAxis1RightOperation": 0.005847953216374269,
                "TripleCreationOperation": 0.04678362573099415
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 6,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 6,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 4,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 6,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 6,
                "PairCreationOperation": 6,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 4
            }
        }
    },
    {
        "task_id": "stackoverflow_10",
        "completions": [
            "\nmatrix1 = tf.constant([[15, 10], [20, -5]])\nmatrix2 = tf.constant([[2, 3, 1], [-2, 5, 0]])\n\nresult = tf.matmul(matrix1, matrix2)\n",
            "A = tf.constant([[15, 10], [20, -5]], dtype=tf.float32)\nB = tf.constant([[...]], dtype=tf.float32)\nC = tf.matmul(A, B)",
            "\nmatrix1 = tf.constant([[15, 10], [20, -5]])\nmatrix2 = tf.constant([[1, 2], [3, 4]])\n\nresult = tf.matmul(matrix1, matrix2)\n",
            "\nmatrix1 = tf.constant([[15, 10], [20, -5]])\n\nmatrix2 = tf.eye(2, 2)\n\nresult = tf.matmul(matrix1, matrix2)\n\n",
            "\nmatrix1 = tf.constant([[15, 10], [20, -5]])\nmatrix2 = tf.constant([[2, 3, 1], [-2, 5, 0]])\n\nresult = tf.matmul(matrix1, matrix2)\n\n",
            "\ninput_matrix = tf.constant([[15, 10], [20, -5]])\n\nsecond_matrix = tf.constant([[2,3,1], [1,1,1]])\n\noutput_matrix = tf.matmul(input_matrix, second_matrix)\n",
            "\nmatrix1 = tf.constant([[15, 10], [20, -5]])\nmatrix2 = tf.constant([[2], [3]])\n\nresult = tf.matmul(matrix1, matrix2)\n\n",
            "A = tf.constant([[15, 10], [20, -5]], dtype=tf.float32)\nB = tf.constant([[1, 2, 3], [4, 5, 6]], dtype=tf.float32)\nC = tf.matmul(A, B)",
            "\nmatrix1 = tf.constant([[15, 10], [20, -5]])\nmatrix2 = tf.constant([[2, 3], [1, -2]])\n\nresult = tf.matmul(matrix1, matrix2)\n\n",
            "\nmatrix1 = tf.constant([[15, 10], [20, -5]])\nmatrix2 = tf.constant([[2, 3, 1], [-2, 5, 0]])\n\nresult = tf.matmul(matrix1, matrix2)\n\n"
        ],
        "target-program": "tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 1))",
        "description": "perform matrix multiplication",
        "tf_operators": {
            "tf.matmul": 8,
            "tf.constant": 8,
            "tf.eye": 1
        },
        "coverage_percentage": 50.0,
        "total_in_target": 2,
        "total_covered": 1,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005952380952380952,
                "tf.add(x, y)": 0.005952380952380952,
                "tf.add_n(inputs)": 0.005952380952380952,
                "tf.argmax(input, axis)": 0.005952380952380952,
                "tf.argmin(input, axis)": 0.005952380952380952,
                "tf.argsort(values, axis, stable=True)": 0.005952380952380952,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005952380952380952,
                "tf.boolean_mask(tensor, mask)": 0.005952380952380952,
                "tf.broadcast_to(input, shape)": 0.005952380952380952,
                "tf.cast(x, dtype)": 0.005952380952380952,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005952380952380952,
                "tf.concat(values, axis)": 0.005952380952380952,
                "tf.constant(value)": 0.09523809523809523,
                "tf.constant(value, dtype)": 0.005952380952380952,
                "tf.divide(x, y)": 0.005952380952380952,
                "tf.equal(x, y)": 0.005952380952380952,
                "tf.exp(x)": 0.005952380952380952,
                "tf.expand_dims(input, axis)": 0.005952380952380952,
                "tf.eye(num_rows)": 0.005952380952380952,
                "tf.eye(num_rows, num_columns)": 0.011904761904761904,
                "tf.eye(num_rows, dtype)": 0.005952380952380952,
                "tf.fill(dims, value)": 0.005952380952380952,
                "tf.gather(params, indices)": 0.005952380952380952,
                "tf.gather(params, indices, axis, batch_dims)": 0.005952380952380952,
                "tf.gather_nd(params, indices)": 0.005952380952380952,
                "tf.gather_nd(params, indices, batch_dims)": 0.005952380952380952,
                "tf.greater(x, y)": 0.005952380952380952,
                "tf.greater_equal(x, y)": 0.005952380952380952,
                "tf.math.bincount(arr)": 0.005952380952380952,
                "tf.math.ceil(x)": 0.005952380952380952,
                "tf.math.count_nonzero(input)": 0.005952380952380952,
                "tf.math.count_nonzero(input, axis)": 0.005952380952380952,
                "tf.math.cumsum(x, axis)": 0.005952380952380952,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005952380952380952,
                "tf.math.divide_no_nan(x, y)": 0.005952380952380952,
                "tf.math.floor(x)": 0.005952380952380952,
                "tf.math.log(x)": 0.005952380952380952,
                "tf.math.logical_and(x, y)": 0.005952380952380952,
                "tf.math.logical_not(x)": 0.005952380952380952,
                "tf.math.logical_or(x, y)": 0.005952380952380952,
                "tf.math.logical_xor(x, y)": 0.005952380952380952,
                "tf.math.negative(x)": 0.005952380952380952,
                "tf.math.reciprocal(x)": 0.005952380952380952,
                "tf.math.reciprocal_no_nan(x)": 0.005952380952380952,
                "tf.math.segment_max(data, segment_ids)": 0.005952380952380952,
                "tf.math.segment_mean(data, segment_ids)": 0.005952380952380952,
                "tf.math.segment_min(data, segment_ids)": 0.005952380952380952,
                "tf.math.segment_prod(data, segment_ids)": 0.005952380952380952,
                "tf.math.segment_sum(data, segment_ids)": 0.005952380952380952,
                "tf.math.squared_difference(x, y)": 0.005952380952380952,
                "tf.math.top_k(input, k)": 0.005952380952380952,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005952380952380952,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005952380952380952,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005952380952380952,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005952380952380952,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005952380952380952,
                "tf.matmul(a, b)": 0.06547619047619048,
                "tf.maximum(x, y)": 0.005952380952380952,
                "tf.minimum(x, y)": 0.005952380952380952,
                "tf.multiply(x, y)": 0.005952380952380952,
                "tf.not_equal(x, y)": 0.005952380952380952,
                "tf.one_hot(indices, depth)": 0.005952380952380952,
                "tf.ones(shape)": 0.005952380952380952,
                "tf.ones_like(input)": 0.005952380952380952,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005952380952380952,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005952380952380952,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005952380952380952,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005952380952380952,
                "tf.range(start)": 0.005952380952380952,
                "tf.range(start, limit, delta)": 0.005952380952380952,
                "tf.reduce_any(input_tensor, axis)": 0.005952380952380952,
                "tf.reduce_all(input_tensor, axis)": 0.005952380952380952,
                "tf.reduce_max(input_tensor)": 0.005952380952380952,
                "tf.reduce_max(input_tensor, axis)": 0.005952380952380952,
                "tf.reduce_mean(input_tensor)": 0.005952380952380952,
                "tf.reduce_mean(input_tensor, axis)": 0.005952380952380952,
                "tf.reduce_min(input_tensor)": 0.005952380952380952,
                "tf.reduce_min(input_tensor, axis)": 0.005952380952380952,
                "tf.reduce_prod(input_tensor, axis)": 0.005952380952380952,
                "tf.reduce_sum(input_tensor)": 0.005952380952380952,
                "tf.reduce_sum(input_tensor, axis)": 0.005952380952380952,
                "tf.repeat(input, repeats)": 0.005952380952380952,
                "tf.repeat(input, repeats, axis)": 0.005952380952380952,
                "tf.reshape(tensor, shape)": 0.005952380952380952,
                "tf.reverse(tensor, axis)": 0.005952380952380952,
                "tf.roll(input, shift, axis)": 0.005952380952380952,
                "tf.round(x)": 0.005952380952380952,
                "tf.scatter_nd(indices, updates, shape)": 0.005952380952380952,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005952380952380952,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005952380952380952,
                "tf.sequence_mask(lengths)": 0.005952380952380952,
                "tf.sequence_mask(lengths, maxlen)": 0.005952380952380952,
                "tf.shape(input)": 0.005952380952380952,
                "tf.sign(x)": 0.005952380952380952,
                "tf.sort(values, axis)": 0.005952380952380952,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005952380952380952,
                "tf.sqrt(x)": 0.005952380952380952,
                "tf.square(x)": 0.005952380952380952,
                "tf.squeeze(input)": 0.005952380952380952,
                "tf.squeeze(input, axis)": 0.005952380952380952,
                "tf.stack(values, axis)": 0.005952380952380952,
                "tf.subtract(x, y)": 0.005952380952380952,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005952380952380952,
                "tf.tensordot(a, b, axes)": 0.005952380952380952,
                "tf.tile(input, multiples)": 0.005952380952380952,
                "tf.transpose(a)": 0.005952380952380952,
                "tf.transpose(a, perm)": 0.005952380952380952,
                "tf.unique_with_counts(x)": 0.005952380952380952,
                "tf.unstack(value, axis)": 0.005952380952380952,
                "tf.where(condition)": 0.005952380952380952,
                "tf.where(condition, x, y)": 0.005952380952380952,
                "tf.zeros(shape)": 0.005952380952380952,
                "tf.zeros_like(input)": 0.005952380952380952,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005952380952380952,
                "tf.sparse.add(a, b)": 0.005952380952380952,
                "tf.sparse.concat(axis, sp_inputs)": 0.005952380952380952,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005952380952380952,
                "tf.sparse.from_dense(tensor)": 0.005952380952380952,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005952380952380952,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005952380952380952,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005952380952380952,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005952380952380952,
                "tf.sparse.reset_shape(sp_input)": 0.005952380952380952,
                "tf.sparse.reshape(sp_input, shape)": 0.005952380952380952,
                "tf.sparse.retain(sp_input, to_retain)": 0.005952380952380952,
                "tf.sparse.slice(sp_input, start, size)": 0.005952380952380952,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005952380952380952,
                "tf.sparse.to_dense(sp_input)": 0.005952380952380952,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005952380952380952,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005952380952380952,
                "tf.sparse.transpose(sp_input)": 0.005952380952380952,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005952380952380952,
                "IndexingOperation": 0.005952380952380952,
                "PairCreationOperation": 0.005952380952380952,
                "SingletonTupleCreationOperation": 0.005952380952380952,
                "SlicingAxis0BothOperation": 0.005952380952380952,
                "SlicingAxis0LeftOperation": 0.005952380952380952,
                "SlicingAxis0RightOperation": 0.005952380952380952,
                "SlicingAxis1BothOperation": 0.005952380952380952,
                "SlicingAxis1LeftOperation": 0.005952380952380952,
                "SlicingAxis1RightOperation": 0.005952380952380952,
                "TripleCreationOperation": 0.005952380952380952
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 3,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 6,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 4,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "stackoverflow_11",
        "completions": [
            "\ndef count_occurrences(input_list):\n    input_tensor = tf.constant(input_list)\n    count = tf.math.bincount(input_tensor)\n    return count\n\ninput_list = [4, 0, 1, 1, 0, 4, 0, 0, 3, 4, 1]\n",
            "\nx = [4, 0, 1, 1, 0, 4, 0, 0, 3, 4, 1]\n\ncounts = tf.math.bincount(x)\n\n",
            "\narr = [4, 0, 1, 1, 0, 4, 0, 0, 3, 4, 1]\n\narr_tensor = tf.constant(arr)\n\ncounts = tf.math.bincount(arr_tensor)\n\n",
            "\narr = [4, 0, 1, 1, 0, 4, 0, 0, 3, 4, 1]\n\narr_tensor = tf.constant(arr)\n\ncount = tf.math.bincount(arr_tensor)\n\n",
            "\ninput_list = [4, 0, 1, 1, 0, 4, 0, 0, 3, 4, 1]\n\ninput_tensor = tf.constant(input_list)\n\noutput = tf.math.bincount(input_tensor)\n\n",
            "\ninput_list = tf.constant([4, 0, 1, 1, 0, 4, 0, 0, 3, 4, 1])\n\noutput = tf.math.bincount(input_list)\n\n",
            "\narr = [4, 0, 1, 1, 0, 4, 0, 0, 3, 4, 1]\n\ntensor_arr = tf.constant(arr)\n\nbincount = tf.math.bincount(tensor_arr)\n\n",
            "\ninput_list = tf.constant([4, 0, 1, 1, 0, 4, 0, 0, 3, 4, 1])\noutput = tf.math.bincount(input_list)\n\n",
            "\narr = tf.constant([4, 0, 1, 1, 0, 4, 0, 0, 3, 4, 1])\ncount = tf.math.bincount(arr)\n",
            "\ninput_list = [4, 0, 1, 1, 0, 4, 0, 0, 3, 4, 1]\n\ninput_tensor = tf.constant(input_list)\n\n_, _, count = tf.unique_with_counts(input_tensor)\n\n"
        ],
        "target-program": "tf.math.bincount(in1)",
        "description": "count the number of occurences of each distinct number",
        "tf_operators": {
            "tf.math.bincount": 9,
            "tf.constant": 9,
            "tf.unique_with_counts": 1
        },
        "coverage_percentage": 100.0,
        "total_in_target": 1,
        "total_covered": 1,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.006535947712418301,
                "tf.add(x, y)": 0.006535947712418301,
                "tf.add_n(inputs)": 0.006535947712418301,
                "tf.argmax(input, axis)": 0.006535947712418301,
                "tf.argmin(input, axis)": 0.006535947712418301,
                "tf.argsort(values, axis, stable=True)": 0.006535947712418301,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.006535947712418301,
                "tf.boolean_mask(tensor, mask)": 0.006535947712418301,
                "tf.broadcast_to(input, shape)": 0.006535947712418301,
                "tf.cast(x, dtype)": 0.006535947712418301,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.006535947712418301,
                "tf.concat(values, axis)": 0.006535947712418301,
                "tf.constant(value)": 0.06535947712418301,
                "tf.constant(value, dtype)": 0.006535947712418301,
                "tf.divide(x, y)": 0.006535947712418301,
                "tf.equal(x, y)": 0.006535947712418301,
                "tf.exp(x)": 0.006535947712418301,
                "tf.expand_dims(input, axis)": 0.006535947712418301,
                "tf.eye(num_rows)": 0.006535947712418301,
                "tf.eye(num_rows, num_columns)": 0.006535947712418301,
                "tf.eye(num_rows, dtype)": 0.006535947712418301,
                "tf.fill(dims, value)": 0.006535947712418301,
                "tf.gather(params, indices)": 0.006535947712418301,
                "tf.gather(params, indices, axis, batch_dims)": 0.006535947712418301,
                "tf.gather_nd(params, indices)": 0.006535947712418301,
                "tf.gather_nd(params, indices, batch_dims)": 0.006535947712418301,
                "tf.greater(x, y)": 0.006535947712418301,
                "tf.greater_equal(x, y)": 0.006535947712418301,
                "tf.math.bincount(arr)": 0.006535947712418301,
                "tf.math.ceil(x)": 0.006535947712418301,
                "tf.math.count_nonzero(input)": 0.006535947712418301,
                "tf.math.count_nonzero(input, axis)": 0.006535947712418301,
                "tf.math.cumsum(x, axis)": 0.006535947712418301,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.006535947712418301,
                "tf.math.divide_no_nan(x, y)": 0.006535947712418301,
                "tf.math.floor(x)": 0.006535947712418301,
                "tf.math.log(x)": 0.006535947712418301,
                "tf.math.logical_and(x, y)": 0.006535947712418301,
                "tf.math.logical_not(x)": 0.006535947712418301,
                "tf.math.logical_or(x, y)": 0.006535947712418301,
                "tf.math.logical_xor(x, y)": 0.006535947712418301,
                "tf.math.negative(x)": 0.006535947712418301,
                "tf.math.reciprocal(x)": 0.006535947712418301,
                "tf.math.reciprocal_no_nan(x)": 0.006535947712418301,
                "tf.math.segment_max(data, segment_ids)": 0.006535947712418301,
                "tf.math.segment_mean(data, segment_ids)": 0.006535947712418301,
                "tf.math.segment_min(data, segment_ids)": 0.006535947712418301,
                "tf.math.segment_prod(data, segment_ids)": 0.006535947712418301,
                "tf.math.segment_sum(data, segment_ids)": 0.006535947712418301,
                "tf.math.squared_difference(x, y)": 0.006535947712418301,
                "tf.math.top_k(input, k)": 0.006535947712418301,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.006535947712418301,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.006535947712418301,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.006535947712418301,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.006535947712418301,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.006535947712418301,
                "tf.matmul(a, b)": 0.006535947712418301,
                "tf.maximum(x, y)": 0.006535947712418301,
                "tf.minimum(x, y)": 0.006535947712418301,
                "tf.multiply(x, y)": 0.006535947712418301,
                "tf.not_equal(x, y)": 0.006535947712418301,
                "tf.one_hot(indices, depth)": 0.006535947712418301,
                "tf.ones(shape)": 0.006535947712418301,
                "tf.ones_like(input)": 0.006535947712418301,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.006535947712418301,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.006535947712418301,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.006535947712418301,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.006535947712418301,
                "tf.range(start)": 0.006535947712418301,
                "tf.range(start, limit, delta)": 0.006535947712418301,
                "tf.reduce_any(input_tensor, axis)": 0.006535947712418301,
                "tf.reduce_all(input_tensor, axis)": 0.006535947712418301,
                "tf.reduce_max(input_tensor)": 0.006535947712418301,
                "tf.reduce_max(input_tensor, axis)": 0.006535947712418301,
                "tf.reduce_mean(input_tensor)": 0.006535947712418301,
                "tf.reduce_mean(input_tensor, axis)": 0.006535947712418301,
                "tf.reduce_min(input_tensor)": 0.006535947712418301,
                "tf.reduce_min(input_tensor, axis)": 0.006535947712418301,
                "tf.reduce_prod(input_tensor, axis)": 0.006535947712418301,
                "tf.reduce_sum(input_tensor)": 0.006535947712418301,
                "tf.reduce_sum(input_tensor, axis)": 0.006535947712418301,
                "tf.repeat(input, repeats)": 0.006535947712418301,
                "tf.repeat(input, repeats, axis)": 0.006535947712418301,
                "tf.reshape(tensor, shape)": 0.006535947712418301,
                "tf.reverse(tensor, axis)": 0.006535947712418301,
                "tf.roll(input, shift, axis)": 0.006535947712418301,
                "tf.round(x)": 0.006535947712418301,
                "tf.scatter_nd(indices, updates, shape)": 0.006535947712418301,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.006535947712418301,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.006535947712418301,
                "tf.sequence_mask(lengths)": 0.006535947712418301,
                "tf.sequence_mask(lengths, maxlen)": 0.006535947712418301,
                "tf.shape(input)": 0.006535947712418301,
                "tf.sign(x)": 0.006535947712418301,
                "tf.sort(values, axis)": 0.006535947712418301,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.006535947712418301,
                "tf.sqrt(x)": 0.006535947712418301,
                "tf.square(x)": 0.006535947712418301,
                "tf.squeeze(input)": 0.006535947712418301,
                "tf.squeeze(input, axis)": 0.006535947712418301,
                "tf.stack(values, axis)": 0.006535947712418301,
                "tf.subtract(x, y)": 0.006535947712418301,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.006535947712418301,
                "tf.tensordot(a, b, axes)": 0.006535947712418301,
                "tf.tile(input, multiples)": 0.006535947712418301,
                "tf.transpose(a)": 0.006535947712418301,
                "tf.transpose(a, perm)": 0.006535947712418301,
                "tf.unique_with_counts(x)": 0.013071895424836602,
                "tf.unstack(value, axis)": 0.006535947712418301,
                "tf.where(condition)": 0.006535947712418301,
                "tf.where(condition, x, y)": 0.006535947712418301,
                "tf.zeros(shape)": 0.006535947712418301,
                "tf.zeros_like(input)": 0.006535947712418301,
                "tf.SparseTensor(indices, values, dense_shape)": 0.006535947712418301,
                "tf.sparse.add(a, b)": 0.006535947712418301,
                "tf.sparse.concat(axis, sp_inputs)": 0.006535947712418301,
                "tf.sparse.expand_dims(sp_input, axis)": 0.006535947712418301,
                "tf.sparse.from_dense(tensor)": 0.006535947712418301,
                "tf.sparse.maximum(sp_a, sp_b)": 0.006535947712418301,
                "tf.sparse.minimum(sp_a, sp_b)": 0.006535947712418301,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.006535947712418301,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.006535947712418301,
                "tf.sparse.reset_shape(sp_input)": 0.006535947712418301,
                "tf.sparse.reshape(sp_input, shape)": 0.006535947712418301,
                "tf.sparse.retain(sp_input, to_retain)": 0.006535947712418301,
                "tf.sparse.slice(sp_input, start, size)": 0.006535947712418301,
                "tf.sparse.split(sp_input, num_split, axis)": 0.006535947712418301,
                "tf.sparse.to_dense(sp_input)": 0.006535947712418301,
                "tf.sparse.to_dense(sp_input, default_value)": 0.006535947712418301,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.006535947712418301,
                "tf.sparse.transpose(sp_input)": 0.006535947712418301,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.006535947712418301,
                "IndexingOperation": 0.006535947712418301,
                "PairCreationOperation": 0.006535947712418301,
                "SingletonTupleCreationOperation": 0.006535947712418301,
                "SlicingAxis0BothOperation": 0.006535947712418301,
                "SlicingAxis0LeftOperation": 0.006535947712418301,
                "SlicingAxis0RightOperation": 0.006535947712418301,
                "SlicingAxis1BothOperation": 0.006535947712418301,
                "SlicingAxis1LeftOperation": 0.006535947712418301,
                "SlicingAxis1RightOperation": 0.006535947712418301,
                "TripleCreationOperation": 0.013071895424836602
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 6,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 6
            }
        }
    },
    {
        "task_id": "stackoverflow_12",
        "completions": [
            "\ntensor = tf.constant([[12, 34, 56], [33, 22, 11]])\n\nindices = [0, 2]\n\nresult = tf.gather(tensor, indices, axis=1)\n\n",
            "\ntensor = tf.constant([[12, 34, 56], [33, 22, 11]])\n\nresult = tf.gather(tensor, [0, 2], axis=1)\n\n",
            "\ndata = [[12, 34, 56], [33, 22, 11]]\n\ntensor = tf.constant(data)\n\nresult = tf.gather(tensor, [0, 2], axis=1)\n\n",
            "\ntensor = tf.constant([[12, 34, 56], [33, 22, 11]])\n\nindices = [0, 2]\n\nresult = tf.gather(tensor, indices, axis=1)\n\n",
            "\ntensor = tf.constant([[12, 34, 56], [33, 22, 11]])\n\nfirst_column = tf.slice(tensor, [0, 0], [2, 1])\nthird_column = tf.slice(tensor, [0, 2], [2, 1])\n\nresult = tf.concat([first_column, third_column], 1)\n\n",
            "\ntensor = tf.constant([[12, 34, 56], [33, 22, 11]])\n\nindices = [0, 2]\n\nresult = tf.gather(tensor, indices, axis=1)\n\n",
            "\ndata = tf.convert_to_tensor([[12, 34, 56], [33, 22, 11]])\n\nresult = tf.gather(data, [0, 2], axis=1)\n\n",
            "\ndata = [[12, 34, 56], [33, 22, 11]]\n\ntensor = tf.constant(data)\n\ncolumns = tf.unstack(tensor, axis=1)\n\ndel columns[1]\n\noutput = tf.stack(columns, axis=1)\n\n",
            "\ntensor = tf.constant([[12, 34, 56], [33, 22, 11]])\n\nindices = [0, 2]\n\noutput = tf.gather(tensor, indices, axis=1)\n\n",
            "\ntensor = tf.constant([[12, 34, 56], [33, 22, 11]])\n\nindices = [0, 2]\n\nresult = tf.gather(tensor, indices, axis=1)\n\n"
        ],
        "target-program": "tf.gather(in1, (0, 2), axis=1, batch_dims=0)",
        "description": "remove a column from the tensor",
        "tf_operators": {
            "tf.gather": 8,
            "tf.constant": 9,
            "tf.concat": 1,
            "tf.slice": 1,
            "tf.convert_to_tensor": 1,
            "tf.unstack": 1,
            "tf.stack": 1
        },
        "coverage_percentage": 100.0,
        "total_in_target": 1,
        "total_covered": 1,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.006134969325153374,
                "tf.add(x, y)": 0.006134969325153374,
                "tf.add_n(inputs)": 0.006134969325153374,
                "tf.argmax(input, axis)": 0.006134969325153374,
                "tf.argmin(input, axis)": 0.006134969325153374,
                "tf.argsort(values, axis, stable=True)": 0.006134969325153374,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.006134969325153374,
                "tf.boolean_mask(tensor, mask)": 0.006134969325153374,
                "tf.broadcast_to(input, shape)": 0.006134969325153374,
                "tf.cast(x, dtype)": 0.006134969325153374,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.006134969325153374,
                "tf.concat(values, axis)": 0.012269938650306749,
                "tf.constant(value)": 0.06134969325153374,
                "tf.constant(value, dtype)": 0.006134969325153374,
                "tf.divide(x, y)": 0.006134969325153374,
                "tf.equal(x, y)": 0.006134969325153374,
                "tf.exp(x)": 0.006134969325153374,
                "tf.expand_dims(input, axis)": 0.006134969325153374,
                "tf.eye(num_rows)": 0.006134969325153374,
                "tf.eye(num_rows, num_columns)": 0.006134969325153374,
                "tf.eye(num_rows, dtype)": 0.006134969325153374,
                "tf.fill(dims, value)": 0.006134969325153374,
                "tf.gather(params, indices)": 0.006134969325153374,
                "tf.gather(params, indices, axis, batch_dims)": 0.05521472392638037,
                "tf.gather_nd(params, indices)": 0.006134969325153374,
                "tf.gather_nd(params, indices, batch_dims)": 0.006134969325153374,
                "tf.greater(x, y)": 0.006134969325153374,
                "tf.greater_equal(x, y)": 0.006134969325153374,
                "tf.math.bincount(arr)": 0.006134969325153374,
                "tf.math.ceil(x)": 0.006134969325153374,
                "tf.math.count_nonzero(input)": 0.006134969325153374,
                "tf.math.count_nonzero(input, axis)": 0.006134969325153374,
                "tf.math.cumsum(x, axis)": 0.006134969325153374,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.006134969325153374,
                "tf.math.divide_no_nan(x, y)": 0.006134969325153374,
                "tf.math.floor(x)": 0.006134969325153374,
                "tf.math.log(x)": 0.006134969325153374,
                "tf.math.logical_and(x, y)": 0.006134969325153374,
                "tf.math.logical_not(x)": 0.006134969325153374,
                "tf.math.logical_or(x, y)": 0.006134969325153374,
                "tf.math.logical_xor(x, y)": 0.006134969325153374,
                "tf.math.negative(x)": 0.006134969325153374,
                "tf.math.reciprocal(x)": 0.006134969325153374,
                "tf.math.reciprocal_no_nan(x)": 0.006134969325153374,
                "tf.math.segment_max(data, segment_ids)": 0.006134969325153374,
                "tf.math.segment_mean(data, segment_ids)": 0.006134969325153374,
                "tf.math.segment_min(data, segment_ids)": 0.006134969325153374,
                "tf.math.segment_prod(data, segment_ids)": 0.006134969325153374,
                "tf.math.segment_sum(data, segment_ids)": 0.006134969325153374,
                "tf.math.squared_difference(x, y)": 0.006134969325153374,
                "tf.math.top_k(input, k)": 0.006134969325153374,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.006134969325153374,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.006134969325153374,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.006134969325153374,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.006134969325153374,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.006134969325153374,
                "tf.matmul(a, b)": 0.006134969325153374,
                "tf.maximum(x, y)": 0.006134969325153374,
                "tf.minimum(x, y)": 0.006134969325153374,
                "tf.multiply(x, y)": 0.006134969325153374,
                "tf.not_equal(x, y)": 0.006134969325153374,
                "tf.one_hot(indices, depth)": 0.006134969325153374,
                "tf.ones(shape)": 0.006134969325153374,
                "tf.ones_like(input)": 0.006134969325153374,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.006134969325153374,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.006134969325153374,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.006134969325153374,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.006134969325153374,
                "tf.range(start)": 0.006134969325153374,
                "tf.range(start, limit, delta)": 0.006134969325153374,
                "tf.reduce_any(input_tensor, axis)": 0.006134969325153374,
                "tf.reduce_all(input_tensor, axis)": 0.006134969325153374,
                "tf.reduce_max(input_tensor)": 0.006134969325153374,
                "tf.reduce_max(input_tensor, axis)": 0.006134969325153374,
                "tf.reduce_mean(input_tensor)": 0.006134969325153374,
                "tf.reduce_mean(input_tensor, axis)": 0.006134969325153374,
                "tf.reduce_min(input_tensor)": 0.006134969325153374,
                "tf.reduce_min(input_tensor, axis)": 0.006134969325153374,
                "tf.reduce_prod(input_tensor, axis)": 0.006134969325153374,
                "tf.reduce_sum(input_tensor)": 0.006134969325153374,
                "tf.reduce_sum(input_tensor, axis)": 0.006134969325153374,
                "tf.repeat(input, repeats)": 0.006134969325153374,
                "tf.repeat(input, repeats, axis)": 0.006134969325153374,
                "tf.reshape(tensor, shape)": 0.006134969325153374,
                "tf.reverse(tensor, axis)": 0.006134969325153374,
                "tf.roll(input, shift, axis)": 0.006134969325153374,
                "tf.round(x)": 0.006134969325153374,
                "tf.scatter_nd(indices, updates, shape)": 0.006134969325153374,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.006134969325153374,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.006134969325153374,
                "tf.sequence_mask(lengths)": 0.006134969325153374,
                "tf.sequence_mask(lengths, maxlen)": 0.006134969325153374,
                "tf.shape(input)": 0.006134969325153374,
                "tf.sign(x)": 0.006134969325153374,
                "tf.sort(values, axis)": 0.006134969325153374,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.006134969325153374,
                "tf.sqrt(x)": 0.006134969325153374,
                "tf.square(x)": 0.006134969325153374,
                "tf.squeeze(input)": 0.006134969325153374,
                "tf.squeeze(input, axis)": 0.006134969325153374,
                "tf.stack(values, axis)": 0.012269938650306749,
                "tf.subtract(x, y)": 0.006134969325153374,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.006134969325153374,
                "tf.tensordot(a, b, axes)": 0.006134969325153374,
                "tf.tile(input, multiples)": 0.006134969325153374,
                "tf.transpose(a)": 0.006134969325153374,
                "tf.transpose(a, perm)": 0.006134969325153374,
                "tf.unique_with_counts(x)": 0.006134969325153374,
                "tf.unstack(value, axis)": 0.012269938650306749,
                "tf.where(condition)": 0.006134969325153374,
                "tf.where(condition, x, y)": 0.006134969325153374,
                "tf.zeros(shape)": 0.006134969325153374,
                "tf.zeros_like(input)": 0.006134969325153374,
                "tf.SparseTensor(indices, values, dense_shape)": 0.006134969325153374,
                "tf.sparse.add(a, b)": 0.006134969325153374,
                "tf.sparse.concat(axis, sp_inputs)": 0.006134969325153374,
                "tf.sparse.expand_dims(sp_input, axis)": 0.006134969325153374,
                "tf.sparse.from_dense(tensor)": 0.006134969325153374,
                "tf.sparse.maximum(sp_a, sp_b)": 0.006134969325153374,
                "tf.sparse.minimum(sp_a, sp_b)": 0.006134969325153374,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.006134969325153374,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.006134969325153374,
                "tf.sparse.reset_shape(sp_input)": 0.006134969325153374,
                "tf.sparse.reshape(sp_input, shape)": 0.006134969325153374,
                "tf.sparse.retain(sp_input, to_retain)": 0.006134969325153374,
                "tf.sparse.slice(sp_input, start, size)": 0.006134969325153374,
                "tf.sparse.split(sp_input, num_split, axis)": 0.006134969325153374,
                "tf.sparse.to_dense(sp_input)": 0.006134969325153374,
                "tf.sparse.to_dense(sp_input, default_value)": 0.006134969325153374,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.006134969325153374,
                "tf.sparse.transpose(sp_input)": 0.006134969325153374,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.006134969325153374,
                "IndexingOperation": 0.012269938650306749,
                "PairCreationOperation": 0.006134969325153374,
                "SingletonTupleCreationOperation": 0.006134969325153374,
                "SlicingAxis0BothOperation": 0.006134969325153374,
                "SlicingAxis0LeftOperation": 0.006134969325153374,
                "SlicingAxis0RightOperation": 0.006134969325153374,
                "SlicingAxis1BothOperation": 0.006134969325153374,
                "SlicingAxis1LeftOperation": 0.006134969325153374,
                "SlicingAxis1RightOperation": 0.006134969325153374,
                "TripleCreationOperation": 0.006134969325153374
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 6,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 4,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 6,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 6,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 6,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "stackoverflow_13",
        "completions": [
            "\ntensor = tf.constant([[2, 4], [3, 10]])\n\nvector1 = tf.constant([[3, 5], [10, 2]])\nvector2 = tf.constant([[[1, 0], [5, 4]], [[3, 10], [2, -2]]])\n\noutput1 = tf.multiply(vector1, tensor)\noutput2 = tf.multiply(vector2, tensor)\n\n",
            "\ninput_vector = tf.constant([[3, 5], [10, 2]])\n\ntensor = tf.constant([[2, 4], [3, 5]])\n\noutput = tf.matmul(input_vector, tensor)\n\n",
            "\ndef multiply_tensors(input_tensor):\n    fixed_tensor = tf.constant([[7, 4], [1, 10]])\n    return tf.multiply(input_tensor, fixed_tensor)\n",
            "\ntensor = tf.constant([[4, 2], [3, 4]])\n\nvector1 = tf.constant([[3, 5], [10, 2]])\nvector2 = tf.constant([[[1, 0], [5, 4]], [[3, 10], [2, -2]]])\n\noutput1 = tf.matmul(vector1, tensor)\noutput2 = tf.matmul(vector2, tensor)\n",
            "\ndef multiply_tensors(input_tensor):\n    constant_tensor = tf.constant([[4, 7], [1, 10]])\n    return tf.multiply(constant_tensor, input_tensor)\n",
            "\ninput_tensor = tf.constant(input_tensor)\n\nvector = tf.constant(vector)\n\noutput = tf.multiply(input_tensor, vector)\n",
            "\ndef multiply_tensors(input_tensor):\n    tensor_ones = tf.ones_like(input_tensor)\n    output_tensor = tf.matmul(input_tensor, tensor_ones, transpose_b=True)\n    return output_tensor\n",
            "\ndef multiply_vectors_by_tensor(input):\n    tensor = tf.constant([[2, 4], [3, 4]])\n    return tf.matmul(input, tensor)\n\ninput = tf.constant([[3, 5], [10, 2]])\n\ninput = tf.constant([[[1, 0], [5, 4]], [[3, 10], [2, -2]]])\n",
            "\ndef multiply_tensors(input_tensor):\n    constant_tensor = tf.constant([[7, 4], [4, 10]])\n    result = tf.multiply(input_tensor, constant_tensor)\n    return result\n",
            "\ninput_tensor = tf.constant([[3, 5], [10, 2]])\n\nmultiply_tensor = tf.constant([[4, 2], [3, 5]])\n\noutput_tensor = tf.multiply(input_tensor, multiply_tensor)\n\n"
        ],
        "target-program": "tf.tensordot(in1, in2, (1, 1))",
        "description": "multiply vectors by tensor",
        "tf_operators": {
            "tf.multiply": 6,
            "tf.constant": 9,
            "tf.matmul": 4,
            "tf.ones_like": 1
        },
        "coverage_percentage": 0.0,
        "total_in_target": 1,
        "total_covered": 0,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005780346820809248,
                "tf.add(x, y)": 0.005780346820809248,
                "tf.add_n(inputs)": 0.005780346820809248,
                "tf.argmax(input, axis)": 0.005780346820809248,
                "tf.argmin(input, axis)": 0.005780346820809248,
                "tf.argsort(values, axis, stable=True)": 0.005780346820809248,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005780346820809248,
                "tf.boolean_mask(tensor, mask)": 0.005780346820809248,
                "tf.broadcast_to(input, shape)": 0.005780346820809248,
                "tf.cast(x, dtype)": 0.005780346820809248,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005780346820809248,
                "tf.concat(values, axis)": 0.005780346820809248,
                "tf.constant(value)": 0.10982658959537572,
                "tf.constant(value, dtype)": 0.005780346820809248,
                "tf.divide(x, y)": 0.005780346820809248,
                "tf.equal(x, y)": 0.005780346820809248,
                "tf.exp(x)": 0.005780346820809248,
                "tf.expand_dims(input, axis)": 0.005780346820809248,
                "tf.eye(num_rows)": 0.005780346820809248,
                "tf.eye(num_rows, num_columns)": 0.005780346820809248,
                "tf.eye(num_rows, dtype)": 0.005780346820809248,
                "tf.fill(dims, value)": 0.005780346820809248,
                "tf.gather(params, indices)": 0.005780346820809248,
                "tf.gather(params, indices, axis, batch_dims)": 0.005780346820809248,
                "tf.gather_nd(params, indices)": 0.005780346820809248,
                "tf.gather_nd(params, indices, batch_dims)": 0.005780346820809248,
                "tf.greater(x, y)": 0.005780346820809248,
                "tf.greater_equal(x, y)": 0.005780346820809248,
                "tf.math.bincount(arr)": 0.005780346820809248,
                "tf.math.ceil(x)": 0.005780346820809248,
                "tf.math.count_nonzero(input)": 0.005780346820809248,
                "tf.math.count_nonzero(input, axis)": 0.005780346820809248,
                "tf.math.cumsum(x, axis)": 0.005780346820809248,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005780346820809248,
                "tf.math.divide_no_nan(x, y)": 0.005780346820809248,
                "tf.math.floor(x)": 0.005780346820809248,
                "tf.math.log(x)": 0.005780346820809248,
                "tf.math.logical_and(x, y)": 0.005780346820809248,
                "tf.math.logical_not(x)": 0.005780346820809248,
                "tf.math.logical_or(x, y)": 0.005780346820809248,
                "tf.math.logical_xor(x, y)": 0.005780346820809248,
                "tf.math.negative(x)": 0.005780346820809248,
                "tf.math.reciprocal(x)": 0.005780346820809248,
                "tf.math.reciprocal_no_nan(x)": 0.005780346820809248,
                "tf.math.segment_max(data, segment_ids)": 0.005780346820809248,
                "tf.math.segment_mean(data, segment_ids)": 0.005780346820809248,
                "tf.math.segment_min(data, segment_ids)": 0.005780346820809248,
                "tf.math.segment_prod(data, segment_ids)": 0.005780346820809248,
                "tf.math.segment_sum(data, segment_ids)": 0.005780346820809248,
                "tf.math.squared_difference(x, y)": 0.005780346820809248,
                "tf.math.top_k(input, k)": 0.005780346820809248,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005780346820809248,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005780346820809248,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005780346820809248,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005780346820809248,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005780346820809248,
                "tf.matmul(a, b)": 0.03468208092485549,
                "tf.maximum(x, y)": 0.005780346820809248,
                "tf.minimum(x, y)": 0.005780346820809248,
                "tf.multiply(x, y)": 0.046242774566473986,
                "tf.not_equal(x, y)": 0.005780346820809248,
                "tf.one_hot(indices, depth)": 0.005780346820809248,
                "tf.ones(shape)": 0.005780346820809248,
                "tf.ones_like(input)": 0.011560693641618497,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005780346820809248,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005780346820809248,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005780346820809248,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005780346820809248,
                "tf.range(start)": 0.005780346820809248,
                "tf.range(start, limit, delta)": 0.005780346820809248,
                "tf.reduce_any(input_tensor, axis)": 0.005780346820809248,
                "tf.reduce_all(input_tensor, axis)": 0.005780346820809248,
                "tf.reduce_max(input_tensor)": 0.005780346820809248,
                "tf.reduce_max(input_tensor, axis)": 0.005780346820809248,
                "tf.reduce_mean(input_tensor)": 0.005780346820809248,
                "tf.reduce_mean(input_tensor, axis)": 0.005780346820809248,
                "tf.reduce_min(input_tensor)": 0.005780346820809248,
                "tf.reduce_min(input_tensor, axis)": 0.005780346820809248,
                "tf.reduce_prod(input_tensor, axis)": 0.005780346820809248,
                "tf.reduce_sum(input_tensor)": 0.005780346820809248,
                "tf.reduce_sum(input_tensor, axis)": 0.005780346820809248,
                "tf.repeat(input, repeats)": 0.005780346820809248,
                "tf.repeat(input, repeats, axis)": 0.005780346820809248,
                "tf.reshape(tensor, shape)": 0.005780346820809248,
                "tf.reverse(tensor, axis)": 0.005780346820809248,
                "tf.roll(input, shift, axis)": 0.005780346820809248,
                "tf.round(x)": 0.005780346820809248,
                "tf.scatter_nd(indices, updates, shape)": 0.005780346820809248,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005780346820809248,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005780346820809248,
                "tf.sequence_mask(lengths)": 0.005780346820809248,
                "tf.sequence_mask(lengths, maxlen)": 0.005780346820809248,
                "tf.shape(input)": 0.005780346820809248,
                "tf.sign(x)": 0.005780346820809248,
                "tf.sort(values, axis)": 0.005780346820809248,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005780346820809248,
                "tf.sqrt(x)": 0.005780346820809248,
                "tf.square(x)": 0.005780346820809248,
                "tf.squeeze(input)": 0.005780346820809248,
                "tf.squeeze(input, axis)": 0.005780346820809248,
                "tf.stack(values, axis)": 0.005780346820809248,
                "tf.subtract(x, y)": 0.005780346820809248,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005780346820809248,
                "tf.tensordot(a, b, axes)": 0.005780346820809248,
                "tf.tile(input, multiples)": 0.005780346820809248,
                "tf.transpose(a)": 0.005780346820809248,
                "tf.transpose(a, perm)": 0.005780346820809248,
                "tf.unique_with_counts(x)": 0.005780346820809248,
                "tf.unstack(value, axis)": 0.005780346820809248,
                "tf.where(condition)": 0.005780346820809248,
                "tf.where(condition, x, y)": 0.005780346820809248,
                "tf.zeros(shape)": 0.005780346820809248,
                "tf.zeros_like(input)": 0.005780346820809248,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005780346820809248,
                "tf.sparse.add(a, b)": 0.005780346820809248,
                "tf.sparse.concat(axis, sp_inputs)": 0.005780346820809248,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005780346820809248,
                "tf.sparse.from_dense(tensor)": 0.005780346820809248,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005780346820809248,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005780346820809248,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005780346820809248,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005780346820809248,
                "tf.sparse.reset_shape(sp_input)": 0.005780346820809248,
                "tf.sparse.reshape(sp_input, shape)": 0.005780346820809248,
                "tf.sparse.retain(sp_input, to_retain)": 0.005780346820809248,
                "tf.sparse.slice(sp_input, start, size)": 0.005780346820809248,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005780346820809248,
                "tf.sparse.to_dense(sp_input)": 0.005780346820809248,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005780346820809248,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005780346820809248,
                "tf.sparse.transpose(sp_input)": 0.005780346820809248,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005780346820809248,
                "IndexingOperation": 0.005780346820809248,
                "PairCreationOperation": 0.005780346820809248,
                "SingletonTupleCreationOperation": 0.005780346820809248,
                "SlicingAxis0BothOperation": 0.005780346820809248,
                "SlicingAxis0LeftOperation": 0.005780346820809248,
                "SlicingAxis0RightOperation": 0.005780346820809248,
                "SlicingAxis1BothOperation": 0.005780346820809248,
                "SlicingAxis1LeftOperation": 0.005780346820809248,
                "SlicingAxis1RightOperation": 0.005780346820809248,
                "TripleCreationOperation": 0.005780346820809248
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 3,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 5,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 4,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 6,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "stackoverflow_14",
        "completions": [
            "\ndef check_any_true(input):\n    return tf.reduce_any(input, axis=2)\n\ninput = tf.constant([[[False, False, True], [False, False, False], [True, False, True], [False, True, False], [False, False, False], [True, True, True], [True, True, False]]])\noutput = check_any_true(input)\n",
            "\ndef check_any_true(input):\n    return tf.reduce_any(input, axis=2)\n\ninput = tf.constant([[[False, False, True], [False, False, False], [True, False, True], [False, True, False], [False, False, False], [True, True, True], [True, True, False]]])\noutput = check_any_true(input)\n",
            "\ndef check_true_in_row(tensor):\n    return tf.reduce_any(tensor, axis=2)\n\ntensor = tf.constant([[[False, False, True], [False, False, False], [True, False, True], [False, True, False], [False, False, False], [True, True, True], [True, True, False]]])\noutput = check_true_in_row(tensor)\n",
            "\ndef check_any_true(input_tensor):\n    return tf.reduce_any(input_tensor, axis=1)\n\ninput_tensor = tf.constant([[[False, False, True], [False, False, False], [True, False, True], [False, True, False], [False, False, False], [True, True, True], [True, True, False]]])\n",
            "\ndef any_true_in_row(input_tensor):\n    return tf.reduce_any(input_tensor, axis=1)\n",
            "\ndef check_row_values(input):\n    tensor = tf.constant(input)\n    result = tf.reduce_any(tensor, axis=2)\n    return result\n",
            "\ndef any_true_in_row(input_tensor):\n    return tf.reduce_any(input_tensor, axis=2)\n",
            "\ntensor = tf.constant([[[False, False, True], [False, False, False], [True, False, True], [False, True, False], [False, False, False], [True, True, True], [True, True, False]]])\n\nresult = tf.reduce_any(tensor, axis=1)\n\n",
            "\ndef check_true_in_row(input_tensor):\n    return tf.reduce_any(input_tensor, axis=2)\n",
            "\ndef any_true_in_row(input_tensor):\n    return tf.reduce_any(input_tensor, axis=1)\n\ninput_tensor = tf.constant([[[False, False, True], [False, False, False], [True, False, True], [False, True, False], [False, False, False], [True, True, True], [True, True, False]]])\noutput = any_true_in_row(input_tensor)\n"
        ],
        "target-program": "tf.reduce_any(in1, axis=-1)",
        "description": "choose True if any value in a row is True, False otherwise",
        "tf_operators": {
            "tf.reduce_any": 10,
            "tf.constant": 7
        },
        "coverage_percentage": 100.0,
        "total_in_target": 1,
        "total_covered": 1,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.006289308176100629,
                "tf.add(x, y)": 0.006289308176100629,
                "tf.add_n(inputs)": 0.006289308176100629,
                "tf.argmax(input, axis)": 0.006289308176100629,
                "tf.argmin(input, axis)": 0.006289308176100629,
                "tf.argsort(values, axis, stable=True)": 0.006289308176100629,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.006289308176100629,
                "tf.boolean_mask(tensor, mask)": 0.006289308176100629,
                "tf.broadcast_to(input, shape)": 0.006289308176100629,
                "tf.cast(x, dtype)": 0.006289308176100629,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.006289308176100629,
                "tf.concat(values, axis)": 0.006289308176100629,
                "tf.constant(value)": 0.050314465408805034,
                "tf.constant(value, dtype)": 0.006289308176100629,
                "tf.divide(x, y)": 0.006289308176100629,
                "tf.equal(x, y)": 0.006289308176100629,
                "tf.exp(x)": 0.006289308176100629,
                "tf.expand_dims(input, axis)": 0.006289308176100629,
                "tf.eye(num_rows)": 0.006289308176100629,
                "tf.eye(num_rows, num_columns)": 0.006289308176100629,
                "tf.eye(num_rows, dtype)": 0.006289308176100629,
                "tf.fill(dims, value)": 0.006289308176100629,
                "tf.gather(params, indices)": 0.006289308176100629,
                "tf.gather(params, indices, axis, batch_dims)": 0.006289308176100629,
                "tf.gather_nd(params, indices)": 0.006289308176100629,
                "tf.gather_nd(params, indices, batch_dims)": 0.006289308176100629,
                "tf.greater(x, y)": 0.006289308176100629,
                "tf.greater_equal(x, y)": 0.006289308176100629,
                "tf.math.bincount(arr)": 0.006289308176100629,
                "tf.math.ceil(x)": 0.006289308176100629,
                "tf.math.count_nonzero(input)": 0.006289308176100629,
                "tf.math.count_nonzero(input, axis)": 0.006289308176100629,
                "tf.math.cumsum(x, axis)": 0.006289308176100629,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.006289308176100629,
                "tf.math.divide_no_nan(x, y)": 0.006289308176100629,
                "tf.math.floor(x)": 0.006289308176100629,
                "tf.math.log(x)": 0.006289308176100629,
                "tf.math.logical_and(x, y)": 0.006289308176100629,
                "tf.math.logical_not(x)": 0.006289308176100629,
                "tf.math.logical_or(x, y)": 0.006289308176100629,
                "tf.math.logical_xor(x, y)": 0.006289308176100629,
                "tf.math.negative(x)": 0.006289308176100629,
                "tf.math.reciprocal(x)": 0.006289308176100629,
                "tf.math.reciprocal_no_nan(x)": 0.006289308176100629,
                "tf.math.segment_max(data, segment_ids)": 0.006289308176100629,
                "tf.math.segment_mean(data, segment_ids)": 0.006289308176100629,
                "tf.math.segment_min(data, segment_ids)": 0.006289308176100629,
                "tf.math.segment_prod(data, segment_ids)": 0.006289308176100629,
                "tf.math.segment_sum(data, segment_ids)": 0.006289308176100629,
                "tf.math.squared_difference(x, y)": 0.006289308176100629,
                "tf.math.top_k(input, k)": 0.006289308176100629,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.006289308176100629,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.006289308176100629,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.006289308176100629,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.006289308176100629,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.006289308176100629,
                "tf.matmul(a, b)": 0.006289308176100629,
                "tf.maximum(x, y)": 0.006289308176100629,
                "tf.minimum(x, y)": 0.006289308176100629,
                "tf.multiply(x, y)": 0.006289308176100629,
                "tf.not_equal(x, y)": 0.006289308176100629,
                "tf.one_hot(indices, depth)": 0.006289308176100629,
                "tf.ones(shape)": 0.006289308176100629,
                "tf.ones_like(input)": 0.006289308176100629,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.006289308176100629,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.006289308176100629,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.006289308176100629,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.006289308176100629,
                "tf.range(start)": 0.006289308176100629,
                "tf.range(start, limit, delta)": 0.006289308176100629,
                "tf.reduce_any(input_tensor, axis)": 0.06918238993710692,
                "tf.reduce_all(input_tensor, axis)": 0.006289308176100629,
                "tf.reduce_max(input_tensor)": 0.006289308176100629,
                "tf.reduce_max(input_tensor, axis)": 0.006289308176100629,
                "tf.reduce_mean(input_tensor)": 0.006289308176100629,
                "tf.reduce_mean(input_tensor, axis)": 0.006289308176100629,
                "tf.reduce_min(input_tensor)": 0.006289308176100629,
                "tf.reduce_min(input_tensor, axis)": 0.006289308176100629,
                "tf.reduce_prod(input_tensor, axis)": 0.006289308176100629,
                "tf.reduce_sum(input_tensor)": 0.006289308176100629,
                "tf.reduce_sum(input_tensor, axis)": 0.006289308176100629,
                "tf.repeat(input, repeats)": 0.006289308176100629,
                "tf.repeat(input, repeats, axis)": 0.006289308176100629,
                "tf.reshape(tensor, shape)": 0.006289308176100629,
                "tf.reverse(tensor, axis)": 0.006289308176100629,
                "tf.roll(input, shift, axis)": 0.006289308176100629,
                "tf.round(x)": 0.006289308176100629,
                "tf.scatter_nd(indices, updates, shape)": 0.006289308176100629,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.006289308176100629,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.006289308176100629,
                "tf.sequence_mask(lengths)": 0.006289308176100629,
                "tf.sequence_mask(lengths, maxlen)": 0.006289308176100629,
                "tf.shape(input)": 0.006289308176100629,
                "tf.sign(x)": 0.006289308176100629,
                "tf.sort(values, axis)": 0.006289308176100629,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.006289308176100629,
                "tf.sqrt(x)": 0.006289308176100629,
                "tf.square(x)": 0.006289308176100629,
                "tf.squeeze(input)": 0.006289308176100629,
                "tf.squeeze(input, axis)": 0.006289308176100629,
                "tf.stack(values, axis)": 0.006289308176100629,
                "tf.subtract(x, y)": 0.006289308176100629,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.006289308176100629,
                "tf.tensordot(a, b, axes)": 0.006289308176100629,
                "tf.tile(input, multiples)": 0.006289308176100629,
                "tf.transpose(a)": 0.006289308176100629,
                "tf.transpose(a, perm)": 0.006289308176100629,
                "tf.unique_with_counts(x)": 0.006289308176100629,
                "tf.unstack(value, axis)": 0.006289308176100629,
                "tf.where(condition)": 0.006289308176100629,
                "tf.where(condition, x, y)": 0.006289308176100629,
                "tf.zeros(shape)": 0.006289308176100629,
                "tf.zeros_like(input)": 0.006289308176100629,
                "tf.SparseTensor(indices, values, dense_shape)": 0.006289308176100629,
                "tf.sparse.add(a, b)": 0.006289308176100629,
                "tf.sparse.concat(axis, sp_inputs)": 0.006289308176100629,
                "tf.sparse.expand_dims(sp_input, axis)": 0.006289308176100629,
                "tf.sparse.from_dense(tensor)": 0.006289308176100629,
                "tf.sparse.maximum(sp_a, sp_b)": 0.006289308176100629,
                "tf.sparse.minimum(sp_a, sp_b)": 0.006289308176100629,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.006289308176100629,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.006289308176100629,
                "tf.sparse.reset_shape(sp_input)": 0.006289308176100629,
                "tf.sparse.reshape(sp_input, shape)": 0.006289308176100629,
                "tf.sparse.retain(sp_input, to_retain)": 0.006289308176100629,
                "tf.sparse.slice(sp_input, start, size)": 0.006289308176100629,
                "tf.sparse.split(sp_input, num_split, axis)": 0.006289308176100629,
                "tf.sparse.to_dense(sp_input)": 0.006289308176100629,
                "tf.sparse.to_dense(sp_input, default_value)": 0.006289308176100629,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.006289308176100629,
                "tf.sparse.transpose(sp_input)": 0.006289308176100629,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.006289308176100629,
                "IndexingOperation": 0.006289308176100629,
                "PairCreationOperation": 0.006289308176100629,
                "SingletonTupleCreationOperation": 0.006289308176100629,
                "SlicingAxis0BothOperation": 0.006289308176100629,
                "SlicingAxis0LeftOperation": 0.006289308176100629,
                "SlicingAxis0RightOperation": 0.006289308176100629,
                "SlicingAxis1BothOperation": 0.006289308176100629,
                "SlicingAxis1LeftOperation": 0.006289308176100629,
                "SlicingAxis1RightOperation": 0.006289308176100629,
                "TripleCreationOperation": 0.006289308176100629
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 4,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "stackoverflow_15",
        "completions": [
            "\nlst = [3, 1, 2, 0, 1, -1, 10, 1, -10]\n\ntensor = tf.constant(lst)\n\noutput = tf.where(tensor!=1, tensor, tf.zeros_like(tensor))\n\n",
            "\ninput_tensor = tf.constant([3, 1, 2, 0, 1, -1, 10, 1, -10])\n\noutput_tensor = tf.where(tf.equal(input_tensor, 1), 0, input_tensor)\n\n",
            "\ndef replace_ones_with_zeros(input_list):\n    tensor = tf.constant(input_list)\n    output = tf.where(tf.equal(tensor, 1), 0, tensor)\n    return output\n\ninput_list = [3, 1, 2, 0, 1, -1, 10, 1, -10]\noutput = replace_ones_with_zeros(input_list)\n",
            "\ninput_list = tf.constant([3, 1, 2, 0, 1, -1, 10, 1, -10])\n\noutput_list = tf.where(tf.equal(input_list, 1), 0, input_list)\n\n",
            "\ninput_tensor = tf.constant([3, 1, 2, 0, 1, -1, 10, 1, -10])\n\noutput_tensor = tf.where(tf.equal(input_tensor, 1), 0, input_tensor)\n",
            "\ninput = tf.constant([3, 1, 2, 0, 1, -1, 10, 1, -10])\noutput = tf.where(tf.equal(input, 1), 0, input)\n",
            "\ntensor = tf.constant([3, 1, 2, 0, 1, -1, 10, 1, -10])\n\noutput = tf.where(tf.not_equal(tensor, 1), tensor, tf.zeros_like(tensor))\n\n",
            "\ninput_tensor = tf.constant([3, 1, 2, 0, 1, -1, 10, 1, -10])\n\noutput_tensor = tf.where(tf.not_equal(input_tensor, 1), input_tensor, 0)\n",
            "\nlst = tf.constant([3, 1, 2, 0, 1, -1, 10, 1, -10])\n\ncondition = tf.equal(lst, 1)\n\nzeros = tf.zeros_like(lst)\n\noutput = tf.where(condition, zeros, lst)\n",
            "\nx = tf.constant([3, 1, 2, 0, 1, -1, 10, 1, -10])\n\noutput = tf.where(tf.not_equal(x, 1), x, 0)\n\n"
        ],
        "target-program": "tf.subtract(in1, tf.cast(tf.equal(in1, tf.constant(1)), tf.int32))",
        "description": "set all instances of 1 to 0",
        "tf_operators": {
            "tf.where": 10,
            "tf.zeros_like": 3,
            "tf.constant": 10,
            "tf.equal": 6,
            "tf.not_equal": 3
        },
        "coverage_percentage": 40.0,
        "total_in_target": 5,
        "total_covered": 2,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005747126436781609,
                "tf.add(x, y)": 0.005747126436781609,
                "tf.add_n(inputs)": 0.005747126436781609,
                "tf.argmax(input, axis)": 0.005747126436781609,
                "tf.argmin(input, axis)": 0.005747126436781609,
                "tf.argsort(values, axis, stable=True)": 0.005747126436781609,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005747126436781609,
                "tf.boolean_mask(tensor, mask)": 0.005747126436781609,
                "tf.broadcast_to(input, shape)": 0.005747126436781609,
                "tf.cast(x, dtype)": 0.005747126436781609,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005747126436781609,
                "tf.concat(values, axis)": 0.005747126436781609,
                "tf.constant(value)": 0.06321839080459771,
                "tf.constant(value, dtype)": 0.005747126436781609,
                "tf.divide(x, y)": 0.005747126436781609,
                "tf.equal(x, y)": 0.040229885057471264,
                "tf.exp(x)": 0.005747126436781609,
                "tf.expand_dims(input, axis)": 0.005747126436781609,
                "tf.eye(num_rows)": 0.005747126436781609,
                "tf.eye(num_rows, num_columns)": 0.005747126436781609,
                "tf.eye(num_rows, dtype)": 0.005747126436781609,
                "tf.fill(dims, value)": 0.005747126436781609,
                "tf.gather(params, indices)": 0.005747126436781609,
                "tf.gather(params, indices, axis, batch_dims)": 0.005747126436781609,
                "tf.gather_nd(params, indices)": 0.005747126436781609,
                "tf.gather_nd(params, indices, batch_dims)": 0.005747126436781609,
                "tf.greater(x, y)": 0.005747126436781609,
                "tf.greater_equal(x, y)": 0.005747126436781609,
                "tf.math.bincount(arr)": 0.005747126436781609,
                "tf.math.ceil(x)": 0.005747126436781609,
                "tf.math.count_nonzero(input)": 0.005747126436781609,
                "tf.math.count_nonzero(input, axis)": 0.005747126436781609,
                "tf.math.cumsum(x, axis)": 0.005747126436781609,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005747126436781609,
                "tf.math.divide_no_nan(x, y)": 0.005747126436781609,
                "tf.math.floor(x)": 0.005747126436781609,
                "tf.math.log(x)": 0.005747126436781609,
                "tf.math.logical_and(x, y)": 0.005747126436781609,
                "tf.math.logical_not(x)": 0.005747126436781609,
                "tf.math.logical_or(x, y)": 0.005747126436781609,
                "tf.math.logical_xor(x, y)": 0.005747126436781609,
                "tf.math.negative(x)": 0.005747126436781609,
                "tf.math.reciprocal(x)": 0.005747126436781609,
                "tf.math.reciprocal_no_nan(x)": 0.005747126436781609,
                "tf.math.segment_max(data, segment_ids)": 0.005747126436781609,
                "tf.math.segment_mean(data, segment_ids)": 0.005747126436781609,
                "tf.math.segment_min(data, segment_ids)": 0.005747126436781609,
                "tf.math.segment_prod(data, segment_ids)": 0.005747126436781609,
                "tf.math.segment_sum(data, segment_ids)": 0.005747126436781609,
                "tf.math.squared_difference(x, y)": 0.005747126436781609,
                "tf.math.top_k(input, k)": 0.005747126436781609,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005747126436781609,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005747126436781609,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005747126436781609,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005747126436781609,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005747126436781609,
                "tf.matmul(a, b)": 0.005747126436781609,
                "tf.maximum(x, y)": 0.005747126436781609,
                "tf.minimum(x, y)": 0.005747126436781609,
                "tf.multiply(x, y)": 0.005747126436781609,
                "tf.not_equal(x, y)": 0.022988505747126436,
                "tf.one_hot(indices, depth)": 0.005747126436781609,
                "tf.ones(shape)": 0.005747126436781609,
                "tf.ones_like(input)": 0.005747126436781609,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005747126436781609,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005747126436781609,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005747126436781609,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005747126436781609,
                "tf.range(start)": 0.005747126436781609,
                "tf.range(start, limit, delta)": 0.005747126436781609,
                "tf.reduce_any(input_tensor, axis)": 0.005747126436781609,
                "tf.reduce_all(input_tensor, axis)": 0.005747126436781609,
                "tf.reduce_max(input_tensor)": 0.005747126436781609,
                "tf.reduce_max(input_tensor, axis)": 0.005747126436781609,
                "tf.reduce_mean(input_tensor)": 0.005747126436781609,
                "tf.reduce_mean(input_tensor, axis)": 0.005747126436781609,
                "tf.reduce_min(input_tensor)": 0.005747126436781609,
                "tf.reduce_min(input_tensor, axis)": 0.005747126436781609,
                "tf.reduce_prod(input_tensor, axis)": 0.005747126436781609,
                "tf.reduce_sum(input_tensor)": 0.005747126436781609,
                "tf.reduce_sum(input_tensor, axis)": 0.005747126436781609,
                "tf.repeat(input, repeats)": 0.005747126436781609,
                "tf.repeat(input, repeats, axis)": 0.005747126436781609,
                "tf.reshape(tensor, shape)": 0.005747126436781609,
                "tf.reverse(tensor, axis)": 0.005747126436781609,
                "tf.roll(input, shift, axis)": 0.005747126436781609,
                "tf.round(x)": 0.005747126436781609,
                "tf.scatter_nd(indices, updates, shape)": 0.005747126436781609,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005747126436781609,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005747126436781609,
                "tf.sequence_mask(lengths)": 0.005747126436781609,
                "tf.sequence_mask(lengths, maxlen)": 0.005747126436781609,
                "tf.shape(input)": 0.005747126436781609,
                "tf.sign(x)": 0.005747126436781609,
                "tf.sort(values, axis)": 0.005747126436781609,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005747126436781609,
                "tf.sqrt(x)": 0.005747126436781609,
                "tf.square(x)": 0.005747126436781609,
                "tf.squeeze(input)": 0.005747126436781609,
                "tf.squeeze(input, axis)": 0.005747126436781609,
                "tf.stack(values, axis)": 0.005747126436781609,
                "tf.subtract(x, y)": 0.005747126436781609,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005747126436781609,
                "tf.tensordot(a, b, axes)": 0.005747126436781609,
                "tf.tile(input, multiples)": 0.005747126436781609,
                "tf.transpose(a)": 0.005747126436781609,
                "tf.transpose(a, perm)": 0.005747126436781609,
                "tf.unique_with_counts(x)": 0.005747126436781609,
                "tf.unstack(value, axis)": 0.005747126436781609,
                "tf.where(condition)": 0.005747126436781609,
                "tf.where(condition, x, y)": 0.06321839080459771,
                "tf.zeros(shape)": 0.005747126436781609,
                "tf.zeros_like(input)": 0.022988505747126436,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005747126436781609,
                "tf.sparse.add(a, b)": 0.005747126436781609,
                "tf.sparse.concat(axis, sp_inputs)": 0.005747126436781609,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005747126436781609,
                "tf.sparse.from_dense(tensor)": 0.005747126436781609,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005747126436781609,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005747126436781609,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005747126436781609,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005747126436781609,
                "tf.sparse.reset_shape(sp_input)": 0.005747126436781609,
                "tf.sparse.reshape(sp_input, shape)": 0.005747126436781609,
                "tf.sparse.retain(sp_input, to_retain)": 0.005747126436781609,
                "tf.sparse.slice(sp_input, start, size)": 0.005747126436781609,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005747126436781609,
                "tf.sparse.to_dense(sp_input)": 0.005747126436781609,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005747126436781609,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005747126436781609,
                "tf.sparse.transpose(sp_input)": 0.005747126436781609,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005747126436781609,
                "IndexingOperation": 0.005747126436781609,
                "PairCreationOperation": 0.005747126436781609,
                "SingletonTupleCreationOperation": 0.005747126436781609,
                "SlicingAxis0BothOperation": 0.005747126436781609,
                "SlicingAxis0LeftOperation": 0.005747126436781609,
                "SlicingAxis0RightOperation": 0.005747126436781609,
                "SlicingAxis1BothOperation": 0.005747126436781609,
                "SlicingAxis1LeftOperation": 0.005747126436781609,
                "SlicingAxis1RightOperation": 0.005747126436781609,
                "TripleCreationOperation": 0.005747126436781609
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 5,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 5,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 4,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 5,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "stackoverflow_16",
        "completions": [
            "\ndef multiply_tensors(input_tensor):\n    result = tf.reduce_prod(input_tensor, axis=0)\n    return result\n",
            "\ndef multiply_tensors(input_tensor):\n    product = tf.reduce_prod(input_tensor, axis=0)\n    return product\n\ninput_tensor = tf.constant([[2, 5], [3, 0], [8, -7]], dtype=tf.int32)\noutput_tensor = multiply_tensors(input_tensor)\n",
            "\ndef multiply_tensors(input):\n    result = tf.reduce_prod(input, axis=0)\n    return result\n",
            "\ndef multiply_tensors(input_tensor):\n    tensor = tf.constant(input_tensor)\n    result = tf.reduce_prod(tensor, axis=0)\n    return result.numpy().tolist()\n",
            "\ndef multiply_tensors(input):\n    return tf.reduce_prod(input, 0)\n\n",
            "\ndef multiply_tensors(input_tensor):\n    return tf.reduce_prod(input_tensor, axis=0)\n\ninput_tensor = tf.constant([[2, 5], [3, 0], [8, -7]])\noutput = multiply_tensors(input_tensor)\n",
            "\ndef multiply_tensors(input):\n    return tf.reduce_prod(input, axis=0)\n\n",
            "\ndef multiply_tensors(input):\n    tensor = tf.constant(input)\n    result = tf.reduce_prod(tensor, 0)\n    return result.numpy().tolist()\n\n",
            "\ndef multiply_tensors(input_tensor):\n    return tf.reduce_prod(input_tensor, axis=0)\n\ninput_tensor = tf.constant([[2, 5], [3, 0], [8, -7]])\noutput_tensor = multiply_tensors(input_tensor)\n",
            "\ndef multiply_tensors(tensors):\n    return tf.reduce_prod(tensors, axis=0)\n\ntensors = tf.constant([[2, 5], [3, 0], [8, -7]])\n"
        ],
        "target-program": "tf.multiply(in1, tf.expand_dims(in2, 1))",
        "description": "multiply tensors across the first axis",
        "tf_operators": {
            "tf.reduce_prod": 10,
            "tf.int32": 1,
            "tf.constant": 6
        },
        "coverage_percentage": 0.0,
        "total_in_target": 2,
        "total_covered": 0,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.006369426751592357,
                "tf.add(x, y)": 0.006369426751592357,
                "tf.add_n(inputs)": 0.006369426751592357,
                "tf.argmax(input, axis)": 0.006369426751592357,
                "tf.argmin(input, axis)": 0.006369426751592357,
                "tf.argsort(values, axis, stable=True)": 0.006369426751592357,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.006369426751592357,
                "tf.boolean_mask(tensor, mask)": 0.006369426751592357,
                "tf.broadcast_to(input, shape)": 0.006369426751592357,
                "tf.cast(x, dtype)": 0.006369426751592357,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.006369426751592357,
                "tf.concat(values, axis)": 0.006369426751592357,
                "tf.constant(value)": 0.03821656050955414,
                "tf.constant(value, dtype)": 0.006369426751592357,
                "tf.divide(x, y)": 0.006369426751592357,
                "tf.equal(x, y)": 0.006369426751592357,
                "tf.exp(x)": 0.006369426751592357,
                "tf.expand_dims(input, axis)": 0.006369426751592357,
                "tf.eye(num_rows)": 0.006369426751592357,
                "tf.eye(num_rows, num_columns)": 0.006369426751592357,
                "tf.eye(num_rows, dtype)": 0.006369426751592357,
                "tf.fill(dims, value)": 0.006369426751592357,
                "tf.gather(params, indices)": 0.006369426751592357,
                "tf.gather(params, indices, axis, batch_dims)": 0.006369426751592357,
                "tf.gather_nd(params, indices)": 0.006369426751592357,
                "tf.gather_nd(params, indices, batch_dims)": 0.006369426751592357,
                "tf.greater(x, y)": 0.006369426751592357,
                "tf.greater_equal(x, y)": 0.006369426751592357,
                "tf.math.bincount(arr)": 0.006369426751592357,
                "tf.math.ceil(x)": 0.006369426751592357,
                "tf.math.count_nonzero(input)": 0.006369426751592357,
                "tf.math.count_nonzero(input, axis)": 0.006369426751592357,
                "tf.math.cumsum(x, axis)": 0.006369426751592357,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.006369426751592357,
                "tf.math.divide_no_nan(x, y)": 0.006369426751592357,
                "tf.math.floor(x)": 0.006369426751592357,
                "tf.math.log(x)": 0.006369426751592357,
                "tf.math.logical_and(x, y)": 0.006369426751592357,
                "tf.math.logical_not(x)": 0.006369426751592357,
                "tf.math.logical_or(x, y)": 0.006369426751592357,
                "tf.math.logical_xor(x, y)": 0.006369426751592357,
                "tf.math.negative(x)": 0.006369426751592357,
                "tf.math.reciprocal(x)": 0.006369426751592357,
                "tf.math.reciprocal_no_nan(x)": 0.006369426751592357,
                "tf.math.segment_max(data, segment_ids)": 0.006369426751592357,
                "tf.math.segment_mean(data, segment_ids)": 0.006369426751592357,
                "tf.math.segment_min(data, segment_ids)": 0.006369426751592357,
                "tf.math.segment_prod(data, segment_ids)": 0.006369426751592357,
                "tf.math.segment_sum(data, segment_ids)": 0.006369426751592357,
                "tf.math.squared_difference(x, y)": 0.006369426751592357,
                "tf.math.top_k(input, k)": 0.006369426751592357,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.006369426751592357,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.006369426751592357,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.006369426751592357,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.006369426751592357,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.006369426751592357,
                "tf.matmul(a, b)": 0.006369426751592357,
                "tf.maximum(x, y)": 0.006369426751592357,
                "tf.minimum(x, y)": 0.006369426751592357,
                "tf.multiply(x, y)": 0.006369426751592357,
                "tf.not_equal(x, y)": 0.006369426751592357,
                "tf.one_hot(indices, depth)": 0.006369426751592357,
                "tf.ones(shape)": 0.006369426751592357,
                "tf.ones_like(input)": 0.006369426751592357,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.006369426751592357,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.006369426751592357,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.006369426751592357,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.006369426751592357,
                "tf.range(start)": 0.006369426751592357,
                "tf.range(start, limit, delta)": 0.006369426751592357,
                "tf.reduce_any(input_tensor, axis)": 0.006369426751592357,
                "tf.reduce_all(input_tensor, axis)": 0.006369426751592357,
                "tf.reduce_max(input_tensor)": 0.006369426751592357,
                "tf.reduce_max(input_tensor, axis)": 0.006369426751592357,
                "tf.reduce_mean(input_tensor)": 0.006369426751592357,
                "tf.reduce_mean(input_tensor, axis)": 0.006369426751592357,
                "tf.reduce_min(input_tensor)": 0.006369426751592357,
                "tf.reduce_min(input_tensor, axis)": 0.006369426751592357,
                "tf.reduce_prod(input_tensor, axis)": 0.07006369426751592,
                "tf.reduce_sum(input_tensor)": 0.006369426751592357,
                "tf.reduce_sum(input_tensor, axis)": 0.006369426751592357,
                "tf.repeat(input, repeats)": 0.006369426751592357,
                "tf.repeat(input, repeats, axis)": 0.006369426751592357,
                "tf.reshape(tensor, shape)": 0.006369426751592357,
                "tf.reverse(tensor, axis)": 0.006369426751592357,
                "tf.roll(input, shift, axis)": 0.006369426751592357,
                "tf.round(x)": 0.006369426751592357,
                "tf.scatter_nd(indices, updates, shape)": 0.006369426751592357,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.006369426751592357,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.006369426751592357,
                "tf.sequence_mask(lengths)": 0.006369426751592357,
                "tf.sequence_mask(lengths, maxlen)": 0.006369426751592357,
                "tf.shape(input)": 0.006369426751592357,
                "tf.sign(x)": 0.006369426751592357,
                "tf.sort(values, axis)": 0.006369426751592357,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.006369426751592357,
                "tf.sqrt(x)": 0.006369426751592357,
                "tf.square(x)": 0.006369426751592357,
                "tf.squeeze(input)": 0.006369426751592357,
                "tf.squeeze(input, axis)": 0.006369426751592357,
                "tf.stack(values, axis)": 0.006369426751592357,
                "tf.subtract(x, y)": 0.006369426751592357,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.006369426751592357,
                "tf.tensordot(a, b, axes)": 0.006369426751592357,
                "tf.tile(input, multiples)": 0.006369426751592357,
                "tf.transpose(a)": 0.006369426751592357,
                "tf.transpose(a, perm)": 0.006369426751592357,
                "tf.unique_with_counts(x)": 0.006369426751592357,
                "tf.unstack(value, axis)": 0.006369426751592357,
                "tf.where(condition)": 0.006369426751592357,
                "tf.where(condition, x, y)": 0.006369426751592357,
                "tf.zeros(shape)": 0.006369426751592357,
                "tf.zeros_like(input)": 0.006369426751592357,
                "tf.SparseTensor(indices, values, dense_shape)": 0.006369426751592357,
                "tf.sparse.add(a, b)": 0.006369426751592357,
                "tf.sparse.concat(axis, sp_inputs)": 0.006369426751592357,
                "tf.sparse.expand_dims(sp_input, axis)": 0.006369426751592357,
                "tf.sparse.from_dense(tensor)": 0.006369426751592357,
                "tf.sparse.maximum(sp_a, sp_b)": 0.006369426751592357,
                "tf.sparse.minimum(sp_a, sp_b)": 0.006369426751592357,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.006369426751592357,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.006369426751592357,
                "tf.sparse.reset_shape(sp_input)": 0.006369426751592357,
                "tf.sparse.reshape(sp_input, shape)": 0.006369426751592357,
                "tf.sparse.retain(sp_input, to_retain)": 0.006369426751592357,
                "tf.sparse.slice(sp_input, start, size)": 0.006369426751592357,
                "tf.sparse.split(sp_input, num_split, axis)": 0.006369426751592357,
                "tf.sparse.to_dense(sp_input)": 0.006369426751592357,
                "tf.sparse.to_dense(sp_input, default_value)": 0.006369426751592357,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.006369426751592357,
                "tf.sparse.transpose(sp_input)": 0.006369426751592357,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.006369426751592357,
                "IndexingOperation": 0.006369426751592357,
                "PairCreationOperation": 0.006369426751592357,
                "SingletonTupleCreationOperation": 0.006369426751592357,
                "SlicingAxis0BothOperation": 0.006369426751592357,
                "SlicingAxis0LeftOperation": 0.006369426751592357,
                "SlicingAxis0RightOperation": 0.006369426751592357,
                "SlicingAxis1BothOperation": 0.006369426751592357,
                "SlicingAxis1LeftOperation": 0.006369426751592357,
                "SlicingAxis1RightOperation": 0.006369426751592357,
                "TripleCreationOperation": 0.006369426751592357
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 5,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 4,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "stackoverflow_17",
        "completions": [
            "\ntensor = tf.constant([17, -32, 99])\n\noutput = tf.repeat(tensor, repeats=2)\n\n",
            "\ntensor = tf.constant([17, -32, 99])\n\noutput = tf.repeat(tensor, repeats=2)\n\n",
            "\ninput_tensor = tf.constant([17, -32, 99])\n\noutput_tensor = tf.repeat(input_tensor, repeats=2)\n\n",
            "\ntensor = tf.constant([17, -32, 99])\n\nduplicated_tensor = tf.repeat(tensor, repeats=2)\n\n",
            "\ninput_tensor = tf.constant([17, -32, 99])\n\noutput_tensor = tf.repeat(input_tensor, repeats=2)\n\n",
            "\ntensor = tf.constant([17, -32, 99])\n\noutput = tf.repeat(tensor, repeats=2)\n\n",
            "\ntensor = tf.constant([17, -32, 99])\n\noutput = tf.repeat(tensor, repeats=2)\n\n",
            "\ntensor = tf.constant([17, -32, 99])\n\nresult = tf.repeat(tensor, repeats=2)\n\n",
            "\ninput_list = [17, -32, 99]\n\ninput_tensor = tf.constant(input_list)\n\noutput_tensor = tf.repeat(input_tensor, repeats=2)\n\n",
            "\nx = tf.constant([17, -32, 99])\n\nresult = tf.repeat(x, repeats=2)\n\n"
        ],
        "target-program": "tf.stack((in1, in1), axis=1)",
        "description": "duplicate each element of a tensor",
        "tf_operators": {
            "tf.repeat": 10,
            "tf.constant": 10
        },
        "coverage_percentage": 0.0,
        "total_in_target": 1,
        "total_covered": 0,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.006172839506172839,
                "tf.add(x, y)": 0.006172839506172839,
                "tf.add_n(inputs)": 0.006172839506172839,
                "tf.argmax(input, axis)": 0.006172839506172839,
                "tf.argmin(input, axis)": 0.006172839506172839,
                "tf.argsort(values, axis, stable=True)": 0.006172839506172839,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.006172839506172839,
                "tf.boolean_mask(tensor, mask)": 0.006172839506172839,
                "tf.broadcast_to(input, shape)": 0.006172839506172839,
                "tf.cast(x, dtype)": 0.006172839506172839,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.006172839506172839,
                "tf.concat(values, axis)": 0.006172839506172839,
                "tf.constant(value)": 0.06790123456790123,
                "tf.constant(value, dtype)": 0.006172839506172839,
                "tf.divide(x, y)": 0.006172839506172839,
                "tf.equal(x, y)": 0.006172839506172839,
                "tf.exp(x)": 0.006172839506172839,
                "tf.expand_dims(input, axis)": 0.006172839506172839,
                "tf.eye(num_rows)": 0.006172839506172839,
                "tf.eye(num_rows, num_columns)": 0.006172839506172839,
                "tf.eye(num_rows, dtype)": 0.006172839506172839,
                "tf.fill(dims, value)": 0.006172839506172839,
                "tf.gather(params, indices)": 0.006172839506172839,
                "tf.gather(params, indices, axis, batch_dims)": 0.006172839506172839,
                "tf.gather_nd(params, indices)": 0.006172839506172839,
                "tf.gather_nd(params, indices, batch_dims)": 0.006172839506172839,
                "tf.greater(x, y)": 0.006172839506172839,
                "tf.greater_equal(x, y)": 0.006172839506172839,
                "tf.math.bincount(arr)": 0.006172839506172839,
                "tf.math.ceil(x)": 0.006172839506172839,
                "tf.math.count_nonzero(input)": 0.006172839506172839,
                "tf.math.count_nonzero(input, axis)": 0.006172839506172839,
                "tf.math.cumsum(x, axis)": 0.006172839506172839,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.006172839506172839,
                "tf.math.divide_no_nan(x, y)": 0.006172839506172839,
                "tf.math.floor(x)": 0.006172839506172839,
                "tf.math.log(x)": 0.006172839506172839,
                "tf.math.logical_and(x, y)": 0.006172839506172839,
                "tf.math.logical_not(x)": 0.006172839506172839,
                "tf.math.logical_or(x, y)": 0.006172839506172839,
                "tf.math.logical_xor(x, y)": 0.006172839506172839,
                "tf.math.negative(x)": 0.006172839506172839,
                "tf.math.reciprocal(x)": 0.006172839506172839,
                "tf.math.reciprocal_no_nan(x)": 0.006172839506172839,
                "tf.math.segment_max(data, segment_ids)": 0.006172839506172839,
                "tf.math.segment_mean(data, segment_ids)": 0.006172839506172839,
                "tf.math.segment_min(data, segment_ids)": 0.006172839506172839,
                "tf.math.segment_prod(data, segment_ids)": 0.006172839506172839,
                "tf.math.segment_sum(data, segment_ids)": 0.006172839506172839,
                "tf.math.squared_difference(x, y)": 0.006172839506172839,
                "tf.math.top_k(input, k)": 0.006172839506172839,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.006172839506172839,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.006172839506172839,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.006172839506172839,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.006172839506172839,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.006172839506172839,
                "tf.matmul(a, b)": 0.006172839506172839,
                "tf.maximum(x, y)": 0.006172839506172839,
                "tf.minimum(x, y)": 0.006172839506172839,
                "tf.multiply(x, y)": 0.006172839506172839,
                "tf.not_equal(x, y)": 0.006172839506172839,
                "tf.one_hot(indices, depth)": 0.006172839506172839,
                "tf.ones(shape)": 0.006172839506172839,
                "tf.ones_like(input)": 0.006172839506172839,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.006172839506172839,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.006172839506172839,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.006172839506172839,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.006172839506172839,
                "tf.range(start)": 0.006172839506172839,
                "tf.range(start, limit, delta)": 0.006172839506172839,
                "tf.reduce_any(input_tensor, axis)": 0.006172839506172839,
                "tf.reduce_all(input_tensor, axis)": 0.006172839506172839,
                "tf.reduce_max(input_tensor)": 0.006172839506172839,
                "tf.reduce_max(input_tensor, axis)": 0.006172839506172839,
                "tf.reduce_mean(input_tensor)": 0.006172839506172839,
                "tf.reduce_mean(input_tensor, axis)": 0.006172839506172839,
                "tf.reduce_min(input_tensor)": 0.006172839506172839,
                "tf.reduce_min(input_tensor, axis)": 0.006172839506172839,
                "tf.reduce_prod(input_tensor, axis)": 0.006172839506172839,
                "tf.reduce_sum(input_tensor)": 0.006172839506172839,
                "tf.reduce_sum(input_tensor, axis)": 0.006172839506172839,
                "tf.repeat(input, repeats)": 0.006172839506172839,
                "tf.repeat(input, repeats, axis)": 0.06790123456790123,
                "tf.reshape(tensor, shape)": 0.006172839506172839,
                "tf.reverse(tensor, axis)": 0.006172839506172839,
                "tf.roll(input, shift, axis)": 0.006172839506172839,
                "tf.round(x)": 0.006172839506172839,
                "tf.scatter_nd(indices, updates, shape)": 0.006172839506172839,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.006172839506172839,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.006172839506172839,
                "tf.sequence_mask(lengths)": 0.006172839506172839,
                "tf.sequence_mask(lengths, maxlen)": 0.006172839506172839,
                "tf.shape(input)": 0.006172839506172839,
                "tf.sign(x)": 0.006172839506172839,
                "tf.sort(values, axis)": 0.006172839506172839,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.006172839506172839,
                "tf.sqrt(x)": 0.006172839506172839,
                "tf.square(x)": 0.006172839506172839,
                "tf.squeeze(input)": 0.006172839506172839,
                "tf.squeeze(input, axis)": 0.006172839506172839,
                "tf.stack(values, axis)": 0.006172839506172839,
                "tf.subtract(x, y)": 0.006172839506172839,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.006172839506172839,
                "tf.tensordot(a, b, axes)": 0.006172839506172839,
                "tf.tile(input, multiples)": 0.006172839506172839,
                "tf.transpose(a)": 0.006172839506172839,
                "tf.transpose(a, perm)": 0.006172839506172839,
                "tf.unique_with_counts(x)": 0.006172839506172839,
                "tf.unstack(value, axis)": 0.006172839506172839,
                "tf.where(condition)": 0.006172839506172839,
                "tf.where(condition, x, y)": 0.006172839506172839,
                "tf.zeros(shape)": 0.006172839506172839,
                "tf.zeros_like(input)": 0.006172839506172839,
                "tf.SparseTensor(indices, values, dense_shape)": 0.006172839506172839,
                "tf.sparse.add(a, b)": 0.006172839506172839,
                "tf.sparse.concat(axis, sp_inputs)": 0.006172839506172839,
                "tf.sparse.expand_dims(sp_input, axis)": 0.006172839506172839,
                "tf.sparse.from_dense(tensor)": 0.006172839506172839,
                "tf.sparse.maximum(sp_a, sp_b)": 0.006172839506172839,
                "tf.sparse.minimum(sp_a, sp_b)": 0.006172839506172839,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.006172839506172839,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.006172839506172839,
                "tf.sparse.reset_shape(sp_input)": 0.006172839506172839,
                "tf.sparse.reshape(sp_input, shape)": 0.006172839506172839,
                "tf.sparse.retain(sp_input, to_retain)": 0.006172839506172839,
                "tf.sparse.slice(sp_input, start, size)": 0.006172839506172839,
                "tf.sparse.split(sp_input, num_split, axis)": 0.006172839506172839,
                "tf.sparse.to_dense(sp_input)": 0.006172839506172839,
                "tf.sparse.to_dense(sp_input, default_value)": 0.006172839506172839,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.006172839506172839,
                "tf.sparse.transpose(sp_input)": 0.006172839506172839,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.006172839506172839,
                "IndexingOperation": 0.006172839506172839,
                "PairCreationOperation": 0.006172839506172839,
                "SingletonTupleCreationOperation": 0.006172839506172839,
                "SlicingAxis0BothOperation": 0.006172839506172839,
                "SlicingAxis0LeftOperation": 0.006172839506172839,
                "SlicingAxis0RightOperation": 0.006172839506172839,
                "SlicingAxis1BothOperation": 0.006172839506172839,
                "SlicingAxis1LeftOperation": 0.006172839506172839,
                "SlicingAxis1RightOperation": 0.006172839506172839,
                "TripleCreationOperation": 0.006172839506172839
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 4,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "stackoverflow_18",
        "completions": [
            "\ntensor_3d = tf.constant([[[1, 1, 1], [1, 0, 1]], [[1, 2, 3], [4, 5, 6]]])\n\ntensor_2d = tf.constant([[1, 1, 1, 1], [1, 2, 3, 4], [5, 6, 7, 8]])\n\ntensor = tf.constant([[100, 200, 300, 400], [100, 200, 300, 400]])\n\ntensor_3d_reshaped = tf.reshape(tensor_3d, [tensor_3d.shape[0]*tensor_3d.shape[1], tensor_3d.shape[2]])\n\nresult = tf.matmul(tensor_3d_reshaped, tensor_2d)\n\nresult = tf.add(result, tensor)\n\n",
            "\ninput_data = [[[1, 1, 1], [1, 0, 1]], [[1, 2, 3], [4, 5, 6]]]\n\ntensor_3d = tf.constant(input_data)\n\ntensor_2d = tf.constant([[1, 2, 3, 4], [5, 6, 7, 8]])\n\nresult = tf.tensordot(tensor_3d, tensor_2d, axes=1)\n\nanother_tensor = tf.constant([[100, 200, 300, 400], [5, 6, 7, 8]])\n\nfinal_result = tf.add(result, another_tensor)\n\n",
            "\ntensor_3d = tf.constant([[[1, 1, 1], [1, 0, 1]], [[1, 2, 3], [4, 5, 6]]])\ntensor_2d = tf.constant([[1, 1, 1, 1], [1, 2, 3, 4], [5, 6, 7, 8]])\ntensor_add = tf.constant([[100, 200, 300, 400], [100, 200, 300, 400]])\n\nresult = tf.matmul(tensor_3d, tensor_2d)\n\nresult = tf.reduce_sum(result, axis=1)\n\nresult = tf.add(result, tensor_add)\n",
            "\ntensor1 = tf.constant([[[1, 1, 1], [1, 0, 1]], [[1, 2, 3], [4, 5, 6]]], dtype=tf.int32)\ntensor2 = tf.constant([[1, 1, 1, 1], [1, 2, 3, 4], [5, 6, 7, 8]], dtype=tf.int32)\ntensor3 = tf.constant([100, 200, 300, 400], dtype=tf.int32)\n\nresult = tf.add(tf.matmul(tensor1, tensor2), tensor3)\n\n",
            "\nt1 = tf.constant([[[1, 1, 1], [1, 0, 1]], [[1, 2, 3], [4, 5, 6]]])\nt2 = tf.constant([[1, 2, 3, 4], [5, 6, 7, 8]])\nt3 = tf.constant([[100, 200, 300, 400], [100, 200, 300, 400]])\n\nresult = tf.add(tf.tensordot(t1, t2, axes=1), t3)\n\n",
            "\ndef multiply_and_add_tensors(tensor_3d, tensor_2d, tensor_to_add):\n    result = []\n    for tensor in tensor_3d:\n        result.append(tf.matmul(tensor, tensor_2d))\n    result = tf.add(result, tensor_to_add)\n    return result\n",
            "\ntensor1 = tf.constant([[[1, 1, 1], [1, 0, 1]], [[1, 2, 3], [4, 5, 6]]], dtype=tf.int32)\ntensor2 = tf.constant([[1, 1, 1, 1], [1, 2, 3, 4], [5, 6, 7, 8]], dtype=tf.int32)\ntensor3 = tf.constant([100, 200, 300, 400], dtype=tf.int32)\n\nresult = tf.tensordot(tensor1, tensor2, axes=[[2], [0]])\n\nresult = tf.add(result, tensor3)\n\n",
            "\ntensor_3d = tf.constant([[[1, 1, 1], [1, 0, 1]], [[1, 2, 3], [4, 5, 6]]])\n\ntensor_2d = tf.constant([[1, 1, 1, 1], [1, 2, 3, 4], [5, 6, 7, 8]])\n\nmul_result = tf.tensordot(tensor_3d, tensor_2d, axes=[2, 1])\n\nadd_tensor = tf.constant([1, 2, 3, 4])\nresult = tf.add(mul_result, add_tensor)\n\n",
            "\ntensor3D = tf.constant([[[1, 1, 1], [1, 0, 1]], [[1, 2, 3], [4, 5, 6]]], dtype=tf.float32)\ntensor2D = tf.constant([[1, 1, 1, 1], [1, 2, 3, 4], [5, 6, 7, 8]], dtype=tf.float32)\ntensor_to_add = tf.constant([[100, 200, 300, 400]], dtype=tf.float32)\n\nresult = tf.matmul(tensor3D, tensor2D)\n\nresult = tf.add(result, tensor_to_add)\n\n",
            "\ntensor_3d = tf.constant([[[1, 1, 1], [1, 0, 1]], [[1, 2, 3], [4, 5, 6]]])\ntensor_2d = tf.constant([[1, 1, 1, 1], [1, 2, 3, 4], [5, 6, 7, 8]])\ntensor_to_add = tf.constant([[100, 200, 300, 400]])\n\ntensor_mul = tf.tensordot(tensor_3d, tensor_2d, axes=1)\n\nresult = tf.add(tensor_mul, tensor_to_add)\n\n"
        ],
        "target-program": "tf.add(in3, tf.matmul(in1, in2))",
        "description": "multiply 3D tensor and 2D tensor and add another tensor",
        "tf_operators": {
            "tf.add": 10,
            "tf.reshape": 1,
            "tf.matmul": 5,
            "tf.constant": 9,
            "tf.tensordot": 5,
            "tf.reduce_sum": 1,
            "tf.int32": 2,
            "tf.float32": 1
        },
        "coverage_percentage": 100.0,
        "total_in_target": 2,
        "total_covered": 2,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005434782608695652,
                "tf.add(x, y)": 0.059782608695652176,
                "tf.add_n(inputs)": 0.005434782608695652,
                "tf.argmax(input, axis)": 0.005434782608695652,
                "tf.argmin(input, axis)": 0.005434782608695652,
                "tf.argsort(values, axis, stable=True)": 0.005434782608695652,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005434782608695652,
                "tf.boolean_mask(tensor, mask)": 0.005434782608695652,
                "tf.broadcast_to(input, shape)": 0.005434782608695652,
                "tf.cast(x, dtype)": 0.005434782608695652,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005434782608695652,
                "tf.concat(values, axis)": 0.005434782608695652,
                "tf.constant(value)": 0.10326086956521739,
                "tf.constant(value, dtype)": 0.005434782608695652,
                "tf.divide(x, y)": 0.005434782608695652,
                "tf.equal(x, y)": 0.005434782608695652,
                "tf.exp(x)": 0.005434782608695652,
                "tf.expand_dims(input, axis)": 0.005434782608695652,
                "tf.eye(num_rows)": 0.005434782608695652,
                "tf.eye(num_rows, num_columns)": 0.005434782608695652,
                "tf.eye(num_rows, dtype)": 0.005434782608695652,
                "tf.fill(dims, value)": 0.005434782608695652,
                "tf.gather(params, indices)": 0.005434782608695652,
                "tf.gather(params, indices, axis, batch_dims)": 0.005434782608695652,
                "tf.gather_nd(params, indices)": 0.005434782608695652,
                "tf.gather_nd(params, indices, batch_dims)": 0.005434782608695652,
                "tf.greater(x, y)": 0.005434782608695652,
                "tf.greater_equal(x, y)": 0.005434782608695652,
                "tf.math.bincount(arr)": 0.005434782608695652,
                "tf.math.ceil(x)": 0.005434782608695652,
                "tf.math.count_nonzero(input)": 0.005434782608695652,
                "tf.math.count_nonzero(input, axis)": 0.005434782608695652,
                "tf.math.cumsum(x, axis)": 0.005434782608695652,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005434782608695652,
                "tf.math.divide_no_nan(x, y)": 0.005434782608695652,
                "tf.math.floor(x)": 0.005434782608695652,
                "tf.math.log(x)": 0.005434782608695652,
                "tf.math.logical_and(x, y)": 0.005434782608695652,
                "tf.math.logical_not(x)": 0.005434782608695652,
                "tf.math.logical_or(x, y)": 0.005434782608695652,
                "tf.math.logical_xor(x, y)": 0.005434782608695652,
                "tf.math.negative(x)": 0.005434782608695652,
                "tf.math.reciprocal(x)": 0.005434782608695652,
                "tf.math.reciprocal_no_nan(x)": 0.005434782608695652,
                "tf.math.segment_max(data, segment_ids)": 0.005434782608695652,
                "tf.math.segment_mean(data, segment_ids)": 0.005434782608695652,
                "tf.math.segment_min(data, segment_ids)": 0.005434782608695652,
                "tf.math.segment_prod(data, segment_ids)": 0.005434782608695652,
                "tf.math.segment_sum(data, segment_ids)": 0.005434782608695652,
                "tf.math.squared_difference(x, y)": 0.005434782608695652,
                "tf.math.top_k(input, k)": 0.005434782608695652,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005434782608695652,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005434782608695652,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005434782608695652,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005434782608695652,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005434782608695652,
                "tf.matmul(a, b)": 0.03260869565217391,
                "tf.maximum(x, y)": 0.005434782608695652,
                "tf.minimum(x, y)": 0.005434782608695652,
                "tf.multiply(x, y)": 0.005434782608695652,
                "tf.not_equal(x, y)": 0.005434782608695652,
                "tf.one_hot(indices, depth)": 0.005434782608695652,
                "tf.ones(shape)": 0.005434782608695652,
                "tf.ones_like(input)": 0.005434782608695652,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005434782608695652,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005434782608695652,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005434782608695652,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005434782608695652,
                "tf.range(start)": 0.005434782608695652,
                "tf.range(start, limit, delta)": 0.005434782608695652,
                "tf.reduce_any(input_tensor, axis)": 0.005434782608695652,
                "tf.reduce_all(input_tensor, axis)": 0.005434782608695652,
                "tf.reduce_max(input_tensor)": 0.005434782608695652,
                "tf.reduce_max(input_tensor, axis)": 0.005434782608695652,
                "tf.reduce_mean(input_tensor)": 0.005434782608695652,
                "tf.reduce_mean(input_tensor, axis)": 0.005434782608695652,
                "tf.reduce_min(input_tensor)": 0.005434782608695652,
                "tf.reduce_min(input_tensor, axis)": 0.005434782608695652,
                "tf.reduce_prod(input_tensor, axis)": 0.005434782608695652,
                "tf.reduce_sum(input_tensor)": 0.005434782608695652,
                "tf.reduce_sum(input_tensor, axis)": 0.005434782608695652,
                "tf.repeat(input, repeats)": 0.005434782608695652,
                "tf.repeat(input, repeats, axis)": 0.005434782608695652,
                "tf.reshape(tensor, shape)": 0.010869565217391304,
                "tf.reverse(tensor, axis)": 0.005434782608695652,
                "tf.roll(input, shift, axis)": 0.005434782608695652,
                "tf.round(x)": 0.005434782608695652,
                "tf.scatter_nd(indices, updates, shape)": 0.005434782608695652,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005434782608695652,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005434782608695652,
                "tf.sequence_mask(lengths)": 0.005434782608695652,
                "tf.sequence_mask(lengths, maxlen)": 0.005434782608695652,
                "tf.shape(input)": 0.005434782608695652,
                "tf.sign(x)": 0.005434782608695652,
                "tf.sort(values, axis)": 0.005434782608695652,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005434782608695652,
                "tf.sqrt(x)": 0.005434782608695652,
                "tf.square(x)": 0.005434782608695652,
                "tf.squeeze(input)": 0.005434782608695652,
                "tf.squeeze(input, axis)": 0.005434782608695652,
                "tf.stack(values, axis)": 0.005434782608695652,
                "tf.subtract(x, y)": 0.005434782608695652,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005434782608695652,
                "tf.tensordot(a, b, axes)": 0.03260869565217391,
                "tf.tile(input, multiples)": 0.005434782608695652,
                "tf.transpose(a)": 0.005434782608695652,
                "tf.transpose(a, perm)": 0.005434782608695652,
                "tf.unique_with_counts(x)": 0.005434782608695652,
                "tf.unstack(value, axis)": 0.005434782608695652,
                "tf.where(condition)": 0.005434782608695652,
                "tf.where(condition, x, y)": 0.005434782608695652,
                "tf.zeros(shape)": 0.005434782608695652,
                "tf.zeros_like(input)": 0.005434782608695652,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005434782608695652,
                "tf.sparse.add(a, b)": 0.005434782608695652,
                "tf.sparse.concat(axis, sp_inputs)": 0.005434782608695652,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005434782608695652,
                "tf.sparse.from_dense(tensor)": 0.005434782608695652,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005434782608695652,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005434782608695652,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005434782608695652,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005434782608695652,
                "tf.sparse.reset_shape(sp_input)": 0.005434782608695652,
                "tf.sparse.reshape(sp_input, shape)": 0.005434782608695652,
                "tf.sparse.retain(sp_input, to_retain)": 0.005434782608695652,
                "tf.sparse.slice(sp_input, start, size)": 0.005434782608695652,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005434782608695652,
                "tf.sparse.to_dense(sp_input)": 0.005434782608695652,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005434782608695652,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005434782608695652,
                "tf.sparse.transpose(sp_input)": 0.005434782608695652,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005434782608695652,
                "IndexingOperation": 0.021739130434782608,
                "PairCreationOperation": 0.005434782608695652,
                "SingletonTupleCreationOperation": 0.005434782608695652,
                "SlicingAxis0BothOperation": 0.005434782608695652,
                "SlicingAxis0LeftOperation": 0.005434782608695652,
                "SlicingAxis0RightOperation": 0.005434782608695652,
                "SlicingAxis1BothOperation": 0.005434782608695652,
                "SlicingAxis1LeftOperation": 0.005434782608695652,
                "SlicingAxis1RightOperation": 0.005434782608695652,
                "TripleCreationOperation": 0.005434782608695652
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 4,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 3,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 5,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 5,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 8,
                "IndexingOperation": 6,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8
            }
        }
    },
    {
        "task_id": "stackoverflow_19",
        "completions": [
            "\ntensor = tf.constant([[3, 1, 2], [1, 0, 4], [1, 2, 3], [0, 5, 1], [1, 1, 2], [2, 3, 1], [2, 1, 0]])\n\nsorted_indices = tf.argsort(tensor[:, :2], axis=0, stable=True)\n\nsorted_tensor = tf.gather(tensor, sorted_indices[:, 0])\n\noutput = sorted_tensor[0]\n\n",
            "\ndata = [[3, 1, 2], [1, 0, 4], [1, 2, 3], [0, 5, 1], [1, 1, 2], [2, 3, 1], [2, 1, 0]]\n\ntensor = tf.constant(data)\n\nsorted_indices = tf.argsort(tensor, axis=0)\n\nsorted_tensor = tf.gather(tensor, sorted_indices[:, 0])\n\nfirst_row = sorted_tensor[0]\n\n",
            "\nx = tf.constant([[3, 1, 2], [1, 0, 4], [1, 2, 3], [0, 5, 1], [1, 1, 2], [2, 3, 1], [2, 1, 0]])\n\nindices = tf.argsort(x[:, 0])\n\nindices = tf.argsort(x[indices, 1])\n\nsorted_x = tf.gather(x, indices)\n\n",
            "\ndata = [[3, 1, 2], [1, 0, 4], [1, 2, 3], [0, 5, 1], [1, 1, 2], [2, 3, 1], [2, 1, 0]]\n\ntensor = tf.constant(data)\n\nindices = tf.argsort(tensor[:, :2], axis=0, stable=True)\n\nsorted_tensor = tf.gather(tensor, indices[:, 0])\n\noutput = sorted_tensor[0]\n\n",
            "\ndata = [[3, 1, 2], [1, 0, 4], [1, 2, 3], [0, 5, 1], [1, 1, 2], [2, 3, 1], [2, 1, 0]]\n\ntensor = tf.constant(data)\n\nmax_val = tf.reduce_max(tensor[:, 1])\n\nconcat_tensor = tensor[:, 0] * max_val + tensor[:, 1]\n\nsorted_indices = tf.argsort(concat_tensor)\n\nsorted_tensor = tf.gather(tensor, sorted_indices)\n\noutput = sorted_tensor[0]\n\n",
            "\ntensor = tf.constant([[3, 1, 2], [1, 0, 4], [1, 2, 3], [0, 5, 1], [1, 1, 2], [2, 3, 1], [2, 1, 0]], dtype=tf.float32)\n\nsort_tensor = tensor[:, 0] + 1e-10 * tensor[:, 1]\n\nindices = tf.argsort(sort_tensor)\n\nsorted_tensor = tf.gather(tensor, indices)\n\noutput = sorted_tensor[0]\n\n",
            "\nlst = [[3, 1, 2], [1, 0, 4], [1, 2, 3], [0, 5, 1], [1, 1, 2], [2, 3, 1], [2, 1, 0]]\n\ntensor = tf.constant(lst)\n\ncombined = tf.cast(tensor[:, 0], tf.float32) + 1e-10 * tf.cast(tensor[:, 1], tf.float32)\n\nsorted_indices = tf.argsort(combined)\n\nsorted_tensor = tf.gather(tensor, sorted_indices)\n\n",
            "\ndata = [[3, 1, 2], [1, 0, 4], [1, 2, 3], [0, 5, 1], [1, 1, 2], [2, 3, 1], [2, 1, 0]]\n\ntensor = tf.constant(data)\n\nsorted_indices = tf.argsort(tensor)\n\nsorted_tensor = tf.gather(tensor, sorted_indices)\n\noutput = sorted_tensor[0]\n",
            "\ninput_data = [[3, 1, 2], [1, 0, 4], [1, 2, 3], [0, 5, 1], [1, 1, 2], [2, 3, 1], [2, 1, 0]]\n\ntensor = tf.constant(input_data)\n\nsorted_indices = tf.argsort(tf.argsort(tensor[:, 0], stable=True) + tf.argsort(tensor[:, 1], stable=True))\n\nsorted_tensor = tf.gather(tensor, sorted_indices)\n\n",
            "\ntensor = tf.constant([[3, 1, 2], [1, 0, 4], [1, 2, 3], [0, 5, 1], [1, 1, 2], [2, 3, 1], [2, 1, 0]])\n\nindices = tf.argsort(tf.argsort(tensor[:, 1]), direction='ASCENDING')\nsorted_tensor = tf.gather(tensor, indices)\n\noutput = sorted_tensor[0]\n\n"
        ],
        "target-program": "tf.gather(tf.gather(in1, tf.argsort(in1[:, 1], stable=True)), tf.argsort(tf.gather(in1, tf.argsort(in1[:, 1], stable=True))[:, 0], stable=True))",
        "description": "(\\'sort a tensor considering the first column, breaking ties using the second column\\')",
        "tf_operators": {
            "tf.argsort": 10,
            "tf.gather": 10,
            "tf.constant": 10,
            "tf.reduce_max": 1,
            "tf.float32": 2,
            "tf.cast": 1
        },
        "coverage_percentage": 100.0,
        "total_in_target": 2,
        "total_covered": 2,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004807692307692308,
                "tf.add(x, y)": 0.004807692307692308,
                "tf.add_n(inputs)": 0.004807692307692308,
                "tf.argmax(input, axis)": 0.004807692307692308,
                "tf.argmin(input, axis)": 0.004807692307692308,
                "tf.argsort(values, axis, stable=True)": 0.02403846153846154,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.004807692307692308,
                "tf.boolean_mask(tensor, mask)": 0.004807692307692308,
                "tf.broadcast_to(input, shape)": 0.004807692307692308,
                "tf.cast(x, dtype)": 0.014423076923076924,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004807692307692308,
                "tf.concat(values, axis)": 0.004807692307692308,
                "tf.constant(value)": 0.04807692307692308,
                "tf.constant(value, dtype)": 0.004807692307692308,
                "tf.divide(x, y)": 0.004807692307692308,
                "tf.equal(x, y)": 0.004807692307692308,
                "tf.exp(x)": 0.004807692307692308,
                "tf.expand_dims(input, axis)": 0.004807692307692308,
                "tf.eye(num_rows)": 0.004807692307692308,
                "tf.eye(num_rows, num_columns)": 0.004807692307692308,
                "tf.eye(num_rows, dtype)": 0.004807692307692308,
                "tf.fill(dims, value)": 0.004807692307692308,
                "tf.gather(params, indices)": 0.052884615384615384,
                "tf.gather(params, indices, axis, batch_dims)": 0.004807692307692308,
                "tf.gather_nd(params, indices)": 0.004807692307692308,
                "tf.gather_nd(params, indices, batch_dims)": 0.004807692307692308,
                "tf.greater(x, y)": 0.004807692307692308,
                "tf.greater_equal(x, y)": 0.004807692307692308,
                "tf.math.bincount(arr)": 0.004807692307692308,
                "tf.math.ceil(x)": 0.004807692307692308,
                "tf.math.count_nonzero(input)": 0.004807692307692308,
                "tf.math.count_nonzero(input, axis)": 0.004807692307692308,
                "tf.math.cumsum(x, axis)": 0.004807692307692308,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004807692307692308,
                "tf.math.divide_no_nan(x, y)": 0.004807692307692308,
                "tf.math.floor(x)": 0.004807692307692308,
                "tf.math.log(x)": 0.004807692307692308,
                "tf.math.logical_and(x, y)": 0.004807692307692308,
                "tf.math.logical_not(x)": 0.004807692307692308,
                "tf.math.logical_or(x, y)": 0.004807692307692308,
                "tf.math.logical_xor(x, y)": 0.004807692307692308,
                "tf.math.negative(x)": 0.004807692307692308,
                "tf.math.reciprocal(x)": 0.004807692307692308,
                "tf.math.reciprocal_no_nan(x)": 0.004807692307692308,
                "tf.math.segment_max(data, segment_ids)": 0.004807692307692308,
                "tf.math.segment_mean(data, segment_ids)": 0.004807692307692308,
                "tf.math.segment_min(data, segment_ids)": 0.004807692307692308,
                "tf.math.segment_prod(data, segment_ids)": 0.004807692307692308,
                "tf.math.segment_sum(data, segment_ids)": 0.004807692307692308,
                "tf.math.squared_difference(x, y)": 0.004807692307692308,
                "tf.math.top_k(input, k)": 0.004807692307692308,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004807692307692308,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004807692307692308,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004807692307692308,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004807692307692308,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004807692307692308,
                "tf.matmul(a, b)": 0.004807692307692308,
                "tf.maximum(x, y)": 0.004807692307692308,
                "tf.minimum(x, y)": 0.004807692307692308,
                "tf.multiply(x, y)": 0.004807692307692308,
                "tf.not_equal(x, y)": 0.004807692307692308,
                "tf.one_hot(indices, depth)": 0.004807692307692308,
                "tf.ones(shape)": 0.004807692307692308,
                "tf.ones_like(input)": 0.004807692307692308,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.004807692307692308,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.004807692307692308,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.004807692307692308,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.004807692307692308,
                "tf.range(start)": 0.004807692307692308,
                "tf.range(start, limit, delta)": 0.004807692307692308,
                "tf.reduce_any(input_tensor, axis)": 0.004807692307692308,
                "tf.reduce_all(input_tensor, axis)": 0.004807692307692308,
                "tf.reduce_max(input_tensor)": 0.009615384615384616,
                "tf.reduce_max(input_tensor, axis)": 0.004807692307692308,
                "tf.reduce_mean(input_tensor)": 0.004807692307692308,
                "tf.reduce_mean(input_tensor, axis)": 0.004807692307692308,
                "tf.reduce_min(input_tensor)": 0.004807692307692308,
                "tf.reduce_min(input_tensor, axis)": 0.004807692307692308,
                "tf.reduce_prod(input_tensor, axis)": 0.004807692307692308,
                "tf.reduce_sum(input_tensor)": 0.004807692307692308,
                "tf.reduce_sum(input_tensor, axis)": 0.004807692307692308,
                "tf.repeat(input, repeats)": 0.004807692307692308,
                "tf.repeat(input, repeats, axis)": 0.004807692307692308,
                "tf.reshape(tensor, shape)": 0.004807692307692308,
                "tf.reverse(tensor, axis)": 0.004807692307692308,
                "tf.roll(input, shift, axis)": 0.004807692307692308,
                "tf.round(x)": 0.004807692307692308,
                "tf.scatter_nd(indices, updates, shape)": 0.004807692307692308,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.004807692307692308,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.004807692307692308,
                "tf.sequence_mask(lengths)": 0.004807692307692308,
                "tf.sequence_mask(lengths, maxlen)": 0.004807692307692308,
                "tf.shape(input)": 0.004807692307692308,
                "tf.sign(x)": 0.004807692307692308,
                "tf.sort(values, axis)": 0.004807692307692308,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.004807692307692308,
                "tf.sqrt(x)": 0.004807692307692308,
                "tf.square(x)": 0.004807692307692308,
                "tf.squeeze(input)": 0.004807692307692308,
                "tf.squeeze(input, axis)": 0.004807692307692308,
                "tf.stack(values, axis)": 0.004807692307692308,
                "tf.subtract(x, y)": 0.004807692307692308,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004807692307692308,
                "tf.tensordot(a, b, axes)": 0.004807692307692308,
                "tf.tile(input, multiples)": 0.004807692307692308,
                "tf.transpose(a)": 0.004807692307692308,
                "tf.transpose(a, perm)": 0.004807692307692308,
                "tf.unique_with_counts(x)": 0.004807692307692308,
                "tf.unstack(value, axis)": 0.004807692307692308,
                "tf.where(condition)": 0.004807692307692308,
                "tf.where(condition, x, y)": 0.004807692307692308,
                "tf.zeros(shape)": 0.004807692307692308,
                "tf.zeros_like(input)": 0.004807692307692308,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004807692307692308,
                "tf.sparse.add(a, b)": 0.004807692307692308,
                "tf.sparse.concat(axis, sp_inputs)": 0.004807692307692308,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004807692307692308,
                "tf.sparse.from_dense(tensor)": 0.004807692307692308,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004807692307692308,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004807692307692308,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004807692307692308,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004807692307692308,
                "tf.sparse.reset_shape(sp_input)": 0.004807692307692308,
                "tf.sparse.reshape(sp_input, shape)": 0.004807692307692308,
                "tf.sparse.retain(sp_input, to_retain)": 0.004807692307692308,
                "tf.sparse.slice(sp_input, start, size)": 0.004807692307692308,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004807692307692308,
                "tf.sparse.to_dense(sp_input)": 0.004807692307692308,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004807692307692308,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004807692307692308,
                "tf.sparse.transpose(sp_input)": 0.004807692307692308,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.004807692307692308,
                "IndexingOperation": 0.038461538461538464,
                "PairCreationOperation": 0.08653846153846154,
                "SingletonTupleCreationOperation": 0.004807692307692308,
                "SlicingAxis0BothOperation": 0.004807692307692308,
                "SlicingAxis0LeftOperation": 0.004807692307692308,
                "SlicingAxis0RightOperation": 0.004807692307692308,
                "SlicingAxis1BothOperation": 0.004807692307692308,
                "SlicingAxis1LeftOperation": 0.004807692307692308,
                "SlicingAxis1RightOperation": 0.014423076923076924,
                "TripleCreationOperation": 0.004807692307692308
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 5,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 6,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 4,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 8,
                "IndexingOperation": 5,
                "PairCreationOperation": 4,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 6,
                "TripleCreationOperation": 8
            }
        }
    },
    {
        "task_id": "stackoverflow_20",
        "completions": [
            "\ndata = [[0.7, 0.2, 0.1], [0.4, 0.5, 0.1], [0.4, 0.4, 0.2], [0.3, 0.4, 0.3], [0.0, 0.0, 1.0]]\n\ntensor = tf.constant(data)\n\nargmax_indices = tf.argmax(tensor, axis=1)\n\nindices = tf.stack([tf.range(tf.shape(argmax_indices)[0]), argmax_indices], axis=1)\n\nnew_tensor = tf.zeros_like(tensor)\n\nresult = tf.tensor_scatter_nd_update(new_tensor, indices, tf.ones(tf.shape(argmax_indices), dtype=tensor.dtype))\n\n",
            "\ninput_tensor = [[0.7, 0.2, 0.1], [0.4, 0.5, 0.1], [0.4, 0.4, 0.2], [0.3, 0.4, 0.3], [0.0, 0.0, 1.0]]\n\nargmax_tensor = tf.argmax(input_tensor, axis=1)\n\noutput_tensor = tf.one_hot(argmax_tensor, depth=3)\n\noutput_array = output_tensor.numpy()\n\n",
            "\ndata = [[0.7, 0.2, 0.1], [0.4, 0.5, 0.1], [0.4, 0.4, 0.2], [0.3, 0.4, 0.3], [0.0, 0.0, 1.0]]\n\ntensor = tf.constant(data)\n\nindices = tf.argmax(tensor, axis=1)\n\nzeros = tf.zeros([len(data), len(data[0])], tf.int32)\n\nresult = tf.tensor_scatter_nd_update(zeros, tf.reshape(indices, [-1, 1]), tf.ones([len(indices)], tf.int32))\n\n",
            "\ndef set_argmax_to_one(input):\n    tensor = tf.constant(input)\n    max_indices = tf.argmax(tensor, axis=1)\n    result = tf.one_hot(max_indices, depth=tensor.shape[1])\n    return result\n\ninput = [[0.7, 0.2, 0.1], [0.4, 0.5, 0.1], [0.4, 0.4, 0.2], [0.3, 0.4, 0.3], [0.0, 0.0, 1.0]]\n",
            "\ndef set_argmax_to_one(input):\n    tensor = tf.constant(input)\n    argmax_indices = tf.argmax(tensor, axis=1)\n    one_hot = tf.one_hot(argmax_indices, depth=tensor.shape[1])\n    return one_hot\n\ninput = [[0.7, 0.2, 0.1], [0.4, 0.5, 0.1], [0.4, 0.4, 0.2], [0.3, 0.4, 0.3], [0.0, 0.0, 1.0]]\n",
            "\ndef compute_argmax_and_set_to_one(input_list):\n    tensor = tf.constant(input_list)\n    max_indices = tf.argmax(tensor, axis=1)\n    one_hot = tf.one_hot(max_indices, tf.shape(input_list)[1])\n    output = tf.reduce_sum(one_hot, axis=0)\n    return tf.cast(output, dtype=tf.int32)\n\ninput_list = [[0.7, 0.2, 0.1], [0.4, 0.5, 0.1], [0.4, 0.4, 0.2], [0.3, 0.4, 0.3], [0.0, 0.0, 1.0]]\n",
            "\ndata = [[0.7, 0.2, 0.1], [0.4, 0.5, 0.1], [0.4, 0.4, 0.2], [0.3, 0.4, 0.3], [0.0, 0.0, 1.0]]\n\ndata_tensor = tf.constant(data)\n\nmax_indices = tf.argmax(data_tensor, axis=1)\n\none_hot_tensor = tf.one_hot(max_indices, depth=data_tensor.shape[1])\n\nresult = tf.reduce_sum(one_hot_tensor, axis=0)\n\n",
            "\ndef set_argmax_to_one(tensor):\n    indices = tf.argmax(tensor, axis=1)\n    one_hot = tf.one_hot(indices, depth=tensor.shape[1])\n    return one_hot\n\ntensor = tf.constant([[0.7, 0.2, 0.1], [0.4, 0.5, 0.1], [0.4, 0.4, 0.2], [0.3, 0.4, 0.3], [0.0, 0.0, 1.0]])\noutput = set_argmax_to_one(tensor)\n",
            "\ndef set_argmax_to_one(input_list):\n    tensor = tf.constant(input_list)\n    max_indices = tf.argmax(tensor, axis=1)\n    one_hot = tf.one_hot(max_indices, depth=tensor.shape[1])\n    return one_hot\n\ninput_list = [[0.7, 0.2, 0.1], [0.4, 0.5, 0.1], [0.4, 0.4, 0.2], [0.3, 0.4, 0.3], [0.0, 0.0, 1.0]]\noutput = set_argmax_to_one(input_list)\n",
            "\ndef set_argmax_to_one(input):\n    tensor = tf.constant(input)\n    argmax = tf.argmax(tensor, axis=1)\n    one_hot = tf.one_hot(argmax, depth=tensor.shape[1], on_value=1, off_value=0)\n    output = one_hot.numpy().tolist()\n    return output\n\ninput = [[0.7, 0.2, 0.1], [0.4, 0.5, 0.1], [0.4, 0.4, 0.2], [0.3, 0.4, 0.3], [0.0, 0.0, 1.0]]\n"
        ],
        "target-program": "tf.cast(tf.one_hot(tf.argmax(in1, axis=1), 3), tf.int32)",
        "description": "compute argmax in each tensor and set it to 1",
        "tf_operators": {
            "tf.ones": 2,
            "tf.stack": 1,
            "tf.range": 1,
            "tf.argmax": 10,
            "tf.shape": 2,
            "tf.tensor_scatter_nd_update": 2,
            "tf.zeros_like": 1,
            "tf.constant": 9,
            "tf.one_hot": 8,
            "tf.reshape": 1,
            "tf.int32": 2,
            "tf.zeros": 1,
            "tf.cast": 1,
            "tf.reduce_sum": 2
        },
        "coverage_percentage": 100.0,
        "total_in_target": 4,
        "total_covered": 4,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005235602094240838,
                "tf.add(x, y)": 0.005235602094240838,
                "tf.add_n(inputs)": 0.005235602094240838,
                "tf.argmax(input, axis)": 0.05759162303664921,
                "tf.argmin(input, axis)": 0.005235602094240838,
                "tf.argsort(values, axis, stable=True)": 0.005235602094240838,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005235602094240838,
                "tf.boolean_mask(tensor, mask)": 0.005235602094240838,
                "tf.broadcast_to(input, shape)": 0.005235602094240838,
                "tf.cast(x, dtype)": 0.010471204188481676,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005235602094240838,
                "tf.concat(values, axis)": 0.005235602094240838,
                "tf.constant(value)": 0.05235602094240838,
                "tf.constant(value, dtype)": 0.005235602094240838,
                "tf.divide(x, y)": 0.005235602094240838,
                "tf.equal(x, y)": 0.005235602094240838,
                "tf.exp(x)": 0.005235602094240838,
                "tf.expand_dims(input, axis)": 0.005235602094240838,
                "tf.eye(num_rows)": 0.005235602094240838,
                "tf.eye(num_rows, num_columns)": 0.005235602094240838,
                "tf.eye(num_rows, dtype)": 0.005235602094240838,
                "tf.fill(dims, value)": 0.005235602094240838,
                "tf.gather(params, indices)": 0.005235602094240838,
                "tf.gather(params, indices, axis, batch_dims)": 0.005235602094240838,
                "tf.gather_nd(params, indices)": 0.005235602094240838,
                "tf.gather_nd(params, indices, batch_dims)": 0.005235602094240838,
                "tf.greater(x, y)": 0.005235602094240838,
                "tf.greater_equal(x, y)": 0.005235602094240838,
                "tf.math.bincount(arr)": 0.005235602094240838,
                "tf.math.ceil(x)": 0.005235602094240838,
                "tf.math.count_nonzero(input)": 0.005235602094240838,
                "tf.math.count_nonzero(input, axis)": 0.005235602094240838,
                "tf.math.cumsum(x, axis)": 0.005235602094240838,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005235602094240838,
                "tf.math.divide_no_nan(x, y)": 0.005235602094240838,
                "tf.math.floor(x)": 0.005235602094240838,
                "tf.math.log(x)": 0.005235602094240838,
                "tf.math.logical_and(x, y)": 0.005235602094240838,
                "tf.math.logical_not(x)": 0.005235602094240838,
                "tf.math.logical_or(x, y)": 0.005235602094240838,
                "tf.math.logical_xor(x, y)": 0.005235602094240838,
                "tf.math.negative(x)": 0.005235602094240838,
                "tf.math.reciprocal(x)": 0.005235602094240838,
                "tf.math.reciprocal_no_nan(x)": 0.005235602094240838,
                "tf.math.segment_max(data, segment_ids)": 0.005235602094240838,
                "tf.math.segment_mean(data, segment_ids)": 0.005235602094240838,
                "tf.math.segment_min(data, segment_ids)": 0.005235602094240838,
                "tf.math.segment_prod(data, segment_ids)": 0.005235602094240838,
                "tf.math.segment_sum(data, segment_ids)": 0.005235602094240838,
                "tf.math.squared_difference(x, y)": 0.005235602094240838,
                "tf.math.top_k(input, k)": 0.005235602094240838,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005235602094240838,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005235602094240838,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005235602094240838,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005235602094240838,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005235602094240838,
                "tf.matmul(a, b)": 0.005235602094240838,
                "tf.maximum(x, y)": 0.005235602094240838,
                "tf.minimum(x, y)": 0.005235602094240838,
                "tf.multiply(x, y)": 0.005235602094240838,
                "tf.not_equal(x, y)": 0.005235602094240838,
                "tf.one_hot(indices, depth)": 0.04712041884816754,
                "tf.ones(shape)": 0.015706806282722512,
                "tf.ones_like(input)": 0.005235602094240838,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005235602094240838,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005235602094240838,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005235602094240838,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005235602094240838,
                "tf.range(start)": 0.010471204188481676,
                "tf.range(start, limit, delta)": 0.005235602094240838,
                "tf.reduce_any(input_tensor, axis)": 0.005235602094240838,
                "tf.reduce_all(input_tensor, axis)": 0.005235602094240838,
                "tf.reduce_max(input_tensor)": 0.005235602094240838,
                "tf.reduce_max(input_tensor, axis)": 0.005235602094240838,
                "tf.reduce_mean(input_tensor)": 0.005235602094240838,
                "tf.reduce_mean(input_tensor, axis)": 0.005235602094240838,
                "tf.reduce_min(input_tensor)": 0.005235602094240838,
                "tf.reduce_min(input_tensor, axis)": 0.005235602094240838,
                "tf.reduce_prod(input_tensor, axis)": 0.005235602094240838,
                "tf.reduce_sum(input_tensor)": 0.005235602094240838,
                "tf.reduce_sum(input_tensor, axis)": 0.005235602094240838,
                "tf.repeat(input, repeats)": 0.005235602094240838,
                "tf.repeat(input, repeats, axis)": 0.005235602094240838,
                "tf.reshape(tensor, shape)": 0.010471204188481676,
                "tf.reverse(tensor, axis)": 0.005235602094240838,
                "tf.roll(input, shift, axis)": 0.005235602094240838,
                "tf.round(x)": 0.005235602094240838,
                "tf.scatter_nd(indices, updates, shape)": 0.005235602094240838,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005235602094240838,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005235602094240838,
                "tf.sequence_mask(lengths)": 0.005235602094240838,
                "tf.sequence_mask(lengths, maxlen)": 0.005235602094240838,
                "tf.shape(input)": 0.020942408376963352,
                "tf.sign(x)": 0.005235602094240838,
                "tf.sort(values, axis)": 0.005235602094240838,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005235602094240838,
                "tf.sqrt(x)": 0.005235602094240838,
                "tf.square(x)": 0.005235602094240838,
                "tf.squeeze(input)": 0.005235602094240838,
                "tf.squeeze(input, axis)": 0.005235602094240838,
                "tf.stack(values, axis)": 0.010471204188481676,
                "tf.subtract(x, y)": 0.005235602094240838,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.015706806282722512,
                "tf.tensordot(a, b, axes)": 0.005235602094240838,
                "tf.tile(input, multiples)": 0.005235602094240838,
                "tf.transpose(a)": 0.005235602094240838,
                "tf.transpose(a, perm)": 0.005235602094240838,
                "tf.unique_with_counts(x)": 0.005235602094240838,
                "tf.unstack(value, axis)": 0.005235602094240838,
                "tf.where(condition)": 0.005235602094240838,
                "tf.where(condition, x, y)": 0.005235602094240838,
                "tf.zeros(shape)": 0.010471204188481676,
                "tf.zeros_like(input)": 0.010471204188481676,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005235602094240838,
                "tf.sparse.add(a, b)": 0.005235602094240838,
                "tf.sparse.concat(axis, sp_inputs)": 0.005235602094240838,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005235602094240838,
                "tf.sparse.from_dense(tensor)": 0.005235602094240838,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005235602094240838,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005235602094240838,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005235602094240838,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005235602094240838,
                "tf.sparse.reset_shape(sp_input)": 0.005235602094240838,
                "tf.sparse.reshape(sp_input, shape)": 0.005235602094240838,
                "tf.sparse.retain(sp_input, to_retain)": 0.005235602094240838,
                "tf.sparse.slice(sp_input, start, size)": 0.005235602094240838,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005235602094240838,
                "tf.sparse.to_dense(sp_input)": 0.005235602094240838,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005235602094240838,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005235602094240838,
                "tf.sparse.transpose(sp_input)": 0.005235602094240838,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005235602094240838,
                "IndexingOperation": 0.05235602094240838,
                "PairCreationOperation": 0.005235602094240838,
                "SingletonTupleCreationOperation": 0.005235602094240838,
                "SlicingAxis0BothOperation": 0.005235602094240838,
                "SlicingAxis0LeftOperation": 0.005235602094240838,
                "SlicingAxis0RightOperation": 0.005235602094240838,
                "SlicingAxis1BothOperation": 0.005235602094240838,
                "SlicingAxis1LeftOperation": 0.005235602094240838,
                "SlicingAxis1RightOperation": 0.005235602094240838,
                "TripleCreationOperation": 0.005235602094240838
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 4,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 4,
                "tf.ones(shape)": 6,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 6,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 6,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 8,
                "IndexingOperation": 4,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8
            }
        }
    },
    {
        "task_id": "stackoverflow_21",
        "completions": [
            "\nindices = tf.constant([[2], [0], [1], [0]])\nparams = tf.constant([[0.2, 0.5, 0.3], [0.1, 0.3, 0.6], [0.1, 0.6, 0.3], [0.7, 0.0, 0.3]])\n\noutput = tf.gather(params, indices, axis=1)\n",
            "\ndef gather_elements(tensor, indices):\n    return tf.gather(tensor, indices, axis=1)\n\ntensor = tf.constant([[0.2, 0.5, 0.3], [0.1, 0.3, 0.6], [0.1, 0.6, 0.3], [0.7, 0.0, 0.3]])\nindices = tf.constant([[2], [0], [1], [0]])\n",
            "\ndata = tf.constant([[0.2, 0.5, 0.3], [0.1, 0.3, 0.6], [0.1, 0.6, 0.3], [0.7, 0.0, 0.3]])\nindices = tf.constant([[2], [0], [1], [0]])\n\noutput = tf.gather(data, indices, axis=1)\n\n",
            "\ndef gather_elements(input_tensor, indices):\n    return tf.gather_nd(input_tensor, indices)\n",
            "\nparams = tf.constant([[0.2, 0.5, 0.3], [0.1, 0.3, 0.6], [0.1, 0.6, 0.3], [0.7, 0.0, 0.3]])\n\nindices = tf.constant([[2], [0], [1], [0]])\n\nresult = tf.gather(params, indices, axis=1)\n\n",
            "\ntensor = tf.constant([[0.2, 0.5, 0.3], [0.1, 0.3, 0.6], [0.1, 0.6, 0.3], [0.7, 0.0, 0.3]])\nindices = tf.constant([[0], [0], [1], [0]])\n\noutput = tf.gather_nd(tensor, indices)\n\n",
            "\ninput_data = tf.constant([[0.2, 0.5, 0.3], [0.1, 0.3, 0.6], [0.1, 0.6, 0.3], [0.7, 0.0, 0.3]])\nindices = tf.constant([[2], [0], [1], [0]])\n\noutput = tf.gather(input_data, indices, axis=1)\n\n",
            "\ndef gather_elements(input_tensor, indices):\n    return tf.gather(input_tensor, indices, axis=1)\n\ninput_tensor = tf.constant([[0.2, 0.5, 0.3], [0.1, 0.3, 0.6], [0.1, 0.6, 0.3], [0.7, 0.0, 0.3]])\nindices = tf.constant([[2], [0], [1], [0]])\n\noutput = gather_elements(input_tensor, indices)\n",
            "\nparams = tf.constant([0.3, 0.1, 0.7])\n\nindices = tf.constant([[2], [0], [1], [0]])\n\nresult = tf.gather(params, indices)\n\n",
            "\ndef gather_elements(tensor, indices):\n    return tf.gather(tensor, indices, axis=1)\n\ntensor = tf.constant([[0.2, 0.5, 0.3], [0.1, 0.3, 0.6], [0.1, 0.6, 0.3], [0.7, 0.0, 0.3]])\nindices = tf.constant([[2], [0], [1], [0]])\n"
        ],
        "target-program": "tf.gather(in2, in1, axis=1, batch_dims=1)",
        "description": "gather elements in a tensor along axis 1",
        "tf_operators": {
            "tf.gather": 8,
            "tf.constant": 9,
            "tf.gather_nd": 2
        },
        "coverage_percentage": 100.0,
        "total_in_target": 1,
        "total_covered": 1,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0058823529411764705,
                "tf.add(x, y)": 0.0058823529411764705,
                "tf.add_n(inputs)": 0.0058823529411764705,
                "tf.argmax(input, axis)": 0.0058823529411764705,
                "tf.argmin(input, axis)": 0.0058823529411764705,
                "tf.argsort(values, axis, stable=True)": 0.0058823529411764705,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.0058823529411764705,
                "tf.boolean_mask(tensor, mask)": 0.0058823529411764705,
                "tf.broadcast_to(input, shape)": 0.0058823529411764705,
                "tf.cast(x, dtype)": 0.0058823529411764705,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0058823529411764705,
                "tf.concat(values, axis)": 0.0058823529411764705,
                "tf.constant(value)": 0.11176470588235295,
                "tf.constant(value, dtype)": 0.0058823529411764705,
                "tf.divide(x, y)": 0.0058823529411764705,
                "tf.equal(x, y)": 0.0058823529411764705,
                "tf.exp(x)": 0.0058823529411764705,
                "tf.expand_dims(input, axis)": 0.0058823529411764705,
                "tf.eye(num_rows)": 0.0058823529411764705,
                "tf.eye(num_rows, num_columns)": 0.0058823529411764705,
                "tf.eye(num_rows, dtype)": 0.0058823529411764705,
                "tf.fill(dims, value)": 0.0058823529411764705,
                "tf.gather(params, indices)": 0.011764705882352941,
                "tf.gather(params, indices, axis, batch_dims)": 0.047058823529411764,
                "tf.gather_nd(params, indices)": 0.01764705882352941,
                "tf.gather_nd(params, indices, batch_dims)": 0.0058823529411764705,
                "tf.greater(x, y)": 0.0058823529411764705,
                "tf.greater_equal(x, y)": 0.0058823529411764705,
                "tf.math.bincount(arr)": 0.0058823529411764705,
                "tf.math.ceil(x)": 0.0058823529411764705,
                "tf.math.count_nonzero(input)": 0.0058823529411764705,
                "tf.math.count_nonzero(input, axis)": 0.0058823529411764705,
                "tf.math.cumsum(x, axis)": 0.0058823529411764705,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0058823529411764705,
                "tf.math.divide_no_nan(x, y)": 0.0058823529411764705,
                "tf.math.floor(x)": 0.0058823529411764705,
                "tf.math.log(x)": 0.0058823529411764705,
                "tf.math.logical_and(x, y)": 0.0058823529411764705,
                "tf.math.logical_not(x)": 0.0058823529411764705,
                "tf.math.logical_or(x, y)": 0.0058823529411764705,
                "tf.math.logical_xor(x, y)": 0.0058823529411764705,
                "tf.math.negative(x)": 0.0058823529411764705,
                "tf.math.reciprocal(x)": 0.0058823529411764705,
                "tf.math.reciprocal_no_nan(x)": 0.0058823529411764705,
                "tf.math.segment_max(data, segment_ids)": 0.0058823529411764705,
                "tf.math.segment_mean(data, segment_ids)": 0.0058823529411764705,
                "tf.math.segment_min(data, segment_ids)": 0.0058823529411764705,
                "tf.math.segment_prod(data, segment_ids)": 0.0058823529411764705,
                "tf.math.segment_sum(data, segment_ids)": 0.0058823529411764705,
                "tf.math.squared_difference(x, y)": 0.0058823529411764705,
                "tf.math.top_k(input, k)": 0.0058823529411764705,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0058823529411764705,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0058823529411764705,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0058823529411764705,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0058823529411764705,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0058823529411764705,
                "tf.matmul(a, b)": 0.0058823529411764705,
                "tf.maximum(x, y)": 0.0058823529411764705,
                "tf.minimum(x, y)": 0.0058823529411764705,
                "tf.multiply(x, y)": 0.0058823529411764705,
                "tf.not_equal(x, y)": 0.0058823529411764705,
                "tf.one_hot(indices, depth)": 0.0058823529411764705,
                "tf.ones(shape)": 0.0058823529411764705,
                "tf.ones_like(input)": 0.0058823529411764705,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.0058823529411764705,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.0058823529411764705,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.0058823529411764705,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.0058823529411764705,
                "tf.range(start)": 0.0058823529411764705,
                "tf.range(start, limit, delta)": 0.0058823529411764705,
                "tf.reduce_any(input_tensor, axis)": 0.0058823529411764705,
                "tf.reduce_all(input_tensor, axis)": 0.0058823529411764705,
                "tf.reduce_max(input_tensor)": 0.0058823529411764705,
                "tf.reduce_max(input_tensor, axis)": 0.0058823529411764705,
                "tf.reduce_mean(input_tensor)": 0.0058823529411764705,
                "tf.reduce_mean(input_tensor, axis)": 0.0058823529411764705,
                "tf.reduce_min(input_tensor)": 0.0058823529411764705,
                "tf.reduce_min(input_tensor, axis)": 0.0058823529411764705,
                "tf.reduce_prod(input_tensor, axis)": 0.0058823529411764705,
                "tf.reduce_sum(input_tensor)": 0.0058823529411764705,
                "tf.reduce_sum(input_tensor, axis)": 0.0058823529411764705,
                "tf.repeat(input, repeats)": 0.0058823529411764705,
                "tf.repeat(input, repeats, axis)": 0.0058823529411764705,
                "tf.reshape(tensor, shape)": 0.0058823529411764705,
                "tf.reverse(tensor, axis)": 0.0058823529411764705,
                "tf.roll(input, shift, axis)": 0.0058823529411764705,
                "tf.round(x)": 0.0058823529411764705,
                "tf.scatter_nd(indices, updates, shape)": 0.0058823529411764705,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.0058823529411764705,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.0058823529411764705,
                "tf.sequence_mask(lengths)": 0.0058823529411764705,
                "tf.sequence_mask(lengths, maxlen)": 0.0058823529411764705,
                "tf.shape(input)": 0.0058823529411764705,
                "tf.sign(x)": 0.0058823529411764705,
                "tf.sort(values, axis)": 0.0058823529411764705,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.0058823529411764705,
                "tf.sqrt(x)": 0.0058823529411764705,
                "tf.square(x)": 0.0058823529411764705,
                "tf.squeeze(input)": 0.0058823529411764705,
                "tf.squeeze(input, axis)": 0.0058823529411764705,
                "tf.stack(values, axis)": 0.0058823529411764705,
                "tf.subtract(x, y)": 0.0058823529411764705,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0058823529411764705,
                "tf.tensordot(a, b, axes)": 0.0058823529411764705,
                "tf.tile(input, multiples)": 0.0058823529411764705,
                "tf.transpose(a)": 0.0058823529411764705,
                "tf.transpose(a, perm)": 0.0058823529411764705,
                "tf.unique_with_counts(x)": 0.0058823529411764705,
                "tf.unstack(value, axis)": 0.0058823529411764705,
                "tf.where(condition)": 0.0058823529411764705,
                "tf.where(condition, x, y)": 0.0058823529411764705,
                "tf.zeros(shape)": 0.0058823529411764705,
                "tf.zeros_like(input)": 0.0058823529411764705,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0058823529411764705,
                "tf.sparse.add(a, b)": 0.0058823529411764705,
                "tf.sparse.concat(axis, sp_inputs)": 0.0058823529411764705,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0058823529411764705,
                "tf.sparse.from_dense(tensor)": 0.0058823529411764705,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0058823529411764705,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0058823529411764705,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0058823529411764705,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0058823529411764705,
                "tf.sparse.reset_shape(sp_input)": 0.0058823529411764705,
                "tf.sparse.reshape(sp_input, shape)": 0.0058823529411764705,
                "tf.sparse.retain(sp_input, to_retain)": 0.0058823529411764705,
                "tf.sparse.slice(sp_input, start, size)": 0.0058823529411764705,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0058823529411764705,
                "tf.sparse.to_dense(sp_input)": 0.0058823529411764705,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0058823529411764705,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0058823529411764705,
                "tf.sparse.transpose(sp_input)": 0.0058823529411764705,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.0058823529411764705,
                "IndexingOperation": 0.0058823529411764705,
                "PairCreationOperation": 0.0058823529411764705,
                "SingletonTupleCreationOperation": 0.0058823529411764705,
                "SlicingAxis0BothOperation": 0.0058823529411764705,
                "SlicingAxis0LeftOperation": 0.0058823529411764705,
                "SlicingAxis0RightOperation": 0.0058823529411764705,
                "SlicingAxis1BothOperation": 0.0058823529411764705,
                "SlicingAxis1LeftOperation": 0.0058823529411764705,
                "SlicingAxis1RightOperation": 0.0058823529411764705,
                "TripleCreationOperation": 0.0058823529411764705
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 3,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 6,
                "tf.gather(params, indices, axis, batch_dims)": 4,
                "tf.gather_nd(params, indices)": 6,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "stackoverflow_22",
        "completions": [
            "\ndef multiply_vector_matrix(vector, matrix):\n    return tf.tensordot(vector, matrix, axes=1)\n",
            "\nv = tf.constant([3, 1, 10], dtype=tf.float32)\n\nm = tf.constant([[0.6, 0.4], [0.5, 1.0], [3.0, 4.0]], dtype=tf.float32)\n\nresult = tf.tensordot(v, m, axes=[-1, 1])\n\n",
            "\ndef multiply_vector_matrix(vector, matrix):\n    return tf.tensordot(vector, matrix, axes=1)\n\nvector = tf.constant([3, 1, 10], dtype=tf.float32)\nmatrix = tf.constant([[0.6, 0.4], [0.5, 1.0], [3.0, 4.0]], dtype=tf.float32)\nresult = multiply_vector_matrix(vector, matrix)\n",
            "\nvector = tf.constant([3, 1, 10], dtype=tf.float32)\nmatrix = tf.constant([[0.6, 0.4], [0.5, 1.0], [3.0, 4.0]], dtype=tf.float32)\n\nresult = tf.linalg.matvec(matrix, vector)\n\n",
            "\nvector = tf.constant([3, 1, 10], dtype=tf.float32)\n\nmatrix = tf.constant([[0.6, 0.4], [0.5, 1.0], [3.0, 4.0]], dtype=tf.float32)\n\nresult = tf.linalg.matvec(matrix, vector)\n\n",
            "\nv = tf.constant([3, 1, 10])\n\nm = tf.constant([[0.6, 0.4], [0.5, 1.0], [3.0, 4.0]])\n\nresult = tf.tensordot(v, m, axes=0)\n\n",
            "\ndef multiply_vector_matrix(vector, matrix):\n    return tf.tensordot(vector, matrix, axes=1)\n\nvector = tf.constant([3, 1, 10], dtype=tf.float32)\nmatrix = tf.constant([[0.6, 0.4], [0.5, 1.0], [3.0, 4.0]], dtype=tf.float32)\n\noutput = multiply_vector_matrix(vector, matrix)\n",
            "\nvector = tf.constant([3, 1, 10])\nmatrix = tf.constant([[0.6, 0.4], [0.5, 1.0], [3.0, 4.0]])\n\nresult = tf.tensordot(vector, matrix, axes=[[0], [0]])\n\n",
            "\nvector = tf.constant([3, 1, 10], dtype=tf.float32)\nmatrix = tf.constant([[0.6, 0.4], [0.5, 1.0], [3.0, 4.0]], dtype=tf.float32)\n\nresult = tf.tensordot(vector, matrix, axes=1)\n\n",
            "\ndef multiply_vector_matrix(vector, matrix):\n    return tf.tensordot(vector, matrix, [[0], [1]])\n\nvector = tf.constant([3, 1, 10], dtype=tf.float32)\nmatrix = tf.constant([[0.6, 0.4], [0.5, 1.0], [3.0, 4.0]], dtype=tf.float32)\n\noutput = multiply_vector_matrix(vector, matrix)\n"
        ],
        "target-program": "tf.tensordot(tf.cast(in1, tf.float32), in2, 1)",
        "description": "multiply a vector with a matrix without reshaping the vector",
        "tf_operators": {
            "tf.tensordot": 8,
            "tf.float32": 7,
            "tf.constant": 9,
            "tf.linalg.matvec": 2
        },
        "coverage_percentage": 66.66666666666666,
        "total_in_target": 3,
        "total_covered": 2,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.006493506493506494,
                "tf.add(x, y)": 0.006493506493506494,
                "tf.add_n(inputs)": 0.006493506493506494,
                "tf.argmax(input, axis)": 0.006493506493506494,
                "tf.argmin(input, axis)": 0.006493506493506494,
                "tf.argsort(values, axis, stable=True)": 0.006493506493506494,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.006493506493506494,
                "tf.boolean_mask(tensor, mask)": 0.006493506493506494,
                "tf.broadcast_to(input, shape)": 0.006493506493506494,
                "tf.cast(x, dtype)": 0.006493506493506494,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.006493506493506494,
                "tf.concat(values, axis)": 0.006493506493506494,
                "tf.constant(value)": 0.032467532467532464,
                "tf.constant(value, dtype)": 0.006493506493506494,
                "tf.divide(x, y)": 0.006493506493506494,
                "tf.equal(x, y)": 0.006493506493506494,
                "tf.exp(x)": 0.006493506493506494,
                "tf.expand_dims(input, axis)": 0.006493506493506494,
                "tf.eye(num_rows)": 0.006493506493506494,
                "tf.eye(num_rows, num_columns)": 0.006493506493506494,
                "tf.eye(num_rows, dtype)": 0.006493506493506494,
                "tf.fill(dims, value)": 0.006493506493506494,
                "tf.gather(params, indices)": 0.006493506493506494,
                "tf.gather(params, indices, axis, batch_dims)": 0.006493506493506494,
                "tf.gather_nd(params, indices)": 0.006493506493506494,
                "tf.gather_nd(params, indices, batch_dims)": 0.006493506493506494,
                "tf.greater(x, y)": 0.006493506493506494,
                "tf.greater_equal(x, y)": 0.006493506493506494,
                "tf.math.bincount(arr)": 0.006493506493506494,
                "tf.math.ceil(x)": 0.006493506493506494,
                "tf.math.count_nonzero(input)": 0.006493506493506494,
                "tf.math.count_nonzero(input, axis)": 0.006493506493506494,
                "tf.math.cumsum(x, axis)": 0.006493506493506494,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.006493506493506494,
                "tf.math.divide_no_nan(x, y)": 0.006493506493506494,
                "tf.math.floor(x)": 0.006493506493506494,
                "tf.math.log(x)": 0.006493506493506494,
                "tf.math.logical_and(x, y)": 0.006493506493506494,
                "tf.math.logical_not(x)": 0.006493506493506494,
                "tf.math.logical_or(x, y)": 0.006493506493506494,
                "tf.math.logical_xor(x, y)": 0.006493506493506494,
                "tf.math.negative(x)": 0.006493506493506494,
                "tf.math.reciprocal(x)": 0.006493506493506494,
                "tf.math.reciprocal_no_nan(x)": 0.006493506493506494,
                "tf.math.segment_max(data, segment_ids)": 0.006493506493506494,
                "tf.math.segment_mean(data, segment_ids)": 0.006493506493506494,
                "tf.math.segment_min(data, segment_ids)": 0.006493506493506494,
                "tf.math.segment_prod(data, segment_ids)": 0.006493506493506494,
                "tf.math.segment_sum(data, segment_ids)": 0.006493506493506494,
                "tf.math.squared_difference(x, y)": 0.006493506493506494,
                "tf.math.top_k(input, k)": 0.006493506493506494,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.006493506493506494,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.006493506493506494,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.006493506493506494,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.006493506493506494,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.006493506493506494,
                "tf.matmul(a, b)": 0.006493506493506494,
                "tf.maximum(x, y)": 0.006493506493506494,
                "tf.minimum(x, y)": 0.006493506493506494,
                "tf.multiply(x, y)": 0.006493506493506494,
                "tf.not_equal(x, y)": 0.006493506493506494,
                "tf.one_hot(indices, depth)": 0.006493506493506494,
                "tf.ones(shape)": 0.006493506493506494,
                "tf.ones_like(input)": 0.006493506493506494,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.006493506493506494,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.006493506493506494,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.006493506493506494,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.006493506493506494,
                "tf.range(start)": 0.006493506493506494,
                "tf.range(start, limit, delta)": 0.006493506493506494,
                "tf.reduce_any(input_tensor, axis)": 0.006493506493506494,
                "tf.reduce_all(input_tensor, axis)": 0.006493506493506494,
                "tf.reduce_max(input_tensor)": 0.006493506493506494,
                "tf.reduce_max(input_tensor, axis)": 0.006493506493506494,
                "tf.reduce_mean(input_tensor)": 0.006493506493506494,
                "tf.reduce_mean(input_tensor, axis)": 0.006493506493506494,
                "tf.reduce_min(input_tensor)": 0.006493506493506494,
                "tf.reduce_min(input_tensor, axis)": 0.006493506493506494,
                "tf.reduce_prod(input_tensor, axis)": 0.006493506493506494,
                "tf.reduce_sum(input_tensor)": 0.006493506493506494,
                "tf.reduce_sum(input_tensor, axis)": 0.006493506493506494,
                "tf.repeat(input, repeats)": 0.006493506493506494,
                "tf.repeat(input, repeats, axis)": 0.006493506493506494,
                "tf.reshape(tensor, shape)": 0.006493506493506494,
                "tf.reverse(tensor, axis)": 0.006493506493506494,
                "tf.roll(input, shift, axis)": 0.006493506493506494,
                "tf.round(x)": 0.006493506493506494,
                "tf.scatter_nd(indices, updates, shape)": 0.006493506493506494,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.006493506493506494,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.006493506493506494,
                "tf.sequence_mask(lengths)": 0.006493506493506494,
                "tf.sequence_mask(lengths, maxlen)": 0.006493506493506494,
                "tf.shape(input)": 0.006493506493506494,
                "tf.sign(x)": 0.006493506493506494,
                "tf.sort(values, axis)": 0.006493506493506494,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.006493506493506494,
                "tf.sqrt(x)": 0.006493506493506494,
                "tf.square(x)": 0.006493506493506494,
                "tf.squeeze(input)": 0.006493506493506494,
                "tf.squeeze(input, axis)": 0.006493506493506494,
                "tf.stack(values, axis)": 0.006493506493506494,
                "tf.subtract(x, y)": 0.006493506493506494,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.006493506493506494,
                "tf.tensordot(a, b, axes)": 0.05844155844155844,
                "tf.tile(input, multiples)": 0.006493506493506494,
                "tf.transpose(a)": 0.006493506493506494,
                "tf.transpose(a, perm)": 0.006493506493506494,
                "tf.unique_with_counts(x)": 0.006493506493506494,
                "tf.unstack(value, axis)": 0.006493506493506494,
                "tf.where(condition)": 0.006493506493506494,
                "tf.where(condition, x, y)": 0.006493506493506494,
                "tf.zeros(shape)": 0.006493506493506494,
                "tf.zeros_like(input)": 0.006493506493506494,
                "tf.SparseTensor(indices, values, dense_shape)": 0.006493506493506494,
                "tf.sparse.add(a, b)": 0.006493506493506494,
                "tf.sparse.concat(axis, sp_inputs)": 0.006493506493506494,
                "tf.sparse.expand_dims(sp_input, axis)": 0.006493506493506494,
                "tf.sparse.from_dense(tensor)": 0.006493506493506494,
                "tf.sparse.maximum(sp_a, sp_b)": 0.006493506493506494,
                "tf.sparse.minimum(sp_a, sp_b)": 0.006493506493506494,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.006493506493506494,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.006493506493506494,
                "tf.sparse.reset_shape(sp_input)": 0.006493506493506494,
                "tf.sparse.reshape(sp_input, shape)": 0.006493506493506494,
                "tf.sparse.retain(sp_input, to_retain)": 0.006493506493506494,
                "tf.sparse.slice(sp_input, start, size)": 0.006493506493506494,
                "tf.sparse.split(sp_input, num_split, axis)": 0.006493506493506494,
                "tf.sparse.to_dense(sp_input)": 0.006493506493506494,
                "tf.sparse.to_dense(sp_input, default_value)": 0.006493506493506494,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.006493506493506494,
                "tf.sparse.transpose(sp_input)": 0.006493506493506494,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.006493506493506494,
                "IndexingOperation": 0.006493506493506494,
                "PairCreationOperation": 0.006493506493506494,
                "SingletonTupleCreationOperation": 0.006493506493506494,
                "SlicingAxis0BothOperation": 0.006493506493506494,
                "SlicingAxis0LeftOperation": 0.006493506493506494,
                "SlicingAxis0RightOperation": 0.006493506493506494,
                "SlicingAxis1BothOperation": 0.006493506493506494,
                "SlicingAxis1LeftOperation": 0.006493506493506494,
                "SlicingAxis1RightOperation": 0.006493506493506494,
                "TripleCreationOperation": 0.006493506493506494
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 5,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 4,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "stackoverflow_23",
        "completions": [
            "\ndef place_ones(indices):\n    indices = tf.constant(indices)\n    updates = tf.ones(tf.shape(indices)[0], dtype=tf.int32)\n    shape = tf.reduce_max(indices) + 1\n    tensor = tf.scatter_nd(indices, updates, [shape])\n    tensor = tf.reshape(tensor, [-1])\n    return tensor\n\nindices = [[0, 5, 2], [3, 1, 4], [5, 1, 5]]\n",
            "\ndef place_ones_at_indices(input):\n    tensor = tf.constant(input)\n    flat_tensor = tf.reshape(tensor, [-1])\n    counts = tf.math.bincount(flat_tensor)\n    mask = tf.greater(counts, 0)\n    result = tf.cast(mask, tf.int32)\n    return result\n\ninput = [[0, 5, 2], [3, 1, 4], [5, 1, 5]]\n",
            "\ndef one_hot_indices(input_tensor):\n    flat_input = tf.reshape(input_tensor, [-1])\n    depth = tf.reduce_max(flat_input) + 1\n    one_hot_tensor = tf.one_hot(flat_input, depth)\n    return tf.reduce_sum(one_hot_tensor, axis=0)\n\ninput_tensor = tf.constant([[0, 5, 2], [3, 1, 4], [5, 1, 5]])\noutput_tensor = one_hot_indices(input_tensor)\n",
            "\ndef place_ones_at_indices(indices):\n    indices = tf.reshape(indices, [-1, 1])\n    updates = tf.ones(tf.shape(indices)[0], dtype=tf.int32)\n    shape = [tf.reduce_max(indices) + 1]\n    result = tf.scatter_nd(indices, updates, shape)\n    return result\n\nindices = tf.constant([[0, 5, 2], [3, 1, 4], [5, 1, 5]])\n",
            "\ndef place_ones_at_indices(input_tensor):\n    indices = tf.reshape(input_tensor, [-1, 1])\n    updates = tf.ones_like(indices, dtype=tf.float32)\n    max_element = tf.reduce_max(input_tensor)\n    output = tf.scatter_nd(indices, updates, [max_element + 1])\n    return output\n\ninput_tensor = tf.constant([[0, 5, 2], [3, 1, 4], [5, 1, 5]])\noutput = place_ones_at_indices(input_tensor)\n",
            "\ndef place_ones_at_indices(input_tensor):\n    max_index = tf.reduce_max(input_tensor)\n    tensor = tf.zeros([max_index + 1], dtype=tf.int32)\n    updates = tf.ones_like(input_tensor)\n    tensor = tf.tensor_scatter_nd_update(tensor, input_tensor, updates)\n    return tf.reshape(tensor, [-1])\n\ninput_tensor = tf.constant([[0, 5, 2], [3, 1, 4], [5, 1, 5]])\noutput_tensor = place_ones_at_indices(input_tensor)\n",
            "\ndef place_ones(indices):\n    flat_indices = tf.reshape(indices, [-1])\n    depth = tf.reduce_max(flat_indices) + 1\n    one_hot = tf.one_hot(flat_indices, depth, on_value=1, off_value=0)\n    output = tf.reduce_max(one_hot, axis=0)\n    return output\n\nindices = tf.constant([[0, 5, 2], [3, 1, 4], [5, 1, 5]])\n",
            "\ndef place_ones_at_indices(input_tensor):\n    max_val = tf.reduce_max(input_tensor)\n    zeros_tensor = tf.zeros(max_val+1, dtype=tf.int32)\n    flat_indices = tf.reshape(input_tensor, [-1, 1])\n    ones_updates = tf.ones_like(flat_indices, dtype=tf.int32)\n    output_tensor = tf.tensor_scatter_nd_update(zeros_tensor, flat_indices, ones_updates)\n    return output_tensor\n\ninput_tensor = tf.constant([[0, 5, 2], [3, 1, 4], [5, 1, 5]])\n",
            "\ndef place_ones_at_indices(input):\n    flat_indices = tf.constant([item for sublist in input for item in sublist])\n    max_index = tf.reduce_max(flat_indices)\n    initial_tensor = tf.zeros(max_index + 1, dtype=tf.int32)\n    indices = tf.reshape(flat_indices, [-1, 1])\n    updates = tf.ones_like(flat_indices, dtype=tf.int32)\n    output = tf.tensor_scatter_nd_update(initial_tensor, indices, updates)\n    return output\n\ninput = [[0, 5, 2], [3, 1, 4], [5, 1, 5]]\n",
            "\ndef place_ones_at_indices(input_tensor):\n    max_val = tf.reduce_max(input_tensor)\n    zeros = tf.zeros([max_val+1], tf.int32)\n    indices = tf.reshape(input_tensor, [-1, 1])\n    updates = tf.ones(tf.shape(indices)[0], tf.int32)\n    result = tf.tensor_scatter_nd_update(zeros, indices, updates)\n    return result\n\ninput_tensor = tf.constant([[0, 5, 2], [3, 1, 4], [5, 1, 5]])\noutput = place_ones_at_indices(input_tensor)\n"
        ],
        "target-program": "tf.cast(tf.reduce_max(tf.one_hot(in1, 9), axis=1), tf.int32)",
        "description": "place 1 at the indices in the input tensor",
        "tf_operators": {
            "tf.ones": 3,
            "tf.reduce_max": 9,
            "tf.reshape": 10,
            "tf.int32": 7,
            "tf.scatter_nd": 3,
            "tf.shape": 3,
            "tf.constant": 10,
            "tf.cast": 1,
            "tf.greater": 1,
            "tf.math.bincount": 1,
            "tf.reduce_sum": 1,
            "tf.one_hot": 2,
            "tf.float32": 1,
            "tf.ones_like": 4,
            "tf.zeros": 4,
            "tf.tensor_scatter_nd_update": 4
        },
        "coverage_percentage": 100.0,
        "total_in_target": 4,
        "total_covered": 4,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005025125628140704,
                "tf.add(x, y)": 0.005025125628140704,
                "tf.add_n(inputs)": 0.005025125628140704,
                "tf.argmax(input, axis)": 0.005025125628140704,
                "tf.argmin(input, axis)": 0.005025125628140704,
                "tf.argsort(values, axis, stable=True)": 0.005025125628140704,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005025125628140704,
                "tf.boolean_mask(tensor, mask)": 0.005025125628140704,
                "tf.broadcast_to(input, shape)": 0.005025125628140704,
                "tf.cast(x, dtype)": 0.010050251256281407,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005025125628140704,
                "tf.concat(values, axis)": 0.005025125628140704,
                "tf.constant(value)": 0.05527638190954774,
                "tf.constant(value, dtype)": 0.005025125628140704,
                "tf.divide(x, y)": 0.005025125628140704,
                "tf.equal(x, y)": 0.005025125628140704,
                "tf.exp(x)": 0.005025125628140704,
                "tf.expand_dims(input, axis)": 0.005025125628140704,
                "tf.eye(num_rows)": 0.005025125628140704,
                "tf.eye(num_rows, num_columns)": 0.005025125628140704,
                "tf.eye(num_rows, dtype)": 0.005025125628140704,
                "tf.fill(dims, value)": 0.005025125628140704,
                "tf.gather(params, indices)": 0.005025125628140704,
                "tf.gather(params, indices, axis, batch_dims)": 0.005025125628140704,
                "tf.gather_nd(params, indices)": 0.005025125628140704,
                "tf.gather_nd(params, indices, batch_dims)": 0.005025125628140704,
                "tf.greater(x, y)": 0.010050251256281407,
                "tf.greater_equal(x, y)": 0.005025125628140704,
                "tf.math.bincount(arr)": 0.005025125628140704,
                "tf.math.ceil(x)": 0.005025125628140704,
                "tf.math.count_nonzero(input)": 0.005025125628140704,
                "tf.math.count_nonzero(input, axis)": 0.005025125628140704,
                "tf.math.cumsum(x, axis)": 0.005025125628140704,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005025125628140704,
                "tf.math.divide_no_nan(x, y)": 0.005025125628140704,
                "tf.math.floor(x)": 0.005025125628140704,
                "tf.math.log(x)": 0.005025125628140704,
                "tf.math.logical_and(x, y)": 0.005025125628140704,
                "tf.math.logical_not(x)": 0.005025125628140704,
                "tf.math.logical_or(x, y)": 0.005025125628140704,
                "tf.math.logical_xor(x, y)": 0.005025125628140704,
                "tf.math.negative(x)": 0.005025125628140704,
                "tf.math.reciprocal(x)": 0.005025125628140704,
                "tf.math.reciprocal_no_nan(x)": 0.005025125628140704,
                "tf.math.segment_max(data, segment_ids)": 0.005025125628140704,
                "tf.math.segment_mean(data, segment_ids)": 0.005025125628140704,
                "tf.math.segment_min(data, segment_ids)": 0.005025125628140704,
                "tf.math.segment_prod(data, segment_ids)": 0.005025125628140704,
                "tf.math.segment_sum(data, segment_ids)": 0.005025125628140704,
                "tf.math.squared_difference(x, y)": 0.005025125628140704,
                "tf.math.top_k(input, k)": 0.005025125628140704,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005025125628140704,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005025125628140704,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005025125628140704,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005025125628140704,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005025125628140704,
                "tf.matmul(a, b)": 0.005025125628140704,
                "tf.maximum(x, y)": 0.005025125628140704,
                "tf.minimum(x, y)": 0.005025125628140704,
                "tf.multiply(x, y)": 0.005025125628140704,
                "tf.not_equal(x, y)": 0.005025125628140704,
                "tf.one_hot(indices, depth)": 0.01507537688442211,
                "tf.ones(shape)": 0.020100502512562814,
                "tf.ones_like(input)": 0.02512562814070352,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005025125628140704,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005025125628140704,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005025125628140704,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005025125628140704,
                "tf.range(start)": 0.005025125628140704,
                "tf.range(start, limit, delta)": 0.005025125628140704,
                "tf.reduce_any(input_tensor, axis)": 0.005025125628140704,
                "tf.reduce_all(input_tensor, axis)": 0.005025125628140704,
                "tf.reduce_max(input_tensor)": 0.05025125628140704,
                "tf.reduce_max(input_tensor, axis)": 0.005025125628140704,
                "tf.reduce_mean(input_tensor)": 0.005025125628140704,
                "tf.reduce_mean(input_tensor, axis)": 0.005025125628140704,
                "tf.reduce_min(input_tensor)": 0.005025125628140704,
                "tf.reduce_min(input_tensor, axis)": 0.005025125628140704,
                "tf.reduce_prod(input_tensor, axis)": 0.005025125628140704,
                "tf.reduce_sum(input_tensor)": 0.005025125628140704,
                "tf.reduce_sum(input_tensor, axis)": 0.005025125628140704,
                "tf.repeat(input, repeats)": 0.005025125628140704,
                "tf.repeat(input, repeats, axis)": 0.005025125628140704,
                "tf.reshape(tensor, shape)": 0.05527638190954774,
                "tf.reverse(tensor, axis)": 0.005025125628140704,
                "tf.roll(input, shift, axis)": 0.005025125628140704,
                "tf.round(x)": 0.005025125628140704,
                "tf.scatter_nd(indices, updates, shape)": 0.020100502512562814,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005025125628140704,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005025125628140704,
                "tf.sequence_mask(lengths)": 0.005025125628140704,
                "tf.sequence_mask(lengths, maxlen)": 0.005025125628140704,
                "tf.shape(input)": 0.020100502512562814,
                "tf.sign(x)": 0.005025125628140704,
                "tf.sort(values, axis)": 0.005025125628140704,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005025125628140704,
                "tf.sqrt(x)": 0.005025125628140704,
                "tf.square(x)": 0.005025125628140704,
                "tf.squeeze(input)": 0.005025125628140704,
                "tf.squeeze(input, axis)": 0.005025125628140704,
                "tf.stack(values, axis)": 0.005025125628140704,
                "tf.subtract(x, y)": 0.005025125628140704,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.02512562814070352,
                "tf.tensordot(a, b, axes)": 0.005025125628140704,
                "tf.tile(input, multiples)": 0.005025125628140704,
                "tf.transpose(a)": 0.005025125628140704,
                "tf.transpose(a, perm)": 0.005025125628140704,
                "tf.unique_with_counts(x)": 0.005025125628140704,
                "tf.unstack(value, axis)": 0.005025125628140704,
                "tf.where(condition)": 0.005025125628140704,
                "tf.where(condition, x, y)": 0.005025125628140704,
                "tf.zeros(shape)": 0.02512562814070352,
                "tf.zeros_like(input)": 0.005025125628140704,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005025125628140704,
                "tf.sparse.add(a, b)": 0.005025125628140704,
                "tf.sparse.concat(axis, sp_inputs)": 0.005025125628140704,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005025125628140704,
                "tf.sparse.from_dense(tensor)": 0.005025125628140704,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005025125628140704,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005025125628140704,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005025125628140704,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005025125628140704,
                "tf.sparse.reset_shape(sp_input)": 0.005025125628140704,
                "tf.sparse.reshape(sp_input, shape)": 0.005025125628140704,
                "tf.sparse.retain(sp_input, to_retain)": 0.005025125628140704,
                "tf.sparse.slice(sp_input, start, size)": 0.005025125628140704,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005025125628140704,
                "tf.sparse.to_dense(sp_input)": 0.005025125628140704,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005025125628140704,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005025125628140704,
                "tf.sparse.transpose(sp_input)": 0.005025125628140704,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005025125628140704,
                "IndexingOperation": 0.020100502512562814,
                "PairCreationOperation": 0.005025125628140704,
                "SingletonTupleCreationOperation": 0.005025125628140704,
                "SlicingAxis0BothOperation": 0.005025125628140704,
                "SlicingAxis0LeftOperation": 0.005025125628140704,
                "SlicingAxis0RightOperation": 0.005025125628140704,
                "SlicingAxis1BothOperation": 0.005025125628140704,
                "SlicingAxis1LeftOperation": 0.005025125628140704,
                "SlicingAxis1RightOperation": 0.005025125628140704,
                "TripleCreationOperation": 0.005025125628140704
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 6,
                "tf.ones(shape)": 6,
                "tf.ones_like(input)": 5,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 4,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 4,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 6,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 6,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 5,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 5,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 8,
                "IndexingOperation": 6,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8
            }
        }
    },
    {
        "task_id": "stackoverflow_24",
        "completions": [
            "\ndef custom_divide(input_list):\n    numerator = tf.constant(input_list)\n    denominator = tf.constant([0.5, 0.0, -2.0, 0.0, 1.0, -1.0, 0.0, 2.0])\n    result = tf.math.divide_no_nan(numerator, denominator)\n    result = tf.subtract(numerator, result)\n    return tf.reduce_sum(result).numpy()\n\n",
            "\ndef safe_divide(numerator, denominator):\n    result = tf.math.divide_no_nan(numerator, denominator)\n    return result * denominator + numerator * tf.cast(tf.equal(denominator, 0), numerator.dtype)\n",
            "\ndef safe_divide(x, y):\n    y = tf.where(tf.equal(y, 0), x, y)\n    return tf.math.divide_no_nan(x, y)\n",
            "\ndef safe_divide(x, y):\n    return tf.math.divide_no_nan(x, y)\n",
            "\ndef safe_division(numerator, denominator):\n    numerator_tensor = tf.constant(numerator)\n    denominator_tensor = tf.constant(denominator)\n    result = tf.math.divide_no_nan(numerator_tensor, denominator_tensor)\n    return tf.reduce_sum(result).numpy()\n\n",
            "\ndef divide_no_nan_sum(list1, list2):\n    tensor1 = tf.constant(list1)\n    tensor2 = tf.constant(list2)\n    division_result = tf.math.divide_no_nan(tensor1, tensor2)\n    return tf.reduce_sum(division_result)\n",
            "\ndef safe_divide(numerator, denominator):\n    division = tf.math.divide_no_nan(numerator, denominator)\n    return tf.where(denominator == 0, numerator, division)\n\nnumerator = tf.constant([3.0, 1.0, 4.0, 5.0, 2.0, 8.0, -6.0, -7.0])\ndenominator = tf.constant([0.5, 0.0, -2.0, 0.0, 1.0, -1.0, 0.0, 2.0])\n\n",
            "\ndef safe_divide(x, y):\n    return tf.math.divide_no_nan(x, y)\n",
            "\ndef divide_no_nan_return_numerator(numerator, denominator):\n    division = tf.math.divide_no_nan(numerator, denominator)\n    result = tf.where(tf.equal(denominator, 0), numerator, division)\n    return tf.reduce_sum(result)\n\nnumerator = tf.constant([3.0, 1.0, 4.0, 5.0, 2.0, 8.0, -6.0, -7.0])\ndenominator = tf.constant([0.5, 0.0, -2.0, 0.0, 1.0, -1.0, 0.0, 2.0])\n",
            "\ndef divide_no_nan_and_sum(x, y):\n    x = tf.constant(x)\n    y = tf.constant(y)\n    result = tf.math.divide_no_nan(x, y)\n    return tf.reduce_sum(result)\n"
        ],
        "target-program": "tf.where(tf.cast(in2, tf.bool), x=tf.divide(in1, in2), y=in1)",
        "description": "(\\'like tf.divide(), but when dividing by 0, return the numerator\\')",
        "tf_operators": {
            "tf.math.divide_no_nan": 10,
            "tf.reduce_sum": 5,
            "tf.subtract": 1,
            "tf.constant": 6,
            "tf.cast": 1,
            "tf.equal": 3,
            "tf.where": 3
        },
        "coverage_percentage": 50.0,
        "total_in_target": 4,
        "total_covered": 2,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005988023952095809,
                "tf.add(x, y)": 0.005988023952095809,
                "tf.add_n(inputs)": 0.005988023952095809,
                "tf.argmax(input, axis)": 0.005988023952095809,
                "tf.argmin(input, axis)": 0.005988023952095809,
                "tf.argsort(values, axis, stable=True)": 0.005988023952095809,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005988023952095809,
                "tf.boolean_mask(tensor, mask)": 0.005988023952095809,
                "tf.broadcast_to(input, shape)": 0.005988023952095809,
                "tf.cast(x, dtype)": 0.011976047904191617,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005988023952095809,
                "tf.concat(values, axis)": 0.005988023952095809,
                "tf.constant(value)": 0.07784431137724551,
                "tf.constant(value, dtype)": 0.005988023952095809,
                "tf.divide(x, y)": 0.005988023952095809,
                "tf.equal(x, y)": 0.023952095808383235,
                "tf.exp(x)": 0.005988023952095809,
                "tf.expand_dims(input, axis)": 0.005988023952095809,
                "tf.eye(num_rows)": 0.005988023952095809,
                "tf.eye(num_rows, num_columns)": 0.005988023952095809,
                "tf.eye(num_rows, dtype)": 0.005988023952095809,
                "tf.fill(dims, value)": 0.005988023952095809,
                "tf.gather(params, indices)": 0.005988023952095809,
                "tf.gather(params, indices, axis, batch_dims)": 0.005988023952095809,
                "tf.gather_nd(params, indices)": 0.005988023952095809,
                "tf.gather_nd(params, indices, batch_dims)": 0.005988023952095809,
                "tf.greater(x, y)": 0.005988023952095809,
                "tf.greater_equal(x, y)": 0.005988023952095809,
                "tf.math.bincount(arr)": 0.005988023952095809,
                "tf.math.ceil(x)": 0.005988023952095809,
                "tf.math.count_nonzero(input)": 0.005988023952095809,
                "tf.math.count_nonzero(input, axis)": 0.005988023952095809,
                "tf.math.cumsum(x, axis)": 0.005988023952095809,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005988023952095809,
                "tf.math.divide_no_nan(x, y)": 0.005988023952095809,
                "tf.math.floor(x)": 0.005988023952095809,
                "tf.math.log(x)": 0.005988023952095809,
                "tf.math.logical_and(x, y)": 0.005988023952095809,
                "tf.math.logical_not(x)": 0.005988023952095809,
                "tf.math.logical_or(x, y)": 0.005988023952095809,
                "tf.math.logical_xor(x, y)": 0.005988023952095809,
                "tf.math.negative(x)": 0.005988023952095809,
                "tf.math.reciprocal(x)": 0.005988023952095809,
                "tf.math.reciprocal_no_nan(x)": 0.005988023952095809,
                "tf.math.segment_max(data, segment_ids)": 0.005988023952095809,
                "tf.math.segment_mean(data, segment_ids)": 0.005988023952095809,
                "tf.math.segment_min(data, segment_ids)": 0.005988023952095809,
                "tf.math.segment_prod(data, segment_ids)": 0.005988023952095809,
                "tf.math.segment_sum(data, segment_ids)": 0.005988023952095809,
                "tf.math.squared_difference(x, y)": 0.005988023952095809,
                "tf.math.top_k(input, k)": 0.005988023952095809,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005988023952095809,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005988023952095809,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005988023952095809,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005988023952095809,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005988023952095809,
                "tf.matmul(a, b)": 0.005988023952095809,
                "tf.maximum(x, y)": 0.005988023952095809,
                "tf.minimum(x, y)": 0.005988023952095809,
                "tf.multiply(x, y)": 0.005988023952095809,
                "tf.not_equal(x, y)": 0.005988023952095809,
                "tf.one_hot(indices, depth)": 0.005988023952095809,
                "tf.ones(shape)": 0.005988023952095809,
                "tf.ones_like(input)": 0.005988023952095809,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005988023952095809,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005988023952095809,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005988023952095809,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005988023952095809,
                "tf.range(start)": 0.005988023952095809,
                "tf.range(start, limit, delta)": 0.005988023952095809,
                "tf.reduce_any(input_tensor, axis)": 0.005988023952095809,
                "tf.reduce_all(input_tensor, axis)": 0.005988023952095809,
                "tf.reduce_max(input_tensor)": 0.005988023952095809,
                "tf.reduce_max(input_tensor, axis)": 0.005988023952095809,
                "tf.reduce_mean(input_tensor)": 0.005988023952095809,
                "tf.reduce_mean(input_tensor, axis)": 0.005988023952095809,
                "tf.reduce_min(input_tensor)": 0.005988023952095809,
                "tf.reduce_min(input_tensor, axis)": 0.005988023952095809,
                "tf.reduce_prod(input_tensor, axis)": 0.005988023952095809,
                "tf.reduce_sum(input_tensor)": 0.03592814371257485,
                "tf.reduce_sum(input_tensor, axis)": 0.005988023952095809,
                "tf.repeat(input, repeats)": 0.005988023952095809,
                "tf.repeat(input, repeats, axis)": 0.005988023952095809,
                "tf.reshape(tensor, shape)": 0.005988023952095809,
                "tf.reverse(tensor, axis)": 0.005988023952095809,
                "tf.roll(input, shift, axis)": 0.005988023952095809,
                "tf.round(x)": 0.005988023952095809,
                "tf.scatter_nd(indices, updates, shape)": 0.005988023952095809,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005988023952095809,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005988023952095809,
                "tf.sequence_mask(lengths)": 0.005988023952095809,
                "tf.sequence_mask(lengths, maxlen)": 0.005988023952095809,
                "tf.shape(input)": 0.005988023952095809,
                "tf.sign(x)": 0.005988023952095809,
                "tf.sort(values, axis)": 0.005988023952095809,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005988023952095809,
                "tf.sqrt(x)": 0.005988023952095809,
                "tf.square(x)": 0.005988023952095809,
                "tf.squeeze(input)": 0.005988023952095809,
                "tf.squeeze(input, axis)": 0.005988023952095809,
                "tf.stack(values, axis)": 0.005988023952095809,
                "tf.subtract(x, y)": 0.011976047904191617,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005988023952095809,
                "tf.tensordot(a, b, axes)": 0.005988023952095809,
                "tf.tile(input, multiples)": 0.005988023952095809,
                "tf.transpose(a)": 0.005988023952095809,
                "tf.transpose(a, perm)": 0.005988023952095809,
                "tf.unique_with_counts(x)": 0.005988023952095809,
                "tf.unstack(value, axis)": 0.005988023952095809,
                "tf.where(condition)": 0.005988023952095809,
                "tf.where(condition, x, y)": 0.023952095808383235,
                "tf.zeros(shape)": 0.005988023952095809,
                "tf.zeros_like(input)": 0.005988023952095809,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005988023952095809,
                "tf.sparse.add(a, b)": 0.005988023952095809,
                "tf.sparse.concat(axis, sp_inputs)": 0.005988023952095809,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005988023952095809,
                "tf.sparse.from_dense(tensor)": 0.005988023952095809,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005988023952095809,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005988023952095809,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005988023952095809,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005988023952095809,
                "tf.sparse.reset_shape(sp_input)": 0.005988023952095809,
                "tf.sparse.reshape(sp_input, shape)": 0.005988023952095809,
                "tf.sparse.retain(sp_input, to_retain)": 0.005988023952095809,
                "tf.sparse.slice(sp_input, start, size)": 0.005988023952095809,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005988023952095809,
                "tf.sparse.to_dense(sp_input)": 0.005988023952095809,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005988023952095809,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005988023952095809,
                "tf.sparse.transpose(sp_input)": 0.005988023952095809,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005988023952095809,
                "IndexingOperation": 0.005988023952095809,
                "PairCreationOperation": 0.005988023952095809,
                "SingletonTupleCreationOperation": 0.005988023952095809,
                "SlicingAxis0BothOperation": 0.005988023952095809,
                "SlicingAxis0LeftOperation": 0.005988023952095809,
                "SlicingAxis0RightOperation": 0.005988023952095809,
                "SlicingAxis1BothOperation": 0.005988023952095809,
                "SlicingAxis1LeftOperation": 0.005988023952095809,
                "SlicingAxis1RightOperation": 0.005988023952095809,
                "TripleCreationOperation": 0.005988023952095809
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 6,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 5,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 5,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 6,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 5,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "stackoverflow_25",
        "completions": [
            "\ntensor = tf.eye(3)\n\ntensor = tf.expand_dims(tensor, 0)\n\nresult = tf.tile(tensor, [4, 1, 1])\n\n",
            "\nidentity_matrix = tf.eye(3)\n\nresult = tf.tile(identity_matrix, [4, 1])\n\n",
            "\nidentity_matrix = tf.eye(3)\n\nidentity_matrix = tf.reshape(identity_matrix, [1, 3, 3])\n\nresult = tf.tile(identity_matrix, [4, 1, 1])\n\n",
            "\ntensor = tf.eye(3)\n\ntensor = tf.expand_dims(tensor, axis=0)\n\nresult = tf.tile(tensor, multiples=[4, 1, 1])\n\n",
            "\nidentity = tf.eye(3)\n\noutput = tf.tile(tf.expand_dims(identity, 0), [4, 1, 1])\n\n",
            "\nidentity_matrix = tf.eye(3)\n\nreplicated_matrix = tf.tile(tf.expand_dims(identity_matrix, 0), [4, 1, 1])\n\n",
            "\neye_tensor = tf.eye(3)\n\ntiled_tensor = tf.tile(eye_tensor, [4, 1])\n\n",
            "\nidentity_matrix = tf.eye(3)\n\ntiled_identity_matrix = tf.tile(tf.expand_dims(identity_matrix, 0), [4, 1, 1])\n\n",
            "\ndef copy_tensor(n):\n    tensor = tf.eye(n)\n    copied_tensor = tf.tile(tensor, [4, 1])\n    return copied_tensor\n\n",
            "\nidentity_matrix = tf.eye(3)\n\nresult = tf.tile(identity_matrix, [4, 1])\n\n"
        ],
        "target-program": "tf.tile(tf.eye(in1), (in2, 1))",
        "description": "copy the tensor tf.eye(3), 4 times",
        "tf_operators": {
            "tf.eye": 10,
            "tf.expand_dims": 5,
            "tf.tile": 10,
            "tf.reshape": 1
        },
        "coverage_percentage": 100.0,
        "total_in_target": 2,
        "total_covered": 2,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005952380952380952,
                "tf.add(x, y)": 0.005952380952380952,
                "tf.add_n(inputs)": 0.005952380952380952,
                "tf.argmax(input, axis)": 0.005952380952380952,
                "tf.argmin(input, axis)": 0.005952380952380952,
                "tf.argsort(values, axis, stable=True)": 0.005952380952380952,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005952380952380952,
                "tf.boolean_mask(tensor, mask)": 0.005952380952380952,
                "tf.broadcast_to(input, shape)": 0.005952380952380952,
                "tf.cast(x, dtype)": 0.005952380952380952,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005952380952380952,
                "tf.concat(values, axis)": 0.005952380952380952,
                "tf.constant(value)": 0.005952380952380952,
                "tf.constant(value, dtype)": 0.005952380952380952,
                "tf.divide(x, y)": 0.005952380952380952,
                "tf.equal(x, y)": 0.005952380952380952,
                "tf.exp(x)": 0.005952380952380952,
                "tf.expand_dims(input, axis)": 0.03571428571428571,
                "tf.eye(num_rows)": 0.06547619047619048,
                "tf.eye(num_rows, num_columns)": 0.005952380952380952,
                "tf.eye(num_rows, dtype)": 0.005952380952380952,
                "tf.fill(dims, value)": 0.005952380952380952,
                "tf.gather(params, indices)": 0.005952380952380952,
                "tf.gather(params, indices, axis, batch_dims)": 0.005952380952380952,
                "tf.gather_nd(params, indices)": 0.005952380952380952,
                "tf.gather_nd(params, indices, batch_dims)": 0.005952380952380952,
                "tf.greater(x, y)": 0.005952380952380952,
                "tf.greater_equal(x, y)": 0.005952380952380952,
                "tf.math.bincount(arr)": 0.005952380952380952,
                "tf.math.ceil(x)": 0.005952380952380952,
                "tf.math.count_nonzero(input)": 0.005952380952380952,
                "tf.math.count_nonzero(input, axis)": 0.005952380952380952,
                "tf.math.cumsum(x, axis)": 0.005952380952380952,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005952380952380952,
                "tf.math.divide_no_nan(x, y)": 0.005952380952380952,
                "tf.math.floor(x)": 0.005952380952380952,
                "tf.math.log(x)": 0.005952380952380952,
                "tf.math.logical_and(x, y)": 0.005952380952380952,
                "tf.math.logical_not(x)": 0.005952380952380952,
                "tf.math.logical_or(x, y)": 0.005952380952380952,
                "tf.math.logical_xor(x, y)": 0.005952380952380952,
                "tf.math.negative(x)": 0.005952380952380952,
                "tf.math.reciprocal(x)": 0.005952380952380952,
                "tf.math.reciprocal_no_nan(x)": 0.005952380952380952,
                "tf.math.segment_max(data, segment_ids)": 0.005952380952380952,
                "tf.math.segment_mean(data, segment_ids)": 0.005952380952380952,
                "tf.math.segment_min(data, segment_ids)": 0.005952380952380952,
                "tf.math.segment_prod(data, segment_ids)": 0.005952380952380952,
                "tf.math.segment_sum(data, segment_ids)": 0.005952380952380952,
                "tf.math.squared_difference(x, y)": 0.005952380952380952,
                "tf.math.top_k(input, k)": 0.005952380952380952,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005952380952380952,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005952380952380952,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005952380952380952,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005952380952380952,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005952380952380952,
                "tf.matmul(a, b)": 0.005952380952380952,
                "tf.maximum(x, y)": 0.005952380952380952,
                "tf.minimum(x, y)": 0.005952380952380952,
                "tf.multiply(x, y)": 0.005952380952380952,
                "tf.not_equal(x, y)": 0.005952380952380952,
                "tf.one_hot(indices, depth)": 0.005952380952380952,
                "tf.ones(shape)": 0.005952380952380952,
                "tf.ones_like(input)": 0.005952380952380952,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005952380952380952,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005952380952380952,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005952380952380952,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005952380952380952,
                "tf.range(start)": 0.005952380952380952,
                "tf.range(start, limit, delta)": 0.005952380952380952,
                "tf.reduce_any(input_tensor, axis)": 0.005952380952380952,
                "tf.reduce_all(input_tensor, axis)": 0.005952380952380952,
                "tf.reduce_max(input_tensor)": 0.005952380952380952,
                "tf.reduce_max(input_tensor, axis)": 0.005952380952380952,
                "tf.reduce_mean(input_tensor)": 0.005952380952380952,
                "tf.reduce_mean(input_tensor, axis)": 0.005952380952380952,
                "tf.reduce_min(input_tensor)": 0.005952380952380952,
                "tf.reduce_min(input_tensor, axis)": 0.005952380952380952,
                "tf.reduce_prod(input_tensor, axis)": 0.005952380952380952,
                "tf.reduce_sum(input_tensor)": 0.005952380952380952,
                "tf.reduce_sum(input_tensor, axis)": 0.005952380952380952,
                "tf.repeat(input, repeats)": 0.005952380952380952,
                "tf.repeat(input, repeats, axis)": 0.005952380952380952,
                "tf.reshape(tensor, shape)": 0.011904761904761904,
                "tf.reverse(tensor, axis)": 0.005952380952380952,
                "tf.roll(input, shift, axis)": 0.005952380952380952,
                "tf.round(x)": 0.005952380952380952,
                "tf.scatter_nd(indices, updates, shape)": 0.005952380952380952,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005952380952380952,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005952380952380952,
                "tf.sequence_mask(lengths)": 0.005952380952380952,
                "tf.sequence_mask(lengths, maxlen)": 0.005952380952380952,
                "tf.shape(input)": 0.005952380952380952,
                "tf.sign(x)": 0.005952380952380952,
                "tf.sort(values, axis)": 0.005952380952380952,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005952380952380952,
                "tf.sqrt(x)": 0.005952380952380952,
                "tf.square(x)": 0.005952380952380952,
                "tf.squeeze(input)": 0.005952380952380952,
                "tf.squeeze(input, axis)": 0.005952380952380952,
                "tf.stack(values, axis)": 0.005952380952380952,
                "tf.subtract(x, y)": 0.005952380952380952,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005952380952380952,
                "tf.tensordot(a, b, axes)": 0.005952380952380952,
                "tf.tile(input, multiples)": 0.06547619047619048,
                "tf.transpose(a)": 0.005952380952380952,
                "tf.transpose(a, perm)": 0.005952380952380952,
                "tf.unique_with_counts(x)": 0.005952380952380952,
                "tf.unstack(value, axis)": 0.005952380952380952,
                "tf.where(condition)": 0.005952380952380952,
                "tf.where(condition, x, y)": 0.005952380952380952,
                "tf.zeros(shape)": 0.005952380952380952,
                "tf.zeros_like(input)": 0.005952380952380952,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005952380952380952,
                "tf.sparse.add(a, b)": 0.005952380952380952,
                "tf.sparse.concat(axis, sp_inputs)": 0.005952380952380952,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005952380952380952,
                "tf.sparse.from_dense(tensor)": 0.005952380952380952,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005952380952380952,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005952380952380952,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005952380952380952,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005952380952380952,
                "tf.sparse.reset_shape(sp_input)": 0.005952380952380952,
                "tf.sparse.reshape(sp_input, shape)": 0.005952380952380952,
                "tf.sparse.retain(sp_input, to_retain)": 0.005952380952380952,
                "tf.sparse.slice(sp_input, start, size)": 0.005952380952380952,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005952380952380952,
                "tf.sparse.to_dense(sp_input)": 0.005952380952380952,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005952380952380952,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005952380952380952,
                "tf.sparse.transpose(sp_input)": 0.005952380952380952,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005952380952380952,
                "IndexingOperation": 0.005952380952380952,
                "PairCreationOperation": 0.005952380952380952,
                "SingletonTupleCreationOperation": 0.005952380952380952,
                "SlicingAxis0BothOperation": 0.005952380952380952,
                "SlicingAxis0LeftOperation": 0.005952380952380952,
                "SlicingAxis0RightOperation": 0.005952380952380952,
                "SlicingAxis1BothOperation": 0.005952380952380952,
                "SlicingAxis1LeftOperation": 0.005952380952380952,
                "SlicingAxis1RightOperation": 0.005952380952380952,
                "TripleCreationOperation": 0.005952380952380952
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 7,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 5,
                "tf.eye(num_rows)": 4,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 6,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 4,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "stackoverflow_26",
        "completions": [
            "\ndata = [[[3, 4], [1, 2]], [[5, -2], [-10, 3]], [[10, 20], [-4, 7]]]\n\ntensor_data = tf.constant(data)\n\nmax_value = tf.reduce_max(tensor_data)\n\n",
            "\nlst = [[[3, 4], [1, 2]], [[5, -2], [-10, 3]], [[10, 20], [-4, 7]]]\n\ntensor = tf.constant(lst)\n\nmax_value = tf.reduce_max(tensor)\n\n",
            "\ndata = [[[3, 4], [1, 2]], [[5, -2], [-10, 3]], [[10, 20], [-4, 7]]]\n\ntensor = tf.constant(data)\n\nmax_value = tf.reduce_max(tensor)\n\n",
            "\ntensor = tf.constant([[[3, 4], [1, 2]], [[5, -2], [-10, 3]], [[10, 20], [-4, 7]]])\n\nresult = tf.reduce_max(tensor)\n\n",
            "\ninput_tensor = tf.constant([[[3, 4], [1, 2]], [[5, -2], [-10, 3]], [[10, 20], [-4, 7]]])\n\noutput = tf.reduce_max(input_tensor)\n\n",
            "\ninput_tensor = tf.constant([[[3, 4], [1, 2]], [[5, -2], [-10, 3]], [[10, 20], [-4, 7]]])\n\noutput = tf.reduce_max(input_tensor)\n\n",
            "\nx = [[[3, 4], [1, 2]], [[5, -2], [-10, 3]], [[10, 20], [-4, 7]]]\n\ntensor = tf.constant(x)\n\noutput = tf.reduce_max(tensor)\n\n",
            "\ntensor = tf.constant([[[3, 4], [1, 2]], [[5, -2], [-10, 3]], [[10, 20], [-4, 7]]])\n\nmax_value = tf.reduce_max(tensor)\n\n",
            "\ntensor = tf.constant([[[3, 4], [1, 2]], [[5, -2], [-10, 3]], [[10, 20], [-4, 7]]])\n\nmax_value = tf.reduce_max(tensor, axis=[0, 1, 2])\n\n",
            "\ninput_tensor = tf.constant([[[3, 4], [1, 2]], [[5, -2], [-10, 3]], [[10, 20], [-4, 7]]])\n\noutput = tf.reduce_max(input_tensor)\n"
        ],
        "target-program": "tf.reduce_sum(tf.reduce_sum(in1, axis=1), axis=1)",
        "description": "reduction operation for multiple dimensions simultaneously",
        "tf_operators": {
            "tf.reduce_max": 10,
            "tf.constant": 10
        },
        "coverage_percentage": 0.0,
        "total_in_target": 1,
        "total_covered": 0,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.006211180124223602,
                "tf.add(x, y)": 0.006211180124223602,
                "tf.add_n(inputs)": 0.006211180124223602,
                "tf.argmax(input, axis)": 0.006211180124223602,
                "tf.argmin(input, axis)": 0.006211180124223602,
                "tf.argsort(values, axis, stable=True)": 0.006211180124223602,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.006211180124223602,
                "tf.boolean_mask(tensor, mask)": 0.006211180124223602,
                "tf.broadcast_to(input, shape)": 0.006211180124223602,
                "tf.cast(x, dtype)": 0.006211180124223602,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.006211180124223602,
                "tf.concat(values, axis)": 0.006211180124223602,
                "tf.constant(value)": 0.06832298136645963,
                "tf.constant(value, dtype)": 0.006211180124223602,
                "tf.divide(x, y)": 0.006211180124223602,
                "tf.equal(x, y)": 0.006211180124223602,
                "tf.exp(x)": 0.006211180124223602,
                "tf.expand_dims(input, axis)": 0.006211180124223602,
                "tf.eye(num_rows)": 0.006211180124223602,
                "tf.eye(num_rows, num_columns)": 0.006211180124223602,
                "tf.eye(num_rows, dtype)": 0.006211180124223602,
                "tf.fill(dims, value)": 0.006211180124223602,
                "tf.gather(params, indices)": 0.006211180124223602,
                "tf.gather(params, indices, axis, batch_dims)": 0.006211180124223602,
                "tf.gather_nd(params, indices)": 0.006211180124223602,
                "tf.gather_nd(params, indices, batch_dims)": 0.006211180124223602,
                "tf.greater(x, y)": 0.006211180124223602,
                "tf.greater_equal(x, y)": 0.006211180124223602,
                "tf.math.bincount(arr)": 0.006211180124223602,
                "tf.math.ceil(x)": 0.006211180124223602,
                "tf.math.count_nonzero(input)": 0.006211180124223602,
                "tf.math.count_nonzero(input, axis)": 0.006211180124223602,
                "tf.math.cumsum(x, axis)": 0.006211180124223602,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.006211180124223602,
                "tf.math.divide_no_nan(x, y)": 0.006211180124223602,
                "tf.math.floor(x)": 0.006211180124223602,
                "tf.math.log(x)": 0.006211180124223602,
                "tf.math.logical_and(x, y)": 0.006211180124223602,
                "tf.math.logical_not(x)": 0.006211180124223602,
                "tf.math.logical_or(x, y)": 0.006211180124223602,
                "tf.math.logical_xor(x, y)": 0.006211180124223602,
                "tf.math.negative(x)": 0.006211180124223602,
                "tf.math.reciprocal(x)": 0.006211180124223602,
                "tf.math.reciprocal_no_nan(x)": 0.006211180124223602,
                "tf.math.segment_max(data, segment_ids)": 0.006211180124223602,
                "tf.math.segment_mean(data, segment_ids)": 0.006211180124223602,
                "tf.math.segment_min(data, segment_ids)": 0.006211180124223602,
                "tf.math.segment_prod(data, segment_ids)": 0.006211180124223602,
                "tf.math.segment_sum(data, segment_ids)": 0.006211180124223602,
                "tf.math.squared_difference(x, y)": 0.006211180124223602,
                "tf.math.top_k(input, k)": 0.006211180124223602,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.006211180124223602,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.006211180124223602,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.006211180124223602,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.006211180124223602,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.006211180124223602,
                "tf.matmul(a, b)": 0.006211180124223602,
                "tf.maximum(x, y)": 0.006211180124223602,
                "tf.minimum(x, y)": 0.006211180124223602,
                "tf.multiply(x, y)": 0.006211180124223602,
                "tf.not_equal(x, y)": 0.006211180124223602,
                "tf.one_hot(indices, depth)": 0.006211180124223602,
                "tf.ones(shape)": 0.006211180124223602,
                "tf.ones_like(input)": 0.006211180124223602,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.006211180124223602,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.006211180124223602,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.006211180124223602,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.006211180124223602,
                "tf.range(start)": 0.006211180124223602,
                "tf.range(start, limit, delta)": 0.006211180124223602,
                "tf.reduce_any(input_tensor, axis)": 0.006211180124223602,
                "tf.reduce_all(input_tensor, axis)": 0.006211180124223602,
                "tf.reduce_max(input_tensor)": 0.062111801242236024,
                "tf.reduce_max(input_tensor, axis)": 0.006211180124223602,
                "tf.reduce_mean(input_tensor)": 0.006211180124223602,
                "tf.reduce_mean(input_tensor, axis)": 0.006211180124223602,
                "tf.reduce_min(input_tensor)": 0.006211180124223602,
                "tf.reduce_min(input_tensor, axis)": 0.006211180124223602,
                "tf.reduce_prod(input_tensor, axis)": 0.006211180124223602,
                "tf.reduce_sum(input_tensor)": 0.006211180124223602,
                "tf.reduce_sum(input_tensor, axis)": 0.006211180124223602,
                "tf.repeat(input, repeats)": 0.006211180124223602,
                "tf.repeat(input, repeats, axis)": 0.006211180124223602,
                "tf.reshape(tensor, shape)": 0.006211180124223602,
                "tf.reverse(tensor, axis)": 0.006211180124223602,
                "tf.roll(input, shift, axis)": 0.006211180124223602,
                "tf.round(x)": 0.006211180124223602,
                "tf.scatter_nd(indices, updates, shape)": 0.006211180124223602,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.006211180124223602,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.006211180124223602,
                "tf.sequence_mask(lengths)": 0.006211180124223602,
                "tf.sequence_mask(lengths, maxlen)": 0.006211180124223602,
                "tf.shape(input)": 0.006211180124223602,
                "tf.sign(x)": 0.006211180124223602,
                "tf.sort(values, axis)": 0.006211180124223602,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.006211180124223602,
                "tf.sqrt(x)": 0.006211180124223602,
                "tf.square(x)": 0.006211180124223602,
                "tf.squeeze(input)": 0.006211180124223602,
                "tf.squeeze(input, axis)": 0.006211180124223602,
                "tf.stack(values, axis)": 0.006211180124223602,
                "tf.subtract(x, y)": 0.006211180124223602,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.006211180124223602,
                "tf.tensordot(a, b, axes)": 0.006211180124223602,
                "tf.tile(input, multiples)": 0.006211180124223602,
                "tf.transpose(a)": 0.006211180124223602,
                "tf.transpose(a, perm)": 0.006211180124223602,
                "tf.unique_with_counts(x)": 0.006211180124223602,
                "tf.unstack(value, axis)": 0.006211180124223602,
                "tf.where(condition)": 0.006211180124223602,
                "tf.where(condition, x, y)": 0.006211180124223602,
                "tf.zeros(shape)": 0.006211180124223602,
                "tf.zeros_like(input)": 0.006211180124223602,
                "tf.SparseTensor(indices, values, dense_shape)": 0.006211180124223602,
                "tf.sparse.add(a, b)": 0.006211180124223602,
                "tf.sparse.concat(axis, sp_inputs)": 0.006211180124223602,
                "tf.sparse.expand_dims(sp_input, axis)": 0.006211180124223602,
                "tf.sparse.from_dense(tensor)": 0.006211180124223602,
                "tf.sparse.maximum(sp_a, sp_b)": 0.006211180124223602,
                "tf.sparse.minimum(sp_a, sp_b)": 0.006211180124223602,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.006211180124223602,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.006211180124223602,
                "tf.sparse.reset_shape(sp_input)": 0.006211180124223602,
                "tf.sparse.reshape(sp_input, shape)": 0.006211180124223602,
                "tf.sparse.retain(sp_input, to_retain)": 0.006211180124223602,
                "tf.sparse.slice(sp_input, start, size)": 0.006211180124223602,
                "tf.sparse.split(sp_input, num_split, axis)": 0.006211180124223602,
                "tf.sparse.to_dense(sp_input)": 0.006211180124223602,
                "tf.sparse.to_dense(sp_input, default_value)": 0.006211180124223602,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.006211180124223602,
                "tf.sparse.transpose(sp_input)": 0.006211180124223602,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.006211180124223602,
                "IndexingOperation": 0.006211180124223602,
                "PairCreationOperation": 0.006211180124223602,
                "SingletonTupleCreationOperation": 0.006211180124223602,
                "SlicingAxis0BothOperation": 0.006211180124223602,
                "SlicingAxis0LeftOperation": 0.006211180124223602,
                "SlicingAxis0RightOperation": 0.006211180124223602,
                "SlicingAxis1BothOperation": 0.006211180124223602,
                "SlicingAxis1LeftOperation": 0.006211180124223602,
                "SlicingAxis1RightOperation": 0.006211180124223602,
                "TripleCreationOperation": 0.006211180124223602
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 4,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "stackoverflow_27",
        "completions": [
            "\ndef boolean_tensor(indices):\n    depth = tf.reduce_max(indices) + 1\n    one_hot_tensor = tf.one_hot(indices, depth)\n    return tf.reduce_any(one_hot_tensor, 0)\n",
            "\ndef create_boolean_tensor(indices):\n    max_index = tf.reduce_max(indices)\n    result = tf.one_hot(indices, depth=max_index+1)\n    return result\n",
            "\ndef boolean_tensor(indices):\n    max_index = tf.reduce_max(indices)\n    return tf.one_hot(indices, max_index+1)\n",
            "\ndef create_boolean_tensor(indices):\n    max_index = tf.reduce_max(indices)\n    return tf.one_hot(indices, depth=max_index+1)\n",
            "\ndef one_hot_tensor(indices):\n    depth = tf.reduce_max(indices) + 1\n    return tf.one_hot(indices, depth)\n",
            "\ndef boolean_tensor(indices):\n    one_hot_tensor = tf.one_hot(indices, depth=10, on_value=1, off_value=0)\n    result = tf.reduce_any(one_hot_tensor)\n    return result\n\n",
            "\ndef boolean_tensor(indices):\n    depth = tf.reduce_max(indices) + 1\n    one_hot_tensor = tf.one_hot(indices, depth, on_value=1, off_value=0)\n    result = tf.reduce_any(one_hot_tensor, axis=0)\n    return result\n\nindices = tf.constant([0, 3, 5, 6])\noutput = boolean_tensor(indices)\n",
            "\ndef one_hot_tensor(indices):\n    depth = tf.reduce_max(indices) + 1\n    one_hot = tf.one_hot(indices, depth)\n    boolean_tensor = tf.reduce_any(one_hot, axis=0)\n    return tf.cast(boolean_tensor, tf.int32)\n\n",
            "\ndef boolean_tensor(indices):\n    depth = tf.reduce_max(indices) + 1\n    return tf.one_hot(indices, depth)\n\nindices = tf.constant([0, 3, 5, 6])\n\nindices = tf.constant([8])\n",
            "\ndef boolean_tensor(indices):\n    depth = tf.reduce_max(indices) + 1\n    return tf.one_hot(indices, depth)\n"
        ],
        "target-program": "tf.cast(tf.reduce_max(tf.one_hot(in1, in2), axis=0), tf.int32)",
        "description": "boolean tensor with 1 at the indices in the input tensor",
        "tf_operators": {
            "tf.reduce_any": 4,
            "tf.one_hot": 10,
            "tf.reduce_max": 9,
            "tf.constant": 2,
            "tf.cast": 1,
            "tf.int32": 1
        },
        "coverage_percentage": 100.0,
        "total_in_target": 4,
        "total_covered": 4,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005917159763313609,
                "tf.add(x, y)": 0.005917159763313609,
                "tf.add_n(inputs)": 0.005917159763313609,
                "tf.argmax(input, axis)": 0.005917159763313609,
                "tf.argmin(input, axis)": 0.005917159763313609,
                "tf.argsort(values, axis, stable=True)": 0.005917159763313609,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005917159763313609,
                "tf.boolean_mask(tensor, mask)": 0.005917159763313609,
                "tf.broadcast_to(input, shape)": 0.005917159763313609,
                "tf.cast(x, dtype)": 0.011834319526627219,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005917159763313609,
                "tf.concat(values, axis)": 0.005917159763313609,
                "tf.constant(value)": 0.023668639053254437,
                "tf.constant(value, dtype)": 0.005917159763313609,
                "tf.divide(x, y)": 0.005917159763313609,
                "tf.equal(x, y)": 0.005917159763313609,
                "tf.exp(x)": 0.005917159763313609,
                "tf.expand_dims(input, axis)": 0.005917159763313609,
                "tf.eye(num_rows)": 0.005917159763313609,
                "tf.eye(num_rows, num_columns)": 0.005917159763313609,
                "tf.eye(num_rows, dtype)": 0.005917159763313609,
                "tf.fill(dims, value)": 0.005917159763313609,
                "tf.gather(params, indices)": 0.005917159763313609,
                "tf.gather(params, indices, axis, batch_dims)": 0.005917159763313609,
                "tf.gather_nd(params, indices)": 0.005917159763313609,
                "tf.gather_nd(params, indices, batch_dims)": 0.005917159763313609,
                "tf.greater(x, y)": 0.005917159763313609,
                "tf.greater_equal(x, y)": 0.005917159763313609,
                "tf.math.bincount(arr)": 0.005917159763313609,
                "tf.math.ceil(x)": 0.005917159763313609,
                "tf.math.count_nonzero(input)": 0.005917159763313609,
                "tf.math.count_nonzero(input, axis)": 0.005917159763313609,
                "tf.math.cumsum(x, axis)": 0.005917159763313609,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005917159763313609,
                "tf.math.divide_no_nan(x, y)": 0.005917159763313609,
                "tf.math.floor(x)": 0.005917159763313609,
                "tf.math.log(x)": 0.005917159763313609,
                "tf.math.logical_and(x, y)": 0.005917159763313609,
                "tf.math.logical_not(x)": 0.005917159763313609,
                "tf.math.logical_or(x, y)": 0.005917159763313609,
                "tf.math.logical_xor(x, y)": 0.005917159763313609,
                "tf.math.negative(x)": 0.005917159763313609,
                "tf.math.reciprocal(x)": 0.005917159763313609,
                "tf.math.reciprocal_no_nan(x)": 0.005917159763313609,
                "tf.math.segment_max(data, segment_ids)": 0.005917159763313609,
                "tf.math.segment_mean(data, segment_ids)": 0.005917159763313609,
                "tf.math.segment_min(data, segment_ids)": 0.005917159763313609,
                "tf.math.segment_prod(data, segment_ids)": 0.005917159763313609,
                "tf.math.segment_sum(data, segment_ids)": 0.005917159763313609,
                "tf.math.squared_difference(x, y)": 0.005917159763313609,
                "tf.math.top_k(input, k)": 0.005917159763313609,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005917159763313609,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005917159763313609,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005917159763313609,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005917159763313609,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005917159763313609,
                "tf.matmul(a, b)": 0.005917159763313609,
                "tf.maximum(x, y)": 0.005917159763313609,
                "tf.minimum(x, y)": 0.005917159763313609,
                "tf.multiply(x, y)": 0.005917159763313609,
                "tf.not_equal(x, y)": 0.005917159763313609,
                "tf.one_hot(indices, depth)": 0.0650887573964497,
                "tf.ones(shape)": 0.005917159763313609,
                "tf.ones_like(input)": 0.005917159763313609,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005917159763313609,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005917159763313609,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005917159763313609,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005917159763313609,
                "tf.range(start)": 0.005917159763313609,
                "tf.range(start, limit, delta)": 0.005917159763313609,
                "tf.reduce_any(input_tensor, axis)": 0.029585798816568046,
                "tf.reduce_all(input_tensor, axis)": 0.005917159763313609,
                "tf.reduce_max(input_tensor)": 0.05917159763313609,
                "tf.reduce_max(input_tensor, axis)": 0.005917159763313609,
                "tf.reduce_mean(input_tensor)": 0.005917159763313609,
                "tf.reduce_mean(input_tensor, axis)": 0.005917159763313609,
                "tf.reduce_min(input_tensor)": 0.005917159763313609,
                "tf.reduce_min(input_tensor, axis)": 0.005917159763313609,
                "tf.reduce_prod(input_tensor, axis)": 0.005917159763313609,
                "tf.reduce_sum(input_tensor)": 0.005917159763313609,
                "tf.reduce_sum(input_tensor, axis)": 0.005917159763313609,
                "tf.repeat(input, repeats)": 0.005917159763313609,
                "tf.repeat(input, repeats, axis)": 0.005917159763313609,
                "tf.reshape(tensor, shape)": 0.005917159763313609,
                "tf.reverse(tensor, axis)": 0.005917159763313609,
                "tf.roll(input, shift, axis)": 0.005917159763313609,
                "tf.round(x)": 0.005917159763313609,
                "tf.scatter_nd(indices, updates, shape)": 0.005917159763313609,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005917159763313609,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005917159763313609,
                "tf.sequence_mask(lengths)": 0.005917159763313609,
                "tf.sequence_mask(lengths, maxlen)": 0.005917159763313609,
                "tf.shape(input)": 0.005917159763313609,
                "tf.sign(x)": 0.005917159763313609,
                "tf.sort(values, axis)": 0.005917159763313609,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005917159763313609,
                "tf.sqrt(x)": 0.005917159763313609,
                "tf.square(x)": 0.005917159763313609,
                "tf.squeeze(input)": 0.005917159763313609,
                "tf.squeeze(input, axis)": 0.005917159763313609,
                "tf.stack(values, axis)": 0.005917159763313609,
                "tf.subtract(x, y)": 0.005917159763313609,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005917159763313609,
                "tf.tensordot(a, b, axes)": 0.005917159763313609,
                "tf.tile(input, multiples)": 0.005917159763313609,
                "tf.transpose(a)": 0.005917159763313609,
                "tf.transpose(a, perm)": 0.005917159763313609,
                "tf.unique_with_counts(x)": 0.005917159763313609,
                "tf.unstack(value, axis)": 0.005917159763313609,
                "tf.where(condition)": 0.005917159763313609,
                "tf.where(condition, x, y)": 0.005917159763313609,
                "tf.zeros(shape)": 0.005917159763313609,
                "tf.zeros_like(input)": 0.005917159763313609,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005917159763313609,
                "tf.sparse.add(a, b)": 0.005917159763313609,
                "tf.sparse.concat(axis, sp_inputs)": 0.005917159763313609,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005917159763313609,
                "tf.sparse.from_dense(tensor)": 0.005917159763313609,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005917159763313609,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005917159763313609,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005917159763313609,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005917159763313609,
                "tf.sparse.reset_shape(sp_input)": 0.005917159763313609,
                "tf.sparse.reshape(sp_input, shape)": 0.005917159763313609,
                "tf.sparse.retain(sp_input, to_retain)": 0.005917159763313609,
                "tf.sparse.slice(sp_input, start, size)": 0.005917159763313609,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005917159763313609,
                "tf.sparse.to_dense(sp_input)": 0.005917159763313609,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005917159763313609,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005917159763313609,
                "tf.sparse.transpose(sp_input)": 0.005917159763313609,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005917159763313609,
                "IndexingOperation": 0.005917159763313609,
                "PairCreationOperation": 0.005917159763313609,
                "SingletonTupleCreationOperation": 0.005917159763313609,
                "SlicingAxis0BothOperation": 0.005917159763313609,
                "SlicingAxis0LeftOperation": 0.005917159763313609,
                "SlicingAxis0RightOperation": 0.005917159763313609,
                "SlicingAxis1BothOperation": 0.005917159763313609,
                "SlicingAxis1LeftOperation": 0.005917159763313609,
                "SlicingAxis1RightOperation": 0.005917159763313609,
                "TripleCreationOperation": 0.005917159763313609
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 6,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 5,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 4,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 5,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 4,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "stackoverflow_28",
        "completions": [
            "\ndef extract_columns(tensor, indices):\n    tensor = tf.constant(tensor)\n    indices = tf.constant(indices)\n    return tf.gather(tensor, indices, axis=2)\n\ntensor = [[[5, 3], [0, 2]], [[7, 4], [5, 1]], [[10, 20], [15, 30]], [[11, 16], [14, 12]], [[-2, -7], [-4, 6]]]\nindices = [1, 0, 1, 1, 0]\n\n",
            "\ndef extract_columns(tensor, indices):\n    tensor = tf.constant(tensor)\n    indices = tf.constant(indices)\n    indices = tf.stack([tf.range(tf.shape(indices)[0]), indices], axis=1)\n    return tf.gather_nd(tensor, indices)\n\ntensor = [[[5, 3], [0, 2]], [[7, 4], [5, 1]], [[10, 20], [15, 30]], [[11, 16], [14, 12]], [[-2, -7], [-4, 6]]]\nindices = [1, 0, 1, 1, 0]\n",
            "\ntensor = tf.constant([[[5, 3], [0, 2]], [[7, 4], [5, 1]], [[10, 20], [15, 30]], [[11, 16], [14, 12]], [[-2, -7], [-4, 6]]])\n\nindices = tf.constant([1, 0, 1, 1, 0])\n\noutput = tf.gather(tensor, indices, axis=1)\n\n",
            "\ntensor_3d = tf.constant([[[5, 3], [0, 2]], [[7, 4], [5, 1]], [[10, 20], [15, 30]], [[11, 16], [14, 12]], [[-2, -7], [-4, 6]]])\n\ncolumn_indices = tf.constant([1, 0, 1, 1, 0])\n\nextracted_columns = tf.gather(tensor_3d, column_indices, axis=2)\n\n",
            "\ndata = [[[5, 3], [0, 2]], [[7, 4], [5, 1]], [[10, 20], [15, 30]], [[11, 16], [14, 12]], [[-2, -7], [-4, 6]]]\nindices = [1, 0, 1, 1, 0]\n\ntensor = tf.constant(data)\n\nresult = tf.gather(tensor, indices, axis=2)\n\n",
            "\ndef extract_columns(tensor, indices):\n    tensor = tf.constant(tensor)\n    indices = tf.constant(indices)\n    return tf.gather(tensor, indices, axis=2)\n",
            "\ndef extract_columns(tensor, indices):\n    return tf.gather(tensor, indices, axis=2)\n\ntensor = tf.constant([[[5, 3], [0, 2]], [[7, 4], [5, 1]], [[10, 20], [15, 30]], [[11, 16], [14, 12]], [[-2, -7], [-4, 6]]])\nindices = [1, 0, 1, 1, 0]\n",
            "\ndef extract_columns(tensor_3d, column_indices):\n    tensor_3d = tf.constant(tensor_3d)\n    column_indices = tf.constant(column_indices)\n    selected_columns = tf.gather(tensor_3d, column_indices, axis=1)\n    selected_columns = tf.squeeze(selected_columns)\n    return selected_columns.numpy().tolist()\n",
            "\ntensor = tf.constant([[[5, 3], [0, 2]], [[7, 4], [5, 1]], [[10, 20], [15, 30]], [[11, 16], [14, 12]], [[-2, -7], [-4, 6]]])\nindices = tf.constant([1, 0, 1, 1, 0])\n\nresult = tf.gather(tensor, indices, axis=2)\n\n",
            "\ndef extract_columns(tensor_3d, column_indices):\n    tensor_3d = tf.constant(tensor_3d)\n    column_indices = tf.constant(column_indices)\n    output = tf.gather(tensor_3d, column_indices, axis=2)\n    return output.numpy().tolist()\n\ntensor_3d = [[[5, 3], [0, 2]], [[7, 4], [5, 1]], [[10, 20], [15, 30]], [[11, 16], [14, 12]], [[-2, -7], [-4, 6]]]\ncolumn_indices = [1, 0, 1, 1, 0]\n"
        ],
        "target-program": "tf.squeeze(tf.gather(in1, tf.expand_dims(in2, 1), axis=-1, batch_dims=1))",
        "description": "extract columns from a 3D tensor given column indices",
        "tf_operators": {
            "tf.gather": 9,
            "tf.constant": 10,
            "tf.stack": 1,
            "tf.range": 1,
            "tf.shape": 1,
            "tf.gather_nd": 1,
            "tf.squeeze": 1
        },
        "coverage_percentage": 66.66666666666666,
        "total_in_target": 3,
        "total_covered": 2,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005714285714285714,
                "tf.add(x, y)": 0.005714285714285714,
                "tf.add_n(inputs)": 0.005714285714285714,
                "tf.argmax(input, axis)": 0.005714285714285714,
                "tf.argmin(input, axis)": 0.005714285714285714,
                "tf.argsort(values, axis, stable=True)": 0.005714285714285714,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005714285714285714,
                "tf.boolean_mask(tensor, mask)": 0.005714285714285714,
                "tf.broadcast_to(input, shape)": 0.005714285714285714,
                "tf.cast(x, dtype)": 0.005714285714285714,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005714285714285714,
                "tf.concat(values, axis)": 0.005714285714285714,
                "tf.constant(value)": 0.10857142857142857,
                "tf.constant(value, dtype)": 0.005714285714285714,
                "tf.divide(x, y)": 0.005714285714285714,
                "tf.equal(x, y)": 0.005714285714285714,
                "tf.exp(x)": 0.005714285714285714,
                "tf.expand_dims(input, axis)": 0.005714285714285714,
                "tf.eye(num_rows)": 0.005714285714285714,
                "tf.eye(num_rows, num_columns)": 0.005714285714285714,
                "tf.eye(num_rows, dtype)": 0.005714285714285714,
                "tf.fill(dims, value)": 0.005714285714285714,
                "tf.gather(params, indices)": 0.005714285714285714,
                "tf.gather(params, indices, axis, batch_dims)": 0.05714285714285714,
                "tf.gather_nd(params, indices)": 0.011428571428571429,
                "tf.gather_nd(params, indices, batch_dims)": 0.005714285714285714,
                "tf.greater(x, y)": 0.005714285714285714,
                "tf.greater_equal(x, y)": 0.005714285714285714,
                "tf.math.bincount(arr)": 0.005714285714285714,
                "tf.math.ceil(x)": 0.005714285714285714,
                "tf.math.count_nonzero(input)": 0.005714285714285714,
                "tf.math.count_nonzero(input, axis)": 0.005714285714285714,
                "tf.math.cumsum(x, axis)": 0.005714285714285714,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005714285714285714,
                "tf.math.divide_no_nan(x, y)": 0.005714285714285714,
                "tf.math.floor(x)": 0.005714285714285714,
                "tf.math.log(x)": 0.005714285714285714,
                "tf.math.logical_and(x, y)": 0.005714285714285714,
                "tf.math.logical_not(x)": 0.005714285714285714,
                "tf.math.logical_or(x, y)": 0.005714285714285714,
                "tf.math.logical_xor(x, y)": 0.005714285714285714,
                "tf.math.negative(x)": 0.005714285714285714,
                "tf.math.reciprocal(x)": 0.005714285714285714,
                "tf.math.reciprocal_no_nan(x)": 0.005714285714285714,
                "tf.math.segment_max(data, segment_ids)": 0.005714285714285714,
                "tf.math.segment_mean(data, segment_ids)": 0.005714285714285714,
                "tf.math.segment_min(data, segment_ids)": 0.005714285714285714,
                "tf.math.segment_prod(data, segment_ids)": 0.005714285714285714,
                "tf.math.segment_sum(data, segment_ids)": 0.005714285714285714,
                "tf.math.squared_difference(x, y)": 0.005714285714285714,
                "tf.math.top_k(input, k)": 0.005714285714285714,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005714285714285714,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005714285714285714,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005714285714285714,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005714285714285714,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005714285714285714,
                "tf.matmul(a, b)": 0.005714285714285714,
                "tf.maximum(x, y)": 0.005714285714285714,
                "tf.minimum(x, y)": 0.005714285714285714,
                "tf.multiply(x, y)": 0.005714285714285714,
                "tf.not_equal(x, y)": 0.005714285714285714,
                "tf.one_hot(indices, depth)": 0.005714285714285714,
                "tf.ones(shape)": 0.005714285714285714,
                "tf.ones_like(input)": 0.005714285714285714,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005714285714285714,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005714285714285714,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005714285714285714,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005714285714285714,
                "tf.range(start)": 0.011428571428571429,
                "tf.range(start, limit, delta)": 0.005714285714285714,
                "tf.reduce_any(input_tensor, axis)": 0.005714285714285714,
                "tf.reduce_all(input_tensor, axis)": 0.005714285714285714,
                "tf.reduce_max(input_tensor)": 0.005714285714285714,
                "tf.reduce_max(input_tensor, axis)": 0.005714285714285714,
                "tf.reduce_mean(input_tensor)": 0.005714285714285714,
                "tf.reduce_mean(input_tensor, axis)": 0.005714285714285714,
                "tf.reduce_min(input_tensor)": 0.005714285714285714,
                "tf.reduce_min(input_tensor, axis)": 0.005714285714285714,
                "tf.reduce_prod(input_tensor, axis)": 0.005714285714285714,
                "tf.reduce_sum(input_tensor)": 0.005714285714285714,
                "tf.reduce_sum(input_tensor, axis)": 0.005714285714285714,
                "tf.repeat(input, repeats)": 0.005714285714285714,
                "tf.repeat(input, repeats, axis)": 0.005714285714285714,
                "tf.reshape(tensor, shape)": 0.005714285714285714,
                "tf.reverse(tensor, axis)": 0.005714285714285714,
                "tf.roll(input, shift, axis)": 0.005714285714285714,
                "tf.round(x)": 0.005714285714285714,
                "tf.scatter_nd(indices, updates, shape)": 0.005714285714285714,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005714285714285714,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005714285714285714,
                "tf.sequence_mask(lengths)": 0.005714285714285714,
                "tf.sequence_mask(lengths, maxlen)": 0.005714285714285714,
                "tf.shape(input)": 0.011428571428571429,
                "tf.sign(x)": 0.005714285714285714,
                "tf.sort(values, axis)": 0.005714285714285714,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005714285714285714,
                "tf.sqrt(x)": 0.005714285714285714,
                "tf.square(x)": 0.005714285714285714,
                "tf.squeeze(input)": 0.011428571428571429,
                "tf.squeeze(input, axis)": 0.005714285714285714,
                "tf.stack(values, axis)": 0.011428571428571429,
                "tf.subtract(x, y)": 0.005714285714285714,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005714285714285714,
                "tf.tensordot(a, b, axes)": 0.005714285714285714,
                "tf.tile(input, multiples)": 0.005714285714285714,
                "tf.transpose(a)": 0.005714285714285714,
                "tf.transpose(a, perm)": 0.005714285714285714,
                "tf.unique_with_counts(x)": 0.005714285714285714,
                "tf.unstack(value, axis)": 0.005714285714285714,
                "tf.where(condition)": 0.005714285714285714,
                "tf.where(condition, x, y)": 0.005714285714285714,
                "tf.zeros(shape)": 0.005714285714285714,
                "tf.zeros_like(input)": 0.005714285714285714,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005714285714285714,
                "tf.sparse.add(a, b)": 0.005714285714285714,
                "tf.sparse.concat(axis, sp_inputs)": 0.005714285714285714,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005714285714285714,
                "tf.sparse.from_dense(tensor)": 0.005714285714285714,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005714285714285714,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005714285714285714,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005714285714285714,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005714285714285714,
                "tf.sparse.reset_shape(sp_input)": 0.005714285714285714,
                "tf.sparse.reshape(sp_input, shape)": 0.005714285714285714,
                "tf.sparse.retain(sp_input, to_retain)": 0.005714285714285714,
                "tf.sparse.slice(sp_input, start, size)": 0.005714285714285714,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005714285714285714,
                "tf.sparse.to_dense(sp_input)": 0.005714285714285714,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005714285714285714,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005714285714285714,
                "tf.sparse.transpose(sp_input)": 0.005714285714285714,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005714285714285714,
                "IndexingOperation": 0.011428571428571429,
                "PairCreationOperation": 0.005714285714285714,
                "SingletonTupleCreationOperation": 0.005714285714285714,
                "SlicingAxis0BothOperation": 0.005714285714285714,
                "SlicingAxis0LeftOperation": 0.005714285714285714,
                "SlicingAxis0RightOperation": 0.005714285714285714,
                "SlicingAxis1BothOperation": 0.005714285714285714,
                "SlicingAxis1LeftOperation": 0.005714285714285714,
                "SlicingAxis1RightOperation": 0.005714285714285714,
                "TripleCreationOperation": 0.005714285714285714
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 3,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 4,
                "tf.gather_nd(params, indices)": 6,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 6,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 6,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 6,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 6,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 6,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "stackoverflow_29",
        "completions": [
            "\ndef place_values_into_buckets(values):\n    value_range = tf.constant([-1.0, 1.0], dtype=tf.float32)\n    nbins = tf.constant(10, dtype=tf.int32)\n    bin_indices = tf.histogram_fixed_width_bins(values, value_range, nbins)\n    return tf.reduce_max(bin_indices)\n\nvalues = tf.constant([-1.0, -0.8, -0.6, -0.4, -0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0], dtype=tf.float32)\n\nvalues = tf.constant([0.1, -10, -0.1, 1.1, 0.41], dtype=tf.float32)\n",
            "\ndef find_max_bin_index(values):\n    bin_indices = tf.histogram_fixed_width_bins(values, value_range=[-1, 1], nbins=10)\n    max_bin_index = tf.reduce_max(bin_indices)\n    return max_bin_index.numpy()\n\n",
            "\ndef bucket_values(values):\n    values = tf.constant(values)\n    bin_indices = tf.histogram_fixed_width_bins(values, value_range=[-1.0, 1.0], nbins=10)\n    unique_bins = tf.unique_with_counts(bin_indices).count\n    return unique_bins.numpy()\n",
            "\ndef place_values_into_buckets(values):\n    # Define the bucket boundaries\n    bucket_boundaries = tf.constant([-1.0, -0.5, 0.0, 0.5, 1.0], dtype=tf.float32)\n\n    # Compute the bin indices for each value in the input\n    bin_indices = tf.histogram_fixed_width_bins(values, tf.range(tf.reduce_min(bucket_boundaries), tf.reduce_max(bucket_boundaries), delta=0.5), len(bucket_boundaries) - 1)\n\n    # Compute the sum of all bin indices\n    output = tf.reduce_sum(bin_indices)\n\n    return output\n",
            "\ndef bucket_indices(values):\n    values_tensor = tf.constant(values, dtype=tf.float32)\n    value_range = tf.constant([-1.0, 1.0], dtype=tf.float32)\n    nbins = tf.constant(10, dtype=tf.int32)\n    bins = tf.histogram_fixed_width_bins(values_tensor, value_range, nbins)\n    _, _, count = tf.unique_with_counts(bins)\n    return count[0].numpy()\n\n",
            "\ndef bucket_values(values):\n  boundaries = tf.constant([-1.0, -0.5, 0.0, 0.5, 1.0])\n  input_values = tf.constant(values)\n  bin_indices = tf.histogram_fixed_width_bins(input_values, boundaries, dtype=tf.dtypes.int32)\n  return tf.size(tf.unique(bin_indices).y)\n\n",
            "\ndef max_bucket_count(values):\n    # Define the bucket boundaries\n    boundaries = [-1.0, -0.5, 0.0, 0.5, 1.0]\n    \n    # Compute the bucket indices for each value\n    bucket_indices = tf.histogram_fixed_width_bins(values, boundaries, dtype=tf.int32)\n    \n    # Count the frequency of each bucket index\n    bucket_counts = tf.math.bincount(bucket_indices)\n    \n    # Find the maximum count\n    max_count = tf.reduce_max(bucket_counts)\n    \n    return max_count\n\nvalues = tf.constant([-1.0, -0.8, -0.6, -0.4, -0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0])\n\nvalues = tf.constant([0.1, -10, -0.1, 1.1, 0.41])\n",
            "\ndef bucket_indices(input_list):\n    input_tensor = tf.constant(input_list, dtype=tf.float32)\n    value_range = [-1.0, 1.0]\n    bins = tf.histogram_fixed_width_bins(input_tensor, value_range, nbins=10)\n    max_bin = tf.reduce_max(bins)\n    return max_bin\n\n",
            "\ndef bucketize_values(values):\n    boundaries = tf.constant([-1.0, -0.8, -0.6, -0.4, -0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0])\n    bucket_indices = tf.raw_ops.Bucketize(input=values, boundaries=boundaries)\n    return tf.reduce_sum(bucket_indices)\n\nvalues = tf.constant([-1.0, -0.8, -0.6, -0.4, -0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0])\n\nvalues = tf.constant([0.1, -10, -0.1, 1.1, 0.41])\n",
            "\ndef place_values_into_buckets(values):\n    bucket_boundaries = tf.constant([-1.0, -0.8, -0.6, -0.4, -0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0])\n    indices = tf.histogram_fixed_width_bins(values, bucket_boundaries)\n    return tf.reduce_max(indices)\n\nvalues = tf.constant([-1.0, -0.8, -0.6, -0.4, -0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0])\n\nvalues = tf.constant([0.1, -10, -0.1, 1.1, 0.41])\n"
        ],
        "target-program": "tf.searchsorted(in1, in2, side='left')",
        "description": "place continuous values into buckets given bucket boundaries",
        "tf_operators": {
            "tf.histogram_fixed_width_bins": 9,
            "tf.reduce_max": 6,
            "tf.int32": 3,
            "tf.float32": 4,
            "tf.constant": 9,
            "tf.unique_with_counts": 2,
            "tf.reduce_min": 1,
            "tf.range": 1,
            "tf.reduce_sum": 2,
            "tf.size": 1,
            "tf.dtypes.int32": 1,
            "tf.unique": 1,
            "tf.math.bincount": 1,
            "tf.raw_ops.Bucketize": 1
        },
        "coverage_percentage": 0.0,
        "total_in_target": 1,
        "total_covered": 0,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.006024096385542169,
                "tf.add(x, y)": 0.006024096385542169,
                "tf.add_n(inputs)": 0.006024096385542169,
                "tf.argmax(input, axis)": 0.006024096385542169,
                "tf.argmin(input, axis)": 0.006024096385542169,
                "tf.argsort(values, axis, stable=True)": 0.006024096385542169,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.006024096385542169,
                "tf.boolean_mask(tensor, mask)": 0.006024096385542169,
                "tf.broadcast_to(input, shape)": 0.006024096385542169,
                "tf.cast(x, dtype)": 0.006024096385542169,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.006024096385542169,
                "tf.concat(values, axis)": 0.006024096385542169,
                "tf.constant(value)": 0.07228915662650602,
                "tf.constant(value, dtype)": 0.006024096385542169,
                "tf.divide(x, y)": 0.006024096385542169,
                "tf.equal(x, y)": 0.006024096385542169,
                "tf.exp(x)": 0.006024096385542169,
                "tf.expand_dims(input, axis)": 0.006024096385542169,
                "tf.eye(num_rows)": 0.006024096385542169,
                "tf.eye(num_rows, num_columns)": 0.006024096385542169,
                "tf.eye(num_rows, dtype)": 0.006024096385542169,
                "tf.fill(dims, value)": 0.006024096385542169,
                "tf.gather(params, indices)": 0.006024096385542169,
                "tf.gather(params, indices, axis, batch_dims)": 0.006024096385542169,
                "tf.gather_nd(params, indices)": 0.006024096385542169,
                "tf.gather_nd(params, indices, batch_dims)": 0.006024096385542169,
                "tf.greater(x, y)": 0.006024096385542169,
                "tf.greater_equal(x, y)": 0.006024096385542169,
                "tf.math.bincount(arr)": 0.006024096385542169,
                "tf.math.ceil(x)": 0.006024096385542169,
                "tf.math.count_nonzero(input)": 0.006024096385542169,
                "tf.math.count_nonzero(input, axis)": 0.006024096385542169,
                "tf.math.cumsum(x, axis)": 0.006024096385542169,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.006024096385542169,
                "tf.math.divide_no_nan(x, y)": 0.006024096385542169,
                "tf.math.floor(x)": 0.006024096385542169,
                "tf.math.log(x)": 0.006024096385542169,
                "tf.math.logical_and(x, y)": 0.006024096385542169,
                "tf.math.logical_not(x)": 0.006024096385542169,
                "tf.math.logical_or(x, y)": 0.006024096385542169,
                "tf.math.logical_xor(x, y)": 0.006024096385542169,
                "tf.math.negative(x)": 0.006024096385542169,
                "tf.math.reciprocal(x)": 0.006024096385542169,
                "tf.math.reciprocal_no_nan(x)": 0.006024096385542169,
                "tf.math.segment_max(data, segment_ids)": 0.006024096385542169,
                "tf.math.segment_mean(data, segment_ids)": 0.006024096385542169,
                "tf.math.segment_min(data, segment_ids)": 0.006024096385542169,
                "tf.math.segment_prod(data, segment_ids)": 0.006024096385542169,
                "tf.math.segment_sum(data, segment_ids)": 0.006024096385542169,
                "tf.math.squared_difference(x, y)": 0.006024096385542169,
                "tf.math.top_k(input, k)": 0.006024096385542169,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.006024096385542169,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.006024096385542169,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.006024096385542169,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.006024096385542169,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.006024096385542169,
                "tf.matmul(a, b)": 0.006024096385542169,
                "tf.maximum(x, y)": 0.006024096385542169,
                "tf.minimum(x, y)": 0.006024096385542169,
                "tf.multiply(x, y)": 0.006024096385542169,
                "tf.not_equal(x, y)": 0.006024096385542169,
                "tf.one_hot(indices, depth)": 0.006024096385542169,
                "tf.ones(shape)": 0.006024096385542169,
                "tf.ones_like(input)": 0.006024096385542169,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.006024096385542169,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.006024096385542169,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.006024096385542169,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.006024096385542169,
                "tf.range(start)": 0.006024096385542169,
                "tf.range(start, limit, delta)": 0.006024096385542169,
                "tf.reduce_any(input_tensor, axis)": 0.006024096385542169,
                "tf.reduce_all(input_tensor, axis)": 0.006024096385542169,
                "tf.reduce_max(input_tensor)": 0.04216867469879518,
                "tf.reduce_max(input_tensor, axis)": 0.006024096385542169,
                "tf.reduce_mean(input_tensor)": 0.006024096385542169,
                "tf.reduce_mean(input_tensor, axis)": 0.006024096385542169,
                "tf.reduce_min(input_tensor)": 0.012048192771084338,
                "tf.reduce_min(input_tensor, axis)": 0.006024096385542169,
                "tf.reduce_prod(input_tensor, axis)": 0.006024096385542169,
                "tf.reduce_sum(input_tensor)": 0.018072289156626505,
                "tf.reduce_sum(input_tensor, axis)": 0.006024096385542169,
                "tf.repeat(input, repeats)": 0.006024096385542169,
                "tf.repeat(input, repeats, axis)": 0.006024096385542169,
                "tf.reshape(tensor, shape)": 0.006024096385542169,
                "tf.reverse(tensor, axis)": 0.006024096385542169,
                "tf.roll(input, shift, axis)": 0.006024096385542169,
                "tf.round(x)": 0.006024096385542169,
                "tf.scatter_nd(indices, updates, shape)": 0.006024096385542169,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.006024096385542169,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.006024096385542169,
                "tf.sequence_mask(lengths)": 0.006024096385542169,
                "tf.sequence_mask(lengths, maxlen)": 0.006024096385542169,
                "tf.shape(input)": 0.006024096385542169,
                "tf.sign(x)": 0.006024096385542169,
                "tf.sort(values, axis)": 0.006024096385542169,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.006024096385542169,
                "tf.sqrt(x)": 0.006024096385542169,
                "tf.square(x)": 0.006024096385542169,
                "tf.squeeze(input)": 0.006024096385542169,
                "tf.squeeze(input, axis)": 0.006024096385542169,
                "tf.stack(values, axis)": 0.006024096385542169,
                "tf.subtract(x, y)": 0.006024096385542169,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.006024096385542169,
                "tf.tensordot(a, b, axes)": 0.006024096385542169,
                "tf.tile(input, multiples)": 0.006024096385542169,
                "tf.transpose(a)": 0.006024096385542169,
                "tf.transpose(a, perm)": 0.006024096385542169,
                "tf.unique_with_counts(x)": 0.018072289156626505,
                "tf.unstack(value, axis)": 0.006024096385542169,
                "tf.where(condition)": 0.006024096385542169,
                "tf.where(condition, x, y)": 0.006024096385542169,
                "tf.zeros(shape)": 0.006024096385542169,
                "tf.zeros_like(input)": 0.006024096385542169,
                "tf.SparseTensor(indices, values, dense_shape)": 0.006024096385542169,
                "tf.sparse.add(a, b)": 0.006024096385542169,
                "tf.sparse.concat(axis, sp_inputs)": 0.006024096385542169,
                "tf.sparse.expand_dims(sp_input, axis)": 0.006024096385542169,
                "tf.sparse.from_dense(tensor)": 0.006024096385542169,
                "tf.sparse.maximum(sp_a, sp_b)": 0.006024096385542169,
                "tf.sparse.minimum(sp_a, sp_b)": 0.006024096385542169,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.006024096385542169,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.006024096385542169,
                "tf.sparse.reset_shape(sp_input)": 0.006024096385542169,
                "tf.sparse.reshape(sp_input, shape)": 0.006024096385542169,
                "tf.sparse.retain(sp_input, to_retain)": 0.006024096385542169,
                "tf.sparse.slice(sp_input, start, size)": 0.006024096385542169,
                "tf.sparse.split(sp_input, num_split, axis)": 0.006024096385542169,
                "tf.sparse.to_dense(sp_input)": 0.006024096385542169,
                "tf.sparse.to_dense(sp_input, default_value)": 0.006024096385542169,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.006024096385542169,
                "tf.sparse.transpose(sp_input)": 0.006024096385542169,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.006024096385542169,
                "IndexingOperation": 0.012048192771084338,
                "PairCreationOperation": 0.006024096385542169,
                "SingletonTupleCreationOperation": 0.006024096385542169,
                "SlicingAxis0BothOperation": 0.006024096385542169,
                "SlicingAxis0LeftOperation": 0.006024096385542169,
                "SlicingAxis0RightOperation": 0.006024096385542169,
                "SlicingAxis1BothOperation": 0.006024096385542169,
                "SlicingAxis1LeftOperation": 0.006024096385542169,
                "SlicingAxis1RightOperation": 0.006024096385542169,
                "TripleCreationOperation": 0.012048192771084338
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 5,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 6,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 6,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 6,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 6,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 6
            }
        }
    },
    {
        "task_id": "stackoverflow_30",
        "completions": [
            "\ndef compute_euclidean_distance(tensor1, tensor2):\n    tensor1 = tf.convert_to_tensor(tensor1, dtype=tf.float32)\n    tensor2 = tf.convert_to_tensor(tensor2, dtype=tf.float32)\n    return tf.norm(tensor1-tensor2)\n\n",
            "\ndef compute_euclidean_distance(tensor1, tensor2):\n    return tf.norm(tensor1 - tensor2)\n",
            "euclidean_distance = tf.math.sqrt(tf.reduce_sum(tf.math.square(tf.subtract(tensor1, tensor2)), axis=1))",
            "\ndef euclidean_distance(tensor1, tensor2):\n    difference = tf.subtract(tensor1, tensor2)\n    square_difference = tf.square(difference)\n    sum_square_difference = tf.reduce_sum(square_difference)\n    euclidean_distance = tf.sqrt(sum_square_difference)\n    return euclidean_distance\n",
            "\ndef euclidean_distance(tensor1, tensor2):\n    difference = tf.subtract(tensor1, tensor2)\n    square_difference = tf.square(difference)\n    sum_square_difference = tf.reduce_sum(square_difference)\n    distance = tf.sqrt(sum_square_difference)\n    return distance\n",
            "\ndef euclidean_distance(tensor1, tensor2):\n    difference = tf.subtract(tensor1, tensor2)\n    return tf.norm(difference)\n",
            "\ntensor1 = tf.constant([1, 2, 3], dtype=tf.float32)\ntensor2 = tf.constant([4, 5, 6], dtype=tf.float32)\n\neuclidean_distance = tf.norm(tensor1 - tensor2)\n",
            "\ndef euclidean_distance(tensor1, tensor2):\n    difference = tf.subtract(tensor1, tensor2)\n    square_difference = tf.square(difference)\n    sum_square_difference = tf.reduce_sum(square_difference)\n    distance = tf.sqrt(sum_square_difference)\n    return distance\n",
            "\ntensor1 = tf.constant([1.2, 3.4])\ntensor2 = tf.constant([5.6, 6.8])\n\nsquared_diff = tf.square(tf.subtract(tensor1, tensor2))\n\neuclidean_distance = tf.sqrt(tf.reduce_sum(squared_diff))\n\n",
            "\na = tf.constant([1.0, 2.0, 3.0])\nb = tf.constant([4.0, 5.0, 6.0])\n\ndist = tf.norm(a-b)\n\n"
        ],
        "target-program": "tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))",
        "description": "compute Euclidean distance between two tensors",
        "tf_operators": {
            "tf.norm": 5,
            "tf.convert_to_tensor": 1,
            "tf.float32": 2,
            "tf.square": 4,
            "tf.sqrt": 4,
            "tf.subtract": 5,
            "tf.reduce_sum": 4,
            "tf.constant": 3
        },
        "coverage_percentage": 80.0,
        "total_in_target": 5,
        "total_covered": 4,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.006097560975609756,
                "tf.add(x, y)": 0.006097560975609756,
                "tf.add_n(inputs)": 0.006097560975609756,
                "tf.argmax(input, axis)": 0.006097560975609756,
                "tf.argmin(input, axis)": 0.006097560975609756,
                "tf.argsort(values, axis, stable=True)": 0.006097560975609756,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.006097560975609756,
                "tf.boolean_mask(tensor, mask)": 0.006097560975609756,
                "tf.broadcast_to(input, shape)": 0.006097560975609756,
                "tf.cast(x, dtype)": 0.006097560975609756,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.006097560975609756,
                "tf.concat(values, axis)": 0.006097560975609756,
                "tf.constant(value)": 0.03048780487804878,
                "tf.constant(value, dtype)": 0.006097560975609756,
                "tf.divide(x, y)": 0.006097560975609756,
                "tf.equal(x, y)": 0.006097560975609756,
                "tf.exp(x)": 0.006097560975609756,
                "tf.expand_dims(input, axis)": 0.006097560975609756,
                "tf.eye(num_rows)": 0.006097560975609756,
                "tf.eye(num_rows, num_columns)": 0.006097560975609756,
                "tf.eye(num_rows, dtype)": 0.006097560975609756,
                "tf.fill(dims, value)": 0.006097560975609756,
                "tf.gather(params, indices)": 0.006097560975609756,
                "tf.gather(params, indices, axis, batch_dims)": 0.006097560975609756,
                "tf.gather_nd(params, indices)": 0.006097560975609756,
                "tf.gather_nd(params, indices, batch_dims)": 0.006097560975609756,
                "tf.greater(x, y)": 0.006097560975609756,
                "tf.greater_equal(x, y)": 0.006097560975609756,
                "tf.math.bincount(arr)": 0.006097560975609756,
                "tf.math.ceil(x)": 0.006097560975609756,
                "tf.math.count_nonzero(input)": 0.006097560975609756,
                "tf.math.count_nonzero(input, axis)": 0.006097560975609756,
                "tf.math.cumsum(x, axis)": 0.006097560975609756,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.006097560975609756,
                "tf.math.divide_no_nan(x, y)": 0.006097560975609756,
                "tf.math.floor(x)": 0.006097560975609756,
                "tf.math.log(x)": 0.006097560975609756,
                "tf.math.logical_and(x, y)": 0.006097560975609756,
                "tf.math.logical_not(x)": 0.006097560975609756,
                "tf.math.logical_or(x, y)": 0.006097560975609756,
                "tf.math.logical_xor(x, y)": 0.006097560975609756,
                "tf.math.negative(x)": 0.006097560975609756,
                "tf.math.reciprocal(x)": 0.006097560975609756,
                "tf.math.reciprocal_no_nan(x)": 0.006097560975609756,
                "tf.math.segment_max(data, segment_ids)": 0.006097560975609756,
                "tf.math.segment_mean(data, segment_ids)": 0.006097560975609756,
                "tf.math.segment_min(data, segment_ids)": 0.006097560975609756,
                "tf.math.segment_prod(data, segment_ids)": 0.006097560975609756,
                "tf.math.segment_sum(data, segment_ids)": 0.006097560975609756,
                "tf.math.squared_difference(x, y)": 0.006097560975609756,
                "tf.math.top_k(input, k)": 0.006097560975609756,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.006097560975609756,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.006097560975609756,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.006097560975609756,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.006097560975609756,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.006097560975609756,
                "tf.matmul(a, b)": 0.006097560975609756,
                "tf.maximum(x, y)": 0.006097560975609756,
                "tf.minimum(x, y)": 0.006097560975609756,
                "tf.multiply(x, y)": 0.006097560975609756,
                "tf.not_equal(x, y)": 0.006097560975609756,
                "tf.one_hot(indices, depth)": 0.006097560975609756,
                "tf.ones(shape)": 0.006097560975609756,
                "tf.ones_like(input)": 0.006097560975609756,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.006097560975609756,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.006097560975609756,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.006097560975609756,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.006097560975609756,
                "tf.range(start)": 0.006097560975609756,
                "tf.range(start, limit, delta)": 0.006097560975609756,
                "tf.reduce_any(input_tensor, axis)": 0.006097560975609756,
                "tf.reduce_all(input_tensor, axis)": 0.006097560975609756,
                "tf.reduce_max(input_tensor)": 0.006097560975609756,
                "tf.reduce_max(input_tensor, axis)": 0.006097560975609756,
                "tf.reduce_mean(input_tensor)": 0.006097560975609756,
                "tf.reduce_mean(input_tensor, axis)": 0.006097560975609756,
                "tf.reduce_min(input_tensor)": 0.006097560975609756,
                "tf.reduce_min(input_tensor, axis)": 0.006097560975609756,
                "tf.reduce_prod(input_tensor, axis)": 0.006097560975609756,
                "tf.reduce_sum(input_tensor)": 0.03048780487804878,
                "tf.reduce_sum(input_tensor, axis)": 0.006097560975609756,
                "tf.repeat(input, repeats)": 0.006097560975609756,
                "tf.repeat(input, repeats, axis)": 0.006097560975609756,
                "tf.reshape(tensor, shape)": 0.006097560975609756,
                "tf.reverse(tensor, axis)": 0.006097560975609756,
                "tf.roll(input, shift, axis)": 0.006097560975609756,
                "tf.round(x)": 0.006097560975609756,
                "tf.scatter_nd(indices, updates, shape)": 0.006097560975609756,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.006097560975609756,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.006097560975609756,
                "tf.sequence_mask(lengths)": 0.006097560975609756,
                "tf.sequence_mask(lengths, maxlen)": 0.006097560975609756,
                "tf.shape(input)": 0.006097560975609756,
                "tf.sign(x)": 0.006097560975609756,
                "tf.sort(values, axis)": 0.006097560975609756,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.006097560975609756,
                "tf.sqrt(x)": 0.03048780487804878,
                "tf.square(x)": 0.03048780487804878,
                "tf.squeeze(input)": 0.006097560975609756,
                "tf.squeeze(input, axis)": 0.006097560975609756,
                "tf.stack(values, axis)": 0.006097560975609756,
                "tf.subtract(x, y)": 0.042682926829268296,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.006097560975609756,
                "tf.tensordot(a, b, axes)": 0.006097560975609756,
                "tf.tile(input, multiples)": 0.006097560975609756,
                "tf.transpose(a)": 0.006097560975609756,
                "tf.transpose(a, perm)": 0.006097560975609756,
                "tf.unique_with_counts(x)": 0.006097560975609756,
                "tf.unstack(value, axis)": 0.006097560975609756,
                "tf.where(condition)": 0.006097560975609756,
                "tf.where(condition, x, y)": 0.006097560975609756,
                "tf.zeros(shape)": 0.006097560975609756,
                "tf.zeros_like(input)": 0.006097560975609756,
                "tf.SparseTensor(indices, values, dense_shape)": 0.006097560975609756,
                "tf.sparse.add(a, b)": 0.006097560975609756,
                "tf.sparse.concat(axis, sp_inputs)": 0.006097560975609756,
                "tf.sparse.expand_dims(sp_input, axis)": 0.006097560975609756,
                "tf.sparse.from_dense(tensor)": 0.006097560975609756,
                "tf.sparse.maximum(sp_a, sp_b)": 0.006097560975609756,
                "tf.sparse.minimum(sp_a, sp_b)": 0.006097560975609756,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.006097560975609756,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.006097560975609756,
                "tf.sparse.reset_shape(sp_input)": 0.006097560975609756,
                "tf.sparse.reshape(sp_input, shape)": 0.006097560975609756,
                "tf.sparse.retain(sp_input, to_retain)": 0.006097560975609756,
                "tf.sparse.slice(sp_input, start, size)": 0.006097560975609756,
                "tf.sparse.split(sp_input, num_split, axis)": 0.006097560975609756,
                "tf.sparse.to_dense(sp_input)": 0.006097560975609756,
                "tf.sparse.to_dense(sp_input, default_value)": 0.006097560975609756,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.006097560975609756,
                "tf.sparse.transpose(sp_input)": 0.006097560975609756,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.006097560975609756,
                "IndexingOperation": 0.006097560975609756,
                "PairCreationOperation": 0.006097560975609756,
                "SingletonTupleCreationOperation": 0.006097560975609756,
                "SlicingAxis0BothOperation": 0.006097560975609756,
                "SlicingAxis0LeftOperation": 0.006097560975609756,
                "SlicingAxis0RightOperation": 0.006097560975609756,
                "SlicingAxis1BothOperation": 0.006097560975609756,
                "SlicingAxis1LeftOperation": 0.006097560975609756,
                "SlicingAxis1RightOperation": 0.006097560975609756,
                "TripleCreationOperation": 0.006097560975609756
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 5,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 5,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 5,
                "tf.square(x)": 5,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 5,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "stackoverflow_31",
        "completions": [
            "mse = tf.reduce_mean(tf.square(tf.sparse.to_dense(sparse_tensor) - dense_tensor))",
            "b_dense = tf.sparse.to_dense(b)\nsquared_error = tf.math.squared_difference(a, b_dense)\n",
            "total_squared_error = tf.reduce_sum(tf.square(tf.sparse.to_dense(sparse_tensor) - dense_tensor))",
            "\ntensor1 = tf.constant([1, 2, 3, 4, 5], dtype=tf.float32)\ntensor2 = tf.constant([5, 4, 3, 2, 1], dtype=tf.float32)\n\ndiff = tf.subtract(tensor1, tensor2)\n\nsquared_error = tf.square(diff)\n\n",
            "total_squared_error = tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(sparse_tensor), dense_tensor))",
            "squared_error = tf.square(tf.sparse.to_dense(sparse_tensor, default_value=0) - dense_tensor)\ntotal_squared_error = tf.reduce_sum(squared_error, axis=None)",
            "squared_error = tf.square(tf.sparse.to_dense(sparse_tensor) - dense_tensor)\ntotal_squared_error = tf.reduce_sum(squared_error)",
            "dense_version = tf.sparse.to_dense(sparse_tensor)\ndifference = dense_version - dense_tensor\nsquared = tf.square(difference)\ntotal_error = tf.reduce_sum(squared)",
            "dense_tensor_from_sparse = tf.sparse.to_dense(sparse_tensor)\nsquared_error = tf.math.squared_difference(dense_tensor_from_sparse, dense_tensor)\ntotal_squared_error = tf.reduce_sum(squared_error)",
            "dense_tensor_from_sparse = tf.sparse.to_dense(sparse_tensor)\nsquared_error = tf.square(dense_tensor - dense_tensor_from_sparse)\ntotal_squared_error = tf.reduce_sum(squared_error)"
        ],
        "target-program": "tf.reduce_sum(tf.square(tf.subtract(in2, tf.sparse.to_dense(in1))))",
        "description": "squared error between two tensors, one being a sparse tensor",
        "tf_operators": {
            "tf.sparse.to_dense": 1,
            "tf.math.squared_difference": 1,
            "tf.subtract": 1,
            "tf.square": 1,
            "tf.float32": 1,
            "tf.constant": 1
        },
        "coverage_percentage": 75.0,
        "total_in_target": 4,
        "total_covered": 3,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.006369426751592357,
                "tf.add(x, y)": 0.006369426751592357,
                "tf.add_n(inputs)": 0.006369426751592357,
                "tf.argmax(input, axis)": 0.006369426751592357,
                "tf.argmin(input, axis)": 0.006369426751592357,
                "tf.argsort(values, axis, stable=True)": 0.006369426751592357,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.006369426751592357,
                "tf.boolean_mask(tensor, mask)": 0.006369426751592357,
                "tf.broadcast_to(input, shape)": 0.006369426751592357,
                "tf.cast(x, dtype)": 0.006369426751592357,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.006369426751592357,
                "tf.concat(values, axis)": 0.006369426751592357,
                "tf.constant(value)": 0.006369426751592357,
                "tf.constant(value, dtype)": 0.006369426751592357,
                "tf.divide(x, y)": 0.006369426751592357,
                "tf.equal(x, y)": 0.006369426751592357,
                "tf.exp(x)": 0.006369426751592357,
                "tf.expand_dims(input, axis)": 0.006369426751592357,
                "tf.eye(num_rows)": 0.006369426751592357,
                "tf.eye(num_rows, num_columns)": 0.006369426751592357,
                "tf.eye(num_rows, dtype)": 0.006369426751592357,
                "tf.fill(dims, value)": 0.006369426751592357,
                "tf.gather(params, indices)": 0.006369426751592357,
                "tf.gather(params, indices, axis, batch_dims)": 0.006369426751592357,
                "tf.gather_nd(params, indices)": 0.006369426751592357,
                "tf.gather_nd(params, indices, batch_dims)": 0.006369426751592357,
                "tf.greater(x, y)": 0.006369426751592357,
                "tf.greater_equal(x, y)": 0.006369426751592357,
                "tf.math.bincount(arr)": 0.006369426751592357,
                "tf.math.ceil(x)": 0.006369426751592357,
                "tf.math.count_nonzero(input)": 0.006369426751592357,
                "tf.math.count_nonzero(input, axis)": 0.006369426751592357,
                "tf.math.cumsum(x, axis)": 0.006369426751592357,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.006369426751592357,
                "tf.math.divide_no_nan(x, y)": 0.006369426751592357,
                "tf.math.floor(x)": 0.006369426751592357,
                "tf.math.log(x)": 0.006369426751592357,
                "tf.math.logical_and(x, y)": 0.006369426751592357,
                "tf.math.logical_not(x)": 0.006369426751592357,
                "tf.math.logical_or(x, y)": 0.006369426751592357,
                "tf.math.logical_xor(x, y)": 0.006369426751592357,
                "tf.math.negative(x)": 0.006369426751592357,
                "tf.math.reciprocal(x)": 0.006369426751592357,
                "tf.math.reciprocal_no_nan(x)": 0.006369426751592357,
                "tf.math.segment_max(data, segment_ids)": 0.006369426751592357,
                "tf.math.segment_mean(data, segment_ids)": 0.006369426751592357,
                "tf.math.segment_min(data, segment_ids)": 0.006369426751592357,
                "tf.math.segment_prod(data, segment_ids)": 0.006369426751592357,
                "tf.math.segment_sum(data, segment_ids)": 0.006369426751592357,
                "tf.math.squared_difference(x, y)": 0.006369426751592357,
                "tf.math.top_k(input, k)": 0.006369426751592357,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.006369426751592357,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.006369426751592357,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.006369426751592357,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.006369426751592357,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.006369426751592357,
                "tf.matmul(a, b)": 0.006369426751592357,
                "tf.maximum(x, y)": 0.006369426751592357,
                "tf.minimum(x, y)": 0.006369426751592357,
                "tf.multiply(x, y)": 0.006369426751592357,
                "tf.not_equal(x, y)": 0.006369426751592357,
                "tf.one_hot(indices, depth)": 0.006369426751592357,
                "tf.ones(shape)": 0.006369426751592357,
                "tf.ones_like(input)": 0.006369426751592357,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.006369426751592357,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.006369426751592357,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.006369426751592357,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.006369426751592357,
                "tf.range(start)": 0.006369426751592357,
                "tf.range(start, limit, delta)": 0.006369426751592357,
                "tf.reduce_any(input_tensor, axis)": 0.006369426751592357,
                "tf.reduce_all(input_tensor, axis)": 0.006369426751592357,
                "tf.reduce_max(input_tensor)": 0.006369426751592357,
                "tf.reduce_max(input_tensor, axis)": 0.006369426751592357,
                "tf.reduce_mean(input_tensor)": 0.012738853503184714,
                "tf.reduce_mean(input_tensor, axis)": 0.006369426751592357,
                "tf.reduce_min(input_tensor)": 0.006369426751592357,
                "tf.reduce_min(input_tensor, axis)": 0.006369426751592357,
                "tf.reduce_prod(input_tensor, axis)": 0.006369426751592357,
                "tf.reduce_sum(input_tensor)": 0.044585987261146494,
                "tf.reduce_sum(input_tensor, axis)": 0.006369426751592357,
                "tf.repeat(input, repeats)": 0.006369426751592357,
                "tf.repeat(input, repeats, axis)": 0.006369426751592357,
                "tf.reshape(tensor, shape)": 0.006369426751592357,
                "tf.reverse(tensor, axis)": 0.006369426751592357,
                "tf.roll(input, shift, axis)": 0.006369426751592357,
                "tf.round(x)": 0.006369426751592357,
                "tf.scatter_nd(indices, updates, shape)": 0.006369426751592357,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.006369426751592357,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.006369426751592357,
                "tf.sequence_mask(lengths)": 0.006369426751592357,
                "tf.sequence_mask(lengths, maxlen)": 0.006369426751592357,
                "tf.shape(input)": 0.006369426751592357,
                "tf.sign(x)": 0.006369426751592357,
                "tf.sort(values, axis)": 0.006369426751592357,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.006369426751592357,
                "tf.sqrt(x)": 0.006369426751592357,
                "tf.square(x)": 0.050955414012738856,
                "tf.squeeze(input)": 0.006369426751592357,
                "tf.squeeze(input, axis)": 0.006369426751592357,
                "tf.stack(values, axis)": 0.006369426751592357,
                "tf.subtract(x, y)": 0.012738853503184714,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.006369426751592357,
                "tf.tensordot(a, b, axes)": 0.006369426751592357,
                "tf.tile(input, multiples)": 0.006369426751592357,
                "tf.transpose(a)": 0.006369426751592357,
                "tf.transpose(a, perm)": 0.006369426751592357,
                "tf.unique_with_counts(x)": 0.006369426751592357,
                "tf.unstack(value, axis)": 0.006369426751592357,
                "tf.where(condition)": 0.006369426751592357,
                "tf.where(condition, x, y)": 0.006369426751592357,
                "tf.zeros(shape)": 0.006369426751592357,
                "tf.zeros_like(input)": 0.006369426751592357,
                "tf.SparseTensor(indices, values, dense_shape)": 0.006369426751592357,
                "tf.sparse.add(a, b)": 0.006369426751592357,
                "tf.sparse.concat(axis, sp_inputs)": 0.006369426751592357,
                "tf.sparse.expand_dims(sp_input, axis)": 0.006369426751592357,
                "tf.sparse.from_dense(tensor)": 0.006369426751592357,
                "tf.sparse.maximum(sp_a, sp_b)": 0.006369426751592357,
                "tf.sparse.minimum(sp_a, sp_b)": 0.006369426751592357,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.006369426751592357,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.006369426751592357,
                "tf.sparse.reset_shape(sp_input)": 0.006369426751592357,
                "tf.sparse.reshape(sp_input, shape)": 0.006369426751592357,
                "tf.sparse.retain(sp_input, to_retain)": 0.006369426751592357,
                "tf.sparse.slice(sp_input, start, size)": 0.006369426751592357,
                "tf.sparse.split(sp_input, num_split, axis)": 0.006369426751592357,
                "tf.sparse.to_dense(sp_input)": 0.006369426751592357,
                "tf.sparse.to_dense(sp_input, default_value)": 0.006369426751592357,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.006369426751592357,
                "tf.sparse.transpose(sp_input)": 0.006369426751592357,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.006369426751592357,
                "IndexingOperation": 0.006369426751592357,
                "PairCreationOperation": 0.006369426751592357,
                "SingletonTupleCreationOperation": 0.006369426751592357,
                "SlicingAxis0BothOperation": 0.006369426751592357,
                "SlicingAxis0LeftOperation": 0.006369426751592357,
                "SlicingAxis0RightOperation": 0.006369426751592357,
                "SlicingAxis1BothOperation": 0.006369426751592357,
                "SlicingAxis1LeftOperation": 0.006369426751592357,
                "SlicingAxis1RightOperation": 0.006369426751592357,
                "TripleCreationOperation": 0.006369426751592357
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 7,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 6,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 4,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 4,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 6,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "stackoverflow_32",
        "completions": [
            "\ndata = [[0.1, 0.6, 0.2, 0.1], [0.3, 0.1, 0.4, 0.2], [0.2, 0.1, 0.2, 0.5]]\n\ntensor = tf.constant(data)\n\nweights = tf.range(tf.shape(tensor)[1], dtype=tensor.dtype)\n\nweighted_tensor = tf.multiply(tensor, weights)\n\nresult = tf.reduce_sum(weighted_tensor)\n\n",
            "\ndata = [[0.1, 0.6, 0.2, 0.1], [0.3, 0.1, 0.4, 0.2], [0.2, 0.1, 0.2, 0.5]]\n\ninput_tensor = tf.constant(data)\n\nweights = tf.range(tf.shape(input_tensor)[1])\n\nweighted_tensor = tf.multiply(input_tensor, tf.cast(weights, tf.float32))\n\nresult = tf.reduce_sum(weighted_tensor)\n\n",
            "\ndata = [[0.1, 0.6, 0.2, 0.1], [0.3, 0.1, 0.4, 0.2], [0.2, 0.1, 0.2, 0.5]]\n\ntensor = tf.constant(data)\n\nweights = tf.range(tf.shape(tensor)[1], dtype=tensor.dtype)\n\nweighted_sum = tf.reduce_sum(tensor * weights)\n\n",
            "\ndata = [[0.1, 0.6, 0.2, 0.1], [0.3, 0.1, 0.4, 0.2], [0.2, 0.1, 0.2, 0.5]]\n\ndata_tensor = tf.constant(data)\n\ncolumn_indices = tf.range(tf.shape(data_tensor)[1], dtype=data_tensor.dtype)\n\nweighted_data = tf.multiply(data_tensor, column_indices)\n\nresult = tf.reduce_sum(weighted_data)\n\n",
            "\ndata = [[0.1, 0.6, 0.2, 0.1], [0.3, 0.1, 0.4, 0.2], [0.2, 0.1, 0.2, 0.5]]\n\nmatrix = tf.constant(data)\n\nweights = tf.range(start=0, limit=tf.shape(matrix)[1])\n\nweighted_sum = tf.reduce_sum(matrix * tf.cast(weights, tf.float32))\n\nwith tf.Session() as sess:\n    result = sess.run(weighted_sum)\n\n",
            "\ndata = [[0.1, 0.6, 0.2, 0.1], [0.3, 0.1, 0.4, 0.2], [0.2, 0.1, 0.2, 0.5]]\n\ninput_tensor = tf.constant(data)\n\nweights = tf.range(tf.shape(input_tensor)[1], dtype=tf.float32)\n\nweighted_sum = tf.multiply(input_tensor, weights)\n\nresult = tf.reduce_sum(weighted_sum)\n\n",
            "\ndef weighted_sum(input):\n    tensor = tf.constant(input)\n    weights = tf.range(start=0, limit=tensor.shape[1], delta=1, dtype=tf.float32)\n    weighted_tensor = tf.multiply(tensor, weights)\n    result = tf.reduce_sum(weighted_tensor)\n    return result\n\ninput = [[0.1, 0.6, 0.2, 0.1], [0.3, 0.1, 0.4, 0.2], [0.2, 0.1, 0.2, 0.5]]\n",
            "\ndata = [[0.1, 0.6, 0.2, 0.1], [0.3, 0.1, 0.4, 0.2], [0.2, 0.1, 0.2, 0.5]]\n\ninput_tensor = tf.constant(data)\n\nweights = tf.range(tf.shape(input_tensor)[1], dtype=tf.float32)\n\nweighted_tensor = tf.multiply(input_tensor, weights)\n\noutput = tf.reduce_sum(weighted_tensor)\n\n",
            "\ndata = [[0.1, 0.6, 0.2, 0.1], [0.3, 0.1, 0.4, 0.2], [0.2, 0.1, 0.2, 0.5]]\n\ntensor = tf.constant(data)\n\nweights = tf.range(tf.shape(tensor)[1], dtype=tf.float32)\n\nweights = tf.reshape(weights, [1, -1])\n\nweighted_tensor = tf.multiply(tensor, weights)\n\nweighted_sum = tf.reduce_sum(weighted_tensor)\n\n",
            "\ninput_array = [[0.1, 0.6, 0.2, 0.1], [0.3, 0.1, 0.4, 0.2], [0.2, 0.1, 0.2, 0.5]]\n\ninput_tensor = tf.constant(input_array)\n\nweights = tf.cast(tf.range(tf.shape(input_tensor)[1]), dtype=tf.float32)\n\nweighted_array = tf.multiply(input_tensor, weights)\n\nresult = tf.reduce_sum(weighted_array)\n\n"
        ],
        "target-program": "tf.tensordot(in1, tf.cast(tf.range(4), tf.float32), 1)",
        "description": "weighted sum across rows, where the column index is the weight",
        "tf_operators": {
            "tf.multiply": 8,
            "tf.range": 10,
            "tf.reduce_sum": 10,
            "tf.shape": 9,
            "tf.constant": 10,
            "tf.cast": 3,
            "tf.float32": 7,
            "tf.Session": 1,
            "tf.reshape": 1
        },
        "coverage_percentage": 75.0,
        "total_in_target": 4,
        "total_covered": 3,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004975124378109453,
                "tf.add(x, y)": 0.004975124378109453,
                "tf.add_n(inputs)": 0.004975124378109453,
                "tf.argmax(input, axis)": 0.004975124378109453,
                "tf.argmin(input, axis)": 0.004975124378109453,
                "tf.argsort(values, axis, stable=True)": 0.004975124378109453,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.004975124378109453,
                "tf.boolean_mask(tensor, mask)": 0.004975124378109453,
                "tf.broadcast_to(input, shape)": 0.004975124378109453,
                "tf.cast(x, dtype)": 0.01990049751243781,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004975124378109453,
                "tf.concat(values, axis)": 0.004975124378109453,
                "tf.constant(value)": 0.05472636815920398,
                "tf.constant(value, dtype)": 0.004975124378109453,
                "tf.divide(x, y)": 0.004975124378109453,
                "tf.equal(x, y)": 0.004975124378109453,
                "tf.exp(x)": 0.004975124378109453,
                "tf.expand_dims(input, axis)": 0.004975124378109453,
                "tf.eye(num_rows)": 0.004975124378109453,
                "tf.eye(num_rows, num_columns)": 0.004975124378109453,
                "tf.eye(num_rows, dtype)": 0.004975124378109453,
                "tf.fill(dims, value)": 0.004975124378109453,
                "tf.gather(params, indices)": 0.004975124378109453,
                "tf.gather(params, indices, axis, batch_dims)": 0.004975124378109453,
                "tf.gather_nd(params, indices)": 0.004975124378109453,
                "tf.gather_nd(params, indices, batch_dims)": 0.004975124378109453,
                "tf.greater(x, y)": 0.004975124378109453,
                "tf.greater_equal(x, y)": 0.004975124378109453,
                "tf.math.bincount(arr)": 0.004975124378109453,
                "tf.math.ceil(x)": 0.004975124378109453,
                "tf.math.count_nonzero(input)": 0.004975124378109453,
                "tf.math.count_nonzero(input, axis)": 0.004975124378109453,
                "tf.math.cumsum(x, axis)": 0.004975124378109453,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004975124378109453,
                "tf.math.divide_no_nan(x, y)": 0.004975124378109453,
                "tf.math.floor(x)": 0.004975124378109453,
                "tf.math.log(x)": 0.004975124378109453,
                "tf.math.logical_and(x, y)": 0.004975124378109453,
                "tf.math.logical_not(x)": 0.004975124378109453,
                "tf.math.logical_or(x, y)": 0.004975124378109453,
                "tf.math.logical_xor(x, y)": 0.004975124378109453,
                "tf.math.negative(x)": 0.004975124378109453,
                "tf.math.reciprocal(x)": 0.004975124378109453,
                "tf.math.reciprocal_no_nan(x)": 0.004975124378109453,
                "tf.math.segment_max(data, segment_ids)": 0.004975124378109453,
                "tf.math.segment_mean(data, segment_ids)": 0.004975124378109453,
                "tf.math.segment_min(data, segment_ids)": 0.004975124378109453,
                "tf.math.segment_prod(data, segment_ids)": 0.004975124378109453,
                "tf.math.segment_sum(data, segment_ids)": 0.004975124378109453,
                "tf.math.squared_difference(x, y)": 0.004975124378109453,
                "tf.math.top_k(input, k)": 0.004975124378109453,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004975124378109453,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004975124378109453,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004975124378109453,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004975124378109453,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004975124378109453,
                "tf.matmul(a, b)": 0.004975124378109453,
                "tf.maximum(x, y)": 0.004975124378109453,
                "tf.minimum(x, y)": 0.004975124378109453,
                "tf.multiply(x, y)": 0.04477611940298507,
                "tf.not_equal(x, y)": 0.004975124378109453,
                "tf.one_hot(indices, depth)": 0.004975124378109453,
                "tf.ones(shape)": 0.004975124378109453,
                "tf.ones_like(input)": 0.004975124378109453,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.004975124378109453,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.004975124378109453,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.004975124378109453,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.004975124378109453,
                "tf.range(start)": 0.014925373134328358,
                "tf.range(start, limit, delta)": 0.03482587064676617,
                "tf.reduce_any(input_tensor, axis)": 0.004975124378109453,
                "tf.reduce_all(input_tensor, axis)": 0.004975124378109453,
                "tf.reduce_max(input_tensor)": 0.004975124378109453,
                "tf.reduce_max(input_tensor, axis)": 0.004975124378109453,
                "tf.reduce_mean(input_tensor)": 0.004975124378109453,
                "tf.reduce_mean(input_tensor, axis)": 0.004975124378109453,
                "tf.reduce_min(input_tensor)": 0.004975124378109453,
                "tf.reduce_min(input_tensor, axis)": 0.004975124378109453,
                "tf.reduce_prod(input_tensor, axis)": 0.004975124378109453,
                "tf.reduce_sum(input_tensor)": 0.05472636815920398,
                "tf.reduce_sum(input_tensor, axis)": 0.004975124378109453,
                "tf.repeat(input, repeats)": 0.004975124378109453,
                "tf.repeat(input, repeats, axis)": 0.004975124378109453,
                "tf.reshape(tensor, shape)": 0.009950248756218905,
                "tf.reverse(tensor, axis)": 0.004975124378109453,
                "tf.roll(input, shift, axis)": 0.004975124378109453,
                "tf.round(x)": 0.004975124378109453,
                "tf.scatter_nd(indices, updates, shape)": 0.004975124378109453,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.004975124378109453,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.004975124378109453,
                "tf.sequence_mask(lengths)": 0.004975124378109453,
                "tf.sequence_mask(lengths, maxlen)": 0.004975124378109453,
                "tf.shape(input)": 0.04975124378109453,
                "tf.sign(x)": 0.004975124378109453,
                "tf.sort(values, axis)": 0.004975124378109453,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.004975124378109453,
                "tf.sqrt(x)": 0.004975124378109453,
                "tf.square(x)": 0.004975124378109453,
                "tf.squeeze(input)": 0.004975124378109453,
                "tf.squeeze(input, axis)": 0.004975124378109453,
                "tf.stack(values, axis)": 0.004975124378109453,
                "tf.subtract(x, y)": 0.004975124378109453,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004975124378109453,
                "tf.tensordot(a, b, axes)": 0.004975124378109453,
                "tf.tile(input, multiples)": 0.004975124378109453,
                "tf.transpose(a)": 0.004975124378109453,
                "tf.transpose(a, perm)": 0.004975124378109453,
                "tf.unique_with_counts(x)": 0.004975124378109453,
                "tf.unstack(value, axis)": 0.004975124378109453,
                "tf.where(condition)": 0.004975124378109453,
                "tf.where(condition, x, y)": 0.004975124378109453,
                "tf.zeros(shape)": 0.004975124378109453,
                "tf.zeros_like(input)": 0.004975124378109453,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004975124378109453,
                "tf.sparse.add(a, b)": 0.004975124378109453,
                "tf.sparse.concat(axis, sp_inputs)": 0.004975124378109453,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004975124378109453,
                "tf.sparse.from_dense(tensor)": 0.004975124378109453,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004975124378109453,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004975124378109453,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004975124378109453,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004975124378109453,
                "tf.sparse.reset_shape(sp_input)": 0.004975124378109453,
                "tf.sparse.reshape(sp_input, shape)": 0.004975124378109453,
                "tf.sparse.retain(sp_input, to_retain)": 0.004975124378109453,
                "tf.sparse.slice(sp_input, start, size)": 0.004975124378109453,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004975124378109453,
                "tf.sparse.to_dense(sp_input)": 0.004975124378109453,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004975124378109453,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004975124378109453,
                "tf.sparse.transpose(sp_input)": 0.004975124378109453,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.004975124378109453,
                "IndexingOperation": 0.05472636815920398,
                "PairCreationOperation": 0.004975124378109453,
                "SingletonTupleCreationOperation": 0.004975124378109453,
                "SlicingAxis0BothOperation": 0.004975124378109453,
                "SlicingAxis0LeftOperation": 0.004975124378109453,
                "SlicingAxis0RightOperation": 0.004975124378109453,
                "SlicingAxis1BothOperation": 0.004975124378109453,
                "SlicingAxis1LeftOperation": 0.004975124378109453,
                "SlicingAxis1RightOperation": 0.004975124378109453,
                "TripleCreationOperation": 0.004975124378109453
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 6,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 4,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 6,
                "tf.range(start, limit, delta)": 5,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 4,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 4,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 8,
                "IndexingOperation": 4,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8
            }
        }
    },
    {
        "task_id": "stackoverflow_33",
        "completions": [
            "\ndef min_distance(points):\n    points = tf.constant(points)\n    pairwise_diff = tf.expand_dims(points, 1) - tf.expand_dims(points, 0)\n    pairwise_dist = tf.norm(pairwise_diff, axis=-1)\n    pairwise_dist_no_zero = tf.where(pairwise_dist > 0, pairwise_dist, float('inf'))\n    min_dist = tf.reduce_min(pairwise_dist_no_zero)\n    return min_dist.numpy()\n",
            "\ndef min_distance(points):\n    points = tf.constant(points, dtype=tf.float32)\n    points_expanded = tf.expand_dims(points, 1)\n    distances = tf.sqrt(tf.reduce_sum(tf.square(points_expanded - tf.transpose(points_expanded, perm=[1, 0, 2])), axis=2))\n    mask = tf.not_equal(distances, 0.0)\n    return tf.reduce_min(tf.boolean_mask(distances, mask))\n",
            "import numpy as np\n\ndef min_distance(points):\n    points = tf.constant(points, dtype=tf.float32)\n    pairwise_diff = points[:, None, :] - points[None, :, :]\n    pairwise_dist = tf.sqrt(tf.reduce_sum(tf.square(pairwise_diff), axis=-1))\n    mask = tf.logical_not(tf.eye(tf.shape(points)[0], dtype=tf.bool))\n    min_dist = tf.reduce_min(tf.boolean_mask(pairwise_dist, mask))\n    return min_dist\n\npoints = [[0.3, 0.1, 0.4], [0.1, 0.5, 0.9], [0.2, 0.6, 0.5], [0.3, 0.5, 0.8], [0.9, 0.7, 0.9]]\n\npoints = [[0.3, 0.2, 0.3], [0.8, 0.4, 0.6], [0.2, 0.6, 0.4], [0.3, 0.3, 0.8]]\n",
            "\ndef min_distance(points):\n    points = tf.constant(points, dtype=tf.float32)\n    points_expanded = tf.expand_dims(points, 1)\n    diff = points_expanded - points\n    dist = tf.norm(diff, axis=-1)\n    min_dist = tf.reduce_min(dist + tf.eye(tf.shape(points)[0]) * tf.reduce_max(dist))\n    return min_dist\n",
            "\ndef min_distance(points):\n    points = tf.constant(points)\n    pairwise_squared_distances = tf.reduce_sum(tf.square(points[:, None, :] - points[None, :, :]), axis=-1)\n    min_distance = tf.reduce_min(tf.linalg.band_part(pairwise_squared_distances, 0, -1) + tf.linalg.band_part(tf.ones_like(pairwise_squared_distances) * float('inf'), -1, 0))\n    return min_distance\n",
            "\ndef min_distance(points):\n    points = tf.constant(points, dtype=tf.float32)\n    expanded_a = tf.expand_dims(points, 1)\n    expanded_b = tf.expand_dims(points, 0)\n    distances = tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(expanded_a, expanded_b)), -1))\n    min_distance = tf.reduce_min(distances + tf.eye(tf.shape(points)[0])*1e10)\n    return min_distance\n",
            "\ndef min_distance(points):\n    points = tf.constant(points, dtype=tf.float32)\n    pairwise_distances = tf.norm(tf.expand_dims(points, 1) - tf.expand_dims(points, 0), axis=-1)\n    pairwise_distances = tf.linalg.set_diag(pairwise_distances, tf.fill(tf.shape(points)[:1], float('inf')))\n    return tf.reduce_min(pairwise_distances).numpy()\n\n",
            "\ndef min_distance(points):\n    points = tf.constant(points, dtype=tf.float32)\n    expanded_points = tf.expand_dims(points, 1)\n    distances = tf.sqrt(tf.reduce_sum(tf.square(expanded_points - points), axis=-1))\n    distances = tf.linalg.set_diag(distances, tf.fill([len(points)], float('inf')))\n    return tf.reduce_min(distances).numpy()\n\n",
            "\ndef min_distance(points):\n    points = tf.constant(points)\n    diff = tf.expand_dims(points, 1) - tf.expand_dims(points, 0)\n    dist = tf.sqrt(tf.reduce_sum(tf.square(diff), axis=-1))\n    min_dist = tf.reduce_min(dist + tf.eye(tf.shape(points)[0])*1e10)\n    return min_dist\n",
            "\ndef min_distance(points):\n    points = tf.constant(points, dtype=tf.float32)\n    r = tf.reduce_sum(points*points, 1)\n    r = tf.reshape(r, [-1, 1])\n    D = r - 2*tf.matmul(points, tf.transpose(points)) + tf.transpose(r)\n    D = tf.sqrt(D)\n    min_distance = tf.reduce_min(D + tf.eye(tf.shape(D)[0])*1e10)\n    return min_distance\n\n"
        ],
        "target-program": "tf.reduce_min(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 0), tf.expand_dims(in2, 1))), axis=2), axis=1)",
        "description": "find the minimum distance between two sets of points",
        "tf_operators": {
            "tf.where": 1,
            "tf.expand_dims": 7,
            "tf.reduce_min": 10,
            "tf.norm": 3,
            "tf.constant": 10,
            "tf.square": 6,
            "tf.float32": 7,
            "tf.reduce_sum": 7,
            "tf.sqrt": 6,
            "tf.boolean_mask": 2,
            "tf.transpose": 2,
            "tf.not_equal": 1,
            "tf.bool": 1,
            "tf.logical_not": 1,
            "tf.shape": 6,
            "tf.eye": 5,
            "tf.reduce_max": 1,
            "tf.linalg.band_part": 1,
            "tf.ones_like": 1,
            "tf.subtract": 1,
            "tf.linalg.set_diag": 2,
            "tf.fill": 2,
            "tf.matmul": 1,
            "tf.reshape": 1
        },
        "coverage_percentage": 100.0,
        "total_in_target": 5,
        "total_covered": 5,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004672897196261682,
                "tf.add(x, y)": 0.004672897196261682,
                "tf.add_n(inputs)": 0.004672897196261682,
                "tf.argmax(input, axis)": 0.004672897196261682,
                "tf.argmin(input, axis)": 0.004672897196261682,
                "tf.argsort(values, axis, stable=True)": 0.004672897196261682,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.004672897196261682,
                "tf.boolean_mask(tensor, mask)": 0.014018691588785047,
                "tf.broadcast_to(input, shape)": 0.004672897196261682,
                "tf.cast(x, dtype)": 0.004672897196261682,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004672897196261682,
                "tf.concat(values, axis)": 0.004672897196261682,
                "tf.constant(value)": 0.018691588785046728,
                "tf.constant(value, dtype)": 0.004672897196261682,
                "tf.divide(x, y)": 0.004672897196261682,
                "tf.equal(x, y)": 0.004672897196261682,
                "tf.exp(x)": 0.004672897196261682,
                "tf.expand_dims(input, axis)": 0.056074766355140186,
                "tf.eye(num_rows)": 0.02336448598130841,
                "tf.eye(num_rows, num_columns)": 0.004672897196261682,
                "tf.eye(num_rows, dtype)": 0.009345794392523364,
                "tf.fill(dims, value)": 0.014018691588785047,
                "tf.gather(params, indices)": 0.004672897196261682,
                "tf.gather(params, indices, axis, batch_dims)": 0.004672897196261682,
                "tf.gather_nd(params, indices)": 0.004672897196261682,
                "tf.gather_nd(params, indices, batch_dims)": 0.004672897196261682,
                "tf.greater(x, y)": 0.004672897196261682,
                "tf.greater_equal(x, y)": 0.004672897196261682,
                "tf.math.bincount(arr)": 0.004672897196261682,
                "tf.math.ceil(x)": 0.004672897196261682,
                "tf.math.count_nonzero(input)": 0.004672897196261682,
                "tf.math.count_nonzero(input, axis)": 0.004672897196261682,
                "tf.math.cumsum(x, axis)": 0.004672897196261682,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004672897196261682,
                "tf.math.divide_no_nan(x, y)": 0.004672897196261682,
                "tf.math.floor(x)": 0.004672897196261682,
                "tf.math.log(x)": 0.004672897196261682,
                "tf.math.logical_and(x, y)": 0.004672897196261682,
                "tf.math.logical_not(x)": 0.004672897196261682,
                "tf.math.logical_or(x, y)": 0.004672897196261682,
                "tf.math.logical_xor(x, y)": 0.004672897196261682,
                "tf.math.negative(x)": 0.004672897196261682,
                "tf.math.reciprocal(x)": 0.004672897196261682,
                "tf.math.reciprocal_no_nan(x)": 0.004672897196261682,
                "tf.math.segment_max(data, segment_ids)": 0.004672897196261682,
                "tf.math.segment_mean(data, segment_ids)": 0.004672897196261682,
                "tf.math.segment_min(data, segment_ids)": 0.004672897196261682,
                "tf.math.segment_prod(data, segment_ids)": 0.004672897196261682,
                "tf.math.segment_sum(data, segment_ids)": 0.004672897196261682,
                "tf.math.squared_difference(x, y)": 0.004672897196261682,
                "tf.math.top_k(input, k)": 0.004672897196261682,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004672897196261682,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004672897196261682,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004672897196261682,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004672897196261682,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004672897196261682,
                "tf.matmul(a, b)": 0.009345794392523364,
                "tf.maximum(x, y)": 0.004672897196261682,
                "tf.minimum(x, y)": 0.004672897196261682,
                "tf.multiply(x, y)": 0.004672897196261682,
                "tf.not_equal(x, y)": 0.009345794392523364,
                "tf.one_hot(indices, depth)": 0.004672897196261682,
                "tf.ones(shape)": 0.004672897196261682,
                "tf.ones_like(input)": 0.009345794392523364,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.004672897196261682,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.004672897196261682,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.004672897196261682,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.004672897196261682,
                "tf.range(start)": 0.004672897196261682,
                "tf.range(start, limit, delta)": 0.004672897196261682,
                "tf.reduce_any(input_tensor, axis)": 0.004672897196261682,
                "tf.reduce_all(input_tensor, axis)": 0.004672897196261682,
                "tf.reduce_max(input_tensor)": 0.009345794392523364,
                "tf.reduce_max(input_tensor, axis)": 0.004672897196261682,
                "tf.reduce_mean(input_tensor)": 0.004672897196261682,
                "tf.reduce_mean(input_tensor, axis)": 0.004672897196261682,
                "tf.reduce_min(input_tensor)": 0.0514018691588785,
                "tf.reduce_min(input_tensor, axis)": 0.004672897196261682,
                "tf.reduce_prod(input_tensor, axis)": 0.004672897196261682,
                "tf.reduce_sum(input_tensor)": 0.004672897196261682,
                "tf.reduce_sum(input_tensor, axis)": 0.014018691588785047,
                "tf.repeat(input, repeats)": 0.004672897196261682,
                "tf.repeat(input, repeats, axis)": 0.004672897196261682,
                "tf.reshape(tensor, shape)": 0.009345794392523364,
                "tf.reverse(tensor, axis)": 0.004672897196261682,
                "tf.roll(input, shift, axis)": 0.004672897196261682,
                "tf.round(x)": 0.004672897196261682,
                "tf.scatter_nd(indices, updates, shape)": 0.004672897196261682,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.004672897196261682,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.004672897196261682,
                "tf.sequence_mask(lengths)": 0.004672897196261682,
                "tf.sequence_mask(lengths, maxlen)": 0.004672897196261682,
                "tf.shape(input)": 0.03271028037383177,
                "tf.sign(x)": 0.004672897196261682,
                "tf.sort(values, axis)": 0.004672897196261682,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.004672897196261682,
                "tf.sqrt(x)": 0.03271028037383177,
                "tf.square(x)": 0.03271028037383177,
                "tf.squeeze(input)": 0.004672897196261682,
                "tf.squeeze(input, axis)": 0.004672897196261682,
                "tf.stack(values, axis)": 0.004672897196261682,
                "tf.subtract(x, y)": 0.009345794392523364,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004672897196261682,
                "tf.tensordot(a, b, axes)": 0.004672897196261682,
                "tf.tile(input, multiples)": 0.004672897196261682,
                "tf.transpose(a)": 0.014018691588785047,
                "tf.transpose(a, perm)": 0.004672897196261682,
                "tf.unique_with_counts(x)": 0.004672897196261682,
                "tf.unstack(value, axis)": 0.004672897196261682,
                "tf.where(condition)": 0.004672897196261682,
                "tf.where(condition, x, y)": 0.009345794392523364,
                "tf.zeros(shape)": 0.004672897196261682,
                "tf.zeros_like(input)": 0.004672897196261682,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004672897196261682,
                "tf.sparse.add(a, b)": 0.004672897196261682,
                "tf.sparse.concat(axis, sp_inputs)": 0.004672897196261682,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004672897196261682,
                "tf.sparse.from_dense(tensor)": 0.004672897196261682,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004672897196261682,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004672897196261682,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004672897196261682,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004672897196261682,
                "tf.sparse.reset_shape(sp_input)": 0.004672897196261682,
                "tf.sparse.reshape(sp_input, shape)": 0.004672897196261682,
                "tf.sparse.retain(sp_input, to_retain)": 0.004672897196261682,
                "tf.sparse.slice(sp_input, start, size)": 0.004672897196261682,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004672897196261682,
                "tf.sparse.to_dense(sp_input)": 0.004672897196261682,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004672897196261682,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004672897196261682,
                "tf.sparse.transpose(sp_input)": 0.004672897196261682,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.004672897196261682,
                "IndexingOperation": 0.028037383177570093,
                "PairCreationOperation": 0.004672897196261682,
                "SingletonTupleCreationOperation": 0.004672897196261682,
                "SlicingAxis0BothOperation": 0.004672897196261682,
                "SlicingAxis0LeftOperation": 0.004672897196261682,
                "SlicingAxis0RightOperation": 0.009345794392523364,
                "SlicingAxis1BothOperation": 0.004672897196261682,
                "SlicingAxis1LeftOperation": 0.004672897196261682,
                "SlicingAxis1RightOperation": 0.004672897196261682,
                "TripleCreationOperation": 0.02336448598130841
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 6,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 6,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 4,
                "tf.eye(num_rows)": 5,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 6,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 4,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 6,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 5,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 5,
                "tf.square(x)": 5,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 6,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 8,
                "IndexingOperation": 5,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 5
            }
        }
    },
    {
        "task_id": "stackoverflow_34",
        "completions": [
            "\ndef weighted_sum_tensors(input_list):\n    # Convert the input list into a tensor\n    tensor = tf.constant(input_list)\n\n    # Create a weights tensor\n    weights = tf.range(1, len(input_list) + 1, dtype=tf.int32)\n\n    # Multiply the input tensor with the weights tensor\n    multiplied_tensor = tf.multiply(tensor, weights[:, tf.newaxis, tf.newaxis])\n\n    # Compute the weighted sum\n    weighted_sum = tf.reduce_sum(multiplied_tensor, axis=0)\n\n    return weighted_sum\n\ninput_list = [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[10, 20], [30, 40]]]\n",
            "\ndef weighted_sum_tensors(input_tensor):\n  tensor = tf.constant(input_tensor)\n  weights = tf.range(start=1, limit=tensor.shape[0] + 1, dtype=tf.int32)\n  weighted_tensor = tf.multiply(tensor, weights[:, tf.newaxis, tf.newaxis])\n  weighted_sum = tf.reduce_sum(weighted_tensor, axis=0)\n\n  return weighted_sum.numpy().tolist()\n\n",
            "\ndef weighted_sum_tensors(input):\n    weights = tf.constant([1, 2, 3], dtype=tf.int32)\n    weights = tf.reshape(weights, [3, 1, 1])\n    output = tf.tensordot(input, weights, axes=[[0], [0]])\n    return output\n\ninput = [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[10, 20], [30, 40]]]\n\ninput = [3, 5, 10]\n",
            "\ndef weighted_sum_tensors(tensors, weights):\n    weighted_tensors = [tf.multiply(t, w) for t, w in zip(tensors, weights)]\n    result = tf.reduce_sum(weighted_tensors, axis=0)\n    return result\n\ntensors = [tf.constant([[1, 2], [3, 4]]), tf.constant([[5, 6], [7, 8]]), tf.constant([[10, 20], [30, 40]])]\nweights = [3, 5, 10]\nresult = weighted_sum_tensors(tensors, weights)\n",
            "\ndef weighted_sum(tensors):\n    total = tf.zeros_like(tensors[0])\n    for i, tensor in enumerate(tensors):\n        total = tf.add(total, tf.multiply(i, tf.reduce_sum(tensor, axis=[0, 1])))\n    return total\n",
            "\ndef weighted_sum_tensors(input_tensor):\n    weights = tf.range(1, len(input_tensor)+1, dtype=tf.float32)\n    weighted_sum = tf.tensordot(input_tensor, weights, axes=[0, 0])\n    return tf.reduce_sum(weighted_sum, axis=-1)\n",
            "\ndef weighted_sum_tensors(tensors):\n    weights = tf.range(start=0, limit=len(tensors), dtype=tf.float32)\n    weighted_tensors = tf.map_fn(lambda x: x[0] * x[1], (tensors, weights), dtype=tf.float32)\n    result = tf.reduce_sum(weighted_tensors, axis=None)\n    return result\n\ntensors = [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[10, 20], [30, 40]]]\n\ntensors = [3, 5, 10]\n",
            "\ndef weighted_sum_tensors(tensors):\n    tensors = tf.constant(tensors)\n    weights = tf.range(1, len(tensors) + 1)\n    weighted_tensors = tf.multiply(tensors, weights[:, None, None])\n    weighted_sum = tf.reduce_sum(weighted_tensors, axis=[0, 1, 2])\n    return weighted_sum\n\ntensors = [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[10, 20], [30, 40]]]\n\ntensors = [3, 5, 10]\n",
            "\ndef weighted_sum_tensors(tensors, weights):\n    tensors = tf.constant(tensors, dtype=tf.float32)\n    weights = tf.constant(weights, dtype=tf.float32)\n    weighted_sum = tf.tensordot(tensors, weights, axes=0)\n    return tf.reduce_sum(weighted_sum, axis=[0, 1]).numpy().tolist()\n\ntensors = [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[10, 20], [30, 40]]]\nweights = [3, 5, 10]\n",
            "\ndef weighted_sum_tensors(input):\n    input_tensor = tf.constant(input, dtype=tf.int32)\n    weights = tf.range(tf.size(input_tensor), dtype=tf.int32)\n    weights = tf.reshape(weights, tf.shape(input_tensor))\n    weighted_tensor = tf.multiply(input_tensor, weights)\n    return tf.reduce_sum(weighted_tensor, axis=[0, 1]).numpy().tolist()\n\n"
        ],
        "target-program": "tf.tensordot(in2, in1, 1)",
        "description": "compute a weighted sum of tensors",
        "tf_operators": {
            "tf.multiply": 6,
            "tf.newaxis": 2,
            "tf.int32": 4,
            "tf.range": 6,
            "tf.reduce_sum": 9,
            "tf.constant": 7,
            "tf.tensordot": 3,
            "tf.reshape": 2,
            "tf.zeros_like": 1,
            "tf.add": 1,
            "tf.float32": 3,
            "tf.map_fn": 1,
            "tf.size": 1,
            "tf.shape": 1
        },
        "coverage_percentage": 100.0,
        "total_in_target": 1,
        "total_covered": 1,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005780346820809248,
                "tf.add(x, y)": 0.011560693641618497,
                "tf.add_n(inputs)": 0.005780346820809248,
                "tf.argmax(input, axis)": 0.005780346820809248,
                "tf.argmin(input, axis)": 0.005780346820809248,
                "tf.argsort(values, axis, stable=True)": 0.005780346820809248,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005780346820809248,
                "tf.boolean_mask(tensor, mask)": 0.005780346820809248,
                "tf.broadcast_to(input, shape)": 0.005780346820809248,
                "tf.cast(x, dtype)": 0.005780346820809248,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005780346820809248,
                "tf.concat(values, axis)": 0.005780346820809248,
                "tf.constant(value)": 0.04046242774566474,
                "tf.constant(value, dtype)": 0.005780346820809248,
                "tf.divide(x, y)": 0.005780346820809248,
                "tf.equal(x, y)": 0.005780346820809248,
                "tf.exp(x)": 0.005780346820809248,
                "tf.expand_dims(input, axis)": 0.005780346820809248,
                "tf.eye(num_rows)": 0.005780346820809248,
                "tf.eye(num_rows, num_columns)": 0.005780346820809248,
                "tf.eye(num_rows, dtype)": 0.005780346820809248,
                "tf.fill(dims, value)": 0.005780346820809248,
                "tf.gather(params, indices)": 0.005780346820809248,
                "tf.gather(params, indices, axis, batch_dims)": 0.005780346820809248,
                "tf.gather_nd(params, indices)": 0.005780346820809248,
                "tf.gather_nd(params, indices, batch_dims)": 0.005780346820809248,
                "tf.greater(x, y)": 0.005780346820809248,
                "tf.greater_equal(x, y)": 0.005780346820809248,
                "tf.math.bincount(arr)": 0.005780346820809248,
                "tf.math.ceil(x)": 0.005780346820809248,
                "tf.math.count_nonzero(input)": 0.005780346820809248,
                "tf.math.count_nonzero(input, axis)": 0.005780346820809248,
                "tf.math.cumsum(x, axis)": 0.005780346820809248,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005780346820809248,
                "tf.math.divide_no_nan(x, y)": 0.005780346820809248,
                "tf.math.floor(x)": 0.005780346820809248,
                "tf.math.log(x)": 0.005780346820809248,
                "tf.math.logical_and(x, y)": 0.005780346820809248,
                "tf.math.logical_not(x)": 0.005780346820809248,
                "tf.math.logical_or(x, y)": 0.005780346820809248,
                "tf.math.logical_xor(x, y)": 0.005780346820809248,
                "tf.math.negative(x)": 0.005780346820809248,
                "tf.math.reciprocal(x)": 0.005780346820809248,
                "tf.math.reciprocal_no_nan(x)": 0.005780346820809248,
                "tf.math.segment_max(data, segment_ids)": 0.005780346820809248,
                "tf.math.segment_mean(data, segment_ids)": 0.005780346820809248,
                "tf.math.segment_min(data, segment_ids)": 0.005780346820809248,
                "tf.math.segment_prod(data, segment_ids)": 0.005780346820809248,
                "tf.math.segment_sum(data, segment_ids)": 0.005780346820809248,
                "tf.math.squared_difference(x, y)": 0.005780346820809248,
                "tf.math.top_k(input, k)": 0.005780346820809248,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005780346820809248,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005780346820809248,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005780346820809248,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005780346820809248,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005780346820809248,
                "tf.matmul(a, b)": 0.005780346820809248,
                "tf.maximum(x, y)": 0.005780346820809248,
                "tf.minimum(x, y)": 0.005780346820809248,
                "tf.multiply(x, y)": 0.04046242774566474,
                "tf.not_equal(x, y)": 0.005780346820809248,
                "tf.one_hot(indices, depth)": 0.005780346820809248,
                "tf.ones(shape)": 0.005780346820809248,
                "tf.ones_like(input)": 0.005780346820809248,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005780346820809248,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005780346820809248,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005780346820809248,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005780346820809248,
                "tf.range(start)": 0.005780346820809248,
                "tf.range(start, limit, delta)": 0.011560693641618497,
                "tf.reduce_any(input_tensor, axis)": 0.005780346820809248,
                "tf.reduce_all(input_tensor, axis)": 0.005780346820809248,
                "tf.reduce_max(input_tensor)": 0.005780346820809248,
                "tf.reduce_max(input_tensor, axis)": 0.005780346820809248,
                "tf.reduce_mean(input_tensor)": 0.005780346820809248,
                "tf.reduce_mean(input_tensor, axis)": 0.005780346820809248,
                "tf.reduce_min(input_tensor)": 0.005780346820809248,
                "tf.reduce_min(input_tensor, axis)": 0.005780346820809248,
                "tf.reduce_prod(input_tensor, axis)": 0.005780346820809248,
                "tf.reduce_sum(input_tensor)": 0.005780346820809248,
                "tf.reduce_sum(input_tensor, axis)": 0.005780346820809248,
                "tf.repeat(input, repeats)": 0.005780346820809248,
                "tf.repeat(input, repeats, axis)": 0.005780346820809248,
                "tf.reshape(tensor, shape)": 0.017341040462427744,
                "tf.reverse(tensor, axis)": 0.005780346820809248,
                "tf.roll(input, shift, axis)": 0.005780346820809248,
                "tf.round(x)": 0.005780346820809248,
                "tf.scatter_nd(indices, updates, shape)": 0.005780346820809248,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005780346820809248,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005780346820809248,
                "tf.sequence_mask(lengths)": 0.005780346820809248,
                "tf.sequence_mask(lengths, maxlen)": 0.005780346820809248,
                "tf.shape(input)": 0.011560693641618497,
                "tf.sign(x)": 0.005780346820809248,
                "tf.sort(values, axis)": 0.005780346820809248,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005780346820809248,
                "tf.sqrt(x)": 0.005780346820809248,
                "tf.square(x)": 0.005780346820809248,
                "tf.squeeze(input)": 0.005780346820809248,
                "tf.squeeze(input, axis)": 0.005780346820809248,
                "tf.stack(values, axis)": 0.005780346820809248,
                "tf.subtract(x, y)": 0.005780346820809248,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005780346820809248,
                "tf.tensordot(a, b, axes)": 0.023121387283236993,
                "tf.tile(input, multiples)": 0.005780346820809248,
                "tf.transpose(a)": 0.005780346820809248,
                "tf.transpose(a, perm)": 0.005780346820809248,
                "tf.unique_with_counts(x)": 0.005780346820809248,
                "tf.unstack(value, axis)": 0.005780346820809248,
                "tf.where(condition)": 0.005780346820809248,
                "tf.where(condition, x, y)": 0.005780346820809248,
                "tf.zeros(shape)": 0.005780346820809248,
                "tf.zeros_like(input)": 0.011560693641618497,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005780346820809248,
                "tf.sparse.add(a, b)": 0.005780346820809248,
                "tf.sparse.concat(axis, sp_inputs)": 0.005780346820809248,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005780346820809248,
                "tf.sparse.from_dense(tensor)": 0.005780346820809248,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005780346820809248,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005780346820809248,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005780346820809248,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005780346820809248,
                "tf.sparse.reset_shape(sp_input)": 0.005780346820809248,
                "tf.sparse.reshape(sp_input, shape)": 0.005780346820809248,
                "tf.sparse.retain(sp_input, to_retain)": 0.005780346820809248,
                "tf.sparse.slice(sp_input, start, size)": 0.005780346820809248,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005780346820809248,
                "tf.sparse.to_dense(sp_input)": 0.005780346820809248,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005780346820809248,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005780346820809248,
                "tf.sparse.transpose(sp_input)": 0.005780346820809248,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005780346820809248,
                "IndexingOperation": 0.028901734104046242,
                "PairCreationOperation": 0.023121387283236993,
                "SingletonTupleCreationOperation": 0.005780346820809248,
                "SlicingAxis0BothOperation": 0.005780346820809248,
                "SlicingAxis0LeftOperation": 0.005780346820809248,
                "SlicingAxis0RightOperation": 0.005780346820809248,
                "SlicingAxis1BothOperation": 0.005780346820809248,
                "SlicingAxis1LeftOperation": 0.005780346820809248,
                "SlicingAxis1RightOperation": 0.005780346820809248,
                "TripleCreationOperation": 0.023121387283236993
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 6,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 5,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 5,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 6,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 6,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 6,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 5,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 6,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 5,
                "PairCreationOperation": 5,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 5
            }
        }
    },
    {
        "task_id": "stackoverflow_35",
        "completions": [
            "\ndef interpolate_tensors(tensor1, tensor2):\n    tensor1 = tf.constant(tensor1, dtype=tf.float32)\n    tensor2 = tf.constant(tensor2, dtype=tf.float32)\n    return tf.add(tensor1, tf.multiply(tf.divide(tf.subtract(tensor2, tensor1), 10), 8))\n",
            "\ndef interpolate_tensors(tensor1, tensor2):\n    tensor1 = tf.constant(tensor1, dtype=tf.float32)\n    tensor2 = tf.constant(tensor2, dtype=tf.float32)\n    return tf.add(tensor1, tf.multiply(tf.subtract(tensor2, tensor1), 0.2))\n",
            "\ndef interpolate_tensors(tensor1, tensor2):\n    t = 0.1\n    return tf.add(tensor1, tf.multiply(tf.subtract(tensor2, tensor1), t))\n\ntensor1 = tf.constant([[[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]], [[10.0, 20.0], [30.0, 40.0], [50.0, 60.0]]])\ntensor2 = tf.constant([[[9.0, 8.0], [7.0, 6.0], [5.0, 4.0]], [[90.0, 80.0], [70.0, 60.0], [50.0, 40.0]]])\n\noutput = interpolate_tensors(tensor1, tensor2)\n",
            "\ndef interpolate_tensors(tensor1, tensor2):\n    tensor1 = tf.constant(tensor1, dtype=tf.float32)\n    tensor2 = tf.constant(tensor2, dtype=tf.float32)\n    return tf.add(tensor1, tf.divide(tf.subtract(tensor2, tensor1), tf.constant(2.0, dtype=tf.float32)))\n\ntensor1 = [[[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]], [[10.0, 20.0], [30.0, 40.0], [50.0, 60.0]]]\ntensor2 = [[[9.0, 8.0], [7.0, 6.0], [5.0, 4.0]], [[90.0, 80.0], [70.0, 60.0], [50.0, 40.0]]]\n",
            "\ndef interpolate_tensors(a, b, t=0.8):\n    a = tf.constant(a, dtype=tf.float32)\n    b = tf.constant(b, dtype=tf.float32)\n    return tf.add(tf.multiply(1.0 - t, a), tf.multiply(t, b))\n",
            "\ndef linear_interpolation(tensor1, tensor2, t=0.1):\n    tensor1 = tf.constant(tensor1, dtype=tf.float32)\n    tensor2 = tf.constant(tensor2, dtype=tf.float32)\n    result = (1 - t) * tensor1 + t * tensor2\n    return result\n",
            "\ndef interpolate_tensors(tensor1, tensor2):\n    sum_tensors = tf.add(tensor1, tensor2)\n    interpolated_tensor = tf.divide(sum_tensors, 2.0)\n    return interpolated_tensor\n\ntensor1 = tf.constant([[[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]], [[10.0, 20.0], [30.0, 40.0], [50.0, 60.0]]])\ntensor2 = tf.constant([[[9.0, 8.0], [7.0, 6.0], [5.0, 4.0]], [[90.0, 80.0], [70.0, 60.0], [50.0, 40.0]]])\ninterpolated_tensor = interpolate_tensors(tensor1, tensor2)\n",
            "\ndef interpolate_tensors(tensor1, tensor2):\n    tensor1 = tf.constant(tensor1, dtype=tf.float32)\n    tensor2 = tf.constant(tensor2, dtype=tf.float32)\n\n    x = tf.divide(tf.add(tensor1, tensor2), 2.0)\n    y1 = tensor1\n    y2 = tensor2\n\n    interpolation = tf.add(y1, tf.multiply(tf.divide(tf.subtract(y2, y1), tf.subtract(tensor2, tensor1)), tf.subtract(x, tensor1)))\n    return interpolation.numpy()\n",
            "\ndef linear_interpolation(tensors):\n    tensor1, tensor2 = tensors\n    tensor1 = tf.constant(tensor1)\n    tensor2 = tf.constant(tensor2)\n    return tf.divide(tf.add(tensor1, tensor2), 2.0)\n",
            "\ndef interpolate_tensors(tensor1, tensor2, alpha=0.8):\n    tensor1 = tf.constant(tensor1, dtype=tf.float32)\n    tensor2 = tf.constant(tensor2, dtype=tf.float32)\n\n    result = tf.add(tf.multiply(tensor1, 1 - alpha), tf.multiply(tensor2, alpha))\n    return result.numpy().tolist()\n\n"
        ],
        "target-program": "tf.add(in2, tf.multiply(tf.expand_dims(in3, 1), tf.subtract(in1, in2)))",
        "description": "linear interpolation between two tensors",
        "tf_operators": {
            "tf.multiply": 6,
            "tf.divide": 5,
            "tf.subtract": 5,
            "tf.float32": 7,
            "tf.add": 9,
            "tf.constant": 10
        },
        "coverage_percentage": 75.0,
        "total_in_target": 4,
        "total_covered": 3,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005555555555555556,
                "tf.add(x, y)": 0.06111111111111111,
                "tf.add_n(inputs)": 0.005555555555555556,
                "tf.argmax(input, axis)": 0.005555555555555556,
                "tf.argmin(input, axis)": 0.005555555555555556,
                "tf.argsort(values, axis, stable=True)": 0.005555555555555556,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005555555555555556,
                "tf.boolean_mask(tensor, mask)": 0.005555555555555556,
                "tf.broadcast_to(input, shape)": 0.005555555555555556,
                "tf.cast(x, dtype)": 0.005555555555555556,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005555555555555556,
                "tf.concat(values, axis)": 0.005555555555555556,
                "tf.constant(value)": 0.03888888888888889,
                "tf.constant(value, dtype)": 0.005555555555555556,
                "tf.divide(x, y)": 0.03888888888888889,
                "tf.equal(x, y)": 0.005555555555555556,
                "tf.exp(x)": 0.005555555555555556,
                "tf.expand_dims(input, axis)": 0.005555555555555556,
                "tf.eye(num_rows)": 0.005555555555555556,
                "tf.eye(num_rows, num_columns)": 0.005555555555555556,
                "tf.eye(num_rows, dtype)": 0.005555555555555556,
                "tf.fill(dims, value)": 0.005555555555555556,
                "tf.gather(params, indices)": 0.005555555555555556,
                "tf.gather(params, indices, axis, batch_dims)": 0.005555555555555556,
                "tf.gather_nd(params, indices)": 0.005555555555555556,
                "tf.gather_nd(params, indices, batch_dims)": 0.005555555555555556,
                "tf.greater(x, y)": 0.005555555555555556,
                "tf.greater_equal(x, y)": 0.005555555555555556,
                "tf.math.bincount(arr)": 0.005555555555555556,
                "tf.math.ceil(x)": 0.005555555555555556,
                "tf.math.count_nonzero(input)": 0.005555555555555556,
                "tf.math.count_nonzero(input, axis)": 0.005555555555555556,
                "tf.math.cumsum(x, axis)": 0.005555555555555556,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005555555555555556,
                "tf.math.divide_no_nan(x, y)": 0.005555555555555556,
                "tf.math.floor(x)": 0.005555555555555556,
                "tf.math.log(x)": 0.005555555555555556,
                "tf.math.logical_and(x, y)": 0.005555555555555556,
                "tf.math.logical_not(x)": 0.005555555555555556,
                "tf.math.logical_or(x, y)": 0.005555555555555556,
                "tf.math.logical_xor(x, y)": 0.005555555555555556,
                "tf.math.negative(x)": 0.005555555555555556,
                "tf.math.reciprocal(x)": 0.005555555555555556,
                "tf.math.reciprocal_no_nan(x)": 0.005555555555555556,
                "tf.math.segment_max(data, segment_ids)": 0.005555555555555556,
                "tf.math.segment_mean(data, segment_ids)": 0.005555555555555556,
                "tf.math.segment_min(data, segment_ids)": 0.005555555555555556,
                "tf.math.segment_prod(data, segment_ids)": 0.005555555555555556,
                "tf.math.segment_sum(data, segment_ids)": 0.005555555555555556,
                "tf.math.squared_difference(x, y)": 0.005555555555555556,
                "tf.math.top_k(input, k)": 0.005555555555555556,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005555555555555556,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005555555555555556,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005555555555555556,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005555555555555556,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005555555555555556,
                "tf.matmul(a, b)": 0.005555555555555556,
                "tf.maximum(x, y)": 0.005555555555555556,
                "tf.minimum(x, y)": 0.005555555555555556,
                "tf.multiply(x, y)": 0.05,
                "tf.not_equal(x, y)": 0.005555555555555556,
                "tf.one_hot(indices, depth)": 0.005555555555555556,
                "tf.ones(shape)": 0.005555555555555556,
                "tf.ones_like(input)": 0.005555555555555556,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005555555555555556,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005555555555555556,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005555555555555556,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005555555555555556,
                "tf.range(start)": 0.005555555555555556,
                "tf.range(start, limit, delta)": 0.005555555555555556,
                "tf.reduce_any(input_tensor, axis)": 0.005555555555555556,
                "tf.reduce_all(input_tensor, axis)": 0.005555555555555556,
                "tf.reduce_max(input_tensor)": 0.005555555555555556,
                "tf.reduce_max(input_tensor, axis)": 0.005555555555555556,
                "tf.reduce_mean(input_tensor)": 0.005555555555555556,
                "tf.reduce_mean(input_tensor, axis)": 0.005555555555555556,
                "tf.reduce_min(input_tensor)": 0.005555555555555556,
                "tf.reduce_min(input_tensor, axis)": 0.005555555555555556,
                "tf.reduce_prod(input_tensor, axis)": 0.005555555555555556,
                "tf.reduce_sum(input_tensor)": 0.005555555555555556,
                "tf.reduce_sum(input_tensor, axis)": 0.005555555555555556,
                "tf.repeat(input, repeats)": 0.005555555555555556,
                "tf.repeat(input, repeats, axis)": 0.005555555555555556,
                "tf.reshape(tensor, shape)": 0.005555555555555556,
                "tf.reverse(tensor, axis)": 0.005555555555555556,
                "tf.roll(input, shift, axis)": 0.005555555555555556,
                "tf.round(x)": 0.005555555555555556,
                "tf.scatter_nd(indices, updates, shape)": 0.005555555555555556,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005555555555555556,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005555555555555556,
                "tf.sequence_mask(lengths)": 0.005555555555555556,
                "tf.sequence_mask(lengths, maxlen)": 0.005555555555555556,
                "tf.shape(input)": 0.005555555555555556,
                "tf.sign(x)": 0.005555555555555556,
                "tf.sort(values, axis)": 0.005555555555555556,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005555555555555556,
                "tf.sqrt(x)": 0.005555555555555556,
                "tf.square(x)": 0.005555555555555556,
                "tf.squeeze(input)": 0.005555555555555556,
                "tf.squeeze(input, axis)": 0.005555555555555556,
                "tf.stack(values, axis)": 0.005555555555555556,
                "tf.subtract(x, y)": 0.044444444444444446,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005555555555555556,
                "tf.tensordot(a, b, axes)": 0.005555555555555556,
                "tf.tile(input, multiples)": 0.005555555555555556,
                "tf.transpose(a)": 0.005555555555555556,
                "tf.transpose(a, perm)": 0.005555555555555556,
                "tf.unique_with_counts(x)": 0.005555555555555556,
                "tf.unstack(value, axis)": 0.005555555555555556,
                "tf.where(condition)": 0.005555555555555556,
                "tf.where(condition, x, y)": 0.005555555555555556,
                "tf.zeros(shape)": 0.005555555555555556,
                "tf.zeros_like(input)": 0.005555555555555556,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005555555555555556,
                "tf.sparse.add(a, b)": 0.005555555555555556,
                "tf.sparse.concat(axis, sp_inputs)": 0.005555555555555556,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005555555555555556,
                "tf.sparse.from_dense(tensor)": 0.005555555555555556,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005555555555555556,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005555555555555556,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005555555555555556,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005555555555555556,
                "tf.sparse.reset_shape(sp_input)": 0.005555555555555556,
                "tf.sparse.reshape(sp_input, shape)": 0.005555555555555556,
                "tf.sparse.retain(sp_input, to_retain)": 0.005555555555555556,
                "tf.sparse.slice(sp_input, start, size)": 0.005555555555555556,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005555555555555556,
                "tf.sparse.to_dense(sp_input)": 0.005555555555555556,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005555555555555556,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005555555555555556,
                "tf.sparse.transpose(sp_input)": 0.005555555555555556,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005555555555555556,
                "IndexingOperation": 0.005555555555555556,
                "PairCreationOperation": 0.011111111111111112,
                "SingletonTupleCreationOperation": 0.005555555555555556,
                "SlicingAxis0BothOperation": 0.005555555555555556,
                "SlicingAxis0LeftOperation": 0.005555555555555556,
                "SlicingAxis0RightOperation": 0.005555555555555556,
                "SlicingAxis1BothOperation": 0.005555555555555556,
                "SlicingAxis1LeftOperation": 0.005555555555555556,
                "SlicingAxis1RightOperation": 0.005555555555555556,
                "TripleCreationOperation": 0.005555555555555556
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 4,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 5,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 5,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 4,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 4,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 6,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "stackoverflow_36",
        "completions": [
            "\nx = tf.constant([1, 0, 1, 1, 0, 1, 0, 1])\n\nindices = tf.range(tf.size(x)) + 1\n\nindices = tf.cast(indices, tf.float32)\n\nresult = tf.divide(x, indices)\n\n",
            "\nx = tf.constant([1, 0, 1, 1, 0, 1, 0, 1], dtype=tf.float32)\n\nindices = tf.range(start=1, limit=tf.size(x) + 1, dtype=tf.float32)\n\nresult = tf.math.divide_no_nan(x, indices)\n\n",
            "\ninput_data = tf.constant([1, 0, 1, 1, 0, 1, 0, 1])\n\nreshaped_data = tf.reshape(input_data, (2, 4))\n\ncol_indices = tf.range(reshaped_data.shape[1], dtype=tf.float32)\n\noutput = tf.math.divide_no_nan(reshaped_data, col_indices)\n\n",
            "\ndef divide_by_col_index(input_data):\n    # Reshape input data into a 2D Tensor\n    input_tensor = tf.reshape(input_data, shape=(-1, 2))\n    # Create a Tensor that represents the column indices\n    col_indices = tf.add(tf.range(start=1, limit=input_tensor.shape[1]+1), 1)\n    # Divide each element of the input Tensor by the corresponding element in the column index Tensor\n    output_tensor = tf.divide(input_tensor, col_indices)\n    return output_tensor\n\ninput_data = tf.constant([1, 0, 1, 1, 0, 1, 0, 1])\n",
            "\narr = tf.constant([1, 0, 1, 1, 0, 1, 0, 1])\n\narr_reshaped = tf.reshape(arr, (-1,1))\n\nindices = tf.range(tf.shape(arr_reshaped)[1], dtype=tf.float32)\n\noutput = tf.math.divide_no_nan(arr_reshaped, indices)\n\noutput\n",
            "\ndef divide_by_column_index(input):\n    # Reshape the input into a 2D array\n    input_2d = tf.reshape(input, [1, -1])\n    \n    # Get the number of columns\n    num_columns = tf.shape(input_2d)[1]\n    \n    # Create a 2D array of column indices\n    column_indices = tf.broadcast_to(tf.range(num_columns), tf.shape(input_2d))\n    \n    # Convert the column indices to float for division\n    column_indices_float = tf.cast(column_indices, tf.float32)\n    \n    # Divide each element by the column index\n    output = tf.divide(input_2d, column_indices_float)\n    \n    # Replace NaN with 0\n    output = tf.where(tf.is_nan(output), 0., output)\n    \n    return output\n\ninput = tf.constant([1, 0, 1, 1, 0, 1, 0, 1])\noutput = divide_by_column_index(input)\n",
            "\ndef divide_by_col_index(input):\n    input = tf.reshape(input, shape=(-1, 2))\n    col_indices = tf.range(tf.shape(input)[1], dtype=input.dtype)\n    output = tf.math.divide_no_nan(input, col_indices)\n    return output\n\ninput = tf.constant([1, 0, 1, 1, 0, 1, 0, 1])\noutput = divide_by_col_index(input)\n",
            "\ninput_list = tf.constant([1, 0, 1, 1, 0, 1, 0, 1], dtype=tf.float32)\n\nlist_length = tf.size(input_list)\n\nindices = tf.range(1, list_length+1, dtype=tf.float32)\n\noutput = tf.divide(input_list, indices)\n\n",
            "\ndef divide_by_col_index(input):\n    # reshape input to a matrix shape\n    reshaped_input = tf.reshape(input, [-1, len(input)])\n    \n    # create a tensor that contains the column indices\n    col_indices = tf.range(start=1, limit=len(input)+1, delta=1, dtype=tf.float32)\n    \n    # broadcast col_indices to match the shape of reshaped_input\n    broadcasted_col_indices = tf.broadcast_to(col_indices, tf.shape(reshaped_input))\n    \n    # divide reshaped_input by broadcasted_col_indices\n    output = tf.divide(reshaped_input, broadcasted_col_indices)\n    \n    return output\n",
            "\nlst = [1, 0, 1, 1, 0, 1, 0, 1]\n\ntensor = tf.constant(lst, dtype=tf.float32)\n\nindices = tf.range(start=1, limit=len(lst)+1, delta=1, dtype=tf.float32)\n\nresult = tf.divide(tensor, indices)\n\n"
        ],
        "target-program": "tf.cast(tf.divide(in1, tf.add(in1, tf.range(8))), tf.float32)",
        "description": "divide each element by the column index",
        "tf_operators": {
            "tf.divide": 6,
            "tf.cast": 2,
            "tf.range": 10,
            "tf.size": 3,
            "tf.float32": 8,
            "tf.constant": 9,
            "tf.math.divide_no_nan": 4,
            "tf.reshape": 6,
            "tf.add": 1,
            "tf.shape": 4,
            "tf.where": 1,
            "tf.is_nan": 1,
            "tf.broadcast_to": 2
        },
        "coverage_percentage": 100.0,
        "total_in_target": 5,
        "total_covered": 5,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005405405405405406,
                "tf.add(x, y)": 0.010810810810810811,
                "tf.add_n(inputs)": 0.005405405405405406,
                "tf.argmax(input, axis)": 0.005405405405405406,
                "tf.argmin(input, axis)": 0.005405405405405406,
                "tf.argsort(values, axis, stable=True)": 0.005405405405405406,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005405405405405406,
                "tf.boolean_mask(tensor, mask)": 0.005405405405405406,
                "tf.broadcast_to(input, shape)": 0.016216216216216217,
                "tf.cast(x, dtype)": 0.016216216216216217,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005405405405405406,
                "tf.concat(values, axis)": 0.005405405405405406,
                "tf.constant(value)": 0.03783783783783784,
                "tf.constant(value, dtype)": 0.005405405405405406,
                "tf.divide(x, y)": 0.03783783783783784,
                "tf.equal(x, y)": 0.005405405405405406,
                "tf.exp(x)": 0.005405405405405406,
                "tf.expand_dims(input, axis)": 0.005405405405405406,
                "tf.eye(num_rows)": 0.005405405405405406,
                "tf.eye(num_rows, num_columns)": 0.005405405405405406,
                "tf.eye(num_rows, dtype)": 0.005405405405405406,
                "tf.fill(dims, value)": 0.005405405405405406,
                "tf.gather(params, indices)": 0.005405405405405406,
                "tf.gather(params, indices, axis, batch_dims)": 0.005405405405405406,
                "tf.gather_nd(params, indices)": 0.005405405405405406,
                "tf.gather_nd(params, indices, batch_dims)": 0.005405405405405406,
                "tf.greater(x, y)": 0.005405405405405406,
                "tf.greater_equal(x, y)": 0.005405405405405406,
                "tf.math.bincount(arr)": 0.005405405405405406,
                "tf.math.ceil(x)": 0.005405405405405406,
                "tf.math.count_nonzero(input)": 0.005405405405405406,
                "tf.math.count_nonzero(input, axis)": 0.005405405405405406,
                "tf.math.cumsum(x, axis)": 0.005405405405405406,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005405405405405406,
                "tf.math.divide_no_nan(x, y)": 0.005405405405405406,
                "tf.math.floor(x)": 0.005405405405405406,
                "tf.math.log(x)": 0.005405405405405406,
                "tf.math.logical_and(x, y)": 0.005405405405405406,
                "tf.math.logical_not(x)": 0.005405405405405406,
                "tf.math.logical_or(x, y)": 0.005405405405405406,
                "tf.math.logical_xor(x, y)": 0.005405405405405406,
                "tf.math.negative(x)": 0.005405405405405406,
                "tf.math.reciprocal(x)": 0.005405405405405406,
                "tf.math.reciprocal_no_nan(x)": 0.005405405405405406,
                "tf.math.segment_max(data, segment_ids)": 0.005405405405405406,
                "tf.math.segment_mean(data, segment_ids)": 0.005405405405405406,
                "tf.math.segment_min(data, segment_ids)": 0.005405405405405406,
                "tf.math.segment_prod(data, segment_ids)": 0.005405405405405406,
                "tf.math.segment_sum(data, segment_ids)": 0.005405405405405406,
                "tf.math.squared_difference(x, y)": 0.005405405405405406,
                "tf.math.top_k(input, k)": 0.005405405405405406,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005405405405405406,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005405405405405406,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005405405405405406,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005405405405405406,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005405405405405406,
                "tf.matmul(a, b)": 0.005405405405405406,
                "tf.maximum(x, y)": 0.005405405405405406,
                "tf.minimum(x, y)": 0.005405405405405406,
                "tf.multiply(x, y)": 0.005405405405405406,
                "tf.not_equal(x, y)": 0.005405405405405406,
                "tf.one_hot(indices, depth)": 0.005405405405405406,
                "tf.ones(shape)": 0.005405405405405406,
                "tf.ones_like(input)": 0.005405405405405406,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005405405405405406,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005405405405405406,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005405405405405406,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005405405405405406,
                "tf.range(start)": 0.016216216216216217,
                "tf.range(start, limit, delta)": 0.021621621621621623,
                "tf.reduce_any(input_tensor, axis)": 0.005405405405405406,
                "tf.reduce_all(input_tensor, axis)": 0.005405405405405406,
                "tf.reduce_max(input_tensor)": 0.005405405405405406,
                "tf.reduce_max(input_tensor, axis)": 0.005405405405405406,
                "tf.reduce_mean(input_tensor)": 0.005405405405405406,
                "tf.reduce_mean(input_tensor, axis)": 0.005405405405405406,
                "tf.reduce_min(input_tensor)": 0.005405405405405406,
                "tf.reduce_min(input_tensor, axis)": 0.005405405405405406,
                "tf.reduce_prod(input_tensor, axis)": 0.005405405405405406,
                "tf.reduce_sum(input_tensor)": 0.005405405405405406,
                "tf.reduce_sum(input_tensor, axis)": 0.005405405405405406,
                "tf.repeat(input, repeats)": 0.005405405405405406,
                "tf.repeat(input, repeats, axis)": 0.005405405405405406,
                "tf.reshape(tensor, shape)": 0.03783783783783784,
                "tf.reverse(tensor, axis)": 0.005405405405405406,
                "tf.roll(input, shift, axis)": 0.005405405405405406,
                "tf.round(x)": 0.005405405405405406,
                "tf.scatter_nd(indices, updates, shape)": 0.005405405405405406,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005405405405405406,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005405405405405406,
                "tf.sequence_mask(lengths)": 0.005405405405405406,
                "tf.sequence_mask(lengths, maxlen)": 0.005405405405405406,
                "tf.shape(input)": 0.032432432432432434,
                "tf.sign(x)": 0.005405405405405406,
                "tf.sort(values, axis)": 0.005405405405405406,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005405405405405406,
                "tf.sqrt(x)": 0.005405405405405406,
                "tf.square(x)": 0.005405405405405406,
                "tf.squeeze(input)": 0.005405405405405406,
                "tf.squeeze(input, axis)": 0.005405405405405406,
                "tf.stack(values, axis)": 0.005405405405405406,
                "tf.subtract(x, y)": 0.005405405405405406,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005405405405405406,
                "tf.tensordot(a, b, axes)": 0.005405405405405406,
                "tf.tile(input, multiples)": 0.005405405405405406,
                "tf.transpose(a)": 0.005405405405405406,
                "tf.transpose(a, perm)": 0.005405405405405406,
                "tf.unique_with_counts(x)": 0.005405405405405406,
                "tf.unstack(value, axis)": 0.005405405405405406,
                "tf.where(condition)": 0.005405405405405406,
                "tf.where(condition, x, y)": 0.010810810810810811,
                "tf.zeros(shape)": 0.005405405405405406,
                "tf.zeros_like(input)": 0.005405405405405406,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005405405405405406,
                "tf.sparse.add(a, b)": 0.005405405405405406,
                "tf.sparse.concat(axis, sp_inputs)": 0.005405405405405406,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005405405405405406,
                "tf.sparse.from_dense(tensor)": 0.005405405405405406,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005405405405405406,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005405405405405406,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005405405405405406,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005405405405405406,
                "tf.sparse.reset_shape(sp_input)": 0.005405405405405406,
                "tf.sparse.reshape(sp_input, shape)": 0.005405405405405406,
                "tf.sparse.retain(sp_input, to_retain)": 0.005405405405405406,
                "tf.sparse.slice(sp_input, start, size)": 0.005405405405405406,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005405405405405406,
                "tf.sparse.to_dense(sp_input)": 0.005405405405405406,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005405405405405406,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005405405405405406,
                "tf.sparse.transpose(sp_input)": 0.005405405405405406,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005405405405405406,
                "IndexingOperation": 0.032432432432432434,
                "PairCreationOperation": 0.02702702702702703,
                "SingletonTupleCreationOperation": 0.005405405405405406,
                "SlicingAxis0BothOperation": 0.005405405405405406,
                "SlicingAxis0LeftOperation": 0.005405405405405406,
                "SlicingAxis0RightOperation": 0.005405405405405406,
                "SlicingAxis1BothOperation": 0.005405405405405406,
                "SlicingAxis1LeftOperation": 0.005405405405405406,
                "SlicingAxis1RightOperation": 0.005405405405405406,
                "TripleCreationOperation": 0.005405405405405406
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 6,
                "tf.cast(x, dtype)": 6,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 5,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 5,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 6,
                "tf.range(start, limit, delta)": 6,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 5,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 5,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 8,
                "IndexingOperation": 5,
                "PairCreationOperation": 5,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8
            }
        }
    },
    {
        "task_id": "stackoverflow_37",
        "completions": [
            "\ntensor = tf.constant([[[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]], [[1.2, 3.4, 5.6], [7.8, 9.8, 7.6]]]])\nvector = tf.constant([1.0, 0.5, 1.0])\n\ndot_product = tf.tensordot(tensor, vector, axes=[-1, 0])\n\n",
            "\ntensor = tf.constant([[[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]], [[1.2, 3.4, 5.6], [7.8, 9.8, 7.6]]]])\n\nvector = tf.constant([1.0, 1.5, 2.0])\n\noutput = tf.tensordot(tensor, vector, axes=1)\n\n",
            "\ntensor = tf.constant([[[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]], [[1.2, 3.4, 5.6], [7.8, 9.8, 7.6]]]])\nvector = tf.constant([1.0, 0.5, 2.0])\n\noutput = tf.tensordot(tensor, vector, axes=1)\n\n",
            "\ndef dot_product(tensor, vector):\n    return tf.tensordot(tensor, vector, axes=1)\n\ntensor = tf.constant([[[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]], [[1.2, 3.4, 5.6], [7.8, 9.8, 7.6]]]])\nvector = tf.constant([1.0, 0.5, 0.0])\nresult = dot_product(tensor, vector)\n",
            "\ntensor = tf.constant([[[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]], [[1.2, 3.4, 5.6], [7.8, 9.8, 7.6]]]])\nvector = tf.constant([1.0, 0.5, 0.0])\n\nresult = tf.tensordot(tensor, vector, axes=[[-1], [0]])\n\n",
            "\ntensor = tf.constant([[[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]], [[1.2, 3.4, 5.6], [7.8, 9.8, 7.6]]]])\nvector = tf.constant([1.0, 0.5, 1.0])\n\noutput = tf.tensordot(tensor, vector, axes=1)\n\n",
            "\ntensor = tf.constant([[[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]], [[1.2, 3.4, 5.6], [7.8, 9.8, 7.6]]]])\nvector = tf.constant([1.0, 0.5, 1.0])\n\nresult = tf.tensordot(tensor, vector, axes=1)\n\n",
            "\ntensor = tf.constant([[[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]], [[1.2, 3.4, 5.6], [7.8, 9.8, 7.6]]]])\nvector = tf.constant([1.0, 0.5, 1.0])\n\nresult = tf.tensordot(tensor, vector, axes=1)\n\n",
            "\ntensor = tf.constant([[[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]], [[1.2, 3.4, 5.6], [7.8, 9.8, 7.6]]]])\nvector = tf.constant([1.0, 0.5, 0.0])\n\nresult = tf.tensordot(tensor, vector, axes=[[3],[0]])\n\n",
            "\ntensor = tf.constant([[[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]], [[1.2, 3.4, 5.6], [7.8, 9.8, 7.6]]]])\nvector = tf.constant([1.0, 0.5, 0.0])\n\ndot_product = tf.tensordot(tensor, vector, axes=1)\n\n"
        ],
        "target-program": "tf.tensordot(in1, in2, 1)",
        "description": "dot product a vector with last dimension of a tensor",
        "tf_operators": {
            "tf.tensordot": 10,
            "tf.constant": 10
        },
        "coverage_percentage": 100.0,
        "total_in_target": 1,
        "total_covered": 1,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005813953488372093,
                "tf.add(x, y)": 0.005813953488372093,
                "tf.add_n(inputs)": 0.005813953488372093,
                "tf.argmax(input, axis)": 0.005813953488372093,
                "tf.argmin(input, axis)": 0.005813953488372093,
                "tf.argsort(values, axis, stable=True)": 0.005813953488372093,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005813953488372093,
                "tf.boolean_mask(tensor, mask)": 0.005813953488372093,
                "tf.broadcast_to(input, shape)": 0.005813953488372093,
                "tf.cast(x, dtype)": 0.005813953488372093,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005813953488372093,
                "tf.concat(values, axis)": 0.005813953488372093,
                "tf.constant(value)": 0.12209302325581395,
                "tf.constant(value, dtype)": 0.005813953488372093,
                "tf.divide(x, y)": 0.005813953488372093,
                "tf.equal(x, y)": 0.005813953488372093,
                "tf.exp(x)": 0.005813953488372093,
                "tf.expand_dims(input, axis)": 0.005813953488372093,
                "tf.eye(num_rows)": 0.005813953488372093,
                "tf.eye(num_rows, num_columns)": 0.005813953488372093,
                "tf.eye(num_rows, dtype)": 0.005813953488372093,
                "tf.fill(dims, value)": 0.005813953488372093,
                "tf.gather(params, indices)": 0.005813953488372093,
                "tf.gather(params, indices, axis, batch_dims)": 0.005813953488372093,
                "tf.gather_nd(params, indices)": 0.005813953488372093,
                "tf.gather_nd(params, indices, batch_dims)": 0.005813953488372093,
                "tf.greater(x, y)": 0.005813953488372093,
                "tf.greater_equal(x, y)": 0.005813953488372093,
                "tf.math.bincount(arr)": 0.005813953488372093,
                "tf.math.ceil(x)": 0.005813953488372093,
                "tf.math.count_nonzero(input)": 0.005813953488372093,
                "tf.math.count_nonzero(input, axis)": 0.005813953488372093,
                "tf.math.cumsum(x, axis)": 0.005813953488372093,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005813953488372093,
                "tf.math.divide_no_nan(x, y)": 0.005813953488372093,
                "tf.math.floor(x)": 0.005813953488372093,
                "tf.math.log(x)": 0.005813953488372093,
                "tf.math.logical_and(x, y)": 0.005813953488372093,
                "tf.math.logical_not(x)": 0.005813953488372093,
                "tf.math.logical_or(x, y)": 0.005813953488372093,
                "tf.math.logical_xor(x, y)": 0.005813953488372093,
                "tf.math.negative(x)": 0.005813953488372093,
                "tf.math.reciprocal(x)": 0.005813953488372093,
                "tf.math.reciprocal_no_nan(x)": 0.005813953488372093,
                "tf.math.segment_max(data, segment_ids)": 0.005813953488372093,
                "tf.math.segment_mean(data, segment_ids)": 0.005813953488372093,
                "tf.math.segment_min(data, segment_ids)": 0.005813953488372093,
                "tf.math.segment_prod(data, segment_ids)": 0.005813953488372093,
                "tf.math.segment_sum(data, segment_ids)": 0.005813953488372093,
                "tf.math.squared_difference(x, y)": 0.005813953488372093,
                "tf.math.top_k(input, k)": 0.005813953488372093,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005813953488372093,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005813953488372093,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005813953488372093,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005813953488372093,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005813953488372093,
                "tf.matmul(a, b)": 0.005813953488372093,
                "tf.maximum(x, y)": 0.005813953488372093,
                "tf.minimum(x, y)": 0.005813953488372093,
                "tf.multiply(x, y)": 0.005813953488372093,
                "tf.not_equal(x, y)": 0.005813953488372093,
                "tf.one_hot(indices, depth)": 0.005813953488372093,
                "tf.ones(shape)": 0.005813953488372093,
                "tf.ones_like(input)": 0.005813953488372093,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005813953488372093,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005813953488372093,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005813953488372093,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005813953488372093,
                "tf.range(start)": 0.005813953488372093,
                "tf.range(start, limit, delta)": 0.005813953488372093,
                "tf.reduce_any(input_tensor, axis)": 0.005813953488372093,
                "tf.reduce_all(input_tensor, axis)": 0.005813953488372093,
                "tf.reduce_max(input_tensor)": 0.005813953488372093,
                "tf.reduce_max(input_tensor, axis)": 0.005813953488372093,
                "tf.reduce_mean(input_tensor)": 0.005813953488372093,
                "tf.reduce_mean(input_tensor, axis)": 0.005813953488372093,
                "tf.reduce_min(input_tensor)": 0.005813953488372093,
                "tf.reduce_min(input_tensor, axis)": 0.005813953488372093,
                "tf.reduce_prod(input_tensor, axis)": 0.005813953488372093,
                "tf.reduce_sum(input_tensor)": 0.005813953488372093,
                "tf.reduce_sum(input_tensor, axis)": 0.005813953488372093,
                "tf.repeat(input, repeats)": 0.005813953488372093,
                "tf.repeat(input, repeats, axis)": 0.005813953488372093,
                "tf.reshape(tensor, shape)": 0.005813953488372093,
                "tf.reverse(tensor, axis)": 0.005813953488372093,
                "tf.roll(input, shift, axis)": 0.005813953488372093,
                "tf.round(x)": 0.005813953488372093,
                "tf.scatter_nd(indices, updates, shape)": 0.005813953488372093,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005813953488372093,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005813953488372093,
                "tf.sequence_mask(lengths)": 0.005813953488372093,
                "tf.sequence_mask(lengths, maxlen)": 0.005813953488372093,
                "tf.shape(input)": 0.005813953488372093,
                "tf.sign(x)": 0.005813953488372093,
                "tf.sort(values, axis)": 0.005813953488372093,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005813953488372093,
                "tf.sqrt(x)": 0.005813953488372093,
                "tf.square(x)": 0.005813953488372093,
                "tf.squeeze(input)": 0.005813953488372093,
                "tf.squeeze(input, axis)": 0.005813953488372093,
                "tf.stack(values, axis)": 0.005813953488372093,
                "tf.subtract(x, y)": 0.005813953488372093,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005813953488372093,
                "tf.tensordot(a, b, axes)": 0.06395348837209303,
                "tf.tile(input, multiples)": 0.005813953488372093,
                "tf.transpose(a)": 0.005813953488372093,
                "tf.transpose(a, perm)": 0.005813953488372093,
                "tf.unique_with_counts(x)": 0.005813953488372093,
                "tf.unstack(value, axis)": 0.005813953488372093,
                "tf.where(condition)": 0.005813953488372093,
                "tf.where(condition, x, y)": 0.005813953488372093,
                "tf.zeros(shape)": 0.005813953488372093,
                "tf.zeros_like(input)": 0.005813953488372093,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005813953488372093,
                "tf.sparse.add(a, b)": 0.005813953488372093,
                "tf.sparse.concat(axis, sp_inputs)": 0.005813953488372093,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005813953488372093,
                "tf.sparse.from_dense(tensor)": 0.005813953488372093,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005813953488372093,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005813953488372093,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005813953488372093,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005813953488372093,
                "tf.sparse.reset_shape(sp_input)": 0.005813953488372093,
                "tf.sparse.reshape(sp_input, shape)": 0.005813953488372093,
                "tf.sparse.retain(sp_input, to_retain)": 0.005813953488372093,
                "tf.sparse.slice(sp_input, start, size)": 0.005813953488372093,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005813953488372093,
                "tf.sparse.to_dense(sp_input)": 0.005813953488372093,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005813953488372093,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005813953488372093,
                "tf.sparse.transpose(sp_input)": 0.005813953488372093,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005813953488372093,
                "IndexingOperation": 0.005813953488372093,
                "PairCreationOperation": 0.005813953488372093,
                "SingletonTupleCreationOperation": 0.005813953488372093,
                "SlicingAxis0BothOperation": 0.005813953488372093,
                "SlicingAxis0LeftOperation": 0.005813953488372093,
                "SlicingAxis0RightOperation": 0.005813953488372093,
                "SlicingAxis1BothOperation": 0.005813953488372093,
                "SlicingAxis1LeftOperation": 0.005813953488372093,
                "SlicingAxis1RightOperation": 0.005813953488372093,
                "TripleCreationOperation": 0.005813953488372093
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 3,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 4,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "stackoverflow_38",
        "completions": [
            "\ndef product_of_marked_elements(values, mask):\n    values_tensor = tf.constant(values)\n    mask_tensor = tf.constant(mask)\n    marked_elements = tf.boolean_mask(values_tensor, mask_tensor)\n    return tf.reduce_prod(marked_elements).numpy()\n\nvalues = [9, 2, 5, 3, 7, 4]\nmask = [0, 0, 1, 0, 1, 0]\n\nvalues = [[9, 2, 5, 3, 7, 4], [1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12]]\nmask = [[0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1]]\n",
            "\ntensor1 = tf.constant([9, 2, 5, 3, 7, 4])\ntensor2 = tf.constant([0, 0, 1, 0, 1, 0])\n\nmarked_elements = tf.boolean_mask(tensor1, tf.cast(tensor2, tf.bool))\n\nproduct = tf.reduce_prod(marked_elements)\n\n",
            "\ndef product_of_marked_elements(input_data, mask):\n    tensor_data = tf.constant(input_data, dtype=tf.float32)\n    tensor_mask = tf.constant(mask, dtype=tf.bool)\n    marked_elements = tf.boolean_mask(tensor_data, tensor_mask)\n    product = tf.reduce_prod(marked_elements)\n    return product\n\ninput_data = [9, 2, 5, 3, 7, 4]\nmask = [0, 0, 1, 0, 1, 0]\n\ninput_data = [[0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1]]\nmask = [[0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1]]\n",
            "\ndef product_of_marked_elements(data):\n    # Create a boolean mask for the data\n    mask = tf.not_equal(data, 0)\n    # Apply the mask to the data\n    marked_elements = tf.boolean_mask(data, mask)\n    # Compute the product of the marked elements\n    product = tf.reduce_prod(marked_elements)\n    return product\n",
            "\ndef compute_product(input_data, mask):\n    masked_data = tf.boolean_mask(input_data, mask)\n    product = tf.reduce_prod(masked_data)\n    return product\n\ninput_data = tf.constant([9, 2, 5, 3, 7, 4])\nmask = tf.constant([0, 0, 1, 0, 1, 0])\n\ninput_data = tf.constant([[0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1]])\nmask = tf.constant([[0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1]])\n",
            "\ndef compute_product(data, mask):\n    data_tensor = tf.constant(data)\n    mask_tensor = tf.constant(mask)\n    masked_tensor = tf.boolean_mask(data_tensor, mask_tensor)\n    return tf.reduce_prod(masked_tensor)\n\ndata = [9, 2, 5, 3, 7, 4]\nmask = [0, 0, 1, 0, 1, 0]\n\ndata = [[0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1]]\nmask = [1, 1, 1, 1, 1, 1]\n",
            "\ndef compute_product(elements):\n    # Create a boolean mask where the condition is true\n    mask = tf.not_equal(elements, 0)\n    \n    # Select the marked elements\n    marked_elements = tf.boolean_mask(elements, mask)\n    \n    # Compute the product of the marked elements\n    product = tf.reduce_prod(marked_elements)\n    \n    return product\n",
            "\ndef compute_product(nums, mask):\n    # Convert the lists to Tensorflow tensors\n    nums_tensor = tf.constant(nums, dtype=tf.int32)\n    mask_tensor = tf.constant(mask, dtype=tf.bool)\n\n    # Select the elements from the integer tensor that correspond to the 1's in the binary tensor\n    selected_elements = tf.boolean_mask(nums_tensor, mask_tensor)\n\n    # Compute the product of the selected elements\n    product = tf.reduce_prod(selected_elements)\n\n    return product\n",
            "\ndef compute_product(input_list, mask):\n    tf_input_list = tf.constant(input_list, dtype=tf.int32)\n    tf_mask = tf.constant(mask, dtype=tf.bool)\n    masked_input = tf.boolean_mask(tf_input_list, tf_mask)\n    product = tf.reduce_prod(masked_input)\n    return product\n\ninput_list = [9, 2, 5, 3, 7, 4]\nmask = [0, 0, 1, 0, 1, 0]\n\ninput_list = [[0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1]]\nmask = [[0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1]]\n",
            "\ndef compute_product(input_array, mask):\n    selected_elements = tf.boolean_mask(input_array, mask)\n    product = tf.reduce_prod(selected_elements)\n    return product\n\ninput_array = tf.constant([9, 2, 5, 3, 7, 4])\nmask = tf.constant([0, 0, 1, 0, 1, 0])\n\ninput_array = tf.constant([[0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1]])\nmask = tf.constant([[0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1]])\n"
        ],
        "target-program": "tf.reduce_prod(tf.maximum(tf.reduce_max(in2), tf.multiply(in1, in2)), axis=1)",
        "description": "compute the product of marked elements",
        "tf_operators": {
            "tf.reduce_prod": 10,
            "tf.boolean_mask": 10,
            "tf.constant": 8,
            "tf.bool": 4,
            "tf.cast": 1,
            "tf.float32": 1,
            "tf.not_equal": 2,
            "tf.int32": 2
        },
        "coverage_percentage": 25.0,
        "total_in_target": 4,
        "total_covered": 1,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.00558659217877095,
                "tf.add(x, y)": 0.00558659217877095,
                "tf.add_n(inputs)": 0.00558659217877095,
                "tf.argmax(input, axis)": 0.00558659217877095,
                "tf.argmin(input, axis)": 0.00558659217877095,
                "tf.argsort(values, axis, stable=True)": 0.00558659217877095,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.00558659217877095,
                "tf.boolean_mask(tensor, mask)": 0.061452513966480445,
                "tf.broadcast_to(input, shape)": 0.00558659217877095,
                "tf.cast(x, dtype)": 0.0111731843575419,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.00558659217877095,
                "tf.concat(values, axis)": 0.00558659217877095,
                "tf.constant(value)": 0.08379888268156424,
                "tf.constant(value, dtype)": 0.00558659217877095,
                "tf.divide(x, y)": 0.00558659217877095,
                "tf.equal(x, y)": 0.00558659217877095,
                "tf.exp(x)": 0.00558659217877095,
                "tf.expand_dims(input, axis)": 0.00558659217877095,
                "tf.eye(num_rows)": 0.00558659217877095,
                "tf.eye(num_rows, num_columns)": 0.00558659217877095,
                "tf.eye(num_rows, dtype)": 0.00558659217877095,
                "tf.fill(dims, value)": 0.00558659217877095,
                "tf.gather(params, indices)": 0.00558659217877095,
                "tf.gather(params, indices, axis, batch_dims)": 0.00558659217877095,
                "tf.gather_nd(params, indices)": 0.00558659217877095,
                "tf.gather_nd(params, indices, batch_dims)": 0.00558659217877095,
                "tf.greater(x, y)": 0.00558659217877095,
                "tf.greater_equal(x, y)": 0.00558659217877095,
                "tf.math.bincount(arr)": 0.00558659217877095,
                "tf.math.ceil(x)": 0.00558659217877095,
                "tf.math.count_nonzero(input)": 0.00558659217877095,
                "tf.math.count_nonzero(input, axis)": 0.00558659217877095,
                "tf.math.cumsum(x, axis)": 0.00558659217877095,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.00558659217877095,
                "tf.math.divide_no_nan(x, y)": 0.00558659217877095,
                "tf.math.floor(x)": 0.00558659217877095,
                "tf.math.log(x)": 0.00558659217877095,
                "tf.math.logical_and(x, y)": 0.00558659217877095,
                "tf.math.logical_not(x)": 0.00558659217877095,
                "tf.math.logical_or(x, y)": 0.00558659217877095,
                "tf.math.logical_xor(x, y)": 0.00558659217877095,
                "tf.math.negative(x)": 0.00558659217877095,
                "tf.math.reciprocal(x)": 0.00558659217877095,
                "tf.math.reciprocal_no_nan(x)": 0.00558659217877095,
                "tf.math.segment_max(data, segment_ids)": 0.00558659217877095,
                "tf.math.segment_mean(data, segment_ids)": 0.00558659217877095,
                "tf.math.segment_min(data, segment_ids)": 0.00558659217877095,
                "tf.math.segment_prod(data, segment_ids)": 0.00558659217877095,
                "tf.math.segment_sum(data, segment_ids)": 0.00558659217877095,
                "tf.math.squared_difference(x, y)": 0.00558659217877095,
                "tf.math.top_k(input, k)": 0.00558659217877095,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.00558659217877095,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.00558659217877095,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.00558659217877095,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.00558659217877095,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.00558659217877095,
                "tf.matmul(a, b)": 0.00558659217877095,
                "tf.maximum(x, y)": 0.00558659217877095,
                "tf.minimum(x, y)": 0.00558659217877095,
                "tf.multiply(x, y)": 0.00558659217877095,
                "tf.not_equal(x, y)": 0.01675977653631285,
                "tf.one_hot(indices, depth)": 0.00558659217877095,
                "tf.ones(shape)": 0.00558659217877095,
                "tf.ones_like(input)": 0.00558659217877095,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.00558659217877095,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.00558659217877095,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.00558659217877095,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.00558659217877095,
                "tf.range(start)": 0.00558659217877095,
                "tf.range(start, limit, delta)": 0.00558659217877095,
                "tf.reduce_any(input_tensor, axis)": 0.00558659217877095,
                "tf.reduce_all(input_tensor, axis)": 0.00558659217877095,
                "tf.reduce_max(input_tensor)": 0.00558659217877095,
                "tf.reduce_max(input_tensor, axis)": 0.00558659217877095,
                "tf.reduce_mean(input_tensor)": 0.00558659217877095,
                "tf.reduce_mean(input_tensor, axis)": 0.00558659217877095,
                "tf.reduce_min(input_tensor)": 0.00558659217877095,
                "tf.reduce_min(input_tensor, axis)": 0.00558659217877095,
                "tf.reduce_prod(input_tensor, axis)": 0.061452513966480445,
                "tf.reduce_sum(input_tensor)": 0.00558659217877095,
                "tf.reduce_sum(input_tensor, axis)": 0.00558659217877095,
                "tf.repeat(input, repeats)": 0.00558659217877095,
                "tf.repeat(input, repeats, axis)": 0.00558659217877095,
                "tf.reshape(tensor, shape)": 0.00558659217877095,
                "tf.reverse(tensor, axis)": 0.00558659217877095,
                "tf.roll(input, shift, axis)": 0.00558659217877095,
                "tf.round(x)": 0.00558659217877095,
                "tf.scatter_nd(indices, updates, shape)": 0.00558659217877095,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.00558659217877095,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.00558659217877095,
                "tf.sequence_mask(lengths)": 0.00558659217877095,
                "tf.sequence_mask(lengths, maxlen)": 0.00558659217877095,
                "tf.shape(input)": 0.00558659217877095,
                "tf.sign(x)": 0.00558659217877095,
                "tf.sort(values, axis)": 0.00558659217877095,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.00558659217877095,
                "tf.sqrt(x)": 0.00558659217877095,
                "tf.square(x)": 0.00558659217877095,
                "tf.squeeze(input)": 0.00558659217877095,
                "tf.squeeze(input, axis)": 0.00558659217877095,
                "tf.stack(values, axis)": 0.00558659217877095,
                "tf.subtract(x, y)": 0.00558659217877095,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.00558659217877095,
                "tf.tensordot(a, b, axes)": 0.00558659217877095,
                "tf.tile(input, multiples)": 0.00558659217877095,
                "tf.transpose(a)": 0.00558659217877095,
                "tf.transpose(a, perm)": 0.00558659217877095,
                "tf.unique_with_counts(x)": 0.00558659217877095,
                "tf.unstack(value, axis)": 0.00558659217877095,
                "tf.where(condition)": 0.00558659217877095,
                "tf.where(condition, x, y)": 0.00558659217877095,
                "tf.zeros(shape)": 0.00558659217877095,
                "tf.zeros_like(input)": 0.00558659217877095,
                "tf.SparseTensor(indices, values, dense_shape)": 0.00558659217877095,
                "tf.sparse.add(a, b)": 0.00558659217877095,
                "tf.sparse.concat(axis, sp_inputs)": 0.00558659217877095,
                "tf.sparse.expand_dims(sp_input, axis)": 0.00558659217877095,
                "tf.sparse.from_dense(tensor)": 0.00558659217877095,
                "tf.sparse.maximum(sp_a, sp_b)": 0.00558659217877095,
                "tf.sparse.minimum(sp_a, sp_b)": 0.00558659217877095,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.00558659217877095,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.00558659217877095,
                "tf.sparse.reset_shape(sp_input)": 0.00558659217877095,
                "tf.sparse.reshape(sp_input, shape)": 0.00558659217877095,
                "tf.sparse.retain(sp_input, to_retain)": 0.00558659217877095,
                "tf.sparse.slice(sp_input, start, size)": 0.00558659217877095,
                "tf.sparse.split(sp_input, num_split, axis)": 0.00558659217877095,
                "tf.sparse.to_dense(sp_input)": 0.00558659217877095,
                "tf.sparse.to_dense(sp_input, default_value)": 0.00558659217877095,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.00558659217877095,
                "tf.sparse.transpose(sp_input)": 0.00558659217877095,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.00558659217877095,
                "IndexingOperation": 0.00558659217877095,
                "PairCreationOperation": 0.00558659217877095,
                "SingletonTupleCreationOperation": 0.00558659217877095,
                "SlicingAxis0BothOperation": 0.00558659217877095,
                "SlicingAxis0LeftOperation": 0.00558659217877095,
                "SlicingAxis0RightOperation": 0.00558659217877095,
                "SlicingAxis1BothOperation": 0.00558659217877095,
                "SlicingAxis1LeftOperation": 0.00558659217877095,
                "SlicingAxis1RightOperation": 0.00558659217877095,
                "TripleCreationOperation": 0.00558659217877095
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 4,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 6,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 6,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 4,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "stackoverflow_39",
        "completions": [
            "\nx = tf.constant([[-1.5, 1.0, 0.9, 2.0], [1.1, 0.0, -0.1, -0.9], [-1.0, 0.1, -1.1, 2.5]])\n\nabs_x = tf.abs(x)\n\nmask = tf.greater(abs_x, 1.0)\n\nresult = tf.where(mask, tf.square(x), 0.0)\n\n",
            "\ndata = [[-1.5, 1.0, 0.9, 2.0], [1.1, 0.0, -0.1, -0.9], [-1.0, 0.1, -1.1, 2.5]]\n\ntensor = tf.constant(data)\n\nabs_values = tf.abs(tensor)\n\nmask_ge1 = tf.greater_equal(abs_values, 1.0)\n\nsquared_elements = tf.square(tf.boolean_mask(tensor, mask_ge1))\n\nmask_lt1 = tf.less(abs_values, 1.0)\n\nzeroed_elements = tf.where(mask_lt1, 0.0, tensor)\n\noutput = tf.add(squared_elements, zeroed_elements)\n\n",
            "\ndef process_tensor(tensor):\n    abs_tensor = tf.abs(tensor)\n    mask_less_than_1 = tf.less(abs_tensor, 1)\n    tensor_0 = tf.where(mask_less_than_1, tf.zeros_like(tensor), tensor)\n    \n    mask_greater_equal_1 = tf.greater_equal(abs_tensor, 1)\n    tensor_squared = tf.where(mask_greater_equal_1, tf.square(tensor), tensor)\n    \n    output_tensor = tf.add(tensor_0, tensor_squared)\n    return output_tensor\n\ninput_tensor = tf.constant([[-1.5, 1.0, 0.9, 2.0], [1.1, 0.0, -0.1, -0.9], [-1.0, 0.1, -1.1, 2.5]])\noutput_tensor = process_tensor(input_tensor)\n",
            "\ndef process_elements(input):\n  input = tf.constant(input)\n  mask = tf.greater(tf.abs(input), 1)\n  input = tf.where(mask, input, 0)\n  output = tf.square(input)\n  return output.numpy()\n\ninput = [[-1.5, 1.0, 0.9, 2.0], [1.1, 0.0, -0.1, -0.9], [-1.0, 0.1, -1.1, 2.5]]\n",
            "\nx = tf.constant([[-1.5, 1.0, 0.9, 2.0], [1.1, 0.0, -0.1, -0.9], [-1.0, 0.1, -1.1, 2.5]])\n\nmask = tf.less(tf.abs(x), 1)\n\nresult = tf.where(mask, 0, tf.square(x))\n",
            "\ndata = [[-1.5, 1.0, 0.9, 2.0], [1.1, 0.0, -0.1, -0.9], [-1.0, 0.1, -1.1, 2.5]]\n\ntensor = tf.constant(data)\n\nmask = tf.greater_equal(tf.abs(tensor), 1)\n\nsquared_elements = tf.square(tf.boolean_mask(tensor, mask))\n\nresult = tf.where(mask, squared_elements, 0)\n\n",
            "\ndef process_tensor(input_list):\n    tensor = tf.constant(input_list, dtype=tf.float32)\n    result = tf.where(tf.abs(tensor) < 1, 0, tf.square(tensor))\n    return result\n\ninput_list = [[-1.5, 1.0, 0.9, 2.0], [1.1, 0.0, -0.1, -0.9], [-1.0, 0.1, -1.1, 2.5]]\n",
            "\ninput_list = [[-1.5, 1.0, 0.9, 2.0], [1.1, 0.0, -0.1, -0.9], [-1.0, 0.1, -1.1, 2.5]]\n\ninput_tensor = tf.constant(input_list)\n\nmask = tf.less(tf.abs(input_tensor), 1.0)\n\noutput_tensor = tf.where(mask, 0.0, tf.square(input_tensor))\n\n",
            "\ninput_list = [[-1.5, 1.0, 0.9, 2.0], [1.1, 0.0, -0.1, -0.9], [-1.0, 0.1, -1.1, 2.5]]\n\ninput_tensor = tf.constant(input_list)\n\nabs_tensor = tf.abs(input_tensor)\n\nmask = tf.greater_equal(abs_tensor, 1)\n\nsquared_elements = tf.square(tf.boolean_mask(input_tensor, mask))\n\noutput_tensor = tf.where(mask, squared_elements, 0)\n\n",
            "\ndef process_elements(input):\n    input_tensor = tf.constant(input, dtype=tf.float32)\n    mask = tf.greater(tf.abs(input_tensor), 1)\n    output_tensor = tf.where(mask, tf.square(input_tensor), 0)\n    return output_tensor.numpy()\n\ninput = [[-1.5, 1.0, 0.9, 2.0], [1.1, 0.0, -0.1, -0.9], [-1.0, 0.1, -1.1, 2.5]]\n"
        ],
        "target-program": "tf.multiply(tf.square(in1), tf.cast(tf.cast(tf.cast(in1, tf.int32), tf.bool), tf.float32))",
        "description": "(\\'set to 0 the elements with absolute value less than 1, and square the other elements\\')",
        "tf_operators": {
            "tf.where": 10,
            "tf.square": 10,
            "tf.abs": 10,
            "tf.greater": 3,
            "tf.constant": 10,
            "tf.greater_equal": 4,
            "tf.boolean_mask": 3,
            "tf.add": 2,
            "tf.less": 4,
            "tf.zeros_like": 1,
            "tf.float32": 2
        },
        "coverage_percentage": 33.33333333333333,
        "total_in_target": 6,
        "total_covered": 2,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.05670103092783505,
                "tf.add(x, y)": 0.015463917525773196,
                "tf.add_n(inputs)": 0.005154639175257732,
                "tf.argmax(input, axis)": 0.005154639175257732,
                "tf.argmin(input, axis)": 0.005154639175257732,
                "tf.argsort(values, axis, stable=True)": 0.005154639175257732,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005154639175257732,
                "tf.boolean_mask(tensor, mask)": 0.020618556701030927,
                "tf.broadcast_to(input, shape)": 0.005154639175257732,
                "tf.cast(x, dtype)": 0.005154639175257732,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005154639175257732,
                "tf.concat(values, axis)": 0.005154639175257732,
                "tf.constant(value)": 0.04639175257731959,
                "tf.constant(value, dtype)": 0.005154639175257732,
                "tf.divide(x, y)": 0.005154639175257732,
                "tf.equal(x, y)": 0.005154639175257732,
                "tf.exp(x)": 0.005154639175257732,
                "tf.expand_dims(input, axis)": 0.005154639175257732,
                "tf.eye(num_rows)": 0.005154639175257732,
                "tf.eye(num_rows, num_columns)": 0.005154639175257732,
                "tf.eye(num_rows, dtype)": 0.005154639175257732,
                "tf.fill(dims, value)": 0.005154639175257732,
                "tf.gather(params, indices)": 0.005154639175257732,
                "tf.gather(params, indices, axis, batch_dims)": 0.005154639175257732,
                "tf.gather_nd(params, indices)": 0.005154639175257732,
                "tf.gather_nd(params, indices, batch_dims)": 0.005154639175257732,
                "tf.greater(x, y)": 0.020618556701030927,
                "tf.greater_equal(x, y)": 0.02577319587628866,
                "tf.math.bincount(arr)": 0.005154639175257732,
                "tf.math.ceil(x)": 0.005154639175257732,
                "tf.math.count_nonzero(input)": 0.005154639175257732,
                "tf.math.count_nonzero(input, axis)": 0.005154639175257732,
                "tf.math.cumsum(x, axis)": 0.005154639175257732,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005154639175257732,
                "tf.math.divide_no_nan(x, y)": 0.005154639175257732,
                "tf.math.floor(x)": 0.005154639175257732,
                "tf.math.log(x)": 0.005154639175257732,
                "tf.math.logical_and(x, y)": 0.005154639175257732,
                "tf.math.logical_not(x)": 0.005154639175257732,
                "tf.math.logical_or(x, y)": 0.005154639175257732,
                "tf.math.logical_xor(x, y)": 0.005154639175257732,
                "tf.math.negative(x)": 0.005154639175257732,
                "tf.math.reciprocal(x)": 0.005154639175257732,
                "tf.math.reciprocal_no_nan(x)": 0.005154639175257732,
                "tf.math.segment_max(data, segment_ids)": 0.005154639175257732,
                "tf.math.segment_mean(data, segment_ids)": 0.005154639175257732,
                "tf.math.segment_min(data, segment_ids)": 0.005154639175257732,
                "tf.math.segment_prod(data, segment_ids)": 0.005154639175257732,
                "tf.math.segment_sum(data, segment_ids)": 0.005154639175257732,
                "tf.math.squared_difference(x, y)": 0.005154639175257732,
                "tf.math.top_k(input, k)": 0.005154639175257732,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005154639175257732,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005154639175257732,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005154639175257732,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005154639175257732,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005154639175257732,
                "tf.matmul(a, b)": 0.005154639175257732,
                "tf.maximum(x, y)": 0.005154639175257732,
                "tf.minimum(x, y)": 0.005154639175257732,
                "tf.multiply(x, y)": 0.005154639175257732,
                "tf.not_equal(x, y)": 0.005154639175257732,
                "tf.one_hot(indices, depth)": 0.005154639175257732,
                "tf.ones(shape)": 0.005154639175257732,
                "tf.ones_like(input)": 0.005154639175257732,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005154639175257732,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005154639175257732,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005154639175257732,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005154639175257732,
                "tf.range(start)": 0.005154639175257732,
                "tf.range(start, limit, delta)": 0.005154639175257732,
                "tf.reduce_any(input_tensor, axis)": 0.005154639175257732,
                "tf.reduce_all(input_tensor, axis)": 0.005154639175257732,
                "tf.reduce_max(input_tensor)": 0.005154639175257732,
                "tf.reduce_max(input_tensor, axis)": 0.005154639175257732,
                "tf.reduce_mean(input_tensor)": 0.005154639175257732,
                "tf.reduce_mean(input_tensor, axis)": 0.005154639175257732,
                "tf.reduce_min(input_tensor)": 0.005154639175257732,
                "tf.reduce_min(input_tensor, axis)": 0.005154639175257732,
                "tf.reduce_prod(input_tensor, axis)": 0.005154639175257732,
                "tf.reduce_sum(input_tensor)": 0.005154639175257732,
                "tf.reduce_sum(input_tensor, axis)": 0.005154639175257732,
                "tf.repeat(input, repeats)": 0.005154639175257732,
                "tf.repeat(input, repeats, axis)": 0.005154639175257732,
                "tf.reshape(tensor, shape)": 0.005154639175257732,
                "tf.reverse(tensor, axis)": 0.005154639175257732,
                "tf.roll(input, shift, axis)": 0.005154639175257732,
                "tf.round(x)": 0.005154639175257732,
                "tf.scatter_nd(indices, updates, shape)": 0.005154639175257732,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005154639175257732,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005154639175257732,
                "tf.sequence_mask(lengths)": 0.005154639175257732,
                "tf.sequence_mask(lengths, maxlen)": 0.005154639175257732,
                "tf.shape(input)": 0.005154639175257732,
                "tf.sign(x)": 0.005154639175257732,
                "tf.sort(values, axis)": 0.005154639175257732,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005154639175257732,
                "tf.sqrt(x)": 0.005154639175257732,
                "tf.square(x)": 0.05670103092783505,
                "tf.squeeze(input)": 0.005154639175257732,
                "tf.squeeze(input, axis)": 0.005154639175257732,
                "tf.stack(values, axis)": 0.005154639175257732,
                "tf.subtract(x, y)": 0.005154639175257732,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005154639175257732,
                "tf.tensordot(a, b, axes)": 0.005154639175257732,
                "tf.tile(input, multiples)": 0.005154639175257732,
                "tf.transpose(a)": 0.005154639175257732,
                "tf.transpose(a, perm)": 0.005154639175257732,
                "tf.unique_with_counts(x)": 0.005154639175257732,
                "tf.unstack(value, axis)": 0.005154639175257732,
                "tf.where(condition)": 0.005154639175257732,
                "tf.where(condition, x, y)": 0.061855670103092786,
                "tf.zeros(shape)": 0.005154639175257732,
                "tf.zeros_like(input)": 0.010309278350515464,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005154639175257732,
                "tf.sparse.add(a, b)": 0.005154639175257732,
                "tf.sparse.concat(axis, sp_inputs)": 0.005154639175257732,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005154639175257732,
                "tf.sparse.from_dense(tensor)": 0.005154639175257732,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005154639175257732,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005154639175257732,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005154639175257732,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005154639175257732,
                "tf.sparse.reset_shape(sp_input)": 0.005154639175257732,
                "tf.sparse.reshape(sp_input, shape)": 0.005154639175257732,
                "tf.sparse.retain(sp_input, to_retain)": 0.005154639175257732,
                "tf.sparse.slice(sp_input, start, size)": 0.005154639175257732,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005154639175257732,
                "tf.sparse.to_dense(sp_input)": 0.005154639175257732,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005154639175257732,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005154639175257732,
                "tf.sparse.transpose(sp_input)": 0.005154639175257732,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005154639175257732,
                "IndexingOperation": 0.005154639175257732,
                "PairCreationOperation": 0.005154639175257732,
                "SingletonTupleCreationOperation": 0.005154639175257732,
                "SlicingAxis0BothOperation": 0.005154639175257732,
                "SlicingAxis0LeftOperation": 0.005154639175257732,
                "SlicingAxis0RightOperation": 0.005154639175257732,
                "SlicingAxis1BothOperation": 0.005154639175257732,
                "SlicingAxis1LeftOperation": 0.005154639175257732,
                "SlicingAxis1RightOperation": 0.005154639175257732,
                "TripleCreationOperation": 0.005154639175257732
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 4,
                "tf.add(x, y)": 6,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 6,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 6,
                "tf.greater_equal(x, y)": 5,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 4,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 4,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8
            }
        }
    },
    {
        "task_id": "stackoverflow_40",
        "completions": [
            "\ndef top_k_to_sparse_tensor(input_tensor):\n    top_k_values, top_k_indices = tf.nn.top_k(input_tensor, k=1)\n    sparse_tensor = tf.sparse.SparseTensor(indices=top_k_indices, values=top_k_values, dense_shape=tf.shape(input_tensor))\n    dense_tensor = tf.sparse.to_dense(sparse_tensor, default_value=0)\n    return dense_tensor\n",
            "\ninput_list = tf.constant([4, 5, 2, 7, 8, 6])\n\nvalues, indices = tf.nn.top_k(input_list, k=5)\n\nsparse_tensor = tf.SparseTensor(indices=tf.expand_dims(indices, 1), values=tf.cast(values, tf.float32), dense_shape=input_list.shape)\n\ndense_tensor = tf.sparse.to_dense(sparse_tensor, validate_indices=False)\n\n",
            "\ndef top_k_to_sparse_tensor(input, k):\n    # Get top k values and their indices\n    values, indices = tf.nn.top_k(input, k)\n\n    # Create a sparse tensor with the indices of the top k elements marked with their values\n    sparse_tensor = tf.SparseTensor(indices=tf.expand_dims(indices, axis=1), \n                                    values=tf.cast(values, tf.float32), \n                                    dense_shape=[tf.size(input)])\n\n    # Convert the sparse tensor to a dense tensor\n    dense_tensor = tf.sparse.to_dense(sparse_tensor, validate_indices=False)\n\n    return dense_tensor\n\ninput = tf.constant([4, 5, 2, 7, 8, 6])\noutput = top_k_to_sparse_tensor(input, 2)\n",
            "\ndef create_sparse_tensor(input):\n    values, _ = tf.nn.top_k(input, k=5)\n    indices = tf.range(tf.shape(input)[0])\n    dense_shape = tf.shape(input)\n    sparse_tensor = tf.SparseTensor(indices=indices[:, tf.newaxis], values=values, dense_shape=dense_shape)\n    return sparse_tensor\n",
            "\ndef top_k_to_sparse_tensor(input, k):\n    top_k_values, top_k_indices = tf.nn.top_k(input, k)\n    sparse_tensor = tf.SparseTensor(top_k_indices, top_k_values, tf.shape(input))\n    return sparse_tensor\n",
            "\ndef top_k_to_sparse_tensor(input, k):\n    values, indices = tf.nn.top_k(input, k)\n    sparse_tensor = tf.SparseTensor(indices, values, tf.shape(input, out_type=tf.int64))\n    return tf.sparse.to_dense(sparse_tensor, validate_indices=False)\n",
            "\ndef top_k_to_sparse_tensor(input_tensor):\n    # Get the top k values and their indices\n    values, indices = tf.nn.top_k(input_tensor, k=tf.size(input_tensor))\n\n    # Create a sparse tensor from the indices and values\n    sparse_tensor = tf.SparseTensor(indices=tf.expand_dims(indices, axis=-1), \n                                    values=values, \n                                    dense_shape=tf.shape(input_tensor))\n    \n    return sparse_tensor\n",
            "\ndef top_k_to_sparse_tensor(input, k):\n    # Find top k values and their indices\n    values, indices = tf.nn.top_k(input, k)\n\n    # Create SparseTensor using the indices of the top k values\n    sparse_tensor = tf.SparseTensor(indices=tf.expand_dims(indices, -1), \n                                    values=values, \n                                    dense_shape=tf.shape(input, out_type=tf.int64))\n\n    # Convert SparseTensor to dense for output\n    output = tf.sparse.to_dense(sparse_tensor, validate_indices=False)\n    \n    return output\n",
            "\ndef top_k_to_sparse_tensor(input, k=1):\n    # Find top k values and their indices\n    values, indices = tf.nn.top_k(input, k)\n\n    # Create a sparse tensor using the indices and values\n    sparse_tensor = tf.SparseTensor(indices, values, tf.shape(input))\n\n    # Convert the sparse tensor to a dense tensor\n    dense_tensor = tf.sparse.to_dense(sparse_tensor)\n\n    return dense_tensor\n",
            "\ndef top_k_to_sparse_tensor(input, k):\n    # Get the top k values and their indices\n    values, indices = tf.nn.top_k(input, k)\n\n    # Create a sparse tensor from the indices and values\n    sparse_tensor = tf.SparseTensor(indices, values, tf.shape(input))\n\n    # Convert the sparse tensor to a dense tensor\n    dense_tensor = tf.sparse.to_dense(sparse_tensor)\n\n    return dense_tensor\n"
        ],
        "target-program": "tf.sparse.to_dense(tf.SparseTensor(tf.cast(in2, tf.int64), in1, (3, 5)))",
        "description": "use the output of tf.nn.top_k to make a sparse tensor",
        "tf_operators": {
            "tf.shape": 8,
            "tf.sparse.to_dense": 7,
            "tf.sparse.SparseTensor": 1,
            "tf.nn.top_k": 10,
            "tf.cast": 2,
            "tf.expand_dims": 4,
            "tf.float32": 2,
            "tf.SparseTensor": 9,
            "tf.constant": 2,
            "tf.size": 2,
            "tf.newaxis": 1,
            "tf.range": 1,
            "tf.int64": 2
        },
        "coverage_percentage": 100.0,
        "total_in_target": 4,
        "total_covered": 4,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005494505494505495,
                "tf.add(x, y)": 0.005494505494505495,
                "tf.add_n(inputs)": 0.005494505494505495,
                "tf.argmax(input, axis)": 0.005494505494505495,
                "tf.argmin(input, axis)": 0.005494505494505495,
                "tf.argsort(values, axis, stable=True)": 0.005494505494505495,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005494505494505495,
                "tf.boolean_mask(tensor, mask)": 0.005494505494505495,
                "tf.broadcast_to(input, shape)": 0.005494505494505495,
                "tf.cast(x, dtype)": 0.016483516483516484,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005494505494505495,
                "tf.concat(values, axis)": 0.005494505494505495,
                "tf.constant(value)": 0.016483516483516484,
                "tf.constant(value, dtype)": 0.005494505494505495,
                "tf.divide(x, y)": 0.005494505494505495,
                "tf.equal(x, y)": 0.005494505494505495,
                "tf.exp(x)": 0.005494505494505495,
                "tf.expand_dims(input, axis)": 0.027472527472527472,
                "tf.eye(num_rows)": 0.005494505494505495,
                "tf.eye(num_rows, num_columns)": 0.005494505494505495,
                "tf.eye(num_rows, dtype)": 0.005494505494505495,
                "tf.fill(dims, value)": 0.005494505494505495,
                "tf.gather(params, indices)": 0.005494505494505495,
                "tf.gather(params, indices, axis, batch_dims)": 0.005494505494505495,
                "tf.gather_nd(params, indices)": 0.005494505494505495,
                "tf.gather_nd(params, indices, batch_dims)": 0.005494505494505495,
                "tf.greater(x, y)": 0.005494505494505495,
                "tf.greater_equal(x, y)": 0.005494505494505495,
                "tf.math.bincount(arr)": 0.005494505494505495,
                "tf.math.ceil(x)": 0.005494505494505495,
                "tf.math.count_nonzero(input)": 0.005494505494505495,
                "tf.math.count_nonzero(input, axis)": 0.005494505494505495,
                "tf.math.cumsum(x, axis)": 0.005494505494505495,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005494505494505495,
                "tf.math.divide_no_nan(x, y)": 0.005494505494505495,
                "tf.math.floor(x)": 0.005494505494505495,
                "tf.math.log(x)": 0.005494505494505495,
                "tf.math.logical_and(x, y)": 0.005494505494505495,
                "tf.math.logical_not(x)": 0.005494505494505495,
                "tf.math.logical_or(x, y)": 0.005494505494505495,
                "tf.math.logical_xor(x, y)": 0.005494505494505495,
                "tf.math.negative(x)": 0.005494505494505495,
                "tf.math.reciprocal(x)": 0.005494505494505495,
                "tf.math.reciprocal_no_nan(x)": 0.005494505494505495,
                "tf.math.segment_max(data, segment_ids)": 0.005494505494505495,
                "tf.math.segment_mean(data, segment_ids)": 0.005494505494505495,
                "tf.math.segment_min(data, segment_ids)": 0.005494505494505495,
                "tf.math.segment_prod(data, segment_ids)": 0.005494505494505495,
                "tf.math.segment_sum(data, segment_ids)": 0.005494505494505495,
                "tf.math.squared_difference(x, y)": 0.005494505494505495,
                "tf.math.top_k(input, k)": 0.005494505494505495,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005494505494505495,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005494505494505495,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005494505494505495,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005494505494505495,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005494505494505495,
                "tf.matmul(a, b)": 0.005494505494505495,
                "tf.maximum(x, y)": 0.005494505494505495,
                "tf.minimum(x, y)": 0.005494505494505495,
                "tf.multiply(x, y)": 0.005494505494505495,
                "tf.not_equal(x, y)": 0.005494505494505495,
                "tf.one_hot(indices, depth)": 0.005494505494505495,
                "tf.ones(shape)": 0.005494505494505495,
                "tf.ones_like(input)": 0.005494505494505495,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005494505494505495,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005494505494505495,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005494505494505495,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005494505494505495,
                "tf.range(start)": 0.01098901098901099,
                "tf.range(start, limit, delta)": 0.005494505494505495,
                "tf.reduce_any(input_tensor, axis)": 0.005494505494505495,
                "tf.reduce_all(input_tensor, axis)": 0.005494505494505495,
                "tf.reduce_max(input_tensor)": 0.005494505494505495,
                "tf.reduce_max(input_tensor, axis)": 0.005494505494505495,
                "tf.reduce_mean(input_tensor)": 0.005494505494505495,
                "tf.reduce_mean(input_tensor, axis)": 0.005494505494505495,
                "tf.reduce_min(input_tensor)": 0.005494505494505495,
                "tf.reduce_min(input_tensor, axis)": 0.005494505494505495,
                "tf.reduce_prod(input_tensor, axis)": 0.005494505494505495,
                "tf.reduce_sum(input_tensor)": 0.005494505494505495,
                "tf.reduce_sum(input_tensor, axis)": 0.005494505494505495,
                "tf.repeat(input, repeats)": 0.005494505494505495,
                "tf.repeat(input, repeats, axis)": 0.005494505494505495,
                "tf.reshape(tensor, shape)": 0.005494505494505495,
                "tf.reverse(tensor, axis)": 0.005494505494505495,
                "tf.roll(input, shift, axis)": 0.005494505494505495,
                "tf.round(x)": 0.005494505494505495,
                "tf.scatter_nd(indices, updates, shape)": 0.005494505494505495,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005494505494505495,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005494505494505495,
                "tf.sequence_mask(lengths)": 0.005494505494505495,
                "tf.sequence_mask(lengths, maxlen)": 0.005494505494505495,
                "tf.shape(input)": 0.054945054945054944,
                "tf.sign(x)": 0.005494505494505495,
                "tf.sort(values, axis)": 0.005494505494505495,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005494505494505495,
                "tf.sqrt(x)": 0.005494505494505495,
                "tf.square(x)": 0.005494505494505495,
                "tf.squeeze(input)": 0.005494505494505495,
                "tf.squeeze(input, axis)": 0.005494505494505495,
                "tf.stack(values, axis)": 0.005494505494505495,
                "tf.subtract(x, y)": 0.005494505494505495,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005494505494505495,
                "tf.tensordot(a, b, axes)": 0.005494505494505495,
                "tf.tile(input, multiples)": 0.005494505494505495,
                "tf.transpose(a)": 0.005494505494505495,
                "tf.transpose(a, perm)": 0.005494505494505495,
                "tf.unique_with_counts(x)": 0.005494505494505495,
                "tf.unstack(value, axis)": 0.005494505494505495,
                "tf.where(condition)": 0.005494505494505495,
                "tf.where(condition, x, y)": 0.005494505494505495,
                "tf.zeros(shape)": 0.005494505494505495,
                "tf.zeros_like(input)": 0.005494505494505495,
                "tf.SparseTensor(indices, values, dense_shape)": 0.054945054945054944,
                "tf.sparse.add(a, b)": 0.005494505494505495,
                "tf.sparse.concat(axis, sp_inputs)": 0.005494505494505495,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005494505494505495,
                "tf.sparse.from_dense(tensor)": 0.005494505494505495,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005494505494505495,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005494505494505495,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005494505494505495,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005494505494505495,
                "tf.sparse.reset_shape(sp_input)": 0.005494505494505495,
                "tf.sparse.reshape(sp_input, shape)": 0.005494505494505495,
                "tf.sparse.retain(sp_input, to_retain)": 0.005494505494505495,
                "tf.sparse.slice(sp_input, start, size)": 0.005494505494505495,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005494505494505495,
                "tf.sparse.to_dense(sp_input)": 0.005494505494505495,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005494505494505495,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005494505494505495,
                "tf.sparse.transpose(sp_input)": 0.005494505494505495,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005494505494505495,
                "IndexingOperation": 0.01098901098901099,
                "PairCreationOperation": 0.06593406593406594,
                "SingletonTupleCreationOperation": 0.005494505494505495,
                "SlicingAxis0BothOperation": 0.005494505494505495,
                "SlicingAxis0LeftOperation": 0.005494505494505495,
                "SlicingAxis0RightOperation": 0.005494505494505495,
                "SlicingAxis1BothOperation": 0.005494505494505495,
                "SlicingAxis1LeftOperation": 0.005494505494505495,
                "SlicingAxis1RightOperation": 0.005494505494505495,
                "TripleCreationOperation": 0.005494505494505495
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 6,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 6,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 5,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 4,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 4,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 8,
                "IndexingOperation": 7,
                "PairCreationOperation": 4,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8
            }
        }
    },
    {
        "task_id": "stackoverflow_41",
        "completions": [
            "\ndef remove_index_elements(input_list, index):\n    input_tensor = tf.constant(input_list)\n    mask = tf.Variable(tf.ones_like(input_tensor, dtype=tf.bool))\n    mask[index].assign(False)\n    output_tensor = tf.boolean_mask(input_tensor, mask)\n    return output_tensor.numpy().tolist()\n\n",
            "\ndef copy_elements_except_index(input_list, index):\n    tensor = tf.constant(input_list)\n    indices = [i for i in range(len(input_list)) if i != index]\n    result = tf.gather(tensor, indices)\n    return result\n\ninput_list = [5, 2, 8, 2, 4, 1, 1, 0, 2, 1]\nindex = 3\n",
            "def get_element(lst, index):\n    return lst[index]\n",
            "\ndef remove_element(lst, index):\n    tensor = tf.constant(lst)\n    first_part = tensor[:index]\n    second_part = tensor[index+1:]\n    result = tf.concat([first_part, second_part], 0)\n    return result\n\n",
            "\ndef remove_element(tensor, index):\n    mask = tf.sequence_mask([index], tf.size(tensor))\n    mask = tf.concat([mask[0], tf.fill([tf.size(tensor) - index - 1], True)], 0)\n    return tf.boolean_mask(tensor, mask)\n\ntensor = tf.constant([5, 2, 8, 2, 4, 1, 1, 0, 2, 1])\nindex = 3\n",
            "\ndef copy_except_index(lst, index):\n    indices = tf.range(len(lst))\n    mask = tf.not_equal(indices, index)\n    return tf.boolean_mask(lst, mask)\n\nlst = tf.constant([5, 2, 8, 2, 4, 1, 1, 0, 2, 1])\nindex = tf.constant(3)\n\n",
            "\nlist_elements = tf.constant([5, 2, 8, 2, 4, 1, 1, 0, 2, 1])\n\nindex = tf.constant(3)\n\nelement = tf.gather(list_elements, index)\n\n",
            "\ndef remove_element_at_index(lst, index):\n    # Convert list to tensor\n    tensor = tf.constant(lst)\n    \n    # Get slices before and after the index\n    slice_before = tf.slice(tensor, [0], [index])\n    slice_after = tf.slice(tensor, [index+1], [tf.size(tensor) - index - 1])\n\n    # Concatenate slices\n    result = tf.concat([slice_before, slice_after], 0)\n    \n    return result\n\nlst = [5, 2, 8, 2, 4, 1, 1, 0, 2, 1]\nindex = 3\n",
            "\ndef copy_except_index(input_list, index):\n    all_indices = tf.range(len(input_list))\n    mask = tf.not_equal(all_indices, index)\n    indices = tf.boolean_mask(all_indices, mask)\n    output = tf.gather(input_list, indices)\n    return output\n\ninput_list = tf.constant([5, 2, 8, 2, 4, 1, 1, 0, 2, 1])\nindex = tf.constant(3)\n",
            "\ndef copy_except_index(input_list, index):\n    mask = [True]*len(input_list)\n    mask[index] = False\n    result = tf.boolean_mask(input_list, mask)\n    return result\n\ninput_list = [5, 2, 8, 2, 4, 1, 1, 0, 2, 1]\nindex = 3\n"
        ],
        "target-program": "tf.boolean_mask(in1, tf.not_equal(tf.constant(in2), tf.range(10)))",
        "description": "copy all elements except at the given index",
        "tf_operators": {
            "tf.bool": 1,
            "tf.Variable": 1,
            "tf.boolean_mask": 5,
            "tf.ones_like": 1,
            "tf.constant": 8,
            "tf.gather": 3,
            "tf.concat": 3,
            "tf.sequence_mask": 1,
            "tf.fill": 1,
            "tf.size": 2,
            "tf.range": 2,
            "tf.not_equal": 2,
            "tf.slice": 1
        },
        "coverage_percentage": 100.0,
        "total_in_target": 4,
        "total_covered": 4,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005649717514124294,
                "tf.add(x, y)": 0.005649717514124294,
                "tf.add_n(inputs)": 0.005649717514124294,
                "tf.argmax(input, axis)": 0.005649717514124294,
                "tf.argmin(input, axis)": 0.005649717514124294,
                "tf.argsort(values, axis, stable=True)": 0.005649717514124294,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005649717514124294,
                "tf.boolean_mask(tensor, mask)": 0.03389830508474576,
                "tf.broadcast_to(input, shape)": 0.005649717514124294,
                "tf.cast(x, dtype)": 0.005649717514124294,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005649717514124294,
                "tf.concat(values, axis)": 0.022598870056497175,
                "tf.constant(value)": 0.06779661016949153,
                "tf.constant(value, dtype)": 0.005649717514124294,
                "tf.divide(x, y)": 0.005649717514124294,
                "tf.equal(x, y)": 0.005649717514124294,
                "tf.exp(x)": 0.005649717514124294,
                "tf.expand_dims(input, axis)": 0.005649717514124294,
                "tf.eye(num_rows)": 0.005649717514124294,
                "tf.eye(num_rows, num_columns)": 0.005649717514124294,
                "tf.eye(num_rows, dtype)": 0.005649717514124294,
                "tf.fill(dims, value)": 0.011299435028248588,
                "tf.gather(params, indices)": 0.022598870056497175,
                "tf.gather(params, indices, axis, batch_dims)": 0.005649717514124294,
                "tf.gather_nd(params, indices)": 0.005649717514124294,
                "tf.gather_nd(params, indices, batch_dims)": 0.005649717514124294,
                "tf.greater(x, y)": 0.005649717514124294,
                "tf.greater_equal(x, y)": 0.005649717514124294,
                "tf.math.bincount(arr)": 0.005649717514124294,
                "tf.math.ceil(x)": 0.005649717514124294,
                "tf.math.count_nonzero(input)": 0.005649717514124294,
                "tf.math.count_nonzero(input, axis)": 0.005649717514124294,
                "tf.math.cumsum(x, axis)": 0.005649717514124294,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005649717514124294,
                "tf.math.divide_no_nan(x, y)": 0.005649717514124294,
                "tf.math.floor(x)": 0.005649717514124294,
                "tf.math.log(x)": 0.005649717514124294,
                "tf.math.logical_and(x, y)": 0.005649717514124294,
                "tf.math.logical_not(x)": 0.005649717514124294,
                "tf.math.logical_or(x, y)": 0.005649717514124294,
                "tf.math.logical_xor(x, y)": 0.005649717514124294,
                "tf.math.negative(x)": 0.005649717514124294,
                "tf.math.reciprocal(x)": 0.005649717514124294,
                "tf.math.reciprocal_no_nan(x)": 0.005649717514124294,
                "tf.math.segment_max(data, segment_ids)": 0.005649717514124294,
                "tf.math.segment_mean(data, segment_ids)": 0.005649717514124294,
                "tf.math.segment_min(data, segment_ids)": 0.005649717514124294,
                "tf.math.segment_prod(data, segment_ids)": 0.005649717514124294,
                "tf.math.segment_sum(data, segment_ids)": 0.005649717514124294,
                "tf.math.squared_difference(x, y)": 0.005649717514124294,
                "tf.math.top_k(input, k)": 0.005649717514124294,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005649717514124294,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005649717514124294,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005649717514124294,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005649717514124294,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005649717514124294,
                "tf.matmul(a, b)": 0.005649717514124294,
                "tf.maximum(x, y)": 0.005649717514124294,
                "tf.minimum(x, y)": 0.005649717514124294,
                "tf.multiply(x, y)": 0.005649717514124294,
                "tf.not_equal(x, y)": 0.01694915254237288,
                "tf.one_hot(indices, depth)": 0.005649717514124294,
                "tf.ones(shape)": 0.005649717514124294,
                "tf.ones_like(input)": 0.011299435028248588,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005649717514124294,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005649717514124294,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005649717514124294,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005649717514124294,
                "tf.range(start)": 0.01694915254237288,
                "tf.range(start, limit, delta)": 0.005649717514124294,
                "tf.reduce_any(input_tensor, axis)": 0.005649717514124294,
                "tf.reduce_all(input_tensor, axis)": 0.005649717514124294,
                "tf.reduce_max(input_tensor)": 0.005649717514124294,
                "tf.reduce_max(input_tensor, axis)": 0.005649717514124294,
                "tf.reduce_mean(input_tensor)": 0.005649717514124294,
                "tf.reduce_mean(input_tensor, axis)": 0.005649717514124294,
                "tf.reduce_min(input_tensor)": 0.005649717514124294,
                "tf.reduce_min(input_tensor, axis)": 0.005649717514124294,
                "tf.reduce_prod(input_tensor, axis)": 0.005649717514124294,
                "tf.reduce_sum(input_tensor)": 0.005649717514124294,
                "tf.reduce_sum(input_tensor, axis)": 0.005649717514124294,
                "tf.repeat(input, repeats)": 0.005649717514124294,
                "tf.repeat(input, repeats, axis)": 0.005649717514124294,
                "tf.reshape(tensor, shape)": 0.005649717514124294,
                "tf.reverse(tensor, axis)": 0.005649717514124294,
                "tf.roll(input, shift, axis)": 0.005649717514124294,
                "tf.round(x)": 0.005649717514124294,
                "tf.scatter_nd(indices, updates, shape)": 0.005649717514124294,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005649717514124294,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005649717514124294,
                "tf.sequence_mask(lengths)": 0.005649717514124294,
                "tf.sequence_mask(lengths, maxlen)": 0.011299435028248588,
                "tf.shape(input)": 0.005649717514124294,
                "tf.sign(x)": 0.005649717514124294,
                "tf.sort(values, axis)": 0.005649717514124294,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005649717514124294,
                "tf.sqrt(x)": 0.005649717514124294,
                "tf.square(x)": 0.005649717514124294,
                "tf.squeeze(input)": 0.005649717514124294,
                "tf.squeeze(input, axis)": 0.005649717514124294,
                "tf.stack(values, axis)": 0.005649717514124294,
                "tf.subtract(x, y)": 0.005649717514124294,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005649717514124294,
                "tf.tensordot(a, b, axes)": 0.005649717514124294,
                "tf.tile(input, multiples)": 0.005649717514124294,
                "tf.transpose(a)": 0.005649717514124294,
                "tf.transpose(a, perm)": 0.005649717514124294,
                "tf.unique_with_counts(x)": 0.005649717514124294,
                "tf.unstack(value, axis)": 0.005649717514124294,
                "tf.where(condition)": 0.005649717514124294,
                "tf.where(condition, x, y)": 0.005649717514124294,
                "tf.zeros(shape)": 0.005649717514124294,
                "tf.zeros_like(input)": 0.005649717514124294,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005649717514124294,
                "tf.sparse.add(a, b)": 0.005649717514124294,
                "tf.sparse.concat(axis, sp_inputs)": 0.005649717514124294,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005649717514124294,
                "tf.sparse.from_dense(tensor)": 0.005649717514124294,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005649717514124294,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005649717514124294,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005649717514124294,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005649717514124294,
                "tf.sparse.reset_shape(sp_input)": 0.005649717514124294,
                "tf.sparse.reshape(sp_input, shape)": 0.005649717514124294,
                "tf.sparse.retain(sp_input, to_retain)": 0.005649717514124294,
                "tf.sparse.slice(sp_input, start, size)": 0.005649717514124294,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005649717514124294,
                "tf.sparse.to_dense(sp_input)": 0.005649717514124294,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005649717514124294,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005649717514124294,
                "tf.sparse.transpose(sp_input)": 0.005649717514124294,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005649717514124294,
                "IndexingOperation": 0.02824858757062147,
                "PairCreationOperation": 0.005649717514124294,
                "SingletonTupleCreationOperation": 0.005649717514124294,
                "SlicingAxis0BothOperation": 0.005649717514124294,
                "SlicingAxis0LeftOperation": 0.011299435028248588,
                "SlicingAxis0RightOperation": 0.011299435028248588,
                "SlicingAxis1BothOperation": 0.005649717514124294,
                "SlicingAxis1LeftOperation": 0.005649717514124294,
                "SlicingAxis1RightOperation": 0.005649717514124294,
                "TripleCreationOperation": 0.005649717514124294
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 5,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 5,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 6,
                "tf.gather(params, indices)": 5,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 6,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 6,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 6,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 6,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 5,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 6,
                "SlicingAxis0RightOperation": 6,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "stackoverflow_42",
        "completions": [
            "\ndef create_binary_vector(input):\n    input_tensor = tf.constant(input)\n    max_index = tf.argmax(input_tensor)\n    binary_vector = tf.one_hot(max_index, len(input))\n    return binary_vector.numpy()\n",
            "\nlist_input = [4, 6, 2, 6, 7, 3, -3]\n\ntensor_input = tf.constant(list_input)\n\nmax_index = tf.argmax(tensor_input)\n\nbinary_vector = tf.one_hot(max_index, depth=len(list_input))\n\n",
            "\ndef max_one_hot_vector(input):\n    max_position = tf.argmax(input)\n    binary_vector = tf.one_hot(max_position, len(input))\n    return binary_vector\n\ninput = [4, 6, 2, 6, 7, 3, -3]\n",
            "\ndef create_binary_vector(input_list):\n    tensor = tf.constant(input_list)\n    max_index = tf.argmax(tensor)\n    binary_vector = tf.one_hot(max_index, len(input_list))\n    return binary_vector\n\ninput_list = [4, 6, 2, 6, 7, 3, -3]\nbinary_vector = create_binary_vector(input_list)\n",
            "\ndef binary_vector_max(input):\n    max_index = tf.argmax(input)\n    binary_vector = tf.zeros_like(input)\n    binary_vector = tf.tensor_scatter_nd_update(binary_vector, [[max_index]], [1])\n    return binary_vector\n\ninput = tf.constant([4, 6, 2, 6, 7, 3, -3])\n",
            "\ndef create_binary_vector(input_data):\n    max_value = tf.reduce_max(input_data)\n    binary_vector = tf.cast(tf.equal(input_data, max_value), tf.int32)\n    return binary_vector\n\ninput_data = tf.constant([4, 6, 2, 6, 7, 3, -3])\n",
            "\ndef binary_vector(input):\n    input_tensor = tf.constant(input)\n    max_val = tf.reduce_max(input_tensor)\n    binary_vector = tf.cast(tf.equal(input_tensor, max_val), tf.int32)\n    return binary_vector\n\ninput = [4, 6, 2, 6, 7, 3, -3]\n",
            "\ndef create_binary_vector(input):\n    max_index = tf.argmax(input, 0)\n    binary_vector = tf.one_hot(max_index, depth=len(input))\n    return binary_vector\n\ninput = [4, 6, 2, 6, 7, 3, -3]\noutput = create_binary_vector(input)\n",
            "\ndef max_to_one_hot(input):\n    max_index = tf.argmax(input)\n    one_hot = tf.one_hot(max_index, depth=len(input))\n    return one_hot\n\ninput = [4, 6, 2, 6, 7, 3, -3]\n",
            "\nlist_tensor = tf.constant([4, 6, 2, 6, 7, 3, -3])\n\nmax_index = tf.argmax(list_tensor)\n\nbinary_vector = tf.one_hot(max_index, depth=tf.size(list_tensor))\n\n"
        ],
        "target-program": "tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
        "description": "create a binary vector where the max element is 1",
        "tf_operators": {
            "tf.argmax": 8,
            "tf.one_hot": 7,
            "tf.constant": 7,
            "tf.zeros_like": 1,
            "tf.tensor_scatter_nd_update": 1,
            "tf.reduce_max": 2,
            "tf.cast": 2,
            "tf.int32": 2,
            "tf.equal": 2,
            "tf.size": 1
        },
        "coverage_percentage": 100.0,
        "total_in_target": 4,
        "total_covered": 4,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005813953488372093,
                "tf.add(x, y)": 0.005813953488372093,
                "tf.add_n(inputs)": 0.005813953488372093,
                "tf.argmax(input, axis)": 0.05232558139534884,
                "tf.argmin(input, axis)": 0.005813953488372093,
                "tf.argsort(values, axis, stable=True)": 0.005813953488372093,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005813953488372093,
                "tf.boolean_mask(tensor, mask)": 0.005813953488372093,
                "tf.broadcast_to(input, shape)": 0.005813953488372093,
                "tf.cast(x, dtype)": 0.01744186046511628,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005813953488372093,
                "tf.concat(values, axis)": 0.005813953488372093,
                "tf.constant(value)": 0.046511627906976744,
                "tf.constant(value, dtype)": 0.005813953488372093,
                "tf.divide(x, y)": 0.005813953488372093,
                "tf.equal(x, y)": 0.01744186046511628,
                "tf.exp(x)": 0.005813953488372093,
                "tf.expand_dims(input, axis)": 0.005813953488372093,
                "tf.eye(num_rows)": 0.005813953488372093,
                "tf.eye(num_rows, num_columns)": 0.005813953488372093,
                "tf.eye(num_rows, dtype)": 0.005813953488372093,
                "tf.fill(dims, value)": 0.005813953488372093,
                "tf.gather(params, indices)": 0.005813953488372093,
                "tf.gather(params, indices, axis, batch_dims)": 0.005813953488372093,
                "tf.gather_nd(params, indices)": 0.005813953488372093,
                "tf.gather_nd(params, indices, batch_dims)": 0.005813953488372093,
                "tf.greater(x, y)": 0.005813953488372093,
                "tf.greater_equal(x, y)": 0.005813953488372093,
                "tf.math.bincount(arr)": 0.005813953488372093,
                "tf.math.ceil(x)": 0.005813953488372093,
                "tf.math.count_nonzero(input)": 0.005813953488372093,
                "tf.math.count_nonzero(input, axis)": 0.005813953488372093,
                "tf.math.cumsum(x, axis)": 0.005813953488372093,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005813953488372093,
                "tf.math.divide_no_nan(x, y)": 0.005813953488372093,
                "tf.math.floor(x)": 0.005813953488372093,
                "tf.math.log(x)": 0.005813953488372093,
                "tf.math.logical_and(x, y)": 0.005813953488372093,
                "tf.math.logical_not(x)": 0.005813953488372093,
                "tf.math.logical_or(x, y)": 0.005813953488372093,
                "tf.math.logical_xor(x, y)": 0.005813953488372093,
                "tf.math.negative(x)": 0.005813953488372093,
                "tf.math.reciprocal(x)": 0.005813953488372093,
                "tf.math.reciprocal_no_nan(x)": 0.005813953488372093,
                "tf.math.segment_max(data, segment_ids)": 0.005813953488372093,
                "tf.math.segment_mean(data, segment_ids)": 0.005813953488372093,
                "tf.math.segment_min(data, segment_ids)": 0.005813953488372093,
                "tf.math.segment_prod(data, segment_ids)": 0.005813953488372093,
                "tf.math.segment_sum(data, segment_ids)": 0.005813953488372093,
                "tf.math.squared_difference(x, y)": 0.005813953488372093,
                "tf.math.top_k(input, k)": 0.005813953488372093,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005813953488372093,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005813953488372093,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005813953488372093,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005813953488372093,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005813953488372093,
                "tf.matmul(a, b)": 0.005813953488372093,
                "tf.maximum(x, y)": 0.005813953488372093,
                "tf.minimum(x, y)": 0.005813953488372093,
                "tf.multiply(x, y)": 0.005813953488372093,
                "tf.not_equal(x, y)": 0.005813953488372093,
                "tf.one_hot(indices, depth)": 0.046511627906976744,
                "tf.ones(shape)": 0.005813953488372093,
                "tf.ones_like(input)": 0.005813953488372093,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005813953488372093,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005813953488372093,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005813953488372093,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005813953488372093,
                "tf.range(start)": 0.005813953488372093,
                "tf.range(start, limit, delta)": 0.005813953488372093,
                "tf.reduce_any(input_tensor, axis)": 0.005813953488372093,
                "tf.reduce_all(input_tensor, axis)": 0.005813953488372093,
                "tf.reduce_max(input_tensor)": 0.01744186046511628,
                "tf.reduce_max(input_tensor, axis)": 0.005813953488372093,
                "tf.reduce_mean(input_tensor)": 0.005813953488372093,
                "tf.reduce_mean(input_tensor, axis)": 0.005813953488372093,
                "tf.reduce_min(input_tensor)": 0.005813953488372093,
                "tf.reduce_min(input_tensor, axis)": 0.005813953488372093,
                "tf.reduce_prod(input_tensor, axis)": 0.005813953488372093,
                "tf.reduce_sum(input_tensor)": 0.005813953488372093,
                "tf.reduce_sum(input_tensor, axis)": 0.005813953488372093,
                "tf.repeat(input, repeats)": 0.005813953488372093,
                "tf.repeat(input, repeats, axis)": 0.005813953488372093,
                "tf.reshape(tensor, shape)": 0.005813953488372093,
                "tf.reverse(tensor, axis)": 0.005813953488372093,
                "tf.roll(input, shift, axis)": 0.005813953488372093,
                "tf.round(x)": 0.005813953488372093,
                "tf.scatter_nd(indices, updates, shape)": 0.005813953488372093,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005813953488372093,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005813953488372093,
                "tf.sequence_mask(lengths)": 0.005813953488372093,
                "tf.sequence_mask(lengths, maxlen)": 0.005813953488372093,
                "tf.shape(input)": 0.005813953488372093,
                "tf.sign(x)": 0.005813953488372093,
                "tf.sort(values, axis)": 0.005813953488372093,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005813953488372093,
                "tf.sqrt(x)": 0.005813953488372093,
                "tf.square(x)": 0.005813953488372093,
                "tf.squeeze(input)": 0.005813953488372093,
                "tf.squeeze(input, axis)": 0.005813953488372093,
                "tf.stack(values, axis)": 0.005813953488372093,
                "tf.subtract(x, y)": 0.005813953488372093,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.011627906976744186,
                "tf.tensordot(a, b, axes)": 0.005813953488372093,
                "tf.tile(input, multiples)": 0.005813953488372093,
                "tf.transpose(a)": 0.005813953488372093,
                "tf.transpose(a, perm)": 0.005813953488372093,
                "tf.unique_with_counts(x)": 0.005813953488372093,
                "tf.unstack(value, axis)": 0.005813953488372093,
                "tf.where(condition)": 0.005813953488372093,
                "tf.where(condition, x, y)": 0.005813953488372093,
                "tf.zeros(shape)": 0.005813953488372093,
                "tf.zeros_like(input)": 0.011627906976744186,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005813953488372093,
                "tf.sparse.add(a, b)": 0.005813953488372093,
                "tf.sparse.concat(axis, sp_inputs)": 0.005813953488372093,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005813953488372093,
                "tf.sparse.from_dense(tensor)": 0.005813953488372093,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005813953488372093,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005813953488372093,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005813953488372093,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005813953488372093,
                "tf.sparse.reset_shape(sp_input)": 0.005813953488372093,
                "tf.sparse.reshape(sp_input, shape)": 0.005813953488372093,
                "tf.sparse.retain(sp_input, to_retain)": 0.005813953488372093,
                "tf.sparse.slice(sp_input, start, size)": 0.005813953488372093,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005813953488372093,
                "tf.sparse.to_dense(sp_input)": 0.005813953488372093,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005813953488372093,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005813953488372093,
                "tf.sparse.transpose(sp_input)": 0.005813953488372093,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005813953488372093,
                "IndexingOperation": 0.005813953488372093,
                "PairCreationOperation": 0.005813953488372093,
                "SingletonTupleCreationOperation": 0.005813953488372093,
                "SlicingAxis0BothOperation": 0.005813953488372093,
                "SlicingAxis0LeftOperation": 0.005813953488372093,
                "SlicingAxis0RightOperation": 0.005813953488372093,
                "SlicingAxis1BothOperation": 0.005813953488372093,
                "SlicingAxis1LeftOperation": 0.005813953488372093,
                "SlicingAxis1RightOperation": 0.005813953488372093,
                "TripleCreationOperation": 0.005813953488372093
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 4,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 6,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 6,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 4,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 6,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 6,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 6,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "stackoverflow_43",
        "completions": [
            "\ntensor = tf.constant([[12, 34, 56, 78, 90, 10], [99, 88, 77, 55, 44, 33], [-1, -2, -3, -4, -5, -6]])\nindices = tf.constant([0, 1, 1, 0, 2, 0])\n\nextracted_elements = tf.gather_nd(tensor, tf.expand_dims(indices, axis=-1))\n\n",
            "\ntensor = tf.constant([[12, 34, 56, 78, 90, 10], [99, 88, 77, 55, 44, 33], [-1, -2, -3, -4, -5, -6]])\n\nindices = tf.constant([[0, 0], [1, 1], [1, 1], [0, 0], [2, 0], [0, 0]])\n\noutput = tf.gather_nd(tensor, indices)\n\n",
            "\ndef extract_elements(tensor, indices):\n    tensor = tf.constant(tensor)\n    indices = tf.constant(indices)\n    result = tf.gather(tensor, indices)\n    return result\n",
            "\ndef extract_elements(input_tensor, row_indices):\n    indices = [[row_index, 1] for row_index in row_indices]\n    return tf.gather_nd(input_tensor, indices)\n\ninput_tensor = tf.constant([[12, 34, 56, 78, 90, 10], [99, 88, 77, 55, 44, 33], [-1, -2, -3, -4, -5, -6]])\nrow_indices = [0, 1, 1, 0, 2, 0]\n\noutput = extract_elements(input_tensor, row_indices)\n",
            "\ntensor = tf.constant([[12, 34, 56, 78, 90, 10], [99, 88, 77, 55, 44, 33], [-1, -2, -3, -4, -5, -6]])\nindices = tf.constant([0, 1, 1, 0, 2, 0])\n\nresult = tf.gather(tensor, indices)\n\n",
            "\ntensor = tf.constant([[12, 34, 56, 78, 90, 10], [99, 88, 77, 55, 44, 33], [-1, -2, -3, -4, -5, -6]])\nindices = tf.constant([0, 1, 1, 0, 2, 0])\n\nextracted_elements = tf.gather_nd(tensor, tf.reshape(indices, [-1, 1]))\n\n",
            "\ntensor = tf.constant([[12, 34, 56, 78, 90, 10], [99, 88, 77, 55, 44, 33], [-1, -2, -3, -4, -5, -6]])\nindices = tf.constant([0, 1, 1, 0, 2, 0])\n\noutput = tf.gather_nd(tensor, tf.reshape(indices, [-1, 1]))\n\n",
            "\nparams = tf.constant([[12, 34, 56, 78, 90, 10], [99, 88, 77, 55, 44, 33], [-1, -2, -3, -4, -5, -6]])\n\nindices = tf.constant([[0, 0], [1, 1]])\n\noutput = tf.gather_nd(params, indices)\n\n",
            "\ndef extract_elements(tensor, indices):\n    tensor = tf.constant(tensor)\n    indices = list(zip(range(len(indices)), indices))\n    return tf.gather_nd(tensor, indices)\n\ntensor = [[12, 34, 56, 78, 90, 10], [99, 88, 77, 55, 44, 33], [-1, -2, -3, -4, -5, -6]]\nindices = [0, 1, 1, 0, 2, 0]\n",
            "\ndef extract_elements(tensor, indices):\n    tensor = tf.constant(tensor)\n    indices = tf.constant(indices)\n    rows = tf.range(tf.shape(tensor)[0])\n    indices = tf.stack([rows, indices], axis=1)\n    return tf.gather_nd(tensor, indices)\n"
        ],
        "target-program": "tf.gather_nd(tf.transpose(in1), tf.expand_dims(in2, 1), batch_dims=1)",
        "description": "extract elements of a tensor given row indices",
        "tf_operators": {
            "tf.expand_dims": 1,
            "tf.gather_nd": 8,
            "tf.constant": 10,
            "tf.gather": 2,
            "tf.reshape": 2,
            "tf.stack": 1,
            "tf.range": 1,
            "tf.shape": 1
        },
        "coverage_percentage": 66.66666666666666,
        "total_in_target": 3,
        "total_covered": 2,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005649717514124294,
                "tf.add(x, y)": 0.005649717514124294,
                "tf.add_n(inputs)": 0.005649717514124294,
                "tf.argmax(input, axis)": 0.005649717514124294,
                "tf.argmin(input, axis)": 0.005649717514124294,
                "tf.argsort(values, axis, stable=True)": 0.005649717514124294,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005649717514124294,
                "tf.boolean_mask(tensor, mask)": 0.005649717514124294,
                "tf.broadcast_to(input, shape)": 0.005649717514124294,
                "tf.cast(x, dtype)": 0.005649717514124294,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005649717514124294,
                "tf.concat(values, axis)": 0.005649717514124294,
                "tf.constant(value)": 0.10734463276836158,
                "tf.constant(value, dtype)": 0.005649717514124294,
                "tf.divide(x, y)": 0.005649717514124294,
                "tf.equal(x, y)": 0.005649717514124294,
                "tf.exp(x)": 0.005649717514124294,
                "tf.expand_dims(input, axis)": 0.011299435028248588,
                "tf.eye(num_rows)": 0.005649717514124294,
                "tf.eye(num_rows, num_columns)": 0.005649717514124294,
                "tf.eye(num_rows, dtype)": 0.005649717514124294,
                "tf.fill(dims, value)": 0.005649717514124294,
                "tf.gather(params, indices)": 0.01694915254237288,
                "tf.gather(params, indices, axis, batch_dims)": 0.005649717514124294,
                "tf.gather_nd(params, indices)": 0.05084745762711865,
                "tf.gather_nd(params, indices, batch_dims)": 0.005649717514124294,
                "tf.greater(x, y)": 0.005649717514124294,
                "tf.greater_equal(x, y)": 0.005649717514124294,
                "tf.math.bincount(arr)": 0.005649717514124294,
                "tf.math.ceil(x)": 0.005649717514124294,
                "tf.math.count_nonzero(input)": 0.005649717514124294,
                "tf.math.count_nonzero(input, axis)": 0.005649717514124294,
                "tf.math.cumsum(x, axis)": 0.005649717514124294,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005649717514124294,
                "tf.math.divide_no_nan(x, y)": 0.005649717514124294,
                "tf.math.floor(x)": 0.005649717514124294,
                "tf.math.log(x)": 0.005649717514124294,
                "tf.math.logical_and(x, y)": 0.005649717514124294,
                "tf.math.logical_not(x)": 0.005649717514124294,
                "tf.math.logical_or(x, y)": 0.005649717514124294,
                "tf.math.logical_xor(x, y)": 0.005649717514124294,
                "tf.math.negative(x)": 0.005649717514124294,
                "tf.math.reciprocal(x)": 0.005649717514124294,
                "tf.math.reciprocal_no_nan(x)": 0.005649717514124294,
                "tf.math.segment_max(data, segment_ids)": 0.005649717514124294,
                "tf.math.segment_mean(data, segment_ids)": 0.005649717514124294,
                "tf.math.segment_min(data, segment_ids)": 0.005649717514124294,
                "tf.math.segment_prod(data, segment_ids)": 0.005649717514124294,
                "tf.math.segment_sum(data, segment_ids)": 0.005649717514124294,
                "tf.math.squared_difference(x, y)": 0.005649717514124294,
                "tf.math.top_k(input, k)": 0.005649717514124294,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005649717514124294,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005649717514124294,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005649717514124294,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005649717514124294,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005649717514124294,
                "tf.matmul(a, b)": 0.005649717514124294,
                "tf.maximum(x, y)": 0.005649717514124294,
                "tf.minimum(x, y)": 0.005649717514124294,
                "tf.multiply(x, y)": 0.005649717514124294,
                "tf.not_equal(x, y)": 0.005649717514124294,
                "tf.one_hot(indices, depth)": 0.005649717514124294,
                "tf.ones(shape)": 0.005649717514124294,
                "tf.ones_like(input)": 0.005649717514124294,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005649717514124294,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005649717514124294,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005649717514124294,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005649717514124294,
                "tf.range(start)": 0.011299435028248588,
                "tf.range(start, limit, delta)": 0.005649717514124294,
                "tf.reduce_any(input_tensor, axis)": 0.005649717514124294,
                "tf.reduce_all(input_tensor, axis)": 0.005649717514124294,
                "tf.reduce_max(input_tensor)": 0.005649717514124294,
                "tf.reduce_max(input_tensor, axis)": 0.005649717514124294,
                "tf.reduce_mean(input_tensor)": 0.005649717514124294,
                "tf.reduce_mean(input_tensor, axis)": 0.005649717514124294,
                "tf.reduce_min(input_tensor)": 0.005649717514124294,
                "tf.reduce_min(input_tensor, axis)": 0.005649717514124294,
                "tf.reduce_prod(input_tensor, axis)": 0.005649717514124294,
                "tf.reduce_sum(input_tensor)": 0.005649717514124294,
                "tf.reduce_sum(input_tensor, axis)": 0.005649717514124294,
                "tf.repeat(input, repeats)": 0.005649717514124294,
                "tf.repeat(input, repeats, axis)": 0.005649717514124294,
                "tf.reshape(tensor, shape)": 0.01694915254237288,
                "tf.reverse(tensor, axis)": 0.005649717514124294,
                "tf.roll(input, shift, axis)": 0.005649717514124294,
                "tf.round(x)": 0.005649717514124294,
                "tf.scatter_nd(indices, updates, shape)": 0.005649717514124294,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005649717514124294,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005649717514124294,
                "tf.sequence_mask(lengths)": 0.005649717514124294,
                "tf.sequence_mask(lengths, maxlen)": 0.005649717514124294,
                "tf.shape(input)": 0.011299435028248588,
                "tf.sign(x)": 0.005649717514124294,
                "tf.sort(values, axis)": 0.005649717514124294,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005649717514124294,
                "tf.sqrt(x)": 0.005649717514124294,
                "tf.square(x)": 0.005649717514124294,
                "tf.squeeze(input)": 0.005649717514124294,
                "tf.squeeze(input, axis)": 0.005649717514124294,
                "tf.stack(values, axis)": 0.011299435028248588,
                "tf.subtract(x, y)": 0.005649717514124294,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005649717514124294,
                "tf.tensordot(a, b, axes)": 0.005649717514124294,
                "tf.tile(input, multiples)": 0.005649717514124294,
                "tf.transpose(a)": 0.005649717514124294,
                "tf.transpose(a, perm)": 0.005649717514124294,
                "tf.unique_with_counts(x)": 0.005649717514124294,
                "tf.unstack(value, axis)": 0.005649717514124294,
                "tf.where(condition)": 0.005649717514124294,
                "tf.where(condition, x, y)": 0.005649717514124294,
                "tf.zeros(shape)": 0.005649717514124294,
                "tf.zeros_like(input)": 0.005649717514124294,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005649717514124294,
                "tf.sparse.add(a, b)": 0.005649717514124294,
                "tf.sparse.concat(axis, sp_inputs)": 0.005649717514124294,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005649717514124294,
                "tf.sparse.from_dense(tensor)": 0.005649717514124294,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005649717514124294,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005649717514124294,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005649717514124294,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005649717514124294,
                "tf.sparse.reset_shape(sp_input)": 0.005649717514124294,
                "tf.sparse.reshape(sp_input, shape)": 0.005649717514124294,
                "tf.sparse.retain(sp_input, to_retain)": 0.005649717514124294,
                "tf.sparse.slice(sp_input, start, size)": 0.005649717514124294,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005649717514124294,
                "tf.sparse.to_dense(sp_input)": 0.005649717514124294,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005649717514124294,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005649717514124294,
                "tf.sparse.transpose(sp_input)": 0.005649717514124294,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005649717514124294,
                "IndexingOperation": 0.011299435028248588,
                "PairCreationOperation": 0.005649717514124294,
                "SingletonTupleCreationOperation": 0.005649717514124294,
                "SlicingAxis0BothOperation": 0.005649717514124294,
                "SlicingAxis0LeftOperation": 0.005649717514124294,
                "SlicingAxis0RightOperation": 0.005649717514124294,
                "SlicingAxis1BothOperation": 0.005649717514124294,
                "SlicingAxis1LeftOperation": 0.005649717514124294,
                "SlicingAxis1RightOperation": 0.005649717514124294,
                "TripleCreationOperation": 0.005649717514124294
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 3,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 6,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 6,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 4,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 6,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 6,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 6,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 6,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 6,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "stackoverflow_44",
        "completions": [
            "\ndata = [[3, 5, 2], [6, 2, 3], [8, 7, 1], [0, -3, 5], [-4, 7, 3], [2, 1, 6], [10, 20, 30], [4, 5, 6]]\n\ndata_tensor = tf.constant(data)\n\nrow_sums = tf.reduce_sum(data_tensor, axis=1)\n\npair_sums = tf.add(row_sums[:-1], row_sums[1:])\n\n",
            "\ndata = tf.constant([[3, 5, 2], [6, 2, 3], [8, 7, 1], [0, -3, 5], [-4, 7, 3], [2, 1, 6], [10, 20, 30], [4, 5, 6]])\n\nreshaped_data = tf.reshape(data, (-1, 2*data.shape[1]))\n\nresult = tf.reduce_sum(reshaped_data, axis=1)\n\n",
            "\ndef sum_consecutive_rows(data):\n    data = tf.constant(data)\n    result = []\n    for i in range(0, len(data), 2):\n        sum_rows = tf.reduce_sum(data[i:i+2], axis=1)\n        result.append(sum_rows)\n    return result\n\ndata = [[3, 5, 2], [6, 2, 3], [8, 7, 1], [0, -3, 5], [-4, 7, 3], [2, 1, 6], [10, 20, 30], [4, 5, 6]]\n",
            "\ndata = [[3, 5, 2], [6, 2, 3], [8, 7, 1], [0, -3, 5], [-4, 7, 3], [2, 1, 6], [10, 20, 30], [4, 5, 6]]\n\ntensor_data = tf.constant(data)\n\nresult = []\n\nfor i in range(0, len(data), 2):\n    # calculate the sum across columns for every two rows\n    sum = tf.reduce_sum(tensor_data[i:i+2], axis=[0, 1])\n    # store the result\n    result.append(sum)\n\nresult_tensor = tf.stack(result)\n\n",
            "\ndef sum_consecutive_rows(tensor):\n    reshaped_tensor = tf.reshape(tensor, (-1, 2))\n    summed_tensor = tf.reduce_sum(reshaped_tensor, axis=1)\n    return summed_tensor\n\ntensor = tf.constant([[3, 5, 2], [6, 2, 3], [8, 7, 1], [0, -3, 5], [-4, 7, 3], [2, 1, 6], [10, 20, 30], [4, 5, 6]])\noutput = sum_consecutive_rows(tensor)\n",
            "\ndef sum_consecutive_rows(tensor):\n    reshaped_tensor = tf.reshape(tensor, (-1, 2, tensor.shape[1]))\n    return tf.reduce_sum(reshaped_tensor, axis=1)\n\ninput = tf.constant([[3, 5, 2], [6, 2, 3], [8, 7, 1], [0, -3, 5], [-4, 7, 3], [2, 1, 6], [10, 20, 30], [4, 5, 6]])\noutput = sum_consecutive_rows(input)\n",
            "\ndata = [[3, 5, 2], [6, 2, 3], [8, 7, 1], [0, -3, 5], [-4, 7, 3], [2, 1, 6], [10, 20, 30], [4, 5, 6]]\n\ndata_tf = tf.constant(data)\n\npair_sum = tf.add(data_tf[::2], data_tf[1::2])\n\nresult = tf.reduce_sum(pair_sum, axis=1)\n\n",
            "\ninput_tensor = tf.constant([[3, 5, 2], [6, 2, 3], [8, 7, 1], [0, -3, 5], [-4, 7, 3], [2, 1, 6], [10, 20, 30], [4, 5, 6]])\n\nreshaped_tensor = tf.reshape(input_tensor, [-1, input_tensor.shape[1]*2])\n\noutput = tf.reduce_sum(reshaped_tensor, axis=1)\n\n",
            "\ndef sum_consecutive_rows(input):\n    tensor = tf.constant(input)\n    indices1 = tf.range(start=0, limit=tf.shape(tensor)[0], delta=2)\n    indices2 = tf.range(start=1, limit=tf.shape(tensor)[0], delta=2)\n    rows1 = tf.gather(tensor, indices1)\n    rows2 = tf.gather(tensor, indices2)\n    sum_rows1 = tf.reduce_sum(rows1, axis=1)\n    sum_rows2 = tf.reduce_sum(rows2, axis=1)\n    return tf.add(sum_rows1, sum_rows2)\n\ninput = [[3, 5, 2], [6, 2, 3], [8, 7, 1], [0, -3, 5], [-4, 7, 3], [2, 1, 6], [10, 20, 30], [4, 5, 6]]\n",
            "\ndef sum_consecutive_rows(data):\n    tensor = tf.constant(data)\n    reshaped_tensor = tf.reshape(tensor, (-1, 2))\n    result = tf.reduce_sum(reshaped_tensor, axis=1)\n    return result\n\ndata = [[3, 5, 2], [6, 2, 3], [8, 7, 1], [0, -3, 5], [-4, 7, 3], [2, 1, 6], [10, 20, 30], [4, 5, 6]]\n"
        ],
        "target-program": "tf.squeeze(tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1))",
        "description": "sum across columns for pairs of consecutive rows",
        "tf_operators": {
            "tf.reduce_sum": 10,
            "tf.add": 3,
            "tf.constant": 10,
            "tf.reshape": 5,
            "tf.stack": 1,
            "tf.range": 1,
            "tf.shape": 1,
            "tf.gather": 1
        },
        "coverage_percentage": 66.66666666666666,
        "total_in_target": 3,
        "total_covered": 2,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.00558659217877095,
                "tf.add(x, y)": 0.0223463687150838,
                "tf.add_n(inputs)": 0.00558659217877095,
                "tf.argmax(input, axis)": 0.00558659217877095,
                "tf.argmin(input, axis)": 0.00558659217877095,
                "tf.argsort(values, axis, stable=True)": 0.00558659217877095,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.00558659217877095,
                "tf.boolean_mask(tensor, mask)": 0.00558659217877095,
                "tf.broadcast_to(input, shape)": 0.00558659217877095,
                "tf.cast(x, dtype)": 0.00558659217877095,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.00558659217877095,
                "tf.concat(values, axis)": 0.00558659217877095,
                "tf.constant(value)": 0.061452513966480445,
                "tf.constant(value, dtype)": 0.00558659217877095,
                "tf.divide(x, y)": 0.00558659217877095,
                "tf.equal(x, y)": 0.00558659217877095,
                "tf.exp(x)": 0.00558659217877095,
                "tf.expand_dims(input, axis)": 0.00558659217877095,
                "tf.eye(num_rows)": 0.00558659217877095,
                "tf.eye(num_rows, num_columns)": 0.00558659217877095,
                "tf.eye(num_rows, dtype)": 0.00558659217877095,
                "tf.fill(dims, value)": 0.00558659217877095,
                "tf.gather(params, indices)": 0.01675977653631285,
                "tf.gather(params, indices, axis, batch_dims)": 0.00558659217877095,
                "tf.gather_nd(params, indices)": 0.00558659217877095,
                "tf.gather_nd(params, indices, batch_dims)": 0.00558659217877095,
                "tf.greater(x, y)": 0.00558659217877095,
                "tf.greater_equal(x, y)": 0.00558659217877095,
                "tf.math.bincount(arr)": 0.00558659217877095,
                "tf.math.ceil(x)": 0.00558659217877095,
                "tf.math.count_nonzero(input)": 0.00558659217877095,
                "tf.math.count_nonzero(input, axis)": 0.00558659217877095,
                "tf.math.cumsum(x, axis)": 0.00558659217877095,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.00558659217877095,
                "tf.math.divide_no_nan(x, y)": 0.00558659217877095,
                "tf.math.floor(x)": 0.00558659217877095,
                "tf.math.log(x)": 0.00558659217877095,
                "tf.math.logical_and(x, y)": 0.00558659217877095,
                "tf.math.logical_not(x)": 0.00558659217877095,
                "tf.math.logical_or(x, y)": 0.00558659217877095,
                "tf.math.logical_xor(x, y)": 0.00558659217877095,
                "tf.math.negative(x)": 0.00558659217877095,
                "tf.math.reciprocal(x)": 0.00558659217877095,
                "tf.math.reciprocal_no_nan(x)": 0.00558659217877095,
                "tf.math.segment_max(data, segment_ids)": 0.00558659217877095,
                "tf.math.segment_mean(data, segment_ids)": 0.00558659217877095,
                "tf.math.segment_min(data, segment_ids)": 0.00558659217877095,
                "tf.math.segment_prod(data, segment_ids)": 0.00558659217877095,
                "tf.math.segment_sum(data, segment_ids)": 0.00558659217877095,
                "tf.math.squared_difference(x, y)": 0.00558659217877095,
                "tf.math.top_k(input, k)": 0.00558659217877095,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.00558659217877095,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.00558659217877095,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.00558659217877095,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.00558659217877095,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.00558659217877095,
                "tf.matmul(a, b)": 0.00558659217877095,
                "tf.maximum(x, y)": 0.00558659217877095,
                "tf.minimum(x, y)": 0.00558659217877095,
                "tf.multiply(x, y)": 0.00558659217877095,
                "tf.not_equal(x, y)": 0.00558659217877095,
                "tf.one_hot(indices, depth)": 0.00558659217877095,
                "tf.ones(shape)": 0.00558659217877095,
                "tf.ones_like(input)": 0.00558659217877095,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.00558659217877095,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.00558659217877095,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.00558659217877095,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.00558659217877095,
                "tf.range(start)": 0.00558659217877095,
                "tf.range(start, limit, delta)": 0.00558659217877095,
                "tf.reduce_any(input_tensor, axis)": 0.00558659217877095,
                "tf.reduce_all(input_tensor, axis)": 0.00558659217877095,
                "tf.reduce_max(input_tensor)": 0.00558659217877095,
                "tf.reduce_max(input_tensor, axis)": 0.00558659217877095,
                "tf.reduce_mean(input_tensor)": 0.00558659217877095,
                "tf.reduce_mean(input_tensor, axis)": 0.00558659217877095,
                "tf.reduce_min(input_tensor)": 0.00558659217877095,
                "tf.reduce_min(input_tensor, axis)": 0.00558659217877095,
                "tf.reduce_prod(input_tensor, axis)": 0.00558659217877095,
                "tf.reduce_sum(input_tensor)": 0.00558659217877095,
                "tf.reduce_sum(input_tensor, axis)": 0.00558659217877095,
                "tf.repeat(input, repeats)": 0.00558659217877095,
                "tf.repeat(input, repeats, axis)": 0.00558659217877095,
                "tf.reshape(tensor, shape)": 0.0335195530726257,
                "tf.reverse(tensor, axis)": 0.00558659217877095,
                "tf.roll(input, shift, axis)": 0.00558659217877095,
                "tf.round(x)": 0.00558659217877095,
                "tf.scatter_nd(indices, updates, shape)": 0.00558659217877095,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.00558659217877095,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.00558659217877095,
                "tf.sequence_mask(lengths)": 0.00558659217877095,
                "tf.sequence_mask(lengths, maxlen)": 0.00558659217877095,
                "tf.shape(input)": 0.01675977653631285,
                "tf.sign(x)": 0.00558659217877095,
                "tf.sort(values, axis)": 0.00558659217877095,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.00558659217877095,
                "tf.sqrt(x)": 0.00558659217877095,
                "tf.square(x)": 0.00558659217877095,
                "tf.squeeze(input)": 0.00558659217877095,
                "tf.squeeze(input, axis)": 0.00558659217877095,
                "tf.stack(values, axis)": 0.0111731843575419,
                "tf.subtract(x, y)": 0.00558659217877095,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.00558659217877095,
                "tf.tensordot(a, b, axes)": 0.00558659217877095,
                "tf.tile(input, multiples)": 0.00558659217877095,
                "tf.transpose(a)": 0.00558659217877095,
                "tf.transpose(a, perm)": 0.00558659217877095,
                "tf.unique_with_counts(x)": 0.00558659217877095,
                "tf.unstack(value, axis)": 0.00558659217877095,
                "tf.where(condition)": 0.00558659217877095,
                "tf.where(condition, x, y)": 0.00558659217877095,
                "tf.zeros(shape)": 0.00558659217877095,
                "tf.zeros_like(input)": 0.00558659217877095,
                "tf.SparseTensor(indices, values, dense_shape)": 0.00558659217877095,
                "tf.sparse.add(a, b)": 0.00558659217877095,
                "tf.sparse.concat(axis, sp_inputs)": 0.00558659217877095,
                "tf.sparse.expand_dims(sp_input, axis)": 0.00558659217877095,
                "tf.sparse.from_dense(tensor)": 0.00558659217877095,
                "tf.sparse.maximum(sp_a, sp_b)": 0.00558659217877095,
                "tf.sparse.minimum(sp_a, sp_b)": 0.00558659217877095,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.00558659217877095,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.00558659217877095,
                "tf.sparse.reset_shape(sp_input)": 0.00558659217877095,
                "tf.sparse.reshape(sp_input, shape)": 0.00558659217877095,
                "tf.sparse.retain(sp_input, to_retain)": 0.00558659217877095,
                "tf.sparse.slice(sp_input, start, size)": 0.00558659217877095,
                "tf.sparse.split(sp_input, num_split, axis)": 0.00558659217877095,
                "tf.sparse.to_dense(sp_input)": 0.00558659217877095,
                "tf.sparse.to_dense(sp_input, default_value)": 0.00558659217877095,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.00558659217877095,
                "tf.sparse.transpose(sp_input)": 0.00558659217877095,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.00558659217877095,
                "IndexingOperation": 0.0335195530726257,
                "PairCreationOperation": 0.0223463687150838,
                "SingletonTupleCreationOperation": 0.00558659217877095,
                "SlicingAxis0BothOperation": 0.01675977653631285,
                "SlicingAxis0LeftOperation": 0.01675977653631285,
                "SlicingAxis0RightOperation": 0.0111731843575419,
                "SlicingAxis1BothOperation": 0.00558659217877095,
                "SlicingAxis1LeftOperation": 0.00558659217877095,
                "SlicingAxis1RightOperation": 0.00558659217877095,
                "TripleCreationOperation": 0.0111731843575419
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 5,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 6,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 5,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 6,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 6,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 5,
                "PairCreationOperation": 5,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 6,
                "SlicingAxis0LeftOperation": 6,
                "SlicingAxis0RightOperation": 6,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 6
            }
        }
    },
    {
        "task_id": "stackoverflow_45",
        "completions": [
            "\ntensor = tf.constant([[[12, 34], [56, 78], [23, 54], [76, 78], [42, 24]]])\n\nreversed_tensor = tf.reverse(tensor, axis=[0])\n\noutput = reversed_tensor.numpy().tolist()\n\n",
            "\ndata = [[[12, 34], [56, 78], [23, 54], [76, 78], [42, 24]]]\n\ntensor = tf.constant(data)\n\noutput = tf.reverse(tensor, axis=[2])\n\n",
            "\ninput_tensor = tf.constant([[[12, 34], [56, 78], [23, 54], [76, 78], [42, 24]]])\n\nreverse_indices = [0, 2, 4]\n\noutput_tensor = tf.tensor_scatter_nd_update(input_tensor, tf.reshape(reverse_indices, [-1, 1, 1]), tf.reverse(tf.gather_nd(input_tensor, tf.reshape(reverse_indices, [-1, 1, 1])), axis=[-1]))\n\n",
            "\ninput_tensor = tf.constant([[[12, 34], [56, 78], [23, 54], [76, 78], [42, 24]]])\n\noutput_tensor = tf.reverse(input_tensor, axis=[2])\n\n",
            "\ndata = tf.constant([[[12, 34], [56, 78], [23, 54], [76, 78], [42, 24]]])\n\nmask = tf.constant([True, False, True, False, True])\n\nmasked_data = tf.boolean_mask(data, mask, axis=1)\n\nreversed_data = tf.reverse(masked_data, axis=[2])\n\ninverse_mask = tf.math.logical_not(mask)\n\ninverse_masked_data = tf.boolean_mask(data, inverse_mask, axis=1)\n\noutput = tf.concat([reversed_data, inverse_masked_data], axis=1)\n\n",
            "\ntensor = tf.constant([[[12, 34], [56, 78], [23, 54], [76, 78], [42, 24]]])\n\nindices = tf.constant([0, 2, 4])\n\nrows_to_reverse = tf.gather(tensor, indices, axis=1)\n\nreversed_rows = tf.reverse(rows_to_reverse, axis=[2])\n\nmask = tf.sequence_mask(indices, tensor.shape[1])\n\noutput = tf.where(mask, reversed_rows, tensor)\n\n",
            "\ndef reverse_rows(input_tensor, mask):\n    reversed_tensor = tf.reverse(input_tensor, axis=[1])\n    output = tf.where(mask, reversed_tensor, input_tensor)\n    return output\n\ninput_tensor = tf.constant([[[12, 34], [56, 78], [23, 54], [76, 78], [42, 24]]])\nmask = tf.constant([[True, False, True, False, True]])\n\noutput = reverse_rows(input_tensor, mask)\n",
            "\ndata = [[[12, 34], [56, 78], [23, 54], [76, 78], [42, 24]]]\n\ntensor = tf.constant(data)\n\nreversed_tensor = tf.reverse(tensor, axis=[2])\n\n",
            "\ndata = [[[12, 34], [56, 78], [23, 54], [76, 78], [42, 24]]]\n\ntensor = tf.constant(data)\n\nresult = tf.reverse(tensor, [2])\n\n",
            "\ntensor = tf.constant([[[12, 34], [56, 78], [23, 54], [76, 78], [42, 24]]])\n\noutput = tf.reverse(tensor, axis=[-1])\n\n"
        ],
        "target-program": "tf.where(tf.sequence_mask(in2), x=tf.roll(in1, 1, -1), y=in1)",
        "description": "reverse the order in the marked rows",
        "tf_operators": {
            "tf.reverse": 10,
            "tf.constant": 10,
            "tf.reshape": 1,
            "tf.tensor_scatter_nd_update": 1,
            "tf.gather_nd": 1,
            "tf.concat": 1,
            "tf.boolean_mask": 1,
            "tf.math.logical_not": 1,
            "tf.sequence_mask": 1,
            "tf.where": 2,
            "tf.gather": 1
        },
        "coverage_percentage": 66.66666666666666,
        "total_in_target": 3,
        "total_covered": 2,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005649717514124294,
                "tf.add(x, y)": 0.005649717514124294,
                "tf.add_n(inputs)": 0.005649717514124294,
                "tf.argmax(input, axis)": 0.005649717514124294,
                "tf.argmin(input, axis)": 0.005649717514124294,
                "tf.argsort(values, axis, stable=True)": 0.005649717514124294,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005649717514124294,
                "tf.boolean_mask(tensor, mask)": 0.01694915254237288,
                "tf.broadcast_to(input, shape)": 0.005649717514124294,
                "tf.cast(x, dtype)": 0.005649717514124294,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005649717514124294,
                "tf.concat(values, axis)": 0.011299435028248588,
                "tf.constant(value)": 0.07909604519774012,
                "tf.constant(value, dtype)": 0.005649717514124294,
                "tf.divide(x, y)": 0.005649717514124294,
                "tf.equal(x, y)": 0.005649717514124294,
                "tf.exp(x)": 0.005649717514124294,
                "tf.expand_dims(input, axis)": 0.005649717514124294,
                "tf.eye(num_rows)": 0.005649717514124294,
                "tf.eye(num_rows, num_columns)": 0.005649717514124294,
                "tf.eye(num_rows, dtype)": 0.005649717514124294,
                "tf.fill(dims, value)": 0.005649717514124294,
                "tf.gather(params, indices)": 0.005649717514124294,
                "tf.gather(params, indices, axis, batch_dims)": 0.011299435028248588,
                "tf.gather_nd(params, indices)": 0.011299435028248588,
                "tf.gather_nd(params, indices, batch_dims)": 0.005649717514124294,
                "tf.greater(x, y)": 0.005649717514124294,
                "tf.greater_equal(x, y)": 0.005649717514124294,
                "tf.math.bincount(arr)": 0.005649717514124294,
                "tf.math.ceil(x)": 0.005649717514124294,
                "tf.math.count_nonzero(input)": 0.005649717514124294,
                "tf.math.count_nonzero(input, axis)": 0.005649717514124294,
                "tf.math.cumsum(x, axis)": 0.005649717514124294,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005649717514124294,
                "tf.math.divide_no_nan(x, y)": 0.005649717514124294,
                "tf.math.floor(x)": 0.005649717514124294,
                "tf.math.log(x)": 0.005649717514124294,
                "tf.math.logical_and(x, y)": 0.005649717514124294,
                "tf.math.logical_not(x)": 0.005649717514124294,
                "tf.math.logical_or(x, y)": 0.005649717514124294,
                "tf.math.logical_xor(x, y)": 0.005649717514124294,
                "tf.math.negative(x)": 0.005649717514124294,
                "tf.math.reciprocal(x)": 0.005649717514124294,
                "tf.math.reciprocal_no_nan(x)": 0.005649717514124294,
                "tf.math.segment_max(data, segment_ids)": 0.005649717514124294,
                "tf.math.segment_mean(data, segment_ids)": 0.005649717514124294,
                "tf.math.segment_min(data, segment_ids)": 0.005649717514124294,
                "tf.math.segment_prod(data, segment_ids)": 0.005649717514124294,
                "tf.math.segment_sum(data, segment_ids)": 0.005649717514124294,
                "tf.math.squared_difference(x, y)": 0.005649717514124294,
                "tf.math.top_k(input, k)": 0.005649717514124294,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005649717514124294,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005649717514124294,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005649717514124294,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005649717514124294,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005649717514124294,
                "tf.matmul(a, b)": 0.005649717514124294,
                "tf.maximum(x, y)": 0.005649717514124294,
                "tf.minimum(x, y)": 0.005649717514124294,
                "tf.multiply(x, y)": 0.005649717514124294,
                "tf.not_equal(x, y)": 0.005649717514124294,
                "tf.one_hot(indices, depth)": 0.005649717514124294,
                "tf.ones(shape)": 0.005649717514124294,
                "tf.ones_like(input)": 0.005649717514124294,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005649717514124294,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005649717514124294,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005649717514124294,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005649717514124294,
                "tf.range(start)": 0.005649717514124294,
                "tf.range(start, limit, delta)": 0.005649717514124294,
                "tf.reduce_any(input_tensor, axis)": 0.005649717514124294,
                "tf.reduce_all(input_tensor, axis)": 0.005649717514124294,
                "tf.reduce_max(input_tensor)": 0.005649717514124294,
                "tf.reduce_max(input_tensor, axis)": 0.005649717514124294,
                "tf.reduce_mean(input_tensor)": 0.005649717514124294,
                "tf.reduce_mean(input_tensor, axis)": 0.005649717514124294,
                "tf.reduce_min(input_tensor)": 0.005649717514124294,
                "tf.reduce_min(input_tensor, axis)": 0.005649717514124294,
                "tf.reduce_prod(input_tensor, axis)": 0.005649717514124294,
                "tf.reduce_sum(input_tensor)": 0.005649717514124294,
                "tf.reduce_sum(input_tensor, axis)": 0.005649717514124294,
                "tf.repeat(input, repeats)": 0.005649717514124294,
                "tf.repeat(input, repeats, axis)": 0.005649717514124294,
                "tf.reshape(tensor, shape)": 0.01694915254237288,
                "tf.reverse(tensor, axis)": 0.062146892655367235,
                "tf.roll(input, shift, axis)": 0.005649717514124294,
                "tf.round(x)": 0.005649717514124294,
                "tf.scatter_nd(indices, updates, shape)": 0.005649717514124294,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005649717514124294,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005649717514124294,
                "tf.sequence_mask(lengths)": 0.005649717514124294,
                "tf.sequence_mask(lengths, maxlen)": 0.011299435028248588,
                "tf.shape(input)": 0.005649717514124294,
                "tf.sign(x)": 0.005649717514124294,
                "tf.sort(values, axis)": 0.005649717514124294,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005649717514124294,
                "tf.sqrt(x)": 0.005649717514124294,
                "tf.square(x)": 0.005649717514124294,
                "tf.squeeze(input)": 0.005649717514124294,
                "tf.squeeze(input, axis)": 0.005649717514124294,
                "tf.stack(values, axis)": 0.005649717514124294,
                "tf.subtract(x, y)": 0.005649717514124294,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.011299435028248588,
                "tf.tensordot(a, b, axes)": 0.005649717514124294,
                "tf.tile(input, multiples)": 0.005649717514124294,
                "tf.transpose(a)": 0.005649717514124294,
                "tf.transpose(a, perm)": 0.005649717514124294,
                "tf.unique_with_counts(x)": 0.005649717514124294,
                "tf.unstack(value, axis)": 0.005649717514124294,
                "tf.where(condition)": 0.005649717514124294,
                "tf.where(condition, x, y)": 0.01694915254237288,
                "tf.zeros(shape)": 0.005649717514124294,
                "tf.zeros_like(input)": 0.005649717514124294,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005649717514124294,
                "tf.sparse.add(a, b)": 0.005649717514124294,
                "tf.sparse.concat(axis, sp_inputs)": 0.005649717514124294,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005649717514124294,
                "tf.sparse.from_dense(tensor)": 0.005649717514124294,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005649717514124294,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005649717514124294,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005649717514124294,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005649717514124294,
                "tf.sparse.reset_shape(sp_input)": 0.005649717514124294,
                "tf.sparse.reshape(sp_input, shape)": 0.005649717514124294,
                "tf.sparse.retain(sp_input, to_retain)": 0.005649717514124294,
                "tf.sparse.slice(sp_input, start, size)": 0.005649717514124294,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005649717514124294,
                "tf.sparse.to_dense(sp_input)": 0.005649717514124294,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005649717514124294,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005649717514124294,
                "tf.sparse.transpose(sp_input)": 0.005649717514124294,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005649717514124294,
                "IndexingOperation": 0.011299435028248588,
                "PairCreationOperation": 0.005649717514124294,
                "SingletonTupleCreationOperation": 0.005649717514124294,
                "SlicingAxis0BothOperation": 0.005649717514124294,
                "SlicingAxis0LeftOperation": 0.005649717514124294,
                "SlicingAxis0RightOperation": 0.005649717514124294,
                "SlicingAxis1BothOperation": 0.005649717514124294,
                "SlicingAxis1LeftOperation": 0.005649717514124294,
                "SlicingAxis1RightOperation": 0.005649717514124294,
                "TripleCreationOperation": 0.005649717514124294
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 6,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 6,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 6,
                "tf.gather_nd(params, indices)": 6,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 6,
                "tf.reverse(tensor, axis)": 4,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 6,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 6,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 6,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 6,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "stackoverflow_46",
        "completions": [
            "\ndef convert_lengths_to_ids(lengths):\n    return tf.repeat(tf.range(len(lengths)), lengths)\n\nlengths = tf.constant([3, 4, 1])\n",
            "\ndef segment_lengths_to_ids(lengths):\n    return tf.repeat(tf.range(len(lengths)), lengths)\n",
            "\ndef convert_lengths_to_ids(lengths):\n    indices = tf.range(len(lengths))\n    return tf.repeat(indices, lengths)\n\nlengths = tf.constant([3, 4, 1])\nids = convert_lengths_to_ids(lengths)\n",
            "\ndef segment_lengths_to_ids(lengths):\n    lengths_tensor = tf.constant(lengths)\n    indices = tf.range(tf.reduce_max(lengths_tensor) + 1)\n    return tf.repeat(indices, lengths_tensor)\n\nlengths = [3, 4, 1]\n",
            "\ndef segment_lengths_to_ids(segment_lengths):\n    segment_ids = []\n    for i, length in enumerate(segment_lengths):\n        segment_ids.append(tf.fill([length], i))\n    segment_ids = tf.concat(segment_ids, axis=0)\n    return segment_ids\n\nsegment_lengths = [3, 4, 1]\nsegment_ids = segment_lengths_to_ids(segment_lengths)\n",
            "\ndef segment_lengths_to_ids(lengths):\n    segment_ids = tf.range(len(lengths))\n    return tf.repeat(segment_ids, lengths)\n",
            "\ndef segment_lengths_to_ids(lengths):\n    return tf.repeat(tf.range(len(lengths)), lengths)\n",
            "\ndef segment_lengths_to_ids(lengths):\n    ids = tf.repeat(tf.range(len(lengths)), lengths)\n    return ids\n\nlengths = tf.constant([3, 4, 1])\nids = segment_lengths_to_ids(lengths)\n",
            "\ndef convert_lengths_to_ids(lengths):\n    ids = [tf.range(l) for l in lengths]\n    return tf.concat(ids, axis=0)\n\nlengths = [3, 4, 1]\nids = convert_lengths_to_ids(lengths)\n",
            "\ndef segment_lengths_to_ids(lengths):\n    indices = tf.range(len(lengths))\n    return tf.repeat(indices, lengths)\n"
        ],
        "target-program": "tf.cast(tf.where(tf.sequence_mask(in1))[:, 0], tf.int32)",
        "description": "convert segment lengths to segment ids",
        "tf_operators": {
            "tf.range": 9,
            "tf.constant": 4,
            "tf.repeat": 8,
            "tf.reduce_max": 1,
            "tf.fill": 1,
            "tf.concat": 2
        },
        "coverage_percentage": 0.0,
        "total_in_target": 4,
        "total_covered": 0,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005952380952380952,
                "tf.add(x, y)": 0.005952380952380952,
                "tf.add_n(inputs)": 0.005952380952380952,
                "tf.argmax(input, axis)": 0.005952380952380952,
                "tf.argmin(input, axis)": 0.005952380952380952,
                "tf.argsort(values, axis, stable=True)": 0.005952380952380952,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005952380952380952,
                "tf.boolean_mask(tensor, mask)": 0.005952380952380952,
                "tf.broadcast_to(input, shape)": 0.005952380952380952,
                "tf.cast(x, dtype)": 0.005952380952380952,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005952380952380952,
                "tf.concat(values, axis)": 0.017857142857142856,
                "tf.constant(value)": 0.02976190476190476,
                "tf.constant(value, dtype)": 0.005952380952380952,
                "tf.divide(x, y)": 0.005952380952380952,
                "tf.equal(x, y)": 0.005952380952380952,
                "tf.exp(x)": 0.005952380952380952,
                "tf.expand_dims(input, axis)": 0.005952380952380952,
                "tf.eye(num_rows)": 0.005952380952380952,
                "tf.eye(num_rows, num_columns)": 0.005952380952380952,
                "tf.eye(num_rows, dtype)": 0.005952380952380952,
                "tf.fill(dims, value)": 0.011904761904761904,
                "tf.gather(params, indices)": 0.005952380952380952,
                "tf.gather(params, indices, axis, batch_dims)": 0.005952380952380952,
                "tf.gather_nd(params, indices)": 0.005952380952380952,
                "tf.gather_nd(params, indices, batch_dims)": 0.005952380952380952,
                "tf.greater(x, y)": 0.005952380952380952,
                "tf.greater_equal(x, y)": 0.005952380952380952,
                "tf.math.bincount(arr)": 0.005952380952380952,
                "tf.math.ceil(x)": 0.005952380952380952,
                "tf.math.count_nonzero(input)": 0.005952380952380952,
                "tf.math.count_nonzero(input, axis)": 0.005952380952380952,
                "tf.math.cumsum(x, axis)": 0.005952380952380952,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005952380952380952,
                "tf.math.divide_no_nan(x, y)": 0.005952380952380952,
                "tf.math.floor(x)": 0.005952380952380952,
                "tf.math.log(x)": 0.005952380952380952,
                "tf.math.logical_and(x, y)": 0.005952380952380952,
                "tf.math.logical_not(x)": 0.005952380952380952,
                "tf.math.logical_or(x, y)": 0.005952380952380952,
                "tf.math.logical_xor(x, y)": 0.005952380952380952,
                "tf.math.negative(x)": 0.005952380952380952,
                "tf.math.reciprocal(x)": 0.005952380952380952,
                "tf.math.reciprocal_no_nan(x)": 0.005952380952380952,
                "tf.math.segment_max(data, segment_ids)": 0.005952380952380952,
                "tf.math.segment_mean(data, segment_ids)": 0.005952380952380952,
                "tf.math.segment_min(data, segment_ids)": 0.005952380952380952,
                "tf.math.segment_prod(data, segment_ids)": 0.005952380952380952,
                "tf.math.segment_sum(data, segment_ids)": 0.005952380952380952,
                "tf.math.squared_difference(x, y)": 0.005952380952380952,
                "tf.math.top_k(input, k)": 0.005952380952380952,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005952380952380952,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005952380952380952,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005952380952380952,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005952380952380952,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005952380952380952,
                "tf.matmul(a, b)": 0.005952380952380952,
                "tf.maximum(x, y)": 0.005952380952380952,
                "tf.minimum(x, y)": 0.005952380952380952,
                "tf.multiply(x, y)": 0.005952380952380952,
                "tf.not_equal(x, y)": 0.005952380952380952,
                "tf.one_hot(indices, depth)": 0.005952380952380952,
                "tf.ones(shape)": 0.005952380952380952,
                "tf.ones_like(input)": 0.005952380952380952,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005952380952380952,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005952380952380952,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005952380952380952,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005952380952380952,
                "tf.range(start)": 0.05952380952380952,
                "tf.range(start, limit, delta)": 0.005952380952380952,
                "tf.reduce_any(input_tensor, axis)": 0.005952380952380952,
                "tf.reduce_all(input_tensor, axis)": 0.005952380952380952,
                "tf.reduce_max(input_tensor)": 0.011904761904761904,
                "tf.reduce_max(input_tensor, axis)": 0.005952380952380952,
                "tf.reduce_mean(input_tensor)": 0.005952380952380952,
                "tf.reduce_mean(input_tensor, axis)": 0.005952380952380952,
                "tf.reduce_min(input_tensor)": 0.005952380952380952,
                "tf.reduce_min(input_tensor, axis)": 0.005952380952380952,
                "tf.reduce_prod(input_tensor, axis)": 0.005952380952380952,
                "tf.reduce_sum(input_tensor)": 0.005952380952380952,
                "tf.reduce_sum(input_tensor, axis)": 0.005952380952380952,
                "tf.repeat(input, repeats)": 0.05357142857142857,
                "tf.repeat(input, repeats, axis)": 0.005952380952380952,
                "tf.reshape(tensor, shape)": 0.005952380952380952,
                "tf.reverse(tensor, axis)": 0.005952380952380952,
                "tf.roll(input, shift, axis)": 0.005952380952380952,
                "tf.round(x)": 0.005952380952380952,
                "tf.scatter_nd(indices, updates, shape)": 0.005952380952380952,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005952380952380952,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005952380952380952,
                "tf.sequence_mask(lengths)": 0.005952380952380952,
                "tf.sequence_mask(lengths, maxlen)": 0.005952380952380952,
                "tf.shape(input)": 0.005952380952380952,
                "tf.sign(x)": 0.005952380952380952,
                "tf.sort(values, axis)": 0.005952380952380952,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005952380952380952,
                "tf.sqrt(x)": 0.005952380952380952,
                "tf.square(x)": 0.005952380952380952,
                "tf.squeeze(input)": 0.005952380952380952,
                "tf.squeeze(input, axis)": 0.005952380952380952,
                "tf.stack(values, axis)": 0.005952380952380952,
                "tf.subtract(x, y)": 0.005952380952380952,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005952380952380952,
                "tf.tensordot(a, b, axes)": 0.005952380952380952,
                "tf.tile(input, multiples)": 0.005952380952380952,
                "tf.transpose(a)": 0.005952380952380952,
                "tf.transpose(a, perm)": 0.005952380952380952,
                "tf.unique_with_counts(x)": 0.005952380952380952,
                "tf.unstack(value, axis)": 0.005952380952380952,
                "tf.where(condition)": 0.005952380952380952,
                "tf.where(condition, x, y)": 0.005952380952380952,
                "tf.zeros(shape)": 0.005952380952380952,
                "tf.zeros_like(input)": 0.005952380952380952,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005952380952380952,
                "tf.sparse.add(a, b)": 0.005952380952380952,
                "tf.sparse.concat(axis, sp_inputs)": 0.005952380952380952,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005952380952380952,
                "tf.sparse.from_dense(tensor)": 0.005952380952380952,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005952380952380952,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005952380952380952,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005952380952380952,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005952380952380952,
                "tf.sparse.reset_shape(sp_input)": 0.005952380952380952,
                "tf.sparse.reshape(sp_input, shape)": 0.005952380952380952,
                "tf.sparse.retain(sp_input, to_retain)": 0.005952380952380952,
                "tf.sparse.slice(sp_input, start, size)": 0.005952380952380952,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005952380952380952,
                "tf.sparse.to_dense(sp_input)": 0.005952380952380952,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005952380952380952,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005952380952380952,
                "tf.sparse.transpose(sp_input)": 0.005952380952380952,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005952380952380952,
                "IndexingOperation": 0.005952380952380952,
                "PairCreationOperation": 0.011904761904761904,
                "SingletonTupleCreationOperation": 0.005952380952380952,
                "SlicingAxis0BothOperation": 0.005952380952380952,
                "SlicingAxis0LeftOperation": 0.005952380952380952,
                "SlicingAxis0RightOperation": 0.005952380952380952,
                "SlicingAxis1BothOperation": 0.005952380952380952,
                "SlicingAxis1LeftOperation": 0.005952380952380952,
                "SlicingAxis1RightOperation": 0.005952380952380952,
                "TripleCreationOperation": 0.005952380952380952
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 6,
                "tf.constant(value)": 5,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 6,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 4,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 6,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 4,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 6,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "stackoverflow_47",
        "completions": [
            "\ndef create_sequence_mask(input):\n    if isinstance(input[0], int):\n        return tf.sequence_mask(input, 3)\n    elif isinstance(input[0], list):\n        return [tf.math.count_nonzero(x) for x in input]\n",
            "\ndef sequence_mask(lengths, maxlen):\n    return tf.sequence_mask(lengths, maxlen)\n\n",
            "\ndef create_sequence_mask(input_list):\n    # Create a tensor from the input list\n    input_tensor = tf.constant(input_list)\n    # Create a sequence mask\n    mask = tf.sequence_mask(input_tensor, maxlen=len(input_list))\n    # Convert the mask to integers\n    mask = tf.cast(mask, tf.int32)\n    # Sum the mask along the last dimension to get the final output\n    output = tf.reduce_sum(mask, axis=-1)\n    return output.numpy().tolist()\n\n",
            "\ndef sequence_mask(lengths):\n    mask = tf.sequence_mask(lengths)\n    mask = tf.cast(mask, tf.int32)\n    return mask\n\nlengths = [3, 2, 5, 4, 1, 2]\n",
            "\nvalues = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n\nmask = tf.sequence_mask(values)\n\nmask_int = tf.cast(mask, tf.int32)\n\noutput = tf.reduce_sum(mask_int, axis=1)\n\n",
            "\ndef count_true_values(input):\n    input_tensor = tf.constant(input)\n    int_tensor = tf.cast(input_tensor, tf.int32)\n    return tf.reduce_sum(int_tensor, axis=1)\n\ninput = [[True, True, True, False, False], [True, True, False, False, False], [True, True, True, True, True], [True, True, True, True, False], [True, False, False, False, False], [True, True, False, False, False]]\n",
            "\ndef sequence_mask(values):\n  mask = tf.sequence_mask(values)\n  mask = tf.cast(mask, tf.int32)\n  sum_values = tf.reduce_sum(mask, axis=1)\n  return sum_values\n\nvalues = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n",
            "\nvalues = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\nmask = tf.sequence_mask(values, 5)\n\nvalues = [[True, True, True, False, False], [True, True, False, False, False], [True, True, True, True, True], [True, True, True, True, False], [True, False, False, False, False], [True, True, False, False, False]]\nvalues_int = tf.cast(values, tf.int32)\n",
            "\ndef sequence_mask_and_count(lengths):\n    mask = tf.sequence_mask(lengths)\n    count = tf.math.count_nonzero(mask, axis=1)\n    return count\n\nlengths = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n\nlengths = [[True, True, True, False, False], [True, True, False, False, False], [True, True, True, True, True], [True, True, True, True, False], [True, False, False, False, False], [True, True, False, False, False]]\n",
            "\ndef apply_sequence_mask(values):\n    tensor_values = tf.constant(values)\n    mask = tf.sequence_mask(tensor_values)\n    return tf.reduce_sum(tf.cast(mask, tf.int32), axis=-1)\n"
        ],
        "target-program": "tf.reshape(tf.gather(in1, tf.cumsum(tf.reshape(tf.cast(in2, tf.int32), [-1]), exclusive=True) * tf.reshape(tf.cast(in2, tf.int32), [-1])), in2.shape)",
        "description": "put given values into a sequence mask",
        "tf_operators": {
            "tf.sequence_mask": 9,
            "tf.math.count_nonzero": 2,
            "tf.cast": 7,
            "tf.int32": 7,
            "tf.reduce_sum": 5,
            "tf.constant": 3
        },
        "coverage_percentage": 40.0,
        "total_in_target": 5,
        "total_covered": 2,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.006172839506172839,
                "tf.add(x, y)": 0.006172839506172839,
                "tf.add_n(inputs)": 0.006172839506172839,
                "tf.argmax(input, axis)": 0.006172839506172839,
                "tf.argmin(input, axis)": 0.006172839506172839,
                "tf.argsort(values, axis, stable=True)": 0.006172839506172839,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.006172839506172839,
                "tf.boolean_mask(tensor, mask)": 0.006172839506172839,
                "tf.broadcast_to(input, shape)": 0.006172839506172839,
                "tf.cast(x, dtype)": 0.04938271604938271,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.006172839506172839,
                "tf.concat(values, axis)": 0.006172839506172839,
                "tf.constant(value)": 0.024691358024691357,
                "tf.constant(value, dtype)": 0.006172839506172839,
                "tf.divide(x, y)": 0.006172839506172839,
                "tf.equal(x, y)": 0.006172839506172839,
                "tf.exp(x)": 0.006172839506172839,
                "tf.expand_dims(input, axis)": 0.006172839506172839,
                "tf.eye(num_rows)": 0.006172839506172839,
                "tf.eye(num_rows, num_columns)": 0.006172839506172839,
                "tf.eye(num_rows, dtype)": 0.006172839506172839,
                "tf.fill(dims, value)": 0.006172839506172839,
                "tf.gather(params, indices)": 0.006172839506172839,
                "tf.gather(params, indices, axis, batch_dims)": 0.006172839506172839,
                "tf.gather_nd(params, indices)": 0.006172839506172839,
                "tf.gather_nd(params, indices, batch_dims)": 0.006172839506172839,
                "tf.greater(x, y)": 0.006172839506172839,
                "tf.greater_equal(x, y)": 0.006172839506172839,
                "tf.math.bincount(arr)": 0.006172839506172839,
                "tf.math.ceil(x)": 0.006172839506172839,
                "tf.math.count_nonzero(input)": 0.006172839506172839,
                "tf.math.count_nonzero(input, axis)": 0.006172839506172839,
                "tf.math.cumsum(x, axis)": 0.006172839506172839,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.006172839506172839,
                "tf.math.divide_no_nan(x, y)": 0.006172839506172839,
                "tf.math.floor(x)": 0.006172839506172839,
                "tf.math.log(x)": 0.006172839506172839,
                "tf.math.logical_and(x, y)": 0.006172839506172839,
                "tf.math.logical_not(x)": 0.006172839506172839,
                "tf.math.logical_or(x, y)": 0.006172839506172839,
                "tf.math.logical_xor(x, y)": 0.006172839506172839,
                "tf.math.negative(x)": 0.006172839506172839,
                "tf.math.reciprocal(x)": 0.006172839506172839,
                "tf.math.reciprocal_no_nan(x)": 0.006172839506172839,
                "tf.math.segment_max(data, segment_ids)": 0.006172839506172839,
                "tf.math.segment_mean(data, segment_ids)": 0.006172839506172839,
                "tf.math.segment_min(data, segment_ids)": 0.006172839506172839,
                "tf.math.segment_prod(data, segment_ids)": 0.006172839506172839,
                "tf.math.segment_sum(data, segment_ids)": 0.006172839506172839,
                "tf.math.squared_difference(x, y)": 0.006172839506172839,
                "tf.math.top_k(input, k)": 0.006172839506172839,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.006172839506172839,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.006172839506172839,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.006172839506172839,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.006172839506172839,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.006172839506172839,
                "tf.matmul(a, b)": 0.006172839506172839,
                "tf.maximum(x, y)": 0.006172839506172839,
                "tf.minimum(x, y)": 0.006172839506172839,
                "tf.multiply(x, y)": 0.006172839506172839,
                "tf.not_equal(x, y)": 0.006172839506172839,
                "tf.one_hot(indices, depth)": 0.006172839506172839,
                "tf.ones(shape)": 0.006172839506172839,
                "tf.ones_like(input)": 0.006172839506172839,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.006172839506172839,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.006172839506172839,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.006172839506172839,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.006172839506172839,
                "tf.range(start)": 0.006172839506172839,
                "tf.range(start, limit, delta)": 0.006172839506172839,
                "tf.reduce_any(input_tensor, axis)": 0.006172839506172839,
                "tf.reduce_all(input_tensor, axis)": 0.006172839506172839,
                "tf.reduce_max(input_tensor)": 0.006172839506172839,
                "tf.reduce_max(input_tensor, axis)": 0.006172839506172839,
                "tf.reduce_mean(input_tensor)": 0.006172839506172839,
                "tf.reduce_mean(input_tensor, axis)": 0.006172839506172839,
                "tf.reduce_min(input_tensor)": 0.006172839506172839,
                "tf.reduce_min(input_tensor, axis)": 0.006172839506172839,
                "tf.reduce_prod(input_tensor, axis)": 0.006172839506172839,
                "tf.reduce_sum(input_tensor)": 0.006172839506172839,
                "tf.reduce_sum(input_tensor, axis)": 0.006172839506172839,
                "tf.repeat(input, repeats)": 0.006172839506172839,
                "tf.repeat(input, repeats, axis)": 0.006172839506172839,
                "tf.reshape(tensor, shape)": 0.006172839506172839,
                "tf.reverse(tensor, axis)": 0.006172839506172839,
                "tf.roll(input, shift, axis)": 0.006172839506172839,
                "tf.round(x)": 0.006172839506172839,
                "tf.scatter_nd(indices, updates, shape)": 0.006172839506172839,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.006172839506172839,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.006172839506172839,
                "tf.sequence_mask(lengths)": 0.037037037037037035,
                "tf.sequence_mask(lengths, maxlen)": 0.024691358024691357,
                "tf.shape(input)": 0.006172839506172839,
                "tf.sign(x)": 0.006172839506172839,
                "tf.sort(values, axis)": 0.006172839506172839,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.006172839506172839,
                "tf.sqrt(x)": 0.006172839506172839,
                "tf.square(x)": 0.006172839506172839,
                "tf.squeeze(input)": 0.006172839506172839,
                "tf.squeeze(input, axis)": 0.006172839506172839,
                "tf.stack(values, axis)": 0.006172839506172839,
                "tf.subtract(x, y)": 0.006172839506172839,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.006172839506172839,
                "tf.tensordot(a, b, axes)": 0.006172839506172839,
                "tf.tile(input, multiples)": 0.006172839506172839,
                "tf.transpose(a)": 0.006172839506172839,
                "tf.transpose(a, perm)": 0.006172839506172839,
                "tf.unique_with_counts(x)": 0.006172839506172839,
                "tf.unstack(value, axis)": 0.006172839506172839,
                "tf.where(condition)": 0.006172839506172839,
                "tf.where(condition, x, y)": 0.006172839506172839,
                "tf.zeros(shape)": 0.006172839506172839,
                "tf.zeros_like(input)": 0.006172839506172839,
                "tf.SparseTensor(indices, values, dense_shape)": 0.006172839506172839,
                "tf.sparse.add(a, b)": 0.006172839506172839,
                "tf.sparse.concat(axis, sp_inputs)": 0.006172839506172839,
                "tf.sparse.expand_dims(sp_input, axis)": 0.006172839506172839,
                "tf.sparse.from_dense(tensor)": 0.006172839506172839,
                "tf.sparse.maximum(sp_a, sp_b)": 0.006172839506172839,
                "tf.sparse.minimum(sp_a, sp_b)": 0.006172839506172839,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.006172839506172839,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.006172839506172839,
                "tf.sparse.reset_shape(sp_input)": 0.006172839506172839,
                "tf.sparse.reshape(sp_input, shape)": 0.006172839506172839,
                "tf.sparse.retain(sp_input, to_retain)": 0.006172839506172839,
                "tf.sparse.slice(sp_input, start, size)": 0.006172839506172839,
                "tf.sparse.split(sp_input, num_split, axis)": 0.006172839506172839,
                "tf.sparse.to_dense(sp_input)": 0.006172839506172839,
                "tf.sparse.to_dense(sp_input, default_value)": 0.006172839506172839,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.006172839506172839,
                "tf.sparse.transpose(sp_input)": 0.006172839506172839,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.006172839506172839,
                "IndexingOperation": 0.018518518518518517,
                "PairCreationOperation": 0.006172839506172839,
                "SingletonTupleCreationOperation": 0.006172839506172839,
                "SlicingAxis0BothOperation": 0.006172839506172839,
                "SlicingAxis0LeftOperation": 0.006172839506172839,
                "SlicingAxis0RightOperation": 0.006172839506172839,
                "SlicingAxis1BothOperation": 0.006172839506172839,
                "SlicingAxis1LeftOperation": 0.006172839506172839,
                "SlicingAxis1RightOperation": 0.006172839506172839,
                "TripleCreationOperation": 0.006172839506172839
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 4,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 5,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 5,
                "tf.sequence_mask(lengths, maxlen)": 5,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 6,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "stackoverflow_48",
        "completions": [
            "\ndef find_indices(lst):\n    tensor = tf.constant(lst)\n    indices = tf.where(tf.equal(tensor, 38))\n    return indices.numpy().flatten()[0]\n\n",
            "input_tensor = tf.constant([32, 53, 45, 38, 29, 89, 64, 23])\nindices_of_elements = tf.where(input_tensor > 30)",
            "\ndef find_min_index(arr):\n    tensor = tf.constant(arr)\n    min_index = tf.argmin(tensor, axis=0)\n    return min_index.numpy()\n\n",
            "\nlist = tf.constant([32, 53, 45, 38, 29, 89, 64, 23])\n\nvalue = tf.constant(38)\n\nindex = tf.where(tf.equal(list, value))[0, 0]\n\n",
            "\nlist = [32, 53, 45, 38, 29, 89, 64, 23]\n\ntensor = tf.constant(list)\n\nindices = tf.where(tf.equal(tensor, 38))\n\n",
            "\ndef find_index(array, number):\n    array = tf.constant(array)\n    indices = tf.where(tf.equal(array, number))\n    first_index = tf.gather(indices, 0)\n    return first_index.numpy()[0]\n\n",
            "\ndef find_indices(elements):\n    indices = tf.range(len(elements))\n    return indices\n",
            "\ndef find_index(lst):\n    tensor = tf.constant(lst)\n    index = tf.argmin(tensor).numpy()\n    return index\n\n",
            "\nlist = tf.constant([32, 53, 45, 38, 29, 89, 64, 23])\ntarget = 38\n\nindices = tf.where(tf.equal(list, target))\n\n",
            "\ndef find_min_index(array):\n    tensor = tf.constant(array)\n    min_index = tf.argmin(tensor).numpy()\n    return min_index\n"
        ],
        "target-program": "tf.cast(tf.argmax(tf.cast(tf.equal(in1, tf.expand_dims(in2, 1)), tf.int32), axis=1), tf.int32)",
        "description": "find the indices of all elements",
        "tf_operators": {
            "tf.where": 5,
            "tf.equal": 5,
            "tf.constant": 8,
            "tf.argmin": 3,
            "tf.gather": 1,
            "tf.range": 1
        },
        "coverage_percentage": 20.0,
        "total_in_target": 5,
        "total_covered": 1,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005847953216374269,
                "tf.add(x, y)": 0.005847953216374269,
                "tf.add_n(inputs)": 0.005847953216374269,
                "tf.argmax(input, axis)": 0.005847953216374269,
                "tf.argmin(input, axis)": 0.023391812865497075,
                "tf.argsort(values, axis, stable=True)": 0.005847953216374269,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005847953216374269,
                "tf.boolean_mask(tensor, mask)": 0.005847953216374269,
                "tf.broadcast_to(input, shape)": 0.005847953216374269,
                "tf.cast(x, dtype)": 0.005847953216374269,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005847953216374269,
                "tf.concat(values, axis)": 0.005847953216374269,
                "tf.constant(value)": 0.06432748538011696,
                "tf.constant(value, dtype)": 0.005847953216374269,
                "tf.divide(x, y)": 0.005847953216374269,
                "tf.equal(x, y)": 0.03508771929824561,
                "tf.exp(x)": 0.005847953216374269,
                "tf.expand_dims(input, axis)": 0.005847953216374269,
                "tf.eye(num_rows)": 0.005847953216374269,
                "tf.eye(num_rows, num_columns)": 0.005847953216374269,
                "tf.eye(num_rows, dtype)": 0.005847953216374269,
                "tf.fill(dims, value)": 0.005847953216374269,
                "tf.gather(params, indices)": 0.011695906432748537,
                "tf.gather(params, indices, axis, batch_dims)": 0.005847953216374269,
                "tf.gather_nd(params, indices)": 0.005847953216374269,
                "tf.gather_nd(params, indices, batch_dims)": 0.005847953216374269,
                "tf.greater(x, y)": 0.005847953216374269,
                "tf.greater_equal(x, y)": 0.005847953216374269,
                "tf.math.bincount(arr)": 0.005847953216374269,
                "tf.math.ceil(x)": 0.005847953216374269,
                "tf.math.count_nonzero(input)": 0.005847953216374269,
                "tf.math.count_nonzero(input, axis)": 0.005847953216374269,
                "tf.math.cumsum(x, axis)": 0.005847953216374269,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005847953216374269,
                "tf.math.divide_no_nan(x, y)": 0.005847953216374269,
                "tf.math.floor(x)": 0.005847953216374269,
                "tf.math.log(x)": 0.005847953216374269,
                "tf.math.logical_and(x, y)": 0.005847953216374269,
                "tf.math.logical_not(x)": 0.005847953216374269,
                "tf.math.logical_or(x, y)": 0.005847953216374269,
                "tf.math.logical_xor(x, y)": 0.005847953216374269,
                "tf.math.negative(x)": 0.005847953216374269,
                "tf.math.reciprocal(x)": 0.005847953216374269,
                "tf.math.reciprocal_no_nan(x)": 0.005847953216374269,
                "tf.math.segment_max(data, segment_ids)": 0.005847953216374269,
                "tf.math.segment_mean(data, segment_ids)": 0.005847953216374269,
                "tf.math.segment_min(data, segment_ids)": 0.005847953216374269,
                "tf.math.segment_prod(data, segment_ids)": 0.005847953216374269,
                "tf.math.segment_sum(data, segment_ids)": 0.005847953216374269,
                "tf.math.squared_difference(x, y)": 0.005847953216374269,
                "tf.math.top_k(input, k)": 0.005847953216374269,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005847953216374269,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005847953216374269,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005847953216374269,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005847953216374269,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005847953216374269,
                "tf.matmul(a, b)": 0.005847953216374269,
                "tf.maximum(x, y)": 0.005847953216374269,
                "tf.minimum(x, y)": 0.005847953216374269,
                "tf.multiply(x, y)": 0.005847953216374269,
                "tf.not_equal(x, y)": 0.005847953216374269,
                "tf.one_hot(indices, depth)": 0.005847953216374269,
                "tf.ones(shape)": 0.005847953216374269,
                "tf.ones_like(input)": 0.005847953216374269,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005847953216374269,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005847953216374269,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005847953216374269,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005847953216374269,
                "tf.range(start)": 0.011695906432748537,
                "tf.range(start, limit, delta)": 0.005847953216374269,
                "tf.reduce_any(input_tensor, axis)": 0.005847953216374269,
                "tf.reduce_all(input_tensor, axis)": 0.005847953216374269,
                "tf.reduce_max(input_tensor)": 0.005847953216374269,
                "tf.reduce_max(input_tensor, axis)": 0.005847953216374269,
                "tf.reduce_mean(input_tensor)": 0.005847953216374269,
                "tf.reduce_mean(input_tensor, axis)": 0.005847953216374269,
                "tf.reduce_min(input_tensor)": 0.005847953216374269,
                "tf.reduce_min(input_tensor, axis)": 0.005847953216374269,
                "tf.reduce_prod(input_tensor, axis)": 0.005847953216374269,
                "tf.reduce_sum(input_tensor)": 0.005847953216374269,
                "tf.reduce_sum(input_tensor, axis)": 0.005847953216374269,
                "tf.repeat(input, repeats)": 0.005847953216374269,
                "tf.repeat(input, repeats, axis)": 0.005847953216374269,
                "tf.reshape(tensor, shape)": 0.005847953216374269,
                "tf.reverse(tensor, axis)": 0.005847953216374269,
                "tf.roll(input, shift, axis)": 0.005847953216374269,
                "tf.round(x)": 0.005847953216374269,
                "tf.scatter_nd(indices, updates, shape)": 0.005847953216374269,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005847953216374269,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005847953216374269,
                "tf.sequence_mask(lengths)": 0.005847953216374269,
                "tf.sequence_mask(lengths, maxlen)": 0.005847953216374269,
                "tf.shape(input)": 0.005847953216374269,
                "tf.sign(x)": 0.005847953216374269,
                "tf.sort(values, axis)": 0.005847953216374269,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005847953216374269,
                "tf.sqrt(x)": 0.005847953216374269,
                "tf.square(x)": 0.005847953216374269,
                "tf.squeeze(input)": 0.005847953216374269,
                "tf.squeeze(input, axis)": 0.005847953216374269,
                "tf.stack(values, axis)": 0.005847953216374269,
                "tf.subtract(x, y)": 0.005847953216374269,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005847953216374269,
                "tf.tensordot(a, b, axes)": 0.005847953216374269,
                "tf.tile(input, multiples)": 0.005847953216374269,
                "tf.transpose(a)": 0.005847953216374269,
                "tf.transpose(a, perm)": 0.005847953216374269,
                "tf.unique_with_counts(x)": 0.005847953216374269,
                "tf.unstack(value, axis)": 0.005847953216374269,
                "tf.where(condition)": 0.04093567251461988,
                "tf.where(condition, x, y)": 0.005847953216374269,
                "tf.zeros(shape)": 0.005847953216374269,
                "tf.zeros_like(input)": 0.005847953216374269,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005847953216374269,
                "tf.sparse.add(a, b)": 0.005847953216374269,
                "tf.sparse.concat(axis, sp_inputs)": 0.005847953216374269,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005847953216374269,
                "tf.sparse.from_dense(tensor)": 0.005847953216374269,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005847953216374269,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005847953216374269,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005847953216374269,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005847953216374269,
                "tf.sparse.reset_shape(sp_input)": 0.005847953216374269,
                "tf.sparse.reshape(sp_input, shape)": 0.005847953216374269,
                "tf.sparse.retain(sp_input, to_retain)": 0.005847953216374269,
                "tf.sparse.slice(sp_input, start, size)": 0.005847953216374269,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005847953216374269,
                "tf.sparse.to_dense(sp_input)": 0.005847953216374269,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005847953216374269,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005847953216374269,
                "tf.sparse.transpose(sp_input)": 0.005847953216374269,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.005847953216374269,
                "IndexingOperation": 0.017543859649122806,
                "PairCreationOperation": 0.011695906432748537,
                "SingletonTupleCreationOperation": 0.005847953216374269,
                "SlicingAxis0BothOperation": 0.005847953216374269,
                "SlicingAxis0LeftOperation": 0.005847953216374269,
                "SlicingAxis0RightOperation": 0.005847953216374269,
                "SlicingAxis1BothOperation": 0.005847953216374269,
                "SlicingAxis1LeftOperation": 0.005847953216374269,
                "SlicingAxis1RightOperation": 0.005847953216374269,
                "TripleCreationOperation": 0.005847953216374269
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 5,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 4,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 5,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 6,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 6,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 5,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 6,
                "PairCreationOperation": 6,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "stackoverflow_49",
        "completions": [
            "\ndef batch_multiply(tensors, scalars):\n    # Reshape the scalars to match the shape of the tensors\n    scalars_reshaped = tf.reshape(scalars, shape=(-1, 1, 1, 1))\n    # Multiply the tensors by the scalars\n    result = tf.multiply(tensors, scalars_reshaped)\n    return result\n\ntensors = tf.constant([[[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]], [[[0.8, 1.0, 0.0], [0.6, 0.4, 0.2]]], [[[0.9, 0.8, 0.7], [0.1, 0.2, 0.3]]]])\nscalars = tf.constant([2.0, 0.5, 1.0])\noutput = batch_multiply(tensors, scalars)\n",
            "\ntensors = tf.constant([[[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]], [[[0.8, 1.0, 0.0], [0.6, 0.4, 0.2]]], [[[0.9, 0.8, 0.7], [0.1, 0.2, 0.3]]]])\n\nscalars = tf.constant([2.0, 0.5, 1.0])\n\nscalars_reshaped = tf.reshape(scalars, shape=(-1, 1, 1, 1))\n\noutput = tf.multiply(tensors, scalars_reshaped)\n\n",
            "\ntensors = tf.constant([[[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]], [[[0.8, 1.0, 0.0], [0.6, 0.4, 0.2]]], [[[0.9, 0.8, 0.7], [0.1, 0.2, 0.3]]]])\nscalars = tf.constant([2.0, 0.5, 1.0])\n\nscalars_4d = tf.reshape(scalars, shape=(-1, 1, 1, 1))\n\nscalars_broadcasted = tf.broadcast_to(scalars_4d, tf.shape(tensors))\n\nresult = tf.multiply(tensors, scalars_broadcasted)\n\n",
            "\ntensor1 = tf.constant([[[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]], [[[0.8, 1.0, 0.0], [0.6, 0.4, 0.2]]], [[[0.9, 0.8, 0.7], [0.1, 0.2, 0.3]]]])\nscalar1 = tf.constant([2.0, 0.5, 1.0])\n\nresult = tf.multiply(tensor1, tf.reshape(scalar1, [-1, 1, 1, 1]))\n\n",
            "\ntensor_4D = tf.constant([[[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]], [[[0.8, 1.0, 0.0], [0.6, 0.4, 0.2]]], [[[0.9, 0.8, 0.7], [0.1, 0.2, 0.3]]]])\ntensor_1D = tf.constant([2.0, 0.5, 1.0])\n\ntensor_1D_broadcasted = tf.reshape(tensor_1D, (-1, 1, 1, 1))\n\nresult = tf.multiply(tensor_4D, tensor_1D_broadcasted)\n\n",
            "\ndef multiply_tensors(tensors, scalars):\n    tensors = tf.constant(tensors, dtype=tf.float32)\n    scalars = tf.constant(scalars, dtype=tf.float32)\n    return tf.multiply(tensors, scalars)\n\ntensors = [[[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]], [[[0.8, 1.0, 0.0], [0.6, 0.4, 0.2]]], [[[0.9, 0.8, 0.7], [0.1, 0.2, 0.3]]]]\nscalars = [2.0, 0.5, 1.0]\n",
            "\ntensors = tf.constant([[[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]], [[[0.8, 1.0, 0.0], [0.6, 0.4, 0.2]]], [[[0.9, 0.8, 0.7], [0.1, 0.2, 0.3]]]])\nscalars = tf.constant([2.0, 0.5, 1.0])\n\nscalars_reshaped = tf.reshape(scalars, shape=(-1, 1, 1, 1))\n\nresult = tf.multiply(tensors, scalars_reshaped)\n\n",
            "\ntensor = tf.constant([[[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]], [[[0.8, 1.0, 0.0], [0.6, 0.4, 0.2]]], [[[0.9, 0.8, 0.7], [0.1, 0.2, 0.3]]]])\nscalars = tf.constant([2.0, 0.5, 1.0])\n\nscalars_reshaped = tf.reshape(scalars, (-1, 1, 1, 1))\n\nresult = tf.multiply(tensor, scalars_reshaped)\n\n",
            "\ndef multiply_tensors(tensor_4d, tensor_1d):\n    tensor_1d = tf.reshape(tensor_1d, [-1, 1, 1, 1])\n    tensor_1d = tf.broadcast_to(tensor_1d, tf.shape(tensor_4d))\n    result = tf.multiply(tensor_4d, tensor_1d)\n    return result\n",
            "\ndef multiply_tensors_by_scalars(tensors, scalars):\n    result = []\n    for tensor, scalar in zip(tensors, scalars):\n        result.append(tf.multiply(tensor, scalar))\n    return result\n\ntensors = tf.constant([[[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]], [[[0.8, 1.0, 0.0], [0.6, 0.4, 0.2]]], [[[0.9, 0.8, 0.7], [0.1, 0.2, 0.3]]]])\nscalars = tf.constant([2.0, 0.5, 1.0])\n"
        ],
        "target-program": "tf.transpose(tf.multiply(in2, tf.transpose(in1)))",
        "description": "multiply tensors by scalars in a batched way",
        "tf_operators": {
            "tf.multiply": 10,
            "tf.constant": 9,
            "tf.reshape": 8,
            "tf.shape": 2,
            "tf.broadcast_to": 2,
            "tf.float32": 1
        },
        "coverage_percentage": 50.0,
        "total_in_target": 2,
        "total_covered": 1,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0055248618784530384,
                "tf.add(x, y)": 0.0055248618784530384,
                "tf.add_n(inputs)": 0.0055248618784530384,
                "tf.argmax(input, axis)": 0.0055248618784530384,
                "tf.argmin(input, axis)": 0.0055248618784530384,
                "tf.argsort(values, axis, stable=True)": 0.0055248618784530384,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.0055248618784530384,
                "tf.boolean_mask(tensor, mask)": 0.0055248618784530384,
                "tf.broadcast_to(input, shape)": 0.016574585635359115,
                "tf.cast(x, dtype)": 0.0055248618784530384,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0055248618784530384,
                "tf.concat(values, axis)": 0.0055248618784530384,
                "tf.constant(value)": 0.09392265193370165,
                "tf.constant(value, dtype)": 0.0055248618784530384,
                "tf.divide(x, y)": 0.0055248618784530384,
                "tf.equal(x, y)": 0.0055248618784530384,
                "tf.exp(x)": 0.0055248618784530384,
                "tf.expand_dims(input, axis)": 0.0055248618784530384,
                "tf.eye(num_rows)": 0.0055248618784530384,
                "tf.eye(num_rows, num_columns)": 0.0055248618784530384,
                "tf.eye(num_rows, dtype)": 0.0055248618784530384,
                "tf.fill(dims, value)": 0.0055248618784530384,
                "tf.gather(params, indices)": 0.0055248618784530384,
                "tf.gather(params, indices, axis, batch_dims)": 0.0055248618784530384,
                "tf.gather_nd(params, indices)": 0.0055248618784530384,
                "tf.gather_nd(params, indices, batch_dims)": 0.0055248618784530384,
                "tf.greater(x, y)": 0.0055248618784530384,
                "tf.greater_equal(x, y)": 0.0055248618784530384,
                "tf.math.bincount(arr)": 0.0055248618784530384,
                "tf.math.ceil(x)": 0.0055248618784530384,
                "tf.math.count_nonzero(input)": 0.0055248618784530384,
                "tf.math.count_nonzero(input, axis)": 0.0055248618784530384,
                "tf.math.cumsum(x, axis)": 0.0055248618784530384,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0055248618784530384,
                "tf.math.divide_no_nan(x, y)": 0.0055248618784530384,
                "tf.math.floor(x)": 0.0055248618784530384,
                "tf.math.log(x)": 0.0055248618784530384,
                "tf.math.logical_and(x, y)": 0.0055248618784530384,
                "tf.math.logical_not(x)": 0.0055248618784530384,
                "tf.math.logical_or(x, y)": 0.0055248618784530384,
                "tf.math.logical_xor(x, y)": 0.0055248618784530384,
                "tf.math.negative(x)": 0.0055248618784530384,
                "tf.math.reciprocal(x)": 0.0055248618784530384,
                "tf.math.reciprocal_no_nan(x)": 0.0055248618784530384,
                "tf.math.segment_max(data, segment_ids)": 0.0055248618784530384,
                "tf.math.segment_mean(data, segment_ids)": 0.0055248618784530384,
                "tf.math.segment_min(data, segment_ids)": 0.0055248618784530384,
                "tf.math.segment_prod(data, segment_ids)": 0.0055248618784530384,
                "tf.math.segment_sum(data, segment_ids)": 0.0055248618784530384,
                "tf.math.squared_difference(x, y)": 0.0055248618784530384,
                "tf.math.top_k(input, k)": 0.0055248618784530384,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0055248618784530384,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0055248618784530384,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0055248618784530384,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0055248618784530384,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0055248618784530384,
                "tf.matmul(a, b)": 0.0055248618784530384,
                "tf.maximum(x, y)": 0.0055248618784530384,
                "tf.minimum(x, y)": 0.0055248618784530384,
                "tf.multiply(x, y)": 0.06077348066298342,
                "tf.not_equal(x, y)": 0.0055248618784530384,
                "tf.one_hot(indices, depth)": 0.0055248618784530384,
                "tf.ones(shape)": 0.0055248618784530384,
                "tf.ones_like(input)": 0.0055248618784530384,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.0055248618784530384,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.0055248618784530384,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.0055248618784530384,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.0055248618784530384,
                "tf.range(start)": 0.0055248618784530384,
                "tf.range(start, limit, delta)": 0.0055248618784530384,
                "tf.reduce_any(input_tensor, axis)": 0.0055248618784530384,
                "tf.reduce_all(input_tensor, axis)": 0.0055248618784530384,
                "tf.reduce_max(input_tensor)": 0.0055248618784530384,
                "tf.reduce_max(input_tensor, axis)": 0.0055248618784530384,
                "tf.reduce_mean(input_tensor)": 0.0055248618784530384,
                "tf.reduce_mean(input_tensor, axis)": 0.0055248618784530384,
                "tf.reduce_min(input_tensor)": 0.0055248618784530384,
                "tf.reduce_min(input_tensor, axis)": 0.0055248618784530384,
                "tf.reduce_prod(input_tensor, axis)": 0.0055248618784530384,
                "tf.reduce_sum(input_tensor)": 0.0055248618784530384,
                "tf.reduce_sum(input_tensor, axis)": 0.0055248618784530384,
                "tf.repeat(input, repeats)": 0.0055248618784530384,
                "tf.repeat(input, repeats, axis)": 0.0055248618784530384,
                "tf.reshape(tensor, shape)": 0.049723756906077346,
                "tf.reverse(tensor, axis)": 0.0055248618784530384,
                "tf.roll(input, shift, axis)": 0.0055248618784530384,
                "tf.round(x)": 0.0055248618784530384,
                "tf.scatter_nd(indices, updates, shape)": 0.0055248618784530384,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.0055248618784530384,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.0055248618784530384,
                "tf.sequence_mask(lengths)": 0.0055248618784530384,
                "tf.sequence_mask(lengths, maxlen)": 0.0055248618784530384,
                "tf.shape(input)": 0.016574585635359115,
                "tf.sign(x)": 0.0055248618784530384,
                "tf.sort(values, axis)": 0.0055248618784530384,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.0055248618784530384,
                "tf.sqrt(x)": 0.0055248618784530384,
                "tf.square(x)": 0.0055248618784530384,
                "tf.squeeze(input)": 0.0055248618784530384,
                "tf.squeeze(input, axis)": 0.0055248618784530384,
                "tf.stack(values, axis)": 0.0055248618784530384,
                "tf.subtract(x, y)": 0.0055248618784530384,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0055248618784530384,
                "tf.tensordot(a, b, axes)": 0.0055248618784530384,
                "tf.tile(input, multiples)": 0.0055248618784530384,
                "tf.transpose(a)": 0.0055248618784530384,
                "tf.transpose(a, perm)": 0.0055248618784530384,
                "tf.unique_with_counts(x)": 0.0055248618784530384,
                "tf.unstack(value, axis)": 0.0055248618784530384,
                "tf.where(condition)": 0.0055248618784530384,
                "tf.where(condition, x, y)": 0.0055248618784530384,
                "tf.zeros(shape)": 0.0055248618784530384,
                "tf.zeros_like(input)": 0.0055248618784530384,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0055248618784530384,
                "tf.sparse.add(a, b)": 0.0055248618784530384,
                "tf.sparse.concat(axis, sp_inputs)": 0.0055248618784530384,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0055248618784530384,
                "tf.sparse.from_dense(tensor)": 0.0055248618784530384,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0055248618784530384,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0055248618784530384,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0055248618784530384,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0055248618784530384,
                "tf.sparse.reset_shape(sp_input)": 0.0055248618784530384,
                "tf.sparse.reshape(sp_input, shape)": 0.0055248618784530384,
                "tf.sparse.retain(sp_input, to_retain)": 0.0055248618784530384,
                "tf.sparse.slice(sp_input, start, size)": 0.0055248618784530384,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0055248618784530384,
                "tf.sparse.to_dense(sp_input)": 0.0055248618784530384,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0055248618784530384,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0055248618784530384,
                "tf.sparse.transpose(sp_input)": 0.0055248618784530384,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.0055248618784530384,
                "IndexingOperation": 0.0055248618784530384,
                "PairCreationOperation": 0.011049723756906077,
                "SingletonTupleCreationOperation": 0.0055248618784530384,
                "SlicingAxis0BothOperation": 0.0055248618784530384,
                "SlicingAxis0LeftOperation": 0.0055248618784530384,
                "SlicingAxis0RightOperation": 0.0055248618784530384,
                "SlicingAxis1BothOperation": 0.0055248618784530384,
                "SlicingAxis1LeftOperation": 0.0055248618784530384,
                "SlicingAxis1RightOperation": 0.0055248618784530384,
                "TripleCreationOperation": 0.0055248618784530384
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 6,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 3,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 4,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 4,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 6,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 6,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    },
    {
        "task_id": "stackoverflow_50",
        "completions": [
            "\ndef create_one_hot_vector(index, depth):\n    return tf.one_hot(index, depth)\n\n",
            "\ndef create_binary_matrix(index):\n    binary_matrix = tf.one_hot(index, 6)\n    return binary_matrix.numpy().tolist()\n\n",
            "\ndef create_binary_matrix(index):\n    return tf.one_hot(index, index+1)\n\n",
            "\ndef create_binary_matrix(index):\n    return tf.one_hot(index, depth=6)\n",
            "\ndef create_binary_matrix(column):\n    return tf.one_hot(column, 6)\n\n",
            "\nzeros = tf.zeros([6], tf.int32)\n\nresult = tf.tensor_scatter_nd_update(zeros, [[3]], [1])\n\n",
            "\nsize = 6\n\nindex = 5\n\ntensor = tf.zeros([size], dtype=tf.int32)\n\ntensor = tf.tensor_scatter_nd_update(tensor, [[index]], [1])\n\n",
            "\ndef create_binary_matrix(column):\n    return tf.one_hot(column, column + 1)\n\n",
            "\ndef set_one_at_index(index, size):\n    tensor = tf.zeros([size], dtype=tf.int32)\n    indices = [[index]]\n    updates = [1]\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n\n",
            "\ncolumn = 5\n\nbinary_matrix = tf.one_hot(column, depth=6)\n\n"
        ],
        "target-program": "tf.cast(tf.one_hot(tf.fill((in1,), in3), in2), tf.int32)",
        "description": "create a binary matrix where a specified column is set to one",
        "tf_operators": {
            "tf.one_hot": 7,
            "tf.int32": 3,
            "tf.tensor_scatter_nd_update": 3,
            "tf.zeros": 3
        },
        "coverage_percentage": 50.0,
        "total_in_target": 4,
        "total_covered": 2,
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0064516129032258064,
                "tf.add(x, y)": 0.0064516129032258064,
                "tf.add_n(inputs)": 0.0064516129032258064,
                "tf.argmax(input, axis)": 0.0064516129032258064,
                "tf.argmin(input, axis)": 0.0064516129032258064,
                "tf.argsort(values, axis, stable=True)": 0.0064516129032258064,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.0064516129032258064,
                "tf.boolean_mask(tensor, mask)": 0.0064516129032258064,
                "tf.broadcast_to(input, shape)": 0.0064516129032258064,
                "tf.cast(x, dtype)": 0.0064516129032258064,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0064516129032258064,
                "tf.concat(values, axis)": 0.0064516129032258064,
                "tf.constant(value)": 0.0064516129032258064,
                "tf.constant(value, dtype)": 0.0064516129032258064,
                "tf.divide(x, y)": 0.0064516129032258064,
                "tf.equal(x, y)": 0.0064516129032258064,
                "tf.exp(x)": 0.0064516129032258064,
                "tf.expand_dims(input, axis)": 0.0064516129032258064,
                "tf.eye(num_rows)": 0.0064516129032258064,
                "tf.eye(num_rows, num_columns)": 0.0064516129032258064,
                "tf.eye(num_rows, dtype)": 0.0064516129032258064,
                "tf.fill(dims, value)": 0.0064516129032258064,
                "tf.gather(params, indices)": 0.0064516129032258064,
                "tf.gather(params, indices, axis, batch_dims)": 0.0064516129032258064,
                "tf.gather_nd(params, indices)": 0.0064516129032258064,
                "tf.gather_nd(params, indices, batch_dims)": 0.0064516129032258064,
                "tf.greater(x, y)": 0.0064516129032258064,
                "tf.greater_equal(x, y)": 0.0064516129032258064,
                "tf.math.bincount(arr)": 0.0064516129032258064,
                "tf.math.ceil(x)": 0.0064516129032258064,
                "tf.math.count_nonzero(input)": 0.0064516129032258064,
                "tf.math.count_nonzero(input, axis)": 0.0064516129032258064,
                "tf.math.cumsum(x, axis)": 0.0064516129032258064,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0064516129032258064,
                "tf.math.divide_no_nan(x, y)": 0.0064516129032258064,
                "tf.math.floor(x)": 0.0064516129032258064,
                "tf.math.log(x)": 0.0064516129032258064,
                "tf.math.logical_and(x, y)": 0.0064516129032258064,
                "tf.math.logical_not(x)": 0.0064516129032258064,
                "tf.math.logical_or(x, y)": 0.0064516129032258064,
                "tf.math.logical_xor(x, y)": 0.0064516129032258064,
                "tf.math.negative(x)": 0.0064516129032258064,
                "tf.math.reciprocal(x)": 0.0064516129032258064,
                "tf.math.reciprocal_no_nan(x)": 0.0064516129032258064,
                "tf.math.segment_max(data, segment_ids)": 0.0064516129032258064,
                "tf.math.segment_mean(data, segment_ids)": 0.0064516129032258064,
                "tf.math.segment_min(data, segment_ids)": 0.0064516129032258064,
                "tf.math.segment_prod(data, segment_ids)": 0.0064516129032258064,
                "tf.math.segment_sum(data, segment_ids)": 0.0064516129032258064,
                "tf.math.squared_difference(x, y)": 0.0064516129032258064,
                "tf.math.top_k(input, k)": 0.0064516129032258064,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0064516129032258064,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0064516129032258064,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0064516129032258064,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0064516129032258064,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0064516129032258064,
                "tf.matmul(a, b)": 0.0064516129032258064,
                "tf.maximum(x, y)": 0.0064516129032258064,
                "tf.minimum(x, y)": 0.0064516129032258064,
                "tf.multiply(x, y)": 0.0064516129032258064,
                "tf.not_equal(x, y)": 0.0064516129032258064,
                "tf.one_hot(indices, depth)": 0.05161290322580645,
                "tf.ones(shape)": 0.0064516129032258064,
                "tf.ones_like(input)": 0.0064516129032258064,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.0064516129032258064,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.0064516129032258064,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.0064516129032258064,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.0064516129032258064,
                "tf.range(start)": 0.0064516129032258064,
                "tf.range(start, limit, delta)": 0.0064516129032258064,
                "tf.reduce_any(input_tensor, axis)": 0.0064516129032258064,
                "tf.reduce_all(input_tensor, axis)": 0.0064516129032258064,
                "tf.reduce_max(input_tensor)": 0.0064516129032258064,
                "tf.reduce_max(input_tensor, axis)": 0.0064516129032258064,
                "tf.reduce_mean(input_tensor)": 0.0064516129032258064,
                "tf.reduce_mean(input_tensor, axis)": 0.0064516129032258064,
                "tf.reduce_min(input_tensor)": 0.0064516129032258064,
                "tf.reduce_min(input_tensor, axis)": 0.0064516129032258064,
                "tf.reduce_prod(input_tensor, axis)": 0.0064516129032258064,
                "tf.reduce_sum(input_tensor)": 0.0064516129032258064,
                "tf.reduce_sum(input_tensor, axis)": 0.0064516129032258064,
                "tf.repeat(input, repeats)": 0.0064516129032258064,
                "tf.repeat(input, repeats, axis)": 0.0064516129032258064,
                "tf.reshape(tensor, shape)": 0.0064516129032258064,
                "tf.reverse(tensor, axis)": 0.0064516129032258064,
                "tf.roll(input, shift, axis)": 0.0064516129032258064,
                "tf.round(x)": 0.0064516129032258064,
                "tf.scatter_nd(indices, updates, shape)": 0.0064516129032258064,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.0064516129032258064,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.0064516129032258064,
                "tf.sequence_mask(lengths)": 0.0064516129032258064,
                "tf.sequence_mask(lengths, maxlen)": 0.0064516129032258064,
                "tf.shape(input)": 0.0064516129032258064,
                "tf.sign(x)": 0.0064516129032258064,
                "tf.sort(values, axis)": 0.0064516129032258064,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.0064516129032258064,
                "tf.sqrt(x)": 0.0064516129032258064,
                "tf.square(x)": 0.0064516129032258064,
                "tf.squeeze(input)": 0.0064516129032258064,
                "tf.squeeze(input, axis)": 0.0064516129032258064,
                "tf.stack(values, axis)": 0.0064516129032258064,
                "tf.subtract(x, y)": 0.0064516129032258064,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.025806451612903226,
                "tf.tensordot(a, b, axes)": 0.0064516129032258064,
                "tf.tile(input, multiples)": 0.0064516129032258064,
                "tf.transpose(a)": 0.0064516129032258064,
                "tf.transpose(a, perm)": 0.0064516129032258064,
                "tf.unique_with_counts(x)": 0.0064516129032258064,
                "tf.unstack(value, axis)": 0.0064516129032258064,
                "tf.where(condition)": 0.0064516129032258064,
                "tf.where(condition, x, y)": 0.0064516129032258064,
                "tf.zeros(shape)": 0.025806451612903226,
                "tf.zeros_like(input)": 0.0064516129032258064,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0064516129032258064,
                "tf.sparse.add(a, b)": 0.0064516129032258064,
                "tf.sparse.concat(axis, sp_inputs)": 0.0064516129032258064,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0064516129032258064,
                "tf.sparse.from_dense(tensor)": 0.0064516129032258064,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0064516129032258064,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0064516129032258064,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0064516129032258064,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0064516129032258064,
                "tf.sparse.reset_shape(sp_input)": 0.0064516129032258064,
                "tf.sparse.reshape(sp_input, shape)": 0.0064516129032258064,
                "tf.sparse.retain(sp_input, to_retain)": 0.0064516129032258064,
                "tf.sparse.slice(sp_input, start, size)": 0.0064516129032258064,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0064516129032258064,
                "tf.sparse.to_dense(sp_input)": 0.0064516129032258064,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0064516129032258064,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0064516129032258064,
                "tf.sparse.transpose(sp_input)": 0.0064516129032258064,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 0.0064516129032258064,
                "IndexingOperation": 0.0064516129032258064,
                "PairCreationOperation": 0.0064516129032258064,
                "SingletonTupleCreationOperation": 0.0064516129032258064,
                "SlicingAxis0BothOperation": 0.0064516129032258064,
                "SlicingAxis0LeftOperation": 0.0064516129032258064,
                "SlicingAxis0RightOperation": 0.0064516129032258064,
                "SlicingAxis1BothOperation": 0.0064516129032258064,
                "SlicingAxis1LeftOperation": 0.0064516129032258064,
                "SlicingAxis1RightOperation": 0.0064516129032258064,
                "TripleCreationOperation": 0.0064516129032258064
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 7,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 4,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 5,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 5,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7
            }
        }
    }
]