[
    {
        "name": "google_01",
        "description": "Convert index tensor into pairs for SparseTensor indexing",
        "target_program": "tf.cast(tf.where(tf.sequence_mask(tf.math.bincount(in1))), tf.int32)",
        "source": "From an internal Google chat room, 09/07/2018",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 0, 0, 1, 3, 3],]",
            "outputs": "[[0, 0], [0, 1], [0, 2], [1, 0], [3, 0], [3, 1]]"
        },
        "completions": [
            "return tf.stack([tf.math.bincount(in1), in1], axis=1)",
            "return tf.stack([tf.divide(in1, tf.shape(in1)[0]), tf.mod(in1, tf.shape(in1)[0])], axis=1)",
            "return tf.stack([tf.math.floor_div(in1, tf.constant(2, dtype=tf.int32)), tf.math.floormod(in1, tf.constant(2, dtype=tf.int32))], axis=1)",
            "return tf.stack([tf.floor_div(in1, 2), tf.mod(in1, 2)], axis=1)",
            "return tf.stack([tf.math.floor_divide(in1, tf.shape(in1)[0]), tf.math.mod(in1, tf.shape(in1)[0])], axis=1)",
            "return tf.stack([tf.math.floor_divide(in1, tf.reduce_max(in1) + 1), tf.math.floormod(in1, tf.reduce_max(in1) + 1)], axis=1)",
            "return tf.stack([tf.math.floor_div(in1, tf.reduce_max(in1) + 1), tf.math.floormod(in1, tf.reduce_max(in1) + 1)], axis=1)",
            "return tf.stack([tf.math.floor_div(in1, tf.reduce_max(in1) + 1), tf.math.floormod(in1, tf.reduce_max(in1) + 1)], axis=1)",
            "return tf.stack([tf.math.bincount(in1), tf.cast(in1, tf.int32)], axis=1)",
            "return tf.stack([tf.divide(in1, tf.shape(in1)[0]), tf.math.bincount(in1)], axis=1)"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.stack([tf.math.bincount(in1), in1], axis=1)",
            "def transform(in1):\n    return tf.stack([tf.divide(in1, tf.shape(in1)[0]), tf.mod(in1, tf.shape(in1)[0])], axis=1)",
            "def transform(in1):\n    return tf.stack([tf.math.floor_div(in1, tf.constant(2, dtype=tf.int32)), tf.math.floormod(in1, tf.constant(2, dtype=tf.int32))], axis=1)",
            "def transform(in1):\n    return tf.stack([tf.floor_div(in1, 2), tf.mod(in1, 2)], axis=1)",
            "def transform(in1):\n    return tf.stack([tf.math.floor_divide(in1, tf.shape(in1)[0]), tf.math.mod(in1, tf.shape(in1)[0])], axis=1)",
            "def transform(in1):\n    return tf.stack([tf.math.floor_divide(in1, tf.reduce_max(in1) + 1), tf.math.floormod(in1, tf.reduce_max(in1) + 1)], axis=1)",
            "def transform(in1):\n    return tf.stack([tf.math.floor_div(in1, tf.reduce_max(in1) + 1), tf.math.floormod(in1, tf.reduce_max(in1) + 1)], axis=1)",
            "def transform(in1):\n    return tf.stack([tf.math.floor_div(in1, tf.reduce_max(in1) + 1), tf.math.floormod(in1, tf.reduce_max(in1) + 1)], axis=1)",
            "def transform(in1):\n    return tf.stack([tf.math.bincount(in1), tf.cast(in1, tf.int32)], axis=1)",
            "def transform(in1):\n    return tf.stack([tf.divide(in1, tf.shape(in1)[0]), tf.math.bincount(in1)], axis=1)"
        ],
        "tf_operators": {
            "tf.math.bincount": 3,
            "tf.stack": 10,
            "tf.mod": 2,
            "tf.divide": 2,
            "tf.shape": 3,
            "tf.math.floormod": 4,
            "tf.math.floor_div": 3,
            "tf.int32": 2,
            "tf.constant": 1,
            "tf.floor_div": 1,
            "tf.math.floor_divide": 2,
            "tf.math.mod": 1,
            "tf.reduce_max": 3,
            "tf.cast": 1
        },
        "coverage_percentage": 60.0,
        "total_covered": 3,
        "total_in_target": 5,
        "parsed_constants": [
            [
                1
            ],
            [
                0,
                0,
                1
            ],
            [
                2,
                2,
                1
            ],
            [
                2,
                2,
                1
            ],
            [
                0,
                0,
                1
            ],
            [
                1,
                1,
                1
            ],
            [
                1,
                1,
                1
            ],
            [
                1,
                1,
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 31,
            "axis": 0,
            "tf_int32": 3,
            "provided": 4,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 21,
            "tf_bool": 0
        }
    },
    {
        "name": "google_03",
        "description": "Slice the first dimension of a SparseTensor",
        "target_program": "tf.divide(in1, tf.expand_dims(tf.reduce_sum(in1, axis=1), 1))",
        "source": "Real task encountered by Googler, 11/01/2018",
        "constants": "[]",
        "examples": {
            "inputs": "tf.SparseTensor(indices=[[0, 0, 0], [0, 1, 1], [1, 1, 1], [1, 1, 2]], values=[1., 1., 1., 1.], dense_shape=[2, 2, 800])",
            "outputs": "tf.SparseTensor(indices=[[0, 0, 0], [0, 1, 1]], values=[1., 1.], dense_shape=[1, 2, 800])"
        },
        "completions": [
            "return tf.sparse.slice(in1, start=[0,0,0], size=[1,-1,-1])",
            "return tf.sparse.slice(in1, start=[0,0,0], size=[1,-1,-1])",
            "return tf.sparse.slice(in1, start=[0,0,0], size=[1,-1,-1])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, -1, -1])",
            "return tf.sparse.slice(in1, start=[0,0,0], size=[1,-1,-1])",
            "return tf.sparse.slice(in1, [0,0,0], [1,-1,-1])",
            "return tf.sparse.slice(in1, start=[0, 0, 0], size=[1, -1, -1])",
            "return tf.sparse.slice(in1, start=[0,0,0], size=[1,-1,-1])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, -1, -1])",
            "return tf.sparse.slice(in1, start=[0,0,0], size=[1, -1, -1])"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.sparse.slice(in1, start=[0,0,0], size=[1,-1,-1])",
            "def transform(in1):\n    return tf.sparse.slice(in1, start=[0,0,0], size=[1,-1,-1])",
            "def transform(in1):\n    return tf.sparse.slice(in1, start=[0,0,0], size=[1,-1,-1])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, -1, -1])",
            "def transform(in1):\n    return tf.sparse.slice(in1, start=[0,0,0], size=[1,-1,-1])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0,0,0], [1,-1,-1])",
            "def transform(in1):\n    return tf.sparse.slice(in1, start=[0, 0, 0], size=[1, -1, -1])",
            "def transform(in1):\n    return tf.sparse.slice(in1, start=[0,0,0], size=[1,-1,-1])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, -1, -1])",
            "def transform(in1):\n    return tf.sparse.slice(in1, start=[0,0,0], size=[1, -1, -1])"
        ],
        "tf_operators": {
            "tf.sparse.slice": 10
        },
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 3,
        "parsed_constants": [
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ]
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 10,
            "axis": 0,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 60,
            "tf_bool": 0
        }
    },
    {
        "name": "google_04",
        "description": "Reshape a flat array into a rank 3 tensor",
        "target_program": "tf.reshape(in1, shape=(4, 3, 2))",
        "source": "Real task encountered by Googler, 3/21/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[111, 112, 121, 122, 131, 132, 211, 212, 221, 222, 231, 232, 311, 312, 321, 322, 331, 332, 411, 412, 421, 422, 431, 432],]",
            "outputs": "[[[111, 112], [121, 122], [131, 132]],    [[211, 212], [221, 222], [231, 232]],    [[311, 312], [321, 322], [331, 332]],    [[411, 412], [421, 422], [431, 432]]]"
        },
        "completions": [
            "return tf.reshape(in1, [4, 3, 2])",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, [4, 3, 2])",
            "return tf.reshape(in1, [4, 3, 2])",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, [4, 3, 2])",
            "return tf.reshape(in1, [4, 3, 2])",
            "return tf.reshape(in1, [4, 3, 2])",
            "return tf.reshape(in1, (4, 3, 2))"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))"
        ],
        "tf_operators": {
            "tf.reshape": 10
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ]
        ],
        "all_constants": [
            2,
            3,
            4
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            }
        ],
        "aggregate_constant_count": {
            "input_var": 10,
            "axis": 0,
            "tf_int32": 0,
            "provided": 18,
            "shape_tuple": 4,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "google_05",
        "description": "Repeat each input entry 6 times",
        "target_program": "tf.tile(tf.expand_dims(in1, 1), (1, 6, 1))",
        "source": "Real task encountered by Googler, 3/22/2019",
        "constants": "[6]",
        "examples": {
            "inputs": "[[[1, 2, 3, 4], [5, 6, 7, 8]],]",
            "outputs": "[[[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4],     [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]],    [[5, 6, 7, 8], [5, 6, 7, 8], [5, 6, 7, 8],     [5, 6, 7, 8], [5, 6, 7, 8], [5, 6, 7, 8]]]"
        },
        "completions": [
            "return tf.expand_dims(in1, 1)\n    return tf.tile(in1, [1, 6, 1])",
            "return tf.tile(tf.expand_dims(in1, 1), [1, 6, 1])",
            "return tf.expand_dims(in1, axis=1)\n    repeated = tf.tile(repeated, [1, 6, 1]) \n    return repeated",
            "return tf.expand_dims(in1, 1)\n    in1 = tf.repeat(in1, 6, axis=1)\n    return in1",
            "return tf.expand_dims(in1,1)\n    return tf.tile(in1, [1, 6, 1])",
            "return tf.expand_dims(in1, axis=1) + tf.zeros([1, 6, 1], tf.int32)",
            "return tf.expand_dims(in1, 1)\n    repeat_data = tf.tile(in1, [1, 6, 1])\n    return tf.cast(repeat_data, tf.int32)",
            "return tf.reshape(tf.repeat(in1, 6, axis=0), (-1, 6, in1.shape[1]))",
            "return tf.expand_dims(in1, 1)\n    in1 = tf.repeat(in1, 6, axis=1)\n    return in1",
            "return tf.expand_dims(in1, -1)\n    return tf.tile(in1, [1, 1, 6])"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.expand_dims(in1, 1)",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 6, 1])",
            "def transform(in1):\n    return tf.expand_dims(in1, axis=1)",
            "def transform(in1):\n    return tf.expand_dims(in1, 1)",
            "def transform(in1):\n    return tf.expand_dims(in1,1)",
            "def transform(in1):\n    return tf.expand_dims(in1, axis=1) + tf.zeros([1, 6, 1], tf.int32)",
            "def transform(in1):\n    return tf.expand_dims(in1, 1)",
            "def transform(in1):\n    return tf.reshape(tf.repeat(in1, 6, axis=0), (-1, 6, in1.shape[1]))",
            "def transform(in1):\n    return tf.expand_dims(in1, 1)",
            "def transform(in1):\n    return tf.expand_dims(in1, -1)"
        ],
        "tf_operators": {
            "tf.tile": 6,
            "tf.expand_dims": 9,
            "tf.repeat": 3,
            "tf.zeros": 1,
            "tf.int32": 2,
            "tf.cast": 1,
            "tf.reshape": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                1
            ],
            [
                1,
                1,
                6,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1,
                6,
                1
            ],
            [
                1
            ],
            [
                6,
                0,
                -1,
                6,
                1
            ],
            [
                1
            ],
            [
                -1
            ]
        ],
        "all_constants": [
            0,
            1,
            6,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 10,
            "axis": 0,
            "tf_int32": 1,
            "provided": 3,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 16,
            "tf_bool": 0
        }
    },
    {
        "name": "google_06",
        "description": "Take the max from each group of elements",
        "target_program": "tf.math.segment_max(in2, in1)",
        "source": "Real task encountered by Googler, 3/28/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 1, 1, 2, 3, 3, 3, 3],[1, 3, 4, 5, 10, 8, 9, 4],]",
            "outputs": "[1, 4, 5, 10]"
        },
        "completions": [
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)"
        ],
        "tf_operators": {
            "tf.math.segment_max": 5,
            "tf.math.unsorted_segment_max": 5,
            "tf.reduce_max": 5
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [
                1
            ]
        ],
        "all_constants": [
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 25,
            "axis": 0,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 5,
            "tf_bool": 0
        }
    },
    {
        "name": "google_07",
        "description": "Take the argmax of each group of elements",
        "target_program": "tf.cast(tf.argmax((tf.sequence_mask(tf.cumsum(tf.math.bincount(in1)), dtype=tf.int32) - tf.sequence_mask(tf.cumsum(tf.math.bincount(in1), exclusive=True), dtype=tf.int32, maxlen=in1.shape[0])) * in2, axis=1), tf.int32) - tf.cumsum(tf.math.bincount(in1), exclusive=True)",
        "source": "Real task encountered by Googler, 3/29/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 4, 5, 5],[4, 1, 8, 2, 5, 7, 9, 3, 7, 3, 1, 42, 1, 2, 4, 0],]",
            "outputs": "[2, 3, 1, 0, 1, 0]"
        },
        "completions": [
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.cast(tf.math.segment_max(in2, in1), tf.int32)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.cast(tf.math.segment_max(in2, in1), tf.int32)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)"
        ],
        "tf_operators": {
            "tf.math.segment_max": 9,
            "tf.math.unsorted_segment_max": 1,
            "tf.reduce_max": 1,
            "tf.int32": 1,
            "tf.cast": 1
        },
        "coverage_percentage": 33.33333333333333,
        "total_covered": 2,
        "total_in_target": 6,
        "parsed_constants": [
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 21,
            "axis": 0,
            "tf_int32": 1,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 1,
            "tf_bool": 0
        }
    },
    {
        "name": "google_08",
        "description": "create a mask for sequences of the given lengths",
        "target_program": "tf.cast(tf.greater(tf.expand_dims(in1, 1), tf.range(5)), tf.int32)",
        "source": "Real task encountered by Googler, 4/11/2019",
        "constants": "[5]",
        "examples": {
            "inputs": "[[3, 4, 2, 1],]",
            "outputs": "[[1, 1, 1, 0, 0],    [1, 1, 1, 1, 0],    [1, 1, 0, 0, 0],    [1, 0, 0, 0, 0]]"
        },
        "completions": [
            "return tf.cast(tf.sequence_mask(in1, maxlen=tf.reduce_max(in1)), tf.int32)",
            "return tf.cast(tf.sequence_mask(in1, maxlen=tf.reduce_max(in1)), tf.int32)",
            "return tf.cast(tf.sequence_mask(in1), dtype=tf.int32)",
            "return tf.cast(tf.sequence_mask(in1, tf.reduce_max(in1)), tf.int32)",
            "return tf.cast(tf.sequence_mask(in1, maxlen=tf.reduce_max(in1)), tf.int32)",
            "return tf.cast(tf.sequence_mask(in1), tf.int32)",
            "return tf.cast(tf.sequence_mask(in1), tf.int32)",
            "return tf.cast(tf.sequence_mask(in1), tf.int32)",
            "return tf.cast(tf.sequence_mask(in1), tf.int32)",
            "return tf.cast(tf.sequence_mask(in1, maxlen=tf.reduce_max(in1)), tf.int32)"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, maxlen=tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, maxlen=tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1), dtype=tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, maxlen=tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, maxlen=tf.reduce_max(in1)), tf.int32)"
        ],
        "tf_operators": {
            "tf.int32": 10,
            "tf.sequence_mask": 10,
            "tf.cast": 10,
            "tf.reduce_max": 5
        },
        "coverage_percentage": 40.0,
        "total_covered": 2,
        "total_in_target": 5,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 15,
            "axis": 0,
            "tf_int32": 10,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "google_09",
        "description": "sort the segments",
        "target_program": "tf.gather(in2, tf.argsort(in1, stable=True))",
        "source": "Real task encountered by Googler, 8/9/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[1, 1, 1, 0, 0, 2],[10, 20, 30, 14, 15, 26],]",
            "outputs": "[14, 15, 10, 20, 30, 26]"
        },
        "completions": [
            "return tf.gather(in2, tf.argsort(in1))",
            "return tf.gather(in2, tf.argsort(in1))",
            "max_idx = tf.reduce_max(in1)+1\nsegment_min = tf.math.unsorted_segment_min(in2, in1, max_idx)\nsegment_max = tf.math.unsorted_segment_max(in2, in1, max_idx)\nsort_base = tf.cast(in1, tf.float32) + tf.divide(in2 - segment_min, segment_max - segment_min + 1) / 10 \nidx = tf.argsort(sort_base)\nreturn tf.gather(in2, idx)",
            "segment_ids = tf.argsort(in1)\nsorted_values = tf.gather(in2, segment_ids)\nreturn sorted_values",
            "return tf.unsorted_segment_min(in2, in1, tf.reduce_max(in1)+1)",
            "return tf.math.unsorted_segment_min(in2, in1, tf.reduce_max(in1)+1)",
            "segments = tf.argsort(tf.unique_with_counts(in1)[0])\nsegment_ids = tf.cast(tf.searchsorted(segments, in1), tf.float32)\nsorted_values = tf.math.segment_min(in2, segment_ids)\ncombined = tf.stack([segment_ids, sorted_values], axis=-1)\nperm = tf.argsort(combined[:, 0])\nreturn tf.gather(combined[:, 1], perm)",
            "segments = tf.math.bincount(in1)\norder = tf.argsort(in1, stable=True)\nsorted_values = tf.gather(in2, order)\nsegment_marks = tf.cumsum(segments)\n\nstarts = tf.pad(segment_marks[:-1], [[1,0]])\nends = tf.pad(segment_marks[1:], [[0,1]])\n\nsegments = []\nfor i in range(len(starts)):\n    segment = sorted_values[starts[i]:ends[i]]\n    segments.append(segment)\n\nreturn tf.concat(segments, 0)",
            "segments = tf.argsort(in1)\nreturn tf.gather(in2, segments)",
            "segment_ids = tf.argsort(in1)\nreturn tf.gather(in2, segment_ids)"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))",
            "def transform(in1, in2):\n    max_idx = tf.reduce_max(in1)+1\n    segment_min = tf.math.unsorted_segment_min(in2, in1, max_idx)\n    segment_max = tf.math.unsorted_segment_max(in2, in1, max_idx)\n    sort_base = tf.cast(in1, tf.float32) + tf.divide(in2 - segment_min, segment_max - segment_min + 1) / 10 \n    idx = tf.argsort(sort_base)\n    return tf.gather(in2, idx)",
            "def transform(in1, in2):\n    segment_ids = tf.argsort(in1)\n    sorted_values = tf.gather(in2, segment_ids)\n    return sorted_values",
            "def transform(in1, in2):\n    return tf.unsorted_segment_min(in2, in1, tf.reduce_max(in1)+1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_min(in2, in1, tf.reduce_max(in1)+1)",
            "def transform(in1, in2):\n    segments = tf.argsort(tf.unique_with_counts(in1)[0])\n    segment_ids = tf.cast(tf.searchsorted(segments, in1), tf.float32)\n    sorted_values = tf.math.segment_min(in2, segment_ids)\n    combined = tf.stack([segment_ids, sorted_values], axis=-1)\n    perm = tf.argsort(combined[:, 0])\n    return tf.gather(combined[:, 1], perm)",
            "def transform(in1, in2):\n    segments = tf.math.bincount(in1)\n    order = tf.argsort(in1, stable=True)\n    sorted_values = tf.gather(in2, order)\n    segment_marks = tf.cumsum(segments)\n    \n    starts = tf.pad(segment_marks[:-1], [[1,0]])\n    ends = tf.pad(segment_marks[1:], [[0,1]])\n    \n    segments = []\n    for i in range(len(starts)):\n        segment = sorted_values[starts[i]:ends[i]]\n        segments.append(segment)\n    \n    return tf.concat(segments, 0)",
            "def transform(in1, in2):\n    segments = tf.argsort(in1)\n    return tf.gather(in2, segments)",
            "def transform(in1, in2):\n    segment_ids = tf.argsort(in1)\n    return tf.gather(in2, segment_ids)"
        ],
        "tf_operators": {
            "tf.argsort": 8,
            "tf.gather": 8,
            "tf.reduce_max": 3,
            "tf.math.unsorted_segment_max": 1,
            "tf.divide": 1,
            "tf.float32": 2,
            "tf.cast": 2,
            "tf.math.unsorted_segment_min": 2,
            "tf.unsorted_segment_min": 1,
            "tf.stack": 1,
            "tf.searchsorted": 1,
            "tf.unique_with_counts": 1,
            "tf.math.segment_min": 1,
            "tf.math.bincount": 1,
            "tf.pad": 1,
            "tf.concat": 1,
            "tf.cumsum": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [],
            [],
            [
                1,
                1,
                10
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                -1,
                0,
                1
            ],
            [
                -1,
                1,
                0,
                1,
                0,
                1,
                0
            ],
            [],
            []
        ],
        "all_constants": [
            0,
            1,
            10,
            -1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 8,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 30,
            "axis": 0,
            "tf_int32": 0,
            "provided": 1,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 2,
            "common": 14,
            "tf_bool": 0
        }
    },
    {
        "name": "google_11",
        "description": "count the number of elements greater than 0 in each row",
        "target_program": "tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)",
        "source": "Real task encountered by Googler, 8/26/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1.0, 0.3, -4.2, 0.0, 2.1, 0.4], [-0.1, 0.0, 1.4, -1.0, 0.4, 0.0], [0.1, 0.0, 0.7, -0.3, 0.5, -0.1], [1.4, 2.5, 0.3, 0.01, 0.0, 1.2]],]",
            "outputs": "[4, 2, 3, 5]"
        },
        "completions": [
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, tf.constant(0.0, dtype=tf.float32)), tf.int32), axis=1)",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, tf.constant(0.0, dtype=tf.float32)), tf.int32), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)"
        ],
        "tf_operators": {
            "tf.math.count_nonzero": 2,
            "tf.greater": 10,
            "tf.cast": 8,
            "tf.int32": 8,
            "tf.reduce_sum": 8,
            "tf.float32": 1,
            "tf.constant": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 10,
            "axis": 0,
            "tf_int32": 8,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 1,
            "common": 19,
            "tf_bool": 0
        }
    },
    {
        "name": "google_12",
        "description": "identify elements between 0 and 1",
        "target_program": "tf.cast(tf.logical_and(0 <= in1, in1 <= 1), tf.int32)",
        "source": "Real task encountered by Googler, 8/26/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1.0, 0.3, -4.2, 0.0, 2.1], [-0.1, 0.0, 1.4, -1.0, 0.4], [0.1, 0.0, 0.7, -0.3, 0.5], [1.4, 2.5, 0.3, -0.1, 0.0]],]",
            "outputs": "[[1, 1, 0, 1, 0],    [0, 1, 0, 0, 1],    [1, 1, 1, 0, 1],    [0, 0, 1, 0, 1]]"
        },
        "completions": [
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "return tf.cast(tf.logical_and(tf.greater(in1, 0), tf.less(in1, 1)), tf.int32)",
            "return tf.cast(tf.math.logical_and(tf.greater_equal(in1, 0.0), tf.less(in1, 1.0)), tf.int32)",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less(in1, 1)), tf.int32)",
            "return tf.cast(tf.math.logical_and(tf.greater_equal(in1, 0), tf.less(in1, 1)), tf.int32)",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less(in1, 1)), tf.int32)",
            "return tf.cast(tf.logical_and(tf.less(in1, 1), tf.greater_equal(in1, 0)), tf.int32)",
            "return tf.cast(tf.logical_and(tf.greater(in1, 0), tf.less(in1, 1)), tf.int32)",
            "return tf.cast(tf.logical_and(tf.greater(in1, 0), tf.less(in1, 1)), tf.int32)",
            "return tf.cast(tf.logical_and(tf.greater(in1, 0), tf.less(in1, 1)), tf.int32)"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater(in1, 0), tf.less(in1, 1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.math.logical_and(tf.greater_equal(in1, 0.0), tf.less(in1, 1.0)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less(in1, 1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.math.logical_and(tf.greater_equal(in1, 0), tf.less(in1, 1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less(in1, 1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.less(in1, 1), tf.greater_equal(in1, 0)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater(in1, 0), tf.less(in1, 1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater(in1, 0), tf.less(in1, 1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater(in1, 0), tf.less(in1, 1)), tf.int32)"
        ],
        "tf_operators": {
            "tf.less_equal": 1,
            "tf.cast": 10,
            "tf.logical_and": 8,
            "tf.int32": 10,
            "tf.greater_equal": 6,
            "tf.less": 9,
            "tf.greater": 4,
            "tf.math.logical_and": 2
        },
        "coverage_percentage": 100.0,
        "total_covered": 3,
        "total_in_target": 3,
        "parsed_constants": [
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                1,
                0
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "axis": 0,
            "tf_int32": 10,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 18,
            "tf_bool": 0
        }
    },
    {
        "name": "google_13",
        "description": "Concatenate batches of sequences",
        "target_program": "tf.concat([in1, in2], axis=1)",
        "source": "Real task encountered by Googler, 9/13/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1, 2], [10, 20]],[[3, 4, 5], [30, 40, 50]],]",
            "outputs": "[[1, 2, 3, 4, 5], [10, 20, 30, 40, 50]]"
        },
        "completions": [
            "return tf.concat([in1, in2], axis=1)",
            "return tf.concat([in1, in2], axis=1)",
            "return tf.concat([in1, in2], 1)",
            "return tf.concat([in1, in2], axis=-1)",
            "return tf.concat([in1, in2], axis=1)",
            "return tf.concat([in1, in2], axis=1)",
            "return tf.concat([in1, in2], axis=1)",
            "return tf.concat([in1, in2], axis=1)",
            "return tf.concat([in1, in2], axis=1)",
            "return tf.concat([in1, in2], axis=1)"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], 1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=-1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)"
        ],
        "tf_operators": {
            "tf.concat": 10
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "axis": 0,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 10,
            "tf_bool": 0
        }
    },
    {
        "name": "google_14",
        "description": "circular buffer",
        "target_program": "tf.roll(in1, 1, 1)",
        "source": "From internal Colab, 10/17/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1, 3, 2, 0, 0], [4, 6, 5, 0, 0], [8, 7, 9, 0, 0]],]",
            "outputs": "[[0, 1, 3, 2, 0], [0, 4, 6, 5, 0], [0, 8, 7, 9, 0]]"
        },
        "completions": [
            "return tf.roll(in1, shift=1, axis=1)",
            "return tf.roll(in1, shift=1, axis=1)",
            "return tf.roll(in1, shift=1, axis=1)",
            "return tf.roll(in1, shift=1, axis=1)",
            "return tf.roll(in1, shift=1, axis=1)",
            "return tf.roll(in1, shift=1, axis=1)",
            "return tf.roll(in1, shift=1, axis=1)",
            "return tf.roll(in1, shift=1, axis=1)",
            "return tf.roll(in1, shift=1, axis=1)",
            "return tf.roll(in1, shift=-1, axis=-1)"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=-1, axis=-1)"
        ],
        "tf_operators": {
            "tf.roll": 10
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                -1
            ]
        ],
        "all_constants": [
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 10,
            "axis": 0,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 20,
            "tf_bool": 0
        }
    },
    {
        "name": "google_15",
        "description": "pad a zero column",
        "target_program": "tf.pad(in1, [[0, 0], [0, 1]], 'CONSTANT')",
        "source": "Real task encountered by Googler, 10/23/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1, 3, 5, 7], [2, 4, 6, 8]],]",
            "outputs": "[[1, 3, 5, 7, 0], [2, 4, 6, 8, 0]]"
        },
        "completions": [
            "return tf.pad(in1, [[0,0],[0,1]])",
            "return tf.pad(in1, [[0,0],[0,1]])",
            "return tf.pad(in1, [[0, 0], [0, 1]])",
            "return tf.pad(in1, [[0,0], [0,1]])",
            "return tf.pad(in1, [[0, 0], [0, 1]])",
            "return tf.pad(in1, [[0,0], [0,1]])",
            "return tf.pad(in1, [[0, 0], [0, 1]])",
            "return tf.pad(in1, [[0, 0], [0, 1]])",
            "return tf.pad(in1, [[0, 0], [0, 1]])",
            "return tf.pad(in1, [[0, 0], [0, 1]])"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.pad(in1, [[0,0],[0,1]])",
            "def transform(in1):\n    return tf.pad(in1, [[0,0],[0,1]])",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]])",
            "def transform(in1):\n    return tf.pad(in1, [[0,0], [0,1]])",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]])",
            "def transform(in1):\n    return tf.pad(in1, [[0,0], [0,1]])",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]])",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]])",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]])",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]])"
        ],
        "tf_operators": {
            "tf.pad": 10
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 10,
            "axis": 0,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 40,
            "tf_bool": 0
        }
    },
    {
        "name": "google_16",
        "description": "replicate elements a given number of times",
        "target_program": "tf.gather(in1, tf.where(tf.sequence_mask(in2))[:, 0])",
        "source": "From an internal Google forum",
        "constants": "[]",
        "examples": {
            "inputs": "[[1, 2, 0, 3],[2, 1, 2, 3],]",
            "outputs": "[1, 1, 2, 0, 0, 3, 3, 3]"
        },
        "completions": [
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)"
        ],
        "tf_operators": {
            "tf.repeat": 10
        },
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 3,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "axis": 0,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "google_17",
        "description": "use bool tensor as condition",
        "target_program": "tf.where(in1, in2, tf.multiply(in2, -10))",
        "source": "From an internal Google forum",
        "constants": "[-10]",
        "examples": {
            "inputs": "[[True, False, False, True, False],[1, 2, 3, 4, 5],]",
            "outputs": "[1, -20, -30, 4, -50]"
        },
        "completions": [
            "return tf.where(in1, in2, tf.math.negative(tf.multiply(in2, 10)))",
            "return tf.where(in1, in2, tf.multiply(in2, -10))",
            "return tf.where(in1, in2, tf.multiply(in2, -10))",
            "return tf.where(in1, in2, tf.multiply(in2, -10))",
            "return tf.where(in1, in2, tf.multiply(in2, tf.constant(-10)))",
            "return tf.where(in1, in2, -10*in2)",
            "return tf.where(in1, in2, tf.multiply(-10, tf.range(tf.shape(in2)[0]));",
            "return tf.where(in1, in2, tf.multiply(in2, -10))",
            "return tf.where(in1, in2, tf.multiply(-10, in2))",
            "return tf.where(in1, in2, tf.multiply(in2, -10))"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.math.negative(tf.multiply(in2, 10)))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, tf.constant(-10)))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10*in2)",
            null,
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(-10, in2))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))"
        ],
        "tf_operators": {
            "tf.multiply": 9,
            "tf.where": 10,
            "tf.math.negative": 1,
            "tf.constant": 1,
            "tf.shape": 1,
            "tf.range": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                0,
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ]
        ],
        "all_constants": [
            0,
            10,
            -10
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 27,
            "axis": 0,
            "tf_int32": 0,
            "provided": 10,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 1,
            "tf_bool": 0
        }
    },
    {
        "name": "google_18",
        "description": "(\\'sum of elements in the first tensor but partitioned by the second tensor\\')",
        "target_program": "tf.linalg.matvec(tf.cast(tf.equal(in2[:, None], in2), tf.int32), in1)",
        "source": "From an internal Google forum",
        "constants": "[]",
        "examples": {
            "inputs": "[[5, 7, -12, 10, 20],[1, 2, 3, 1, 2],]",
            "outputs": "[15, 27, -12, 15, 27]"
        },
        "completions": [
            "return tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1), in2)",
            "return tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1), in2)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)[in2 - 1]",
            "return tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1), in2)",
            "return tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1), in2)",
            "return tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1), in2)",
            "return tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1), in2)",
            "return tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1), in2)",
            "return tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1), in2)",
            "return tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1), in2)"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1), in2)",
            "def transform(in1, in2):\n    return tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1), in2)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)[in2 - 1]",
            "def transform(in1, in2):\n    return tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1), in2)",
            "def transform(in1, in2):\n    return tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1), in2)",
            "def transform(in1, in2):\n    return tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1), in2)",
            "def transform(in1, in2):\n    return tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1), in2)",
            "def transform(in1, in2):\n    return tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1), in2)",
            "def transform(in1, in2):\n    return tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1), in2)",
            "def transform(in1, in2):\n    return tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1), in2)"
        ],
        "tf_operators": {
            "tf.reduce_max": 10,
            "tf.math.unsorted_segment_sum": 10,
            "tf.gather": 9
        },
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 40,
            "axis": 0,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 11,
            "tf_bool": 0
        }
    },
    {
        "name": "google_19",
        "description": "scatter a 2-D tensor with indices",
        "target_program": "tf.gather(in1, tf.argsort(in2, axis=1), batch_dims=1)",
        "source": "From an internal Google forum",
        "constants": "[]",
        "examples": {
            "inputs": "[[[11, 12, 13], [30, 20, 10], [77, 88, 99]],[[2, 0, 1], [1, 0, 2], [0, 2, 1]],]",
            "outputs": "[[12, 13, 11],    [20, 30, 10],    [77, 99, 88]]"
        },
        "completions": [
            "return tf.gather(in1, in2, batch_dims=1)",
            "return tf.gather(in1, in2, axis=1, batch_dims=1)",
            "return tf.gather(in1, in2, axis=1)",
            "return tf.gather(in1, in2, axis=1, batch_dims=1)",
            "return tf.gather(in1, in2, axis=1)",
            "return tf.gather(in1, in2, axis=1, batch_dims=1)",
            "return tf.gather(in1, in2, batch_dims=1)",
            "return tf.gather(in1, in2, axis=1)",
            "return tf.gather(in1, in2, axis=1, batch_dims=1)",
            "indices = tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1)\n    return tf.gather_nd(in1, indices)"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.gather(in1, in2, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1, batch_dims=1)",
            null
        ],
        "tf_operators": {
            "tf.gather": 9,
            "tf.gather_nd": 1,
            "tf.shape": 1,
            "tf.range": 1,
            "tf.stack": 1
        },
        "coverage_percentage": 50.0,
        "total_covered": 1,
        "total_in_target": 2,
        "parsed_constants": [
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 18,
            "axis": 0,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 15,
            "tf_bool": 0
        }
    },
    {
        "name": "google_20",
        "description": "sort a tensor and return sorted index in original order",
        "target_program": "tf.cast(tf.argsort(tf.argsort(in1)), tf.int32)",
        "source": "From an internal Google forum",
        "constants": "[]",
        "examples": {
            "inputs": "[[10, 7, 4, 3, 2, 8],]",
            "outputs": "[5, 3, 2, 1, 0, 4]"
        },
        "completions": [
            "return tf.argsort(tf.argsort(in1))",
            "return tf.argsort(tf.argsort(in1))",
            "return tf.argsort(tf.argsort(in1))",
            "return tf.argsort(tf.argsort(in1))",
            "return tf.argsort(tf.argsort(in1)).numpy()",
            "return tf.argsort(tf.argsort(in1))",
            "return tf.argsort(tf.argsort(in1))",
            "return tf.cast(tf.argsort(tf.argsort(in1)), tf.int32)",
            "return tf.argsort(tf.argsort(in1))",
            "return tf.argsort(tf.argsort(in1))"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.argsort(tf.argsort(in1))",
            "def transform(in1):\n    return tf.argsort(tf.argsort(in1))",
            "def transform(in1):\n    return tf.argsort(tf.argsort(in1))",
            "def transform(in1):\n    return tf.argsort(tf.argsort(in1))",
            "def transform(in1):\n    return tf.argsort(tf.argsort(in1)).numpy()",
            "def transform(in1):\n    return tf.argsort(tf.argsort(in1))",
            "def transform(in1):\n    return tf.argsort(tf.argsort(in1))",
            "def transform(in1):\n    return tf.cast(tf.argsort(tf.argsort(in1)), tf.int32)",
            "def transform(in1):\n    return tf.argsort(tf.argsort(in1))",
            "def transform(in1):\n    return tf.argsort(tf.argsort(in1))"
        ],
        "tf_operators": {
            "tf.argsort": 10,
            "tf.int32": 1,
            "tf.cast": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 3,
        "total_in_target": 3,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 10,
            "axis": 0,
            "tf_int32": 1,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "google_21",
        "description": "update a tensor at the given indices",
        "target_program": "tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, (-1,)))",
        "source": "Real task encountered by Googler, 12/15/2020",
        "constants": "[]",
        "examples": {
            "inputs": "{'tensor': [[1, 2, 3, 4, 5], [4, 5, 6, 7, 8], [7, 8, 9, 10, 11]], 'indices': [[0, 0], [0, 2], [1, 1], [1, 3], [2, 2], [2, 4]], 'updates': [[0, -2], [-1, -3], [-2, -4]],}",
            "outputs": "[[0, 2, -2, 4, 5], [4, -1, 6, -3, 8], [7, 8, -2, 10, -4]]"
        },
        "completions": [
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)"
        ],
        "normalized_completions": [
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)"
        ],
        "tf_operators": {
            "tf.tensor_scatter_nd_update": 10
        },
        "coverage_percentage": 50.0,
        "total_covered": 1,
        "total_in_target": 2,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 30,
            "axis": 0,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "google_22",
        "description": "pair with row index",
        "target_program": "tf.cast(tf.where(tf.reduce_max(tf.one_hot(in1, tf.reduce_max(in1) + 1), axis=1)), tf.int32)",
        "source": "Real task encountered by Googler, 12/15/2020",
        "constants": "[]",
        "examples": {
            "inputs": "[[[0, 2], [1, 3], [2, 4]],]",
            "outputs": "[[0, 0], [0, 2], [1, 1], [1, 3], [2, 2], [2, 4]]"
        },
        "completions": [
            "return tf.reshape(tf.transpose(tf.broadcast_to(in1, [2, *tf.shape(in1)]), [1, 0, 2]), [-1, 2])",
            "ind = tf.reshape(tf.range(tf.shape(in1)[0]), (-1, 1))\n return tf.reshape(tf.concat([tf.tile(ind, [1, tf.shape(in1)[1]]), in1], axis=2), [-1, 2])",
            "return tf.reshape(tf.stack([tf.tile(tf.range(tf.shape(in1)[0])[:, tf.newaxis], [1, 2]), in1], axis=2), [-1, 2])",
            "return tf.reshape(tf.transpose(tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])])), [-1, 2])",
            "return tf.reshape(tf.stack([tf.broadcast_to(tf.expand_dims(tf.range(tf.shape(in1)[0]), 1), tf.shape(in1)), in1], -1), [-1, 2])",
            "return tf.reshape(tf.concat([tf.expand_dims(tf.range(tf.shape(in1)[0]), axis=1), in1], axis=2), [-1, 2])",
            "indices = tf.range(tf.shape(in1)[0])\n    return tf.reshape(tf.stack([tf.repeat(indices, tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1), [-1,2])",
            "return tf.reshape(tf.transpose(tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])])), [-1, 2])",
            "return tf.reshape(tf.stack([tf.broadcast_to(tf.range(tf.shape(in1)[0])[:, tf.newaxis], [in1.shape[0], in1.shape[1]]), in1], axis=-1), [-1, 2])",
            "return tf.concat([tf.expand_dims(tf.cast(tf.range(tf.shape(in1)[0]), tf.int32), 1), tf.reshape(in1, [-1, 1])], axis=1)"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.reshape(tf.transpose(tf.broadcast_to(in1, [2, *tf.shape(in1)]), [1, 0, 2]), [-1, 2])",
            null,
            "def transform(in1):\n    return tf.reshape(tf.stack([tf.tile(tf.range(tf.shape(in1)[0])[:, tf.newaxis], [1, 2]), in1], axis=2), [-1, 2])",
            "def transform(in1):\n    return tf.reshape(tf.transpose(tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])])), [-1, 2])",
            "def transform(in1):\n    return tf.reshape(tf.stack([tf.broadcast_to(tf.expand_dims(tf.range(tf.shape(in1)[0]), 1), tf.shape(in1)), in1], -1), [-1, 2])",
            "def transform(in1):\n    return tf.reshape(tf.concat([tf.expand_dims(tf.range(tf.shape(in1)[0]), axis=1), in1], axis=2), [-1, 2])",
            null,
            "def transform(in1):\n    return tf.reshape(tf.transpose(tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])])), [-1, 2])",
            "def transform(in1):\n    return tf.reshape(tf.stack([tf.broadcast_to(tf.range(tf.shape(in1)[0])[:, tf.newaxis], [in1.shape[0], in1.shape[1]]), in1], axis=-1), [-1, 2])",
            "def transform(in1):\n    return tf.concat([tf.expand_dims(tf.cast(tf.range(tf.shape(in1)[0]), tf.int32), 1), tf.reshape(in1, [-1, 1])], axis=1)"
        ],
        "tf_operators": {
            "tf.reshape": 10,
            "tf.broadcast_to": 3,
            "tf.shape": 10,
            "tf.transpose": 3,
            "tf.tile": 2,
            "tf.concat": 3,
            "tf.range": 9,
            "tf.newaxis": 2,
            "tf.stack": 6,
            "tf.repeat": 3,
            "tf.expand_dims": 3,
            "tf.cast": 1,
            "tf.int32": 1
        },
        "coverage_percentage": 40.0,
        "total_covered": 2,
        "total_in_target": 5,
        "parsed_constants": [
            [
                2,
                1,
                0,
                2,
                -1,
                2
            ],
            [
                0,
                1,
                2,
                -1
            ],
            [
                0,
                1,
                2,
                2,
                -1,
                2
            ],
            [
                0,
                1,
                -1,
                -1,
                2
            ],
            [
                0,
                1,
                -1,
                -1,
                2
            ],
            [
                0,
                1,
                2,
                -1,
                2
            ],
            [
                0,
                1,
                2,
                -1
            ],
            [
                0,
                1,
                -1,
                -1,
                2
            ],
            [
                0,
                0,
                1,
                -1,
                -1,
                2
            ],
            [
                0,
                1,
                -1,
                1,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 19,
            "axis": 15,
            "tf_int32": 1,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 42,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_01",
        "description": "reshape by separating and duplicating columns",
        "target_program": "tf.transpose(tf.cast((in1, in1), tf.float32))",
        "source": "https://stackoverflow.com/questions/40441503/tensorflow-tensor-reshape",
        "constants": "[]",
        "examples": {
            "inputs": "[[[5., 2.], [1., 3.], [0., -1.]],]",
            "outputs": "[[[5., 5.], [1., 1.], [0., 0.]],    [[2., 2.], [3., 3.], [-1., -1.]]]"
        },
        "completions": [
            "return tf.expand_dims(tf.transpose(in1), 2)",
            "return tf.expand_dims(tf.transpose(in1), axis=2)",
            "return tf.expand_dims(tf.transpose(in1), 2)",
            "return tf.expand_dims(tf.transpose(in1), axis=-1)",
            "return tf.reshape(tf.tile(in1, [1, 2]), [2, -1, 2])",
            "return tf.expand_dims(tf.transpose(in1), 2)",
            "return tf.expand_dims(tf.transpose(in1), axis=-1)",
            "return tf.expand_dims(tf.transpose(in1),2)",
            "return tf.expand_dims(tf.transpose(in1), -1)",
            "return tf.expand_dims(tf.transpose(in1), axis=2)"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.expand_dims(tf.transpose(in1), 2)",
            "def transform(in1):\n    return tf.expand_dims(tf.transpose(in1), axis=2)",
            "def transform(in1):\n    return tf.expand_dims(tf.transpose(in1), 2)",
            "def transform(in1):\n    return tf.expand_dims(tf.transpose(in1), axis=-1)",
            "def transform(in1):\n    return tf.reshape(tf.tile(in1, [1, 2]), [2, -1, 2])",
            "def transform(in1):\n    return tf.expand_dims(tf.transpose(in1), 2)",
            "def transform(in1):\n    return tf.expand_dims(tf.transpose(in1), axis=-1)",
            "def transform(in1):\n    return tf.expand_dims(tf.transpose(in1),2)",
            "def transform(in1):\n    return tf.expand_dims(tf.transpose(in1), -1)",
            "def transform(in1):\n    return tf.expand_dims(tf.transpose(in1), axis=2)"
        ],
        "tf_operators": {
            "tf.expand_dims": 9,
            "tf.transpose": 9,
            "tf.reshape": 1,
            "tf.tile": 1
        },
        "coverage_percentage": 33.33333333333333,
        "total_covered": 1,
        "total_in_target": 3,
        "parsed_constants": [
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                -1
            ],
            [
                1,
                2,
                2,
                -1,
                2
            ],
            [
                2
            ],
            [
                -1
            ],
            [
                2
            ],
            [
                -1
            ],
            [
                2
            ]
        ],
        "all_constants": [
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 10,
            "axis": 9,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 5,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_02",
        "description": "clip values that are greater than 1",
        "target_program": "tf.minimum(in1, tf.constant(1))",
        "source": "https://stackoverflow.com/questions/46408839/tensorflow-trim-values-in-tensor",
        "constants": "[1]",
        "examples": {
            "inputs": "[[5, 1, 0, 3, 0, -1, 2, -10, 2],]",
            "outputs": "[[1, 1, 0, 1, 0, -1, 1, -10, 1]]"
        },
        "completions": [
            "return tf.clip_by_value(in1, -tf.constant(1e10), tf.constant(1))",
            "return tf.clip_by_value(in1, -tf.constant(np.inf), tf.constant(1.))",
            "return tf.clip_by_value(in1, -tf.constant(float('inf')), 1)",
            "return tf.clip_by_value(in1, -tf.constant(float('inf')), tf.constant(1))",
            "return tf.clip_by_value(in1, -tf.constant(float('inf')), 1)",
            "return tf.clip_by_value(in1, -tf.float32.max, 1)",
            "return tf.clip_by_value(in1, -tf.constant(np.inf), 1)",
            "return tf.clip_by_value(in1, -tf.constant(np.inf), tf.constant(1))",
            "return tf.clip_by_value(in1, -tf.constant(float('inf')), 1)",
            "return tf.clip_by_value(in1, -tf.constant(float('inf')), 1)"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.clip_by_value(in1, -tf.constant(1e10), tf.constant(1))",
            "def transform(in1):\n    return tf.clip_by_value(in1, -tf.constant(np.inf), tf.constant(1.))",
            "def transform(in1):\n    return tf.clip_by_value(in1, -tf.constant(float('inf')), 1)",
            "def transform(in1):\n    return tf.clip_by_value(in1, -tf.constant(float('inf')), tf.constant(1))",
            "def transform(in1):\n    return tf.clip_by_value(in1, -tf.constant(float('inf')), 1)",
            "def transform(in1):\n    return tf.clip_by_value(in1, -tf.float32.max, 1)",
            "def transform(in1):\n    return tf.clip_by_value(in1, -tf.constant(np.inf), 1)",
            "def transform(in1):\n    return tf.clip_by_value(in1, -tf.constant(np.inf), tf.constant(1))",
            "def transform(in1):\n    return tf.clip_by_value(in1, -tf.constant(float('inf')), 1)",
            "def transform(in1):\n    return tf.clip_by_value(in1, -tf.constant(float('inf')), 1)"
        ],
        "tf_operators": {
            "tf.clip_by_value": 10,
            "tf.constant": 9,
            "tf.float32.max": 1
        },
        "coverage_percentage": 50.0,
        "total_covered": 1,
        "total_in_target": 2,
        "parsed_constants": [
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 10,
            "axis": 0,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 9,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_03",
        "description": "replace certain columns with columns from the other tensor",
        "target_program": "tf.reduce_sum(tf.one_hot(tf.range(3, 5), depth=in1.shape[1], dtype=tf.int32), axis=0) * in2 + (1 - tf.reduce_sum(tf.one_hot(tf.range(3, 5), depth=in1.shape[1], dtype=tf.int32), axis=0)) * in1",
        "source": "https://stackoverflow.com/questions/44657388/how-to-replace-certain-values-in-tensorflow-tensor-with-the-values-of-the-other",
        "constants": "[3, 4, 5]",
        "examples": {
            "inputs": "[[[11, 22, 33, 44, 55, 66, 77], [70, 60, 50, 40, 30, 20, 10]],[[-9, -8, -7, -6, -5, -4, -3], [11, 12, 13, 14, 15, 16, 17]],]",
            "outputs": "[[[11, 22, 33, -6, -5, 66, 77], [70, 60, 50, 14, 15, 20, 10]]]"
        },
        "completions": [
            "indices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\nupdates = tf.gather_nd(in2, indices)\nreturn tf.expand_dims(tf.tensor_scatter_nd_update(in1, indices, updates), 0)",
            "indices = tf.constant([[0, 1, 2, 0, 0, 2, 3], [0, 1, 2, 1, 1, 2, 3]])\n    return tf.gather(in2, indices, axis=1)",
            "return tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]]), tf.gather_nd(in2, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])))",
            "return tf.tensor_scatter_nd_update(in1, [[0,3], [0,4], [1,3], [1,4]], tf.gather(in2, [3,4,3,4]))",
            "indices = tf.constant([[0,3],[0,4],[1,3],[1,4]])\n    updates = tf.gather_nd(in2, indices)\n    return tf.expand_dims(tf.tensor_scatter_nd_update(in1, indices, updates), 0)",
            "mask = [True, True, True, False, False, True, True]\nneg_mask = tf.math.logical_not(mask)\nin1_masked = tf.boolean_mask(in1, mask, axis=1)\nin2_masked = tf.boolean_mask(in2, neg_mask, axis=1)\nreturn tf.concat([in1_masked, in2_masked], axis=1)",
            "indices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n    return tf.tensor_scatter_nd_update(in1, indices, tf.gather_nd(in2, indices))",
            "return tf.tensor_scatter_nd_update(in1, [[0,3], [0,4], [1,3], [1,4]], tf.gather(in2, [3,4], axis=1))",
            "indices = tf.constant([[3,4]])\nreturn tf.tensor_scatter_nd_update(in1, indices, tf.gather(in2, indices))",
            "indices = tf.constant([[0,3],[0,4],[1,3],[1,4]])\n    return tf.tensor_scatter_nd_update(in1, indices, tf.gather_nd(in2, indices))"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    indices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n    updates = tf.gather_nd(in2, indices)\n    return tf.expand_dims(tf.tensor_scatter_nd_update(in1, indices, updates), 0)",
            null,
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]]), tf.gather_nd(in2, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])))",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, [[0,3], [0,4], [1,3], [1,4]], tf.gather(in2, [3,4,3,4]))",
            null,
            "def transform(in1, in2):\n    mask = [True, True, True, False, False, True, True]\n    neg_mask = tf.math.logical_not(mask)\n    in1_masked = tf.boolean_mask(in1, mask, axis=1)\n    in2_masked = tf.boolean_mask(in2, neg_mask, axis=1)\n    return tf.concat([in1_masked, in2_masked], axis=1)",
            null,
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, [[0,3], [0,4], [1,3], [1,4]], tf.gather(in2, [3,4], axis=1))",
            "def transform(in1, in2):\n    indices = tf.constant([[3,4]])\n    return tf.tensor_scatter_nd_update(in1, indices, tf.gather(in2, indices))",
            null
        ],
        "tf_operators": {
            "tf.constant": 7,
            "tf.tensor_scatter_nd_update": 8,
            "tf.expand_dims": 2,
            "tf.gather_nd": 5,
            "tf.gather": 4,
            "tf.concat": 1,
            "tf.boolean_mask": 1,
            "tf.math.logical_not": 1
        },
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 4,
        "parsed_constants": [
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                0
            ],
            [
                0,
                1,
                2,
                3
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                3,
                4,
                3,
                4
            ],
            [
                0,
                1,
                3,
                4
            ],
            [
                1,
                1,
                1
            ],
            [
                0,
                1,
                3,
                4
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                3,
                4,
                1
            ],
            [
                3,
                4
            ],
            [
                0,
                1,
                3,
                4
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            4
        ],
        "constant_counts": [
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 9,
                "axis": 4,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 10,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 6,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 24,
            "axis": 4,
            "tf_int32": 0,
            "provided": 42,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 54,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_04",
        "description": "index into the tensor",
        "target_program": "tf.gather_nd(in1, tf.stack((in2, in3), axis=-1))",
        "source": "https://stackoverflow.com/questions/33736795/tensorflow-numpy-like-tensor-indexing",
        "constants": "[]",
        "examples": {
            "inputs": "[  [[5., 2.], [1., 3.], [0., -1.]]]",
            "outputs": "[[[5., 5.], [1., 1.], [0., 0.]],  [[2., 2.], [3., 3.], [-1., -1.]]]"
        },
        "completions": [
            "return tf.expand_dims(in1, -1)",
            "return tf.expand_dims(in1, 2)",
            "return tf.expand_dims(in1, -1)",
            "return tf.expand_dims(in1, axis=0)",
            "return tf.expand_dims(in1, 0)",
            "return tf.expand_dims(in1, 2)",
            "return tf.expand_dims(in1, 0)",
            "return tf.expand_dims(in1, axis=-1)",
            "return tf.expand_dims(in1, axis=2)",
            "return tf.expand_dims(in1, axis=-1)"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.expand_dims(in1, -1)",
            "def transform(in1):\n    return tf.expand_dims(in1, 2)",
            "def transform(in1):\n    return tf.expand_dims(in1, -1)",
            "def transform(in1):\n    return tf.expand_dims(in1, axis=0)",
            "def transform(in1):\n    return tf.expand_dims(in1, 0)",
            "def transform(in1):\n    return tf.expand_dims(in1, 2)",
            "def transform(in1):\n    return tf.expand_dims(in1, 0)",
            "def transform(in1):\n    return tf.expand_dims(in1, axis=-1)",
            "def transform(in1):\n    return tf.expand_dims(in1, axis=2)",
            "def transform(in1):\n    return tf.expand_dims(in1, axis=-1)"
        ],
        "tf_operators": {
            "tf.expand_dims": 10
        },
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 2,
        "parsed_constants": [
            [
                -1
            ],
            [
                2
            ],
            [
                -1
            ],
            [
                0
            ],
            [
                0
            ],
            [
                2
            ],
            [
                0
            ],
            [
                -1
            ],
            [
                2
            ],
            [
                -1
            ]
        ],
        "all_constants": [
            0,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 10,
            "axis": 3,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 7,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_05",
        "description": "tensor multiplication like np.tensordot",
        "target_program": "tf.tensordot(in1, in2, 1)",
        "source": "https://stackoverflow.com/questions/43067338/tensor-multiplication-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[4, 3, 1], [6, 5, 2]],[[[5, 5]], [[1, 5]], [[6, 0]]],]",
            "outputs": "[[[29, 35]], [[47, 55]]]"
        },
        "completions": [
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=[[1], [0]])",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=[[1],[0]])",
            "return tf.tensordot(in1, in2, axes=[[1], [0]])",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[1], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[1],[0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[1], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)"
        ],
        "tf_operators": {
            "tf.tensordot": 10
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "axis": 0,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 13,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_06",
        "description": "binary tensor from vector indicating if elements are equal",
        "target_program": "tf.cast(tf.equal(in1, tf.expand_dims(in1, 1)), tf.float32)",
        "source": "https://stackoverflow.com/questions/47816231/create-binary-tensor-from-vector-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[3, 5, 0, 2, 3, 3, 0],]",
            "outputs": "[[1., 0., 0., 0., 1., 1., 0.],    [0., 1., 0., 0., 0., 0., 0.],    [0., 0., 1., 0., 0., 0., 1.],    [0., 0., 0., 1., 0., 0., 0.],    [1., 0., 0., 0., 1., 1., 0.],    [1., 0., 0., 0., 1., 1., 0.],    [0., 0., 1., 0., 0., 0., 1.]]"
        },
        "completions": [
            "return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)",
            "return tf.cast(tf.equal(tf.reshape(in1, [-1, 1]), in1), tf.float32)",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.reshape(in1, [-1, 1]), in1), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)"
        ],
        "tf_operators": {
            "tf.equal": 10,
            "tf.expand_dims": 9,
            "tf.float32": 10,
            "tf.cast": 10,
            "tf.reshape": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                0,
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "axis": 0,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 10,
            "common": 16,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_08",
        "description": "(\\'select the values in the second tensor where the first tensor is greater than 1\\')",
        "target_program": "tf.boolean_mask(in2, tf.greater(in1, tf.constant(1)))",
        "source": "https://stackoverflow.com/questions/33769041/tensorflow-indexing-with-boolean-tensor",
        "constants": "[1]",
        "examples": {
            "inputs": "[[-1, 0, -3, 2, 1, 3, 5, -1, -9, 2, 10],[12, 3, 45, 6, 7, 8, 9, 87, 65, 4, 32],]",
            "outputs": "[6, 8, 9, 4, 32]"
        },
        "completions": [
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))"
        ],
        "tf_operators": {
            "tf.greater": 10,
            "tf.boolean_mask": 10
        },
        "coverage_percentage": 66.66666666666666,
        "total_covered": 2,
        "total_in_target": 3,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "axis": 0,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 10,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_09",
        "description": "group items by value and get the group indices",
        "target_program": "tf.unique_with_counts(in1)[1]",
        "source": "https://stackoverflow.com/questions/53054668/assign-values-between-0-and-n-1-for-a-vector-of-length-l-with-n-different-eleme",
        "constants": "[]",
        "examples": {
            "inputs": "[[37, 42, 42, 37, 28, 15, 42, 15],]",
            "outputs": "[0, 1, 1, 0, 2, 3, 1, 3]"
        },
        "completions": [
            "_, idx, count = tf.unique_with_counts(in1)\nreturn tf.gather(idx, in1)",
            "_, ids = tf.unique(in1)\nreturn tf.cast(ids, tf.int32)",
            "_, _, group_idx = tf.unique_with_counts(in1)\nreturn group_idx",
            "_, ids = tf.unique(in1)\nreturn tf.cast(ids, tf.int32)",
            "_, idx = tf.unique(in1)\nreturn tf.cast(idx, tf.int32)",
            "_, _, group_indices = tf.unique_with_counts(in1)\nreturn group_indices",
            "_, idx = tf.unique(in1)\nreturn idx.numpy()",
            "_, idx = tf.unique_with_counts(in1)\nreturn idx",
            "_, idx = tf.unique_with_counts(in1)\n return tf.gather(idx, in1)",
            "_, idx = tf.unique(in1)\nreturn tf.cast(idx, tf.int32)"
        ],
        "normalized_completions": [
            "def transform(in1):\n    _, idx, count = tf.unique_with_counts(in1)\n    return tf.gather(idx, in1)",
            "def transform(in1):\n    _, ids = tf.unique(in1)\n    return tf.cast(ids, tf.int32)",
            "def transform(in1):\n    _, _, group_idx = tf.unique_with_counts(in1)\n    return group_idx",
            "def transform(in1):\n    _, ids = tf.unique(in1)\n    return tf.cast(ids, tf.int32)",
            "def transform(in1):\n    _, idx = tf.unique(in1)\n    return tf.cast(idx, tf.int32)",
            "def transform(in1):\n    _, _, group_indices = tf.unique_with_counts(in1)\n    return group_indices",
            "def transform(in1):\n    _, idx = tf.unique(in1)\n    return idx.numpy()",
            "def transform(in1):\n    _, idx = tf.unique_with_counts(in1)\n    return idx",
            null,
            "def transform(in1):\n    _, idx = tf.unique(in1)\n    return tf.cast(idx, tf.int32)"
        ],
        "tf_operators": {
            "tf.unique_with_counts": 5,
            "tf.gather": 2,
            "tf.unique": 5,
            "tf.cast": 4,
            "tf.int32": 4
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 10,
            "axis": 0,
            "tf_int32": 4,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_10",
        "description": "perform matrix multiplication",
        "target_program": "tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 1))",
        "source": "https://stackoverflow.com/questions/53094212/tensorflow-sxn-matrix-multiply-with-sxd-matrix-to-output-sxnxd-array",
        "constants": "[]",
        "examples": {
            "inputs": "[[[15, 10], [20, -5]],[[2, 3, 1], [-2, 5, 0]],]",
            "outputs": "[[[30, 45, 15], [20, 30, 10]],[[-40, 100, 0], [10, -25, 0]]]"
        },
        "completions": [
            "return tf.matmul(tf.expand_dims(in1, 0), tf.expand_dims(in2, 0))",
            "return tf.matmul(tf.expand_dims(in1,0), tf.expand_dims(in2,0))",
            "return tf.matmul(tf.expand_dims(in1, axis=0), tf.expand_dims(in2, axis=0))",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(tf.expand_dims(in1, 0), tf.expand_dims(in2, -1))",
            "return tf.matmul(tf.expand_dims(in1,axis =2), tf.reshape(in2,[in1.shape[1],-1,1]))",
            "return tf.matmul(tf.expand_dims(in1, 0), tf.expand_dims(in2, 0))",
            "return tf.matmul(tf.expand_dims(in1, axis=0), tf.expand_dims(in2, axis=0))",
            "return tf.matmul(tf.expand_dims(in1, axis=0), tf.expand_dims(in2, axis=0))",
            "return tf.matmul(tf.expand_dims(in1, 0), tf.expand_dims(in2, -1))"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, 0), tf.expand_dims(in2, 0))",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1,0), tf.expand_dims(in2,0))",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, axis=0), tf.expand_dims(in2, axis=0))",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, 0), tf.expand_dims(in2, -1))",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1,axis =2), tf.reshape(in2,[in1.shape[1],-1,1]))",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, 0), tf.expand_dims(in2, 0))",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, axis=0), tf.expand_dims(in2, axis=0))",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, axis=0), tf.expand_dims(in2, axis=0))",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, 0), tf.expand_dims(in2, -1))"
        ],
        "tf_operators": {
            "tf.expand_dims": 9,
            "tf.matmul": 10,
            "tf.reshape": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                0,
                0
            ],
            [
                0,
                0
            ],
            [
                0,
                0
            ],
            [],
            [
                0,
                -1
            ],
            [
                2,
                1,
                -1,
                1
            ],
            [
                0,
                0
            ],
            [
                0,
                0
            ],
            [
                0,
                0
            ],
            [
                0,
                -1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "axis": 1,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 19,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_11",
        "description": "count the number of occurences of each distinct number",
        "target_program": "tf.math.bincount(in1)",
        "source": "https://stackoverflow.com/questions/45194672/how-to-count-elements-in-tensorflow-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[4, 0, 1, 1, 0, 4, 0, 0, 3, 4, 1],]",
            "outputs": "[4, 3, 0, 1, 3]"
        },
        "completions": [
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)"
        ],
        "tf_operators": {
            "tf.math.bincount": 10
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 10,
            "axis": 0,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_12",
        "description": "remove a column from the tensor",
        "target_program": "tf.gather(in1, (0, 2), axis=1, batch_dims=0)",
        "source": "https://stackoverflow.com/questions/47447183/remove-a-set-of-tensors-from-a-tensor-in-tensorflow",
        "constants": "[0, 1, 2]",
        "examples": {
            "inputs": "[[[12, 34, 56], [33, 22, 11]]]",
            "outputs": "[[12, 56], [33, 11]]"
        },
        "completions": [
            "return tf.gather(in1, [0, 2], axis=1)",
            "return tf.gather(in1, [0, 2], axis=1)",
            "return tf.gather(in1, [0, 2], axis=1)",
            "return tf.gather(in1, [0, 2], axis=1)",
            "return tf.boolean_mask(in1, tf.concat([tf.fill([tf.shape(in1)[0], 1], True), tf.fill([tf.shape(in1)[0], 1], False), tf.fill([tf.shape(in1)[0], 1], True)], axis=1))",
            "return tf.gather(in1, [0, 2], axis=1)",
            "return tf.gather(in1, [0, 2], axis=1)",
            "return tf.gather(in1, [0, 2], axis=1)",
            "return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[1]), 1), axis=1)"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.boolean_mask(in1, tf.concat([tf.fill([tf.shape(in1)[0], 1], True), tf.fill([tf.shape(in1)[0], 1], False), tf.fill([tf.shape(in1)[0], 1], True)], axis=1))",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)",
            "def transform(in1):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[1]), 1), axis=1)"
        ],
        "tf_operators": {
            "tf.gather": 7,
            "tf.concat": 2,
            "tf.shape": 2,
            "tf.fill": 1,
            "tf.boolean_mask": 2,
            "tf.not_equal": 1,
            "tf.range": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                1,
                0,
                1,
                0,
                1,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                1,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 10,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 15,
            "axis": 8,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 29,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_13",
        "description": "multiply vectors by tensor",
        "target_program": "tf.tensordot(in1, in2, (1, 1))",
        "source": "https://stackoverflow.com/questions/50777704/n-d-tensor-matrix-multiplication-with-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[3, 5], [10, 2]],[[[1, 0], [5, 4]], [[3, 10], [2, -2]]],]",
            "outputs": "[[[28, 20], [19, 20]], [[20, 8], [34, 96]]]"
        },
        "completions": [
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in2, tf.transpose(in1))",
            "return tf.tensordot(in2, in1, axes=[[2], [1]])",
            "return tf.matmul(in1, tf.cast(in2, tf.int32))",
            "return tf.matmul(in2, tf.transpose(in1))",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in2, tf.transpose(in1))",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.matmul(in2, tf.cast(tf.transpose(in1), tf.int32))",
            "return tf.matmul(in2, tf.transpose(in1))"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(in2, tf.transpose(in1))",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=[[2], [1]])",
            "def transform(in1, in2):\n    return tf.matmul(in1, tf.cast(in2, tf.int32))",
            "def transform(in1, in2):\n    return tf.matmul(in2, tf.transpose(in1))",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(in2, tf.transpose(in1))",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.matmul(in2, tf.cast(tf.transpose(in1), tf.int32))",
            "def transform(in1, in2):\n    return tf.matmul(in2, tf.transpose(in1))"
        ],
        "tf_operators": {
            "tf.matmul": 8,
            "tf.transpose": 5,
            "tf.tensordot": 2,
            "tf.int32": 2,
            "tf.cast": 2
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [],
            [],
            [
                2,
                1
            ],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            []
        ],
        "all_constants": [
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "axis": 1,
            "tf_int32": 2,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 2,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_14",
        "description": "choose True if any value in a row is True, False otherwise",
        "target_program": "tf.reduce_any(in1, axis=-1)",
        "source": "https://stackoverflow.com/questions/35657003/aggregate-each-element-of-tensor-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[False, False, True],  [False, False, False],  [True, False, True],  [False, True, False],  [False, False, False],  [True, True, True],  [True, True, False]]],]",
            "outputs": "[[True, False, True, True, False, True, True]]"
        },
        "completions": [
            "return tf.reduce_any(in1, axis=2)",
            "return tf.reduce_any(in1, axis=2)",
            "return tf.reduce_any(in1, axis=2)",
            "return tf.reduce_any(in1, axis=2)",
            "return tf.reduce_any(in1, axis=2)",
            "return tf.cast(tf.reduce_any(in1, axis=2), tf.bool)",
            "return tf.reduce_any(in1, axis=2)",
            "return tf.cast(tf.reduce_any(in1, axis=2), tf.bool)",
            "return tf.reduce_any(in1, axis=-1)",
            "return tf.reduce_any(in1, axis=2)"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "def transform(in1):\n    return tf.cast(tf.reduce_any(in1, axis=2), tf.bool)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "def transform(in1):\n    return tf.cast(tf.reduce_any(in1, axis=2), tf.bool)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=-1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)"
        ],
        "tf_operators": {
            "tf.reduce_any": 10,
            "tf.bool": 2,
            "tf.cast": 2
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                -1
            ],
            [
                2
            ]
        ],
        "all_constants": [
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 10,
            "axis": 9,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 1,
            "tf_bool": 2
        }
    },
    {
        "name": "stackoverflow_15",
        "description": "set all instances of 1 to 0",
        "target_program": "tf.subtract(in1, tf.cast(tf.equal(in1, tf.constant(1)), tf.int32))",
        "source": "https://stackoverflow.com/questions/39045797/conditional-assignment-of-tensor-values-in-tensorflow",
        "constants": "[0, 1]",
        "examples": {
            "inputs": "[[3, 1, 2, 0, 1, -1, 10, 1, -10],]",
            "outputs": "[3, 0, 2, 0, 0, -1, 10, 0, -10]"
        },
        "completions": [
            "return tf.where(tf.equal(in1, 1), 0, in1)",
            "return tf.where(tf.equal(in1, 1), 0, in1)",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)",
            "return tf.where(tf.equal(in1, 1), 0, in1)",
            "return tf.where(tf.equal(in1, 1), 0, in1)",
            "return tf.where(tf.equal(in1, 1), 0, in1)",
            "return tf.where(tf.equal(in1, 1), 0, in1)",
            "return tf.where(tf.equal(in1, 1), 0, in1)",
            "return tf.where(tf.equal(in1, 1), 0, in1)",
            "return tf.where(tf.equal(in1, 1), 0, in1)"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)"
        ],
        "tf_operators": {
            "tf.equal": 10,
            "tf.where": 10,
            "tf.zeros_like": 1
        },
        "coverage_percentage": 20.0,
        "total_covered": 1,
        "total_in_target": 5,
        "parsed_constants": [
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 21,
            "axis": 0,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 19,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_16",
        "description": "multiply tensors across the first axis",
        "target_program": "tf.multiply(in1, tf.expand_dims(in2, 1))",
        "source": "https://stackoverflow.com/questions/46240646/tensor-multiply-along-axis-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[2, 5], [3, 0], [8, -7]],[4, 10, -6],]",
            "outputs": "[[8, 20], [30, 0], [-48, 42]]"
        },
        "completions": [
            "return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "return tf.multiply(in1, tf.expand_dims(in2, 1))"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))"
        ],
        "tf_operators": {
            "tf.multiply": 10,
            "tf.expand_dims": 10
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "axis": 0,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 10,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_17",
        "description": "duplicate each element of a tensor",
        "target_program": "tf.stack((in1, in1), axis=1)",
        "source": "https://stackoverflow.com/questions/51761353/about-tensor-of-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[17, -32, 99],]",
            "outputs": "[[17, 17], [-32, -32], [99, 99]]"
        },
        "completions": [
            "return tf.expand_dims(in1, 1) * tf.ones((1, 2), dtype=tf.int32)",
            "return tf.expand_dims(in1, 1) * tf.ones([1,2], dtype=tf.int32)",
            "return tf.expand_dims(in1, axis=1) * tf.ones([1, 2])",
            "return tf.expand_dims(in1, axis=-1) * [1, 2]",
            "return tf.expand_dims(in1, -1) * tf.ones((1,2), dtype=in1.dtype)",
            "return tf.expand_dims(in1, 1) * tf.ones([1, 2], dtype=tf.int32)",
            "return tf.expand_dims(in1, 1) * tf.ones([1,2], dtype=in1.dtype)",
            "return tf.expand_dims(in1, 1) * tf.ones([1,2], dtype=in1.dtype)",
            "return tf.expand_dims(in1, -1) * tf.ones([1, 2], dtype=in1.dtype)",
            "return tf.expand_dims(in1, 1) * tf.ones((1, 2), dtype=in1.dtype)"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.expand_dims(in1, 1) * tf.ones((1, 2), dtype=tf.int32)",
            "def transform(in1):\n    return tf.expand_dims(in1, 1) * tf.ones([1,2], dtype=tf.int32)",
            "def transform(in1):\n    return tf.expand_dims(in1, axis=1) * tf.ones([1, 2])",
            "def transform(in1):\n    return tf.expand_dims(in1, axis=-1) * [1, 2]",
            "def transform(in1):\n    return tf.expand_dims(in1, -1) * tf.ones((1,2), dtype=in1.dtype)",
            "def transform(in1):\n    return tf.expand_dims(in1, 1) * tf.ones([1, 2], dtype=tf.int32)",
            "def transform(in1):\n    return tf.expand_dims(in1, 1) * tf.ones([1,2], dtype=in1.dtype)",
            "def transform(in1):\n    return tf.expand_dims(in1, 1) * tf.ones([1,2], dtype=in1.dtype)",
            "def transform(in1):\n    return tf.expand_dims(in1, -1) * tf.ones([1, 2], dtype=in1.dtype)",
            "def transform(in1):\n    return tf.expand_dims(in1, 1) * tf.ones((1, 2), dtype=in1.dtype)"
        ],
        "tf_operators": {
            "tf.int32": 3,
            "tf.ones": 9,
            "tf.expand_dims": 10
        },
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1,
                1,
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                -1,
                1,
                2
            ],
            [
                -1,
                1,
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                -1,
                1,
                2
            ],
            [
                1,
                1,
                2
            ]
        ],
        "all_constants": [
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 10,
            "axis": 0,
            "tf_int32": 3,
            "provided": 7,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 17,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_18",
        "description": "multiply 3D tensor and 2D tensor and add another tensor",
        "target_program": "tf.add(in3, tf.matmul(in1, in2))",
        "source": "https://stackoverflow.com/questions/38222126/tensorflow-efficient-way-for-tensor-multiplication",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[1, 1, 1], [1, 0, 1]], [[1, 2, 3], [4, 5, 6]]], [[1, 1, 1, 1], [1, 2, 3, 4], [5, 6, 7, 8]], [100, 200, 300, 400],]",
            "outputs": "[[[107, 209, 311, 413], [106, 207, 308, 409]], [[118, 223, 328, 433], [139, 250, 361, 472]]]"
        },
        "completions": [
            "return tf.add(tf.matmul(tf.cast(in1, tf.int32), tf.cast(in2, tf.int32)), in3)",
            "return tf.add(tf.matmul(in1, in2), in3)",
            "return tf.add(tf.matmul(in1, in2), in3)",
            "return tf.add(tf.tensordot(in1, in2, axes=([2],[0])), tf.cast(in3, tf.int32))",
            "return tf.add(tf.matmul(in1, in2), in3)",
            "return tf.add(tf.matmul(in1, in2), in3)",
            "return tf.add(tf.matmul(tf.cast(in1, tf.int32), tf.cast(in2, tf.int32)), in3)",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)",
            "return tf.add(tf.matmul(tf.cast(in1, tf.int32), tf.cast(in2, tf.int32)), tf.cast(in3, tf.int32))"
        ],
        "normalized_completions": [
            "def transform(in1, in2, in3):\n    return tf.add(tf.matmul(tf.cast(in1, tf.int32), tf.cast(in2, tf.int32)), in3)",
            "def transform(in1, in2, in3):\n    return tf.add(tf.matmul(in1, in2), in3)",
            "def transform(in1, in2, in3):\n    return tf.add(tf.matmul(in1, in2), in3)",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=([2],[0])), tf.cast(in3, tf.int32))",
            "def transform(in1, in2, in3):\n    return tf.add(tf.matmul(in1, in2), in3)",
            "def transform(in1, in2, in3):\n    return tf.add(tf.matmul(in1, in2), in3)",
            "def transform(in1, in2, in3):\n    return tf.add(tf.matmul(tf.cast(in1, tf.int32), tf.cast(in2, tf.int32)), in3)",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)",
            "def transform(in1, in2, in3):\n    return tf.add(tf.matmul(tf.cast(in1, tf.int32), tf.cast(in2, tf.int32)), tf.cast(in3, tf.int32))"
        ],
        "tf_operators": {
            "tf.add": 10,
            "tf.int32": 4,
            "tf.cast": 4,
            "tf.matmul": 7,
            "tf.tensordot": 3
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [],
            [],
            [],
            [
                2,
                0
            ],
            [],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            []
        ],
        "all_constants": [
            0,
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 3,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 30,
            "axis": 1,
            "tf_int32": 8,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 3,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_19",
        "description": "(\\'sort a tensor considering the first column, breaking ties using the second column\\')",
        "target_program": "tf.gather(tf.gather(in1, tf.argsort(in1[:, 1], stable=True)), tf.argsort(tf.gather(in1, tf.argsort(in1[:, 1], stable=True))[:, 0], stable=True))",
        "source": "https://stackoverflow.com/questions/49399198/sort-a-tensor-based-on-two-columns-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[3, 1, 2], [1, 0, 4], [1, 2, 3], [0, 5, 1], [1, 1, 2], [2, 3, 1], [2, 1, 0]],]",
            "outputs": "[[0, 5, 1],    [1, 0, 4],    [1, 1, 2],    [1, 2, 3],    [2, 1, 0],    [2, 3, 1],    [3, 1, 2]]"
        },
        "completions": [
            "return tf.gather(in1, tf.argsort(in1, axis=0))",
            "return tf.gather(in1, tf.argsort(in1, axis=0))",
            "return tf.gather(in1, tf.argsort(in1, axis = 0, stable=True))",
            "return tf.gather(in1, tf.argsort(in1, axis=0))",
            "return tf.gather(in1, tf.argsort(in1[:, :2], axis=0))",
            "return tf.gather(in1, tf.argsort(in1, axis=0, stable=True))",
            "return tf.gather(in1, tf.argsort(in1, axis=0))",
            "return tf.gather(in1, tf.argsort(in1[:, :2], axis=0))",
            "return tf.cast(tf.gather(in1, tf.argsort(in1, axis=0)), tf.int32)",
            "return tf.gather(in1, tf.argsort(in1))"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1, axis=0))",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1, axis=0))",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1, axis = 0, stable=True))",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1, axis=0))",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, :2], axis=0))",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1, axis=0, stable=True))",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1, axis=0))",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, :2], axis=0))",
            "def transform(in1):\n    return tf.cast(tf.gather(in1, tf.argsort(in1, axis=0)), tf.int32)",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1))"
        ],
        "tf_operators": {
            "tf.argsort": 10,
            "tf.gather": 10,
            "tf.int32": 1,
            "tf.cast": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                2,
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                2,
                0
            ],
            [
                0
            ],
            []
        ],
        "all_constants": [
            0,
            2
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "axis": 2,
            "tf_int32": 1,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 11,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_20",
        "description": "compute argmax in each tensor and set it to 1",
        "target_program": "tf.cast(tf.one_hot(tf.argmax(in1, axis=1), 3), tf.int32)",
        "source": "https://stackoverflow.com/questions/44834739/argmax-on-a-tensor-and-ceiling-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[0.7, 0.2, 0.1], [0.4, 0.5, 0.1], [0.4, 0.4, 0.2], [0.3, 0.4, 0.3], [0.0, 0.0, 1.0]],]",
            "outputs": "[[1, 0, 0],    [0, 1, 0],    [1, 0, 0],    [0, 1, 0],    [0, 0, 1]]"
        },
        "completions": [
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1])",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.get_shape().as_list()[1])",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=3)",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.get_shape()[1])",
            "return tf.one_hot(tf.argmax(in1, axis=1), in1.shape[1])",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1])"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1])",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.get_shape().as_list()[1])",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=3)",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.get_shape()[1])",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), in1.shape[1])",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1])"
        ],
        "tf_operators": {
            "tf.one_hot": 10,
            "tf.argmax": 10,
            "tf.shape": 2
        },
        "coverage_percentage": 50.0,
        "total_covered": 2,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                3
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ]
        ],
        "all_constants": [
            1,
            3
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 12,
            "axis": 0,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 1,
            "tf_float32": 0,
            "common": 19,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_21",
        "description": "gather elements in a tensor along axis 1",
        "target_program": "tf.gather(in2, in1, axis=1, batch_dims=1)",
        "source": "https://stackoverflow.com/questions/51690095/how-to-gather-element-with-index-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[2], [0], [1], [0]],[[0.2, 0.5, 0.3], [0.1, 0.3, 0.6], [0.1, 0.6, 0.3], [0.7, 0.0, 0.3]],]",
            "outputs": "[[0.3], [0.1], [0.6], [0.7]]"
        },
        "completions": [
            "return tf.gather(in2, in1, axis=1)",
            "return tf.gather_nd(in2, tf.concat([tf.expand_dims(tf.range(tf.shape(in1)[0]),1), in1], axis=1))",
            "return tf.gather_nd(in2, tf.concat([tf.range(tf.shape(in1)[0])[:,None], in1], axis=-1))",
            "return tf.gather(in2, in1, axis=1)",
            "return tf.gather(in2, in1, axis=1)",
            "return tf.gather(in2, tf.cast(in1, tf.int32), axis=1)",
            "return tf.gather(in2, in1, axis=1)",
            "return tf.gather_nd(in2, tf.concat([tf.range(tf.shape(in1)[0])[:, tf.newaxis], in1], axis=1))",
            "return tf.gather(in2, in1, axis=1)",
            "return tf.gather(in2, in1, axis=1)"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.gather(in2, in1, axis=1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.concat([tf.expand_dims(tf.range(tf.shape(in1)[0]),1), in1], axis=1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.concat([tf.range(tf.shape(in1)[0])[:,None], in1], axis=-1))",
            "def transform(in1, in2):\n    return tf.gather(in2, in1, axis=1)",
            "def transform(in1, in2):\n    return tf.gather(in2, in1, axis=1)",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.cast(in1, tf.int32), axis=1)",
            "def transform(in1, in2):\n    return tf.gather(in2, in1, axis=1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.concat([tf.range(tf.shape(in1)[0])[:, tf.newaxis], in1], axis=1))",
            "def transform(in1, in2):\n    return tf.gather(in2, in1, axis=1)",
            "def transform(in1, in2):\n    return tf.gather(in2, in1, axis=1)"
        ],
        "tf_operators": {
            "tf.gather": 7,
            "tf.expand_dims": 1,
            "tf.concat": 3,
            "tf.range": 3,
            "tf.shape": 3,
            "tf.gather_nd": 3,
            "tf.int32": 1,
            "tf.cast": 1,
            "tf.newaxis": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1
            ],
            [
                0,
                1,
                1
            ],
            [
                0,
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 23,
            "axis": 0,
            "tf_int32": 1,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 14,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_22",
        "description": "multiply a vector with a matrix without reshaping the vector",
        "target_program": "tf.tensordot(tf.cast(in1, tf.float32), in2, 1)",
        "source": "https://stackoverflow.com/questions/43284897/how-can-i-multiply-a-vector-and-a-matrix-in-tensorflow-without-reshaping",
        "constants": "[]",
        "examples": {
            "inputs": "[[3, 1, 10],[[0.6, 0.4], [0.5, 1.0], [3.0, 4.0]],]",
            "outputs": "[32.3, 42.2]"
        },
        "completions": [
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.matmul(tf.cast(in1, tf.float32), in2)",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=0)",
            "return tf.reduce_sum(tf.multiply(tf.cast(in1, tf.float32), in2), axis=0)",
            "return tf.reduce_sum(tf.multiply(tf.expand_dims(in1, 1), in2), axis=0)",
            "return tf.reduce_sum(tf.multiply(tf.cast(in1, tf.float32), in2), axis=0)",
            "return tf.reduce_sum(tf.multiply(tf.expand_dims(in1, 1), in2), axis=0)",
            "return tf.reduce_sum(tf.multiply(tf.cast(in1, dtype=tf.float32), in2), axis=0)",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.reduce_sum(tf.multiply(tf.cast(in1, tf.float32), in2), 0)"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.matmul(tf.cast(in1, tf.float32), in2)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(tf.cast(in1, tf.float32), in2), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(tf.expand_dims(in1, 1), in2), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(tf.cast(in1, tf.float32), in2), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(tf.expand_dims(in1, 1), in2), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(tf.cast(in1, dtype=tf.float32), in2), axis=0)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(tf.cast(in1, tf.float32), in2), 0)"
        ],
        "tf_operators": {
            "tf.tensordot": 2,
            "tf.float32": 5,
            "tf.cast": 5,
            "tf.matmul": 1,
            "tf.multiply": 7,
            "tf.reduce_sum": 7,
            "tf.expand_dims": 2
        },
        "coverage_percentage": 100.0,
        "total_covered": 3,
        "total_in_target": 3,
        "parsed_constants": [
            [
                1
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                1
            ],
            [
                0
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "axis": 0,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 5,
            "common": 11,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_23",
        "description": "place 1 at the indices in the input tensor",
        "target_program": "tf.cast(tf.reduce_max(tf.one_hot(in1, 9), axis=1), tf.int32)",
        "source": "https://stackoverflow.com/questions/53414433/tensorflow-tensor-binarization",
        "constants": "[]",
        "examples": {
            "inputs": "[[[0, 5, 2], [3, 1, 4], [5, 1, 5]],]",
            "outputs": "[[1, 0, 1, 0, 0, 1, 0, 0, 0],    [0, 1, 0, 1, 1, 0, 0, 0, 0],    [0, 1, 0, 0, 0, 1, 0, 0, 0]]"
        },
        "completions": [
            "return tf.cast(tf.one_hot(in1, 9), tf.int32)",
            "return tf.cast(tf.one_hot(in1, tf.reduce_max(in1)+1), tf.int32)",
            "return tf.reduce_sum(tf.one_hot(in1, 9), axis=1)",
            "return tf.reduce_sum(tf.one_hot(in1, 9), axis=1)",
            "return tf.cast(tf.one_hot(in1, depth=9), tf.int32)",
            "return tf.reduce_sum(tf.one_hot(in1, depth=9), axis=1)",
            "return tf.cast(tf.one_hot(in1, depth=9), tf.int32)",
            "return tf.cast(tf.one_hot(in1, depth=9), tf.int32)",
            "return tf.reduce_any(tf.one_hot(in1, 9), axis=1, keepdims=False)",
            "return tf.reduce_sum(tf.one_hot(in1, 9), axis=1)"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.cast(tf.one_hot(in1, 9), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.one_hot(in1, tf.reduce_max(in1)+1), tf.int32)",
            "def transform(in1):\n    return tf.reduce_sum(tf.one_hot(in1, 9), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.one_hot(in1, 9), axis=1)",
            "def transform(in1):\n    return tf.cast(tf.one_hot(in1, depth=9), tf.int32)",
            "def transform(in1):\n    return tf.reduce_sum(tf.one_hot(in1, depth=9), axis=1)",
            "def transform(in1):\n    return tf.cast(tf.one_hot(in1, depth=9), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.one_hot(in1, depth=9), tf.int32)",
            "def transform(in1):\n    return tf.reduce_any(tf.one_hot(in1, 9), axis=1, keepdims=False)",
            "def transform(in1):\n    return tf.reduce_sum(tf.one_hot(in1, 9), axis=1)"
        ],
        "tf_operators": {
            "tf.one_hot": 10,
            "tf.int32": 5,
            "tf.cast": 5,
            "tf.reduce_max": 1,
            "tf.reduce_sum": 4,
            "tf.reduce_any": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                9
            ],
            [
                1
            ],
            [
                9,
                1
            ],
            [
                9,
                1
            ],
            [
                9
            ],
            [
                9,
                1
            ],
            [
                9
            ],
            [
                9
            ],
            [
                9,
                1
            ],
            [
                9,
                1
            ]
        ],
        "all_constants": [
            9,
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 11,
            "axis": 0,
            "tf_int32": 5,
            "provided": 9,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 7,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_24",
        "description": "(\\'like tf.divide(), but when dividing by 0, return the numerator\\')",
        "target_program": "tf.where(tf.cast(in2, tf.bool), x=tf.divide(in1, in2), y=in1)",
        "source": "https://stackoverflow.com/questions/53643339/tensorflow-overriding-tf-divide-to-return-the-numerator-when-dividing-by-0",
        "constants": "[0]",
        "examples": {
            "inputs": "[[3.0, 1.0, 4.0, 5.0, 2.0, 8.0, -6.0, -7.0],[0.5, 0.0, -2.0, 0.0, 1.0, -1.0, 0.0, 2.0],]",
            "outputs": "[6.0, 1.0, -2.0, 5.0, 2.0, -8.0, -6.0, -3.5]"
        },
        "completions": [
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.math.divide_no_nan(in1, in2)"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)"
        ],
        "tf_operators": {
            "tf.math.divide_no_nan": 10
        },
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 4,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "axis": 0,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_25",
        "description": "copy the tensor tf.eye(3), 4 times",
        "target_program": "tf.tile(tf.eye(in1), (in2, 1))",
        "source": "https://stackoverflow.com/questions/53602691/duplicate-a-tensor-n-times",
        "constants": "[]",
        "examples": {
            "inputs": "[3,4,]",
            "outputs": "[[1.0, 0.0, 0.0],    [0.0, 1.0, 0.0],    [0.0, 0.0, 1.0],    [1.0, 0.0, 0.0],    [0.0, 1.0, 0.0],    [0.0, 0.0, 1.0],    [1.0, 0.0, 0.0],    [0.0, 1.0, 0.0],    [0.0, 0.0, 1.0],    [1.0, 0.0, 0.0],    [0.0, 1.0, 0.0],    [0.0, 0.0, 1.0]]"
        },
        "completions": [
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.reshape(tf.tile(tf.eye(in1), [in2, 1]), [-1, in1])",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.reshape(tf.tile(tf.eye(in1), [in2, 1]), [-1, in1])",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.tile(tf.eye(in1), [in2, 1])"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.reshape(tf.tile(tf.eye(in1), [in2, 1]), [-1, in1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.reshape(tf.tile(tf.eye(in1), [in2, 1]), [-1, in1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])"
        ],
        "tf_operators": {
            "tf.eye": 10,
            "tf.tile": 10,
            "tf.reshape": 2
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                1
            ],
            [
                1,
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                -1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 22,
            "axis": 0,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 12,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_26",
        "description": "reduction operation for multiple dimensions simultaneously",
        "target_program": "tf.reduce_sum(tf.reduce_sum(in1, axis=1), axis=1)",
        "source": "https://stackoverflow.com/questions/54294780/how-to-perform-reduce-op-on-multiple-dimensions-at-once",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[3, 4], [1, 2]], [[5, -2], [-10, 3]], [[10, 20], [-4, 7]]]]",
            "outputs": "[10, -4, 33]"
        },
        "completions": [
            "return tf.reduce_max(tf.cast(in1, tf.int32), axis=[0,1])",
            "return tf.reduce_sum(in1, axis=[0, 1])",
            "return tf.reduce_sum(in1, axis=[0, 1])",
            "return tf.reduce_sum(in1, axis=[0,1])",
            "return tf.reduce_sum(in1, axis=[0, 1])",
            "return tf.reduce_max(tf.reduce_sum(in1, axis=1), axis=0)",
            "return tf.reduce_sum(in1, axis=[0, 1])",
            "return tf.reduce_sum(in1, axis=[0, 1])",
            "return tf.reduce_max(tf.reduce_sum(in1, axis=-1), axis=-1)",
            "return tf.reduce_sum(tf.abs(in1), axis=[0,1])"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.reduce_max(tf.cast(in1, tf.int32), axis=[0,1])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[0, 1])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[0, 1])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[0,1])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[0, 1])",
            "def transform(in1):\n    return tf.reduce_max(tf.reduce_sum(in1, axis=1), axis=0)",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[0, 1])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[0, 1])",
            "def transform(in1):\n    return tf.reduce_max(tf.reduce_sum(in1, axis=-1), axis=-1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.abs(in1), axis=[0,1])"
        ],
        "tf_operators": {
            "tf.int32": 1,
            "tf.reduce_max": 3,
            "tf.cast": 1,
            "tf.reduce_sum": 9,
            "tf.abs": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                1,
                0
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                -1,
                -1
            ],
            [
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 10,
            "axis": 0,
            "tf_int32": 1,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 20,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_27",
        "description": "boolean tensor with 1 at the indices in the input tensor",
        "target_program": "tf.cast(tf.reduce_max(tf.one_hot(in1, in2), axis=0), tf.int32)",
        "source": "https://stackoverflow.com/questions/54225704/how-do-i-get-a-tensor-representing-the-on-positions-in-the-original-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 3, 5, 6],8,]",
            "outputs": "[1, 0, 0, 1, 0, 1, 1, 0]"
        },
        "completions": [
            "return tf.cast(tf.reduce_max(tf.one_hot(in1, in2), axis=0), tf.int32)",
            "return tf.cast(tf.math.bincount(in1, minlength=in2), tf.bool)",
            "return tf.reduce_sum(tf.one_hot(in1, in2), axis=0)",
            "return tf.cast(tf.scatter_nd(tf.expand_dims(in1, 1), tf.ones_like(in1), [in2]), tf.int32)",
            "return tf.cast(tf.scatter_nd(tf.expand_dims(in1, axis=1), tf.ones_like(in1), [in2]), tf.int32)",
            "output = tf.scatter_nd(tf.expand_dims(in1, 1), tf.ones_like(in1), [in2])\nreturn tf.cast(output, tf.int32)",
            "return tf.cast(tf.scatter_nd(tf.expand_dims(in1, axis=-1), tf.ones_like(in1), [in2]), tf.int32)",
            "return tf.cast(tf.sequence_mask(in1, in2), int)",
            "return tf.cast(tf.scatter_nd(tf.expand_dims(in1, 1), tf.ones_like(in1), [in2]), tf.int32)",
            "return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.cast(tf.reduce_max(tf.one_hot(in1, in2), axis=0), tf.int32)",
            "def transform(in1, in2):\n    return tf.cast(tf.math.bincount(in1, minlength=in2), tf.bool)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.one_hot(in1, in2), axis=0)",
            "def transform(in1, in2):\n    return tf.cast(tf.scatter_nd(tf.expand_dims(in1, 1), tf.ones_like(in1), [in2]), tf.int32)",
            "def transform(in1, in2):\n    return tf.cast(tf.scatter_nd(tf.expand_dims(in1, axis=1), tf.ones_like(in1), [in2]), tf.int32)",
            "def transform(in1, in2):\n    output = tf.scatter_nd(tf.expand_dims(in1, 1), tf.ones_like(in1), [in2])\n    return tf.cast(output, tf.int32)",
            "def transform(in1, in2):\n    return tf.cast(tf.scatter_nd(tf.expand_dims(in1, axis=-1), tf.ones_like(in1), [in2]), tf.int32)",
            "def transform(in1, in2):\n    return tf.cast(tf.sequence_mask(in1, in2), int)",
            "def transform(in1, in2):\n    return tf.cast(tf.scatter_nd(tf.expand_dims(in1, 1), tf.ones_like(in1), [in2]), tf.int32)",
            "def transform(in1, in2):\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)"
        ],
        "tf_operators": {
            "tf.one_hot": 3,
            "tf.int32": 7,
            "tf.reduce_max": 1,
            "tf.cast": 9,
            "tf.bool": 1,
            "tf.math.bincount": 1,
            "tf.reduce_sum": 2,
            "tf.expand_dims": 5,
            "tf.ones_like": 5,
            "tf.scatter_nd": 5,
            "tf.sequence_mask": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                0
            ],
            [],
            [
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [],
            [
                1
            ],
            [
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 26,
            "axis": 0,
            "tf_int32": 7,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 8,
            "tf_bool": 1
        }
    },
    {
        "name": "stackoverflow_28",
        "description": "extract columns from a 3D tensor given column indices",
        "target_program": "tf.squeeze(tf.gather(in1, tf.expand_dims(in2, 1), axis=-1, batch_dims=1))",
        "source": "https://stackoverflow.com/questions/54274074/selecting-columns-from-3d-tensor-according-to-a-1d-tensor-of-indices-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[5, 3],  [0, 2]], [[7, 4],  [5, 1]], [[10, 20],  [15, 30]], [[11, 16],  [14, 12]], [[-2, -7],  [-4, 6]]],[1, 0, 1, 1, 0],]",
            "outputs": "[[3, 2], [7, 5], [20, 30], [16, 12], [-2, -4]]"
        },
        "completions": [
            "return tf.gather(in1, tf.expand_dims(in2, axis=-1), axis=2, batch_dims=1)",
            "return tf.gather(in1, in2, axis=2)",
            "return tf.gather(in1, in2, axis=2)",
            "return tf.gather(in1, in2, axis=2)",
            "return tf.gather(in1, in2, axis=2)",
            "return tf.gather(in1, in2, axis=2, batch_dims=1)",
            "return tf.gather(in1, in2, axis=2)",
            "return tf.gather(in1, tf.expand_dims(in2, -1), axis=2, batch_dims=1)",
            "return tf.gather(in1, in2, axis=2, batch_dims=1)",
            "return tf.cast(tf.gather(in1, tf.cast(in2, tf.int32), axis=2), tf.int32)"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.gather(in1, tf.expand_dims(in2, axis=-1), axis=2, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)",
            "def transform(in1, in2):\n    return tf.gather(in1, tf.expand_dims(in2, -1), axis=2, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.cast(tf.gather(in1, tf.cast(in2, tf.int32), axis=2), tf.int32)"
        ],
        "tf_operators": {
            "tf.expand_dims": 2,
            "tf.gather": 10,
            "tf.int32": 1,
            "tf.cast": 1
        },
        "coverage_percentage": 66.66666666666666,
        "total_covered": 2,
        "total_in_target": 3,
        "parsed_constants": [
            [
                -1,
                2,
                1
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2,
                1
            ],
            [
                2
            ],
            [
                -1,
                2,
                1
            ],
            [
                2,
                1
            ],
            [
                2
            ]
        ],
        "all_constants": [
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "axis": 10,
            "tf_int32": 2,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 6,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_29",
        "description": "place continuous values into buckets given bucket boundaries",
        "target_program": "tf.searchsorted(in1, in2, side='left')",
        "source": "https://stackoverflow.com/questions/54155085/bucketing-continous-value-tensors-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[-1.0, -0.8, -0.6, -0.4, -0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0],[0.1, -10, -0.1, 1.1, 0.41],]",
            "outputs": "[6, 0, 5, 11, 8]"
        },
        "completions": [
            "return tf.cast(tf.searchsorted(in1, in2), tf.int32)",
            "return tf.searchsorted(in1, in2, side='right')",
            "return tf.searchsorted(in1, in2, side='right')",
            "return tf.searchsorted(in1, in2, side='right')",
            "return tf.cast(tf.searchsorted(tf.sort(in1), in2), tf.int32)",
            "return tf.searchsorted(tf.sort(in1), in2)",
            "return tf.cast(tf.searchsorted(in1, in2, side='right'), tf.int32)",
            "return tf.searchsorted(in1, in2, 'right')",
            "return tf.searchsorted(tf.sort(in1), in2, side='right')",
            "return tf.searchsorted(in1, in2)"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.cast(tf.searchsorted(in1, in2), tf.int32)",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.cast(tf.searchsorted(tf.sort(in1), in2), tf.int32)",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.sort(in1), in2)",
            "def transform(in1, in2):\n    return tf.cast(tf.searchsorted(in1, in2, side='right'), tf.int32)",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, 'right')",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.sort(in1), in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2)"
        ],
        "tf_operators": {
            "tf.int32": 3,
            "tf.searchsorted": 10,
            "tf.cast": 3,
            "tf.sort": 3
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "axis": 0,
            "tf_int32": 3,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_30",
        "description": "compute Euclidean distance between two tensors",
        "target_program": "tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))",
        "source": "https://stackoverflow.com/questions/54147780/tensorflow-how-to-calculate-the-euclidean-distance-between-two-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1., 2.], [3., 4.], [5., 6.]],[[9., 4.], [8., 5.], [7., 6.]],]",
            "outputs": "[[math.sqrt(68), math.sqrt(58), math.sqrt(52)],    [math.sqrt(36), math.sqrt(26), math.sqrt(20)],    [math.sqrt(20), math.sqrt(10), math.sqrt(4)]]"
        },
        "completions": [
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(in1, tf.transpose(in2))), axis=1))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(in1, tf.transpose(in2))), axis=1))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(in1, in2)), axis=1))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(in1, tf.expand_dims(in2, 0))), axis=-1))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(in1, tf.transpose(in2))), axis=1))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(in1, tf.expand_dims(in2, 1))), axis=2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(in1, tf.transpose(in2))), axis=1))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(in1, tf.expand_dims(in2, 1))), axis=2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(in1, tf.expand_dims(in2, 1))), axis=-1))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(in1, tf.expand_dims(in2, 1))), axis=2))"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(in1, tf.transpose(in2))), axis=1))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(in1, tf.transpose(in2))), axis=1))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(in1, in2)), axis=1))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(in1, tf.expand_dims(in2, 0))), axis=-1))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(in1, tf.transpose(in2))), axis=1))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(in1, tf.expand_dims(in2, 1))), axis=2))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(in1, tf.transpose(in2))), axis=1))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(in1, tf.expand_dims(in2, 1))), axis=2))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(in1, tf.expand_dims(in2, 1))), axis=-1))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(in1, tf.expand_dims(in2, 1))), axis=2))"
        ],
        "tf_operators": {
            "tf.sqrt": 10,
            "tf.square": 10,
            "tf.transpose": 4,
            "tf.subtract": 10,
            "tf.reduce_sum": 10,
            "tf.expand_dims": 5
        },
        "coverage_percentage": 100.0,
        "total_covered": 5,
        "total_in_target": 5,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                -1
            ],
            [
                1
            ],
            [
                1,
                2
            ],
            [
                1
            ],
            [
                1,
                2
            ],
            [
                1,
                -1
            ],
            [
                1,
                2
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "axis": 3,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 12,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_31",
        "description": "squared error between two tensors, one being a sparse tensor",
        "target_program": "tf.reduce_sum(tf.square(tf.subtract(in2, tf.sparse.to_dense(in1))))",
        "source": "https://stackoverflow.com/questions/45032668/tensorflow-how-to-compute-the-square-error-between-a-tensor-and-a-sparse-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "tf.SparseTensor(indices=[[0, 0], [0, 1], [1, 1]], values=[1.0, 1.5, -2.0], dense_shape=[2, 2]), [[3.0, 1.0], [0.2, -1.0]],",
            "outputs": "5.29"
        },
        "completions": [
            "return tf.reduce_sum(tf.math.squared_difference(in1, tf.sparse.to_dense(in2)))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.square(tf.subtract(tf.sparse.to_dense(in1), in2)))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2)).numpy()",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(in1, tf.sparse.to_dense(in2)))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.square(tf.subtract(tf.sparse.to_dense(in1), in2)))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2)).numpy()",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))"
        ],
        "tf_operators": {
            "tf.math.squared_difference": 8,
            "tf.reduce_sum": 10,
            "tf.sparse.to_dense": 10,
            "tf.subtract": 1,
            "tf.square": 1,
            "tf.squared_difference": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "axis": 0,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_32",
        "description": "weighted sum across rows, where the column index is the weight",
        "target_program": "tf.tensordot(in1, tf.cast(tf.range(4), tf.float32), 1)",
        "source": "https://stackoverflow.com/questions/48659449/how-to-compute-the-weighted-sum-of-a-tensor-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[0.1, 0.6, 0.2, 0.1], [0.3, 0.1, 0.4, 0.2], [0.2, 0.1, 0.2, 0.5]],]",
            "outputs": "[1.3, 1.5, 2.0]"
        },
        "completions": [
            "return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1])), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(tf.cast(tf.shape(in1)[1], tf.float32))), axis=1)",
            "return tf.reduce_sum(in1 * tf.cast(tf.range(tf.shape(in1)[1]), tf.float32), axis=1)",
            "weights = tf.range(0, tf.shape(in1)[1], 1)\nin1_weighted = tf.multiply(in1, tf.cast(weights, tf.float32))\nreturn tf.reduce_sum(in1_weighted, axis=1)",
            "return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[-1], dtype=in1.dtype), axis=1)",
            "return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[-1], dtype=in1.dtype), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1])), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=tf.float32)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1])), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=in1.dtype)), axis=1)"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1])), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.cast(tf.shape(in1)[1], tf.float32))), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(in1 * tf.cast(tf.range(tf.shape(in1)[1]), tf.float32), axis=1)",
            "def transform(in1):\n    weights = tf.range(0, tf.shape(in1)[1], 1)\n    in1_weighted = tf.multiply(in1, tf.cast(weights, tf.float32))\n    return tf.reduce_sum(in1_weighted, axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[-1], dtype=in1.dtype), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[-1], dtype=in1.dtype), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1])), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=tf.float32)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1])), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=in1.dtype)), axis=1)"
        ],
        "tf_operators": {
            "tf.multiply": 7,
            "tf.shape": 10,
            "tf.reduce_sum": 10,
            "tf.range": 10,
            "tf.float32": 4,
            "tf.cast": 3
        },
        "coverage_percentage": 75.0,
        "total_covered": 3,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1,
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 22,
            "axis": 0,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 4,
            "common": 22,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_33",
        "description": "find the minimum distance between two sets of points",
        "target_program": "tf.reduce_min(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 0), tf.expand_dims(in2, 1))), axis=2), axis=1)",
        "source": "https://stackoverflow.com/questions/40558251/computing-minimum-distance-for-each-element-in-a-tensor-relative-to-another-tens",
        "constants": "[]",
        "examples": {
            "inputs": "[[[.3, .1, .4], [.1, .5, .9], [.2, .6, .5], [.3, .5, .8],[.9, .7, .9]],[[.3, .2, .3], [.8, .4, .6], [.2, .6, .4], [.3, .3, .8]],]",
            "outputs": "[0.02, 0.19, 0.01, 0.04]"
        },
        "completions": [
            "return tf.reduce_min(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), 2), 1)",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=1))), axis=-1)), axis=-1)",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), in2)), axis=2)), axis=1)",
            "distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, axis=1) - tf.expand_dims(in2, axis=0)), axis=2)), axis=1)\n    return distances",
            "distances = tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))), axis=2)\n return tf.sqrt(tf.reduce_min(distances, axis=1))",
            "return tf.reduce_min(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), in2)), 2), 1)",
            "distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, axis=1), in2)), axis=2)), axis=1)\n return distances",
            "expanded_in1 = tf.expand_dims(in1, 1)\n    expanded_in2 = tf.expand_dims(in2, 0)\n    return tf.reduce_min(tf.reduce_sum(tf.square(expanded_in1 - expanded_in2), axis=2), axis=1)",
            "distances = tf.reduce_sum(tf.square(tf.expand_dims(in1, axis=1) - tf.expand_dims(in2, axis=0)), axis=2)\n return tf.reduce_min(distances, axis=1)",
            "return tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, axis=1) - tf.expand_dims(in2, axis=0)), axis=2), axis=1)"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.reduce_min(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), 2), 1)",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=1))), axis=-1)), axis=-1)",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), in2)), axis=2)), axis=1)",
            null,
            null,
            "def transform(in1, in2):\n    return tf.reduce_min(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), in2)), 2), 1)",
            null,
            null,
            null,
            "def transform(in1, in2):\n    return tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, axis=1) - tf.expand_dims(in2, axis=0)), axis=2), axis=1)"
        ],
        "tf_operators": {
            "tf.expand_dims": 10,
            "tf.square": 10,
            "tf.reduce_min": 10,
            "tf.subtract": 6,
            "tf.reduce_sum": 10,
            "tf.sqrt": 5
        },
        "coverage_percentage": 100.0,
        "total_covered": 5,
        "total_in_target": 5,
        "parsed_constants": [
            [
                1,
                0,
                2,
                1
            ],
            [
                2,
                1,
                -1,
                -1
            ],
            [
                1,
                2,
                1
            ],
            [
                0,
                1,
                2
            ],
            [
                0,
                1,
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2
            ],
            [
                0,
                1,
                2
            ],
            [
                0,
                1,
                2
            ],
            [
                1,
                0,
                2,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 10,
            "axis": 10,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 27,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_34",
        "description": "compute a weighted sum of tensors",
        "target_program": "tf.tensordot(in2, in1, 1)",
        "source": "https://stackoverflow.com/questions/49532371/compute-a-linear-combination-of-tensors-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[1, 2], [3, 4]],[[5, 6], [7, 8]],[[10, 20], [30, 40]]],[3, 5, 10],]",
            "outputs": "[[128, 236], [344, 452]]"
        },
        "completions": [
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "return tf.tensordot(in1, in2, axes=0)",
            "return tf.tensordot(in1, in2, axes=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(tf.cast(in2, tf.float32), -1)), axis=0)",
            "return tf.tensordot(tf.cast(in1, tf.int32), tf.cast(in2, tf.int32), axes=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.reshape(in2, [-1, 1, 1])), axis=0)",
            "return tf.tensordot(in1, in2, axes=[0])",
            "return tf.tensordot(in1, in2, axes=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, axis=-1), axis=-1)), axis=0)"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=0)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(tf.cast(in2, tf.float32), -1)), axis=0)",
            "def transform(in1, in2):\n    return tf.tensordot(tf.cast(in1, tf.int32), tf.cast(in2, tf.int32), axes=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.reshape(in2, [-1, 1, 1])), axis=0)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[0])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, axis=-1), axis=-1)), axis=0)"
        ],
        "tf_operators": {
            "tf.expand_dims": 4,
            "tf.multiply": 5,
            "tf.reduce_sum": 5,
            "tf.tensordot": 5,
            "tf.float32": 1,
            "tf.cast": 2,
            "tf.int32": 1,
            "tf.reshape": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1,
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                -1,
                0
            ],
            [
                0
            ],
            [
                -1,
                1,
                1,
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                -1,
                -1,
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "axis": 0,
            "tf_int32": 2,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 1,
            "common": 19,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_35",
        "description": "linear interpolation between two tensors",
        "target_program": "tf.add(in2, tf.multiply(tf.expand_dims(in3, 1), tf.subtract(in1, in2)))",
        "source": "https://stackoverflow.com/questions/49643371/keras-compute-convex-combination-of-two-tensors",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]], [[10., 20.], [30., 40.], [50., 60.]]],[[[9.0, 8.0], [7.0, 6.0], [5.0, 4.0]], [[90., 80.], [70., 60.], [50., 40.]]],[0.1, 0.4, 0.8],]",
            "outputs": "[[[8.2, 7.4], [5.4, 5.2], [5.0, 5.6]],    [[82., 74.], [54., 52.], [50., 56.]]]"
        },
        "completions": [
            "return tf.add(tf.multiply(in1, tf.expand_dims(tf.expand_dims(1 - in3, 1), 2)), tf.multiply(in2, tf.expand_dims(tf.expand_dims(in3, 1), 2)))",
            "return tf.add(tf.multiply(tf.subtract(in2, in1), tf.expand_dims(tf.expand_dims(in3, 1), 2)), in1)",
            "return tf.add(tf.multiply(in1, tf.expand_dims(1 - in3, -1)), tf.multiply(in2, tf.expand_dims(in3, -1)))",
            "return tf.add(tf.multiply(in1, tf.reshape(1 - in3, (-1, 1, 1))), tf.multiply(in2, tf.reshape(in3, (-1, 1, 1))))",
            "return tf.add(tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.subtract(tf.constant(1.0), in3), 1), 2)), tf.multiply(in2, tf.expand_dims(tf.expand_dims(in3, 1), 2)))",
            "return tf.add(tf.multiply(tf.expand_dims(in3, axis=[1,2]), tf.subtract(in2, in1)), in1)",
            "return tf.add(tf.multiply(in1, tf.reshape(1 - in3, [-1, 1, 1])), tf.multiply(in2, tf.reshape(in3, [-1, 1, 1])))",
            "return tf.add(tf.multiply(in1, tf.reshape(1. - in3, [in3.shape[0], 1, 1])), tf.multiply(in2, tf.reshape(in3, [in3.shape[0], 1, 1])))",
            "return tf.add(tf.multiply(in1, tf.subtract(1.0, tf.expand_dims(tf.expand_dims(in3, 1), 2))), tf.multiply(in2, tf.expand_dims(tf.expand_dims(in3, 1), 2)))",
            "return tf.add(tf.multiply(in1, tf.expand_dims(tf.reshape(1. - in3, [-1, 1, 1]), axis=-1)), tf.multiply(in2, tf.expand_dims(tf.reshape(in3, [-1, 1, 1]), axis=-1)))"
        ],
        "normalized_completions": [
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, tf.expand_dims(tf.expand_dims(1 - in3, 1), 2)), tf.multiply(in2, tf.expand_dims(tf.expand_dims(in3, 1), 2)))",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(tf.subtract(in2, in1), tf.expand_dims(tf.expand_dims(in3, 1), 2)), in1)",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, tf.expand_dims(1 - in3, -1)), tf.multiply(in2, tf.expand_dims(in3, -1)))",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, tf.reshape(1 - in3, (-1, 1, 1))), tf.multiply(in2, tf.reshape(in3, (-1, 1, 1))))",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.subtract(tf.constant(1.0), in3), 1), 2)), tf.multiply(in2, tf.expand_dims(tf.expand_dims(in3, 1), 2)))",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(tf.expand_dims(in3, axis=[1,2]), tf.subtract(in2, in1)), in1)",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, tf.reshape(1 - in3, [-1, 1, 1])), tf.multiply(in2, tf.reshape(in3, [-1, 1, 1])))",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, tf.reshape(1. - in3, [in3.shape[0], 1, 1])), tf.multiply(in2, tf.reshape(in3, [in3.shape[0], 1, 1])))",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, tf.subtract(1.0, tf.expand_dims(tf.expand_dims(in3, 1), 2))), tf.multiply(in2, tf.expand_dims(tf.expand_dims(in3, 1), 2)))",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, tf.expand_dims(tf.reshape(1. - in3, [-1, 1, 1]), axis=-1)), tf.multiply(in2, tf.expand_dims(tf.reshape(in3, [-1, 1, 1]), axis=-1)))"
        ],
        "tf_operators": {
            "tf.add": 10,
            "tf.expand_dims": 7,
            "tf.multiply": 10,
            "tf.subtract": 4,
            "tf.reshape": 4,
            "tf.constant": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1,
                1,
                2,
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                -1,
                -1
            ],
            [
                1,
                -1,
                1,
                1,
                -1,
                1,
                1
            ],
            [
                1,
                2,
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                -1,
                1,
                1,
                -1,
                1,
                1
            ],
            [
                0,
                1,
                1,
                0,
                1,
                1
            ],
            [
                1,
                2,
                1,
                2
            ],
            [
                -1,
                1,
                1,
                -1,
                -1,
                1,
                1,
                -1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 40,
            "axis": 8,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 36,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_36",
        "description": "divide each element by the column index",
        "target_program": "tf.cast(tf.divide(in1, tf.add(in1, tf.range(8))), tf.float32)",
        "source": "https://stackoverflow.com/questions/43306788/divide-elements-of-1-d-tensor-by-the-corrispondent-index",
        "constants": "[]",
        "examples": {
            "inputs": "[[1, 0, 1, 1, 0, 1, 0, 1],]",
            "outputs": "[1., 0., 0.333333, 0.25, 0., 0.166667, 0., 0.125]"
        },
        "completions": [
            "return tf.divide(in1, tf.range(1, tf.shape(in1)[0]+1))",
            "return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))",
            "return tf.divide(in1, tf.range(1, tf.shape(in1)[0]+1, dtype=tf.float32))",
            "return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))",
            "return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))",
            "return tf.divide(in1, tf.range(1, tf.size(in1)+1, dtype=tf.float32))",
            "return tf.divide(in1, tf.range(1, tf.add(1, tf.shape(in1)[0]), dtype=tf.float32))",
            "return tf.divide(in1, tf.range(1, tf.size(in1) + 1))",
            "return tf.divide(in1, tf.range(1, tf.size(in1) + 1))",
            "return tf.divide(in1, tf.range(1, tf.size(in1) + 1))"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0]+1))",
            "def transform(in1):\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))",
            "def transform(in1):\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0]+1, dtype=tf.float32))",
            "def transform(in1):\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))",
            "def transform(in1):\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))",
            "def transform(in1):\n    return tf.divide(in1, tf.range(1, tf.size(in1)+1, dtype=tf.float32))",
            "def transform(in1):\n    return tf.divide(in1, tf.range(1, tf.add(1, tf.shape(in1)[0]), dtype=tf.float32))",
            "def transform(in1):\n    return tf.divide(in1, tf.range(1, tf.size(in1) + 1))",
            "def transform(in1):\n    return tf.divide(in1, tf.range(1, tf.size(in1) + 1))",
            "def transform(in1):\n    return tf.divide(in1, tf.range(1, tf.size(in1) + 1))"
        ],
        "tf_operators": {
            "tf.divide": 10,
            "tf.shape": 6,
            "tf.range": 10,
            "tf.float32": 6,
            "tf.size": 4,
            "tf.add": 1
        },
        "coverage_percentage": 80.0,
        "total_covered": 4,
        "total_in_target": 5,
        "parsed_constants": [
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1,
                0
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "axis": 0,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 6,
            "common": 26,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_37",
        "description": "dot product a vector with last dimension of a tensor",
        "target_program": "tf.tensordot(in1, in2, 1)",
        "source": "https://stackoverflow.com/questions/49206051/multiply-4-d-tensor-with-1-d-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]],  [[1.2, 3.4, 5.6], [7.8, 9.8, 7.6]]]],[0.5, 1.0, 2.0],]",
            "outputs": "[[[8.5, 19.0], [15.2, 28.9]]]"
        },
        "completions": [
            "return tf.tensordot(in1, in2, axes=[[3], [0]])",
            "return tf.tensordot(in1, tf.expand_dims(in2, 0), [[-1], [0]])",
            "return tf.tensordot(in1, in2, axes=[[-1], [0]])",
            "return tf.tensordot(in1, in2, axes=[[-1],[0]])",
            "return tf.tensordot(in1, in2, axes=[[-1], [0]])",
            "return tf.tensordot(in1, in2, axes=[[3], [0]])",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=[[-1], [0]])",
            "return tf.tensordot(in1, in2, axes=[[-1],[0]])",
            "return tf.tensordot(in1, in2, axes=[[-1],[-1]])"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[3], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, tf.expand_dims(in2, 0), [[-1], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[-1], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[-1],[0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[-1], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[3], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[-1], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[-1],[0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[-1],[-1]])"
        ],
        "tf_operators": {
            "tf.tensordot": 10,
            "tf.expand_dims": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                3,
                0
            ],
            [
                0,
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                3,
                0
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                -1
            ]
        ],
        "all_constants": [
            0,
            1,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "axis": 2,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 18,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_38",
        "description": "compute the product of marked elements",
        "target_program": "tf.reduce_prod(tf.maximum(tf.reduce_max(in2), tf.multiply(in1, in2)), axis=1)",
        "source": "https://stackoverflow.com/questions/49511529/tensorflow-compute-multiplication-by-binary-matrix",
        "constants": "[]",
        "examples": {
            "inputs": "[[9, 2, 5, 3, 7, 4],[[0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1]],]",
            "outputs": "[35, 9, 120]"
        },
        "completions": [
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.reduce_prod(tf.reshape(tf.boolean_mask(in1, tf.concat(in2, axis=0)), [tf.shape(in2)[0], -1]), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.reshape(tf.boolean_mask(in1, tf.concat(in2, axis=0)), [tf.shape(in2)[0], -1]), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)"
        ],
        "tf_operators": {
            "tf.cast": 9,
            "tf.bool": 9,
            "tf.reduce_prod": 10,
            "tf.boolean_mask": 10,
            "tf.reshape": 1,
            "tf.concat": 1,
            "tf.shape": 1
        },
        "coverage_percentage": 25.0,
        "total_covered": 1,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                0,
                -1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 21,
            "axis": 0,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 13,
            "tf_bool": 9
        }
    },
    {
        "name": "stackoverflow_39",
        "description": "(\\'set to 0 the elements with absolute value less than 1, and square the other elements\\')",
        "target_program": "tf.multiply(tf.square(in1), tf.cast(tf.cast(tf.cast(in1, tf.int32), tf.bool), tf.float32))",
        "source": "https://stackoverflow.com/questions/37912161/how-can-i-compute-element-wise-conditionals-on-batches-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[-1.5, 1.0, 0.9, 2.0], [1.1, 0.0, -0.1, -0.9], [-1.0, 0.1, -1.1, 2.5]],]",
            "outputs": "[[2.25, 1.0, 0.0, 4.0],    [1.21, 0.0, 0.0, 0.0],    [1.0, 0.0, 1.21, 6.25]]"
        },
        "completions": [
            "return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), 0)",
            "return tf.where(tf.abs(in1) < 1, 0, tf.square(in1))",
            "return tf.where(tf.abs(in1) < 1, 0, tf.square(in1))",
            "return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), tf.zeros_like(in1))",
            "return tf.where(tf.abs(in1) < 1, 0, tf.square(in1))",
            "return tf.where(tf.abs(in1) < 1, 0, tf.square(in1))",
            "return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))",
            "return tf.square(tf.where(tf.greater(tf.abs(in1), 1), in1, 0))",
            "return tf.multiply(tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), in1), tf.where(tf.abs(in1) < 1, tf.ones_like(in1), in1))",
            "return tf.square(tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), in1))"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), 0)",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, 0, tf.square(in1))",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, 0, tf.square(in1))",
            "def transform(in1):\n    return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), tf.zeros_like(in1))",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, 0, tf.square(in1))",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, 0, tf.square(in1))",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))",
            "def transform(in1):\n    return tf.square(tf.where(tf.greater(tf.abs(in1), 1), in1, 0))",
            "def transform(in1):\n    return tf.multiply(tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), in1), tf.where(tf.abs(in1) < 1, tf.ones_like(in1), in1))",
            "def transform(in1):\n    return tf.square(tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), in1))"
        ],
        "tf_operators": {
            "tf.abs": 10,
            "tf.where": 10,
            "tf.greater_equal": 2,
            "tf.square": 9,
            "tf.zeros_like": 4,
            "tf.greater": 1,
            "tf.multiply": 1,
            "tf.ones_like": 1
        },
        "coverage_percentage": 33.33333333333333,
        "total_covered": 2,
        "total_in_target": 6,
        "parsed_constants": [
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 27,
            "axis": 0,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 17,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_40",
        "description": "use the output of tf.nn.top_k to make a sparse tensor",
        "target_program": "tf.sparse.to_dense(tf.SparseTensor(tf.cast(in2, tf.int64), in1, (3, 5)))",
        "source": "https://stackoverflow.com/questions/43996831/make-a-sparse-tensor-based-on-the-output-of-tf-nn-top-k",
        "constants": "[]",
        "examples": {
            "inputs": "[[4, 5, 2, 7, 8, 6],[[0, 2], [0, 4], [1, 1], [1, 3], [2, 0], [2, 3]],]",
            "outputs": "[[0, 0, 4, 0, 5],[0, 2, 0, 7, 0],[8, 0, 0, 6, 0]]"
        },
        "completions": [
            "return tf.scatter_nd(in2, in1, [tf.reduce_max(in2[:, 0])+1, tf.reduce_max(in2[:, 1])+1])",
            "return tf.scatter_nd(in2, in1, [tf.reduce_max(in2, axis=0)[0]+1, tf.reduce_max(in2, axis=0)[1]+1])",
            "return tf.scatter_nd(in2, in1, [tf.reduce_max(in2[:, 0])+1, tf.reduce_max(in2[:, 1])+1])",
            "return tf.scatter_nd(in2, in1, tf.constant([3, 5]))",
            "return tf.scatter_nd(tf.cast(in2, tf.int32), tf.cast(in1, tf.int32), [3, 5])",
            "return tf.scatter_nd(in2, in1, [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1])",
            "return tf.scatter_nd(in2, in1, [3,5])",
            "return tf.scatter_nd(in2, tf.gather(in1, tf.argmin(in2, 1)), [tf.reduce_max(in2[:, 0])+1, tf.reduce_max(in2[:, 1])+1])",
            "return tf.scatter_nd(in2, tf.math.top_k(in1, k=tf.shape(in1)[0]).values, [tf.shape(in1)[0],tf.reduce_max(in2)+1])",
            "return tf.scatter_nd(in2, tf.gather(in1, in2[:, 1]), [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1])"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, [tf.reduce_max(in2[:, 0])+1, tf.reduce_max(in2[:, 1])+1])",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, [tf.reduce_max(in2, axis=0)[0]+1, tf.reduce_max(in2, axis=0)[1]+1])",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, [tf.reduce_max(in2[:, 0])+1, tf.reduce_max(in2[:, 1])+1])",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, tf.constant([3, 5]))",
            "def transform(in1, in2):\n    return tf.scatter_nd(tf.cast(in2, tf.int32), tf.cast(in1, tf.int32), [3, 5])",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1])",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, [3,5])",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, tf.gather(in1, tf.argmin(in2, 1)), [tf.reduce_max(in2[:, 0])+1, tf.reduce_max(in2[:, 1])+1])",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, tf.math.top_k(in1, k=tf.shape(in1)[0]).values, [tf.shape(in1)[0],tf.reduce_max(in2)+1])",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, tf.gather(in1, in2[:, 1]), [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1])"
        ],
        "tf_operators": {
            "tf.reduce_max": 7,
            "tf.scatter_nd": 10,
            "tf.constant": 1,
            "tf.int32": 1,
            "tf.cast": 1,
            "tf.argmin": 1,
            "tf.gather": 2,
            "tf.math.top_k": 1,
            "tf.shape": 1
        },
        "coverage_percentage": 25.0,
        "total_covered": 1,
        "total_in_target": 4,
        "parsed_constants": [
            [
                0,
                1,
                1,
                1
            ],
            [
                0,
                0,
                1,
                0,
                1,
                1
            ],
            [
                0,
                1,
                1,
                1
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                0,
                1,
                1,
                1
            ],
            [
                3,
                5
            ],
            [
                1,
                0,
                1,
                1,
                1
            ],
            [
                0,
                0,
                1
            ],
            [
                1,
                0,
                1,
                1,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            3,
            5
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 37,
            "axis": 0,
            "tf_int32": 2,
            "provided": 6,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 20,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_41",
        "description": "copy all elements except at the given index",
        "target_program": "tf.boolean_mask(in1, tf.not_equal(tf.constant(in2), tf.range(10)))",
        "source": "https://stackoverflow.com/questions/54499051/elegant-way-to-access-python-list-and-tensor-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[5, 2, 8, 2, 4, 1, 1, 0, 2, 1],3,]",
            "outputs": "[5, 2, 8, 4, 1, 1, 0, 2, 1]"
        },
        "completions": [
            "return tf.concat([in1[:in2], in1[in2+1:]], 0)",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.gather(in1, tf.concat([tf.range(in2), tf.range(in2+1, tf.shape(in1)[0])], 0))",
            "return tf.concat([in1[:in2], in1[in2+1:]], 0)",
            "indices_to_keep = tf.range(tf.shape(in1)[0]) != in2\nreturn tf.boolean_mask(in1, indices_to_keep)",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.concat([in1[:in2], in1[in2+1:]],0)",
            "return tf.concat([in1[:in2], in1[in2+1:]], 0)"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], 0)",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.gather(in1, tf.concat([tf.range(in2), tf.range(in2+1, tf.shape(in1)[0])], 0))",
            "def transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], 0)",
            "def transform(in1, in2):\n    indices_to_keep = tf.range(tf.shape(in1)[0]) != in2\n    return tf.boolean_mask(in1, indices_to_keep)",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]],0)",
            "def transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], 0)"
        ],
        "tf_operators": {
            "tf.concat": 5,
            "tf.shape": 6,
            "tf.not_equal": 4,
            "tf.range": 6,
            "tf.boolean_mask": 5,
            "tf.gather": 1
        },
        "coverage_percentage": 75.0,
        "total_covered": 3,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1,
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                1,
                0,
                0
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 37,
            "axis": 0,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 16,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_42",
        "description": "create a binary vector where the max element is 1",
        "target_program": "tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
        "source": "https://stackoverflow.com/questions/54493814/binary-vector-of-max",
        "constants": "[]",
        "examples": {
            "inputs": "[[4, 6, 2, 6, 7, 3, -3],]",
            "outputs": "[0, 0, 0, 0, 1, 0, 0]"
        },
        "completions": [
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "max_value = tf.reduce_max(in1)\nreturn tf.cast(tf.equal(in1, max_value), tf.int32)",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "return tf.where(tf.equal(in1, tf.reduce_max(in1)), 1, 0)"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    max_value = tf.reduce_max(in1)\n    return tf.cast(tf.equal(in1, max_value), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, tf.reduce_max(in1)), 1, 0)"
        ],
        "tf_operators": {
            "tf.equal": 10,
            "tf.int32": 9,
            "tf.reduce_max": 10,
            "tf.cast": 9,
            "tf.where": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1,
                0
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "axis": 0,
            "tf_int32": 9,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 2,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_43",
        "description": "extract elements of a tensor given row indices",
        "target_program": "tf.gather_nd(tf.transpose(in1), tf.expand_dims(in2, 1), batch_dims=1)",
        "source": "https://stackoverflow.com/questions/54455169/better-way-to-access-individual-elements-in-a-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[[12, 34, 56, 78, 90, 10], [99, 88, 77, 55, 44, 33], [-1, -2, -3, -4, -5, -6]],[0, 1, 1, 0, 2, 0],]",
            "outputs": "[12, 88, 77, 78, -5, 10]"
        },
        "completions": [
            "return tf.gather_nd(in1, tf.transpose(tf.stack([in2, tf.range(tf.shape(in2)[0])])))",
            "return tf.gather_nd(in1, tf.transpose(tf.stack([in2, tf.range(tf.shape(in2)[0])]))).numpy()",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[1]), in2], axis=1))",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))",
            "return tf.gather_nd(in1, tf.transpose(tf.stack([in2, tf.range(tf.shape(in2)[0])])))",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.transpose(tf.stack([in2, tf.range(tf.shape(in2)[0])])))",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.transpose(tf.stack([in2, tf.range(tf.shape(in2)[0])]))).numpy()",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[1]), in2], axis=1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.transpose(tf.stack([in2, tf.range(tf.shape(in2)[0])])))",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))"
        ],
        "tf_operators": {
            "tf.stack": 10,
            "tf.range": 10,
            "tf.transpose": 3,
            "tf.shape": 10,
            "tf.gather_nd": 10
        },
        "coverage_percentage": 66.66666666666666,
        "total_covered": 2,
        "total_in_target": 3,
        "parsed_constants": [
            [
                0
            ],
            [
                0
            ],
            [
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 30,
            "axis": 0,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 17,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_44",
        "description": "sum across columns for pairs of consecutive rows",
        "target_program": "tf.squeeze(tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1))",
        "source": "https://stackoverflow.com/questions/54402389/sum-the-columns-for-each-two-consecutive-rows-of-a-tensor-of-3-dimensions",
        "constants": "[2]",
        "examples": {
            "inputs": "[[[3, 5, 2], [6, 2, 3], [8, 7, 1], [0, -3, 5], [-4, 7, 3], [2, 1, 6], [10, 20, 30], [4, 5, 6]],]",
            "outputs": "[[9, 7, 5],    [8, 4, 6],    [-2, 8, 9],    [14, 25, 36]]"
        },
        "completions": [
            "return tf.reshape(tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1), (-1, in1.shape[1]))",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)",
            "return tf.reduce_sum(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]), axis=1)",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, 3)), axis=1)",
            "return tf.reduce_sum(tf.reshape(in1, [-1, 2, 3]), axis=1)",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.reshape(tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1), (-1, in1.shape[1]))",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, 3)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, 3]), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)"
        ],
        "tf_operators": {
            "tf.reshape": 10,
            "tf.reduce_sum": 10,
            "tf.shape": 1
        },
        "coverage_percentage": 66.66666666666666,
        "total_covered": 2,
        "total_in_target": 3,
        "parsed_constants": [
            [
                -1,
                2,
                1,
                1,
                -1,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                3,
                1
            ],
            [
                -1,
                2,
                3,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ]
        ],
        "all_constants": [
            1,
            2,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 11,
            "axis": 2,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 1,
            "tf_float32": 0,
            "common": 30,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_45",
        "description": "reverse the order in the marked rows",
        "target_program": "tf.where(tf.sequence_mask(in2), x=tf.roll(in1, 1, -1), y=in1)",
        "source": "https://stackoverflow.com/questions/54337925/reverse-order-of-some-elements-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[12, 34], [56, 78], [23, 54], [76, 78], [42, 24]]],[1, 0, 1, 0, 1],]",
            "outputs": "[[[34, 12], [56, 78], [54, 23], [76, 78], [24, 42]]]"
        },
        "completions": [
            "return tf.where(tf.equal(in2, 1), tf.reverse(in1, axis=[2]), in1)",
            "return tf.where(tf.cast(tf.expand_dims(in2, axis=-1), tf.bool), \n                tf.reverse(in1, [-1]), in1)",
            "return tf.where(tf.expand_dims(in2, axis=-1), tf.reverse(in1, axis=[1]), in1)",
            "return tf.where(tf.expand_dims(in2, -1), tf.reverse(in1, axis=[2]), in1)",
            "return tf.where(tf.expand_dims(tf.cast(in2, tf.bool), -1), tf.reverse(in1, axis=[-1]), in1)",
            "return tf.where(tf.cast(in2, tf.bool), tf.reverse(in1, [-1]), in1)",
            "return tf.where(tf.cast(in2, tf.bool), in1[:, ::-1], in1)",
            "return tf.where(tf.reshape(tf.cast(in2, tf.bool),(-1, 1)), tf.reverse(in1, [2]), in1)",
            "return tf.where(tf.expand_dims(in2, -1), tf.reverse(in1, axis=[2]), in1)",
            "return tf.where(tf.equal(in2, 1), in1[:,:,::-1], in1)"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 1), tf.reverse(in1, axis=[2]), in1)",
            "def transform(in1, in2):\n                return tf.where(tf.cast(tf.expand_dims(in2, axis=-1), tf.bool), \n                                tf.reverse(in1, [-1]), in1)",
            "def transform(in1, in2):\n    return tf.where(tf.expand_dims(in2, axis=-1), tf.reverse(in1, axis=[1]), in1)",
            "def transform(in1, in2):\n    return tf.where(tf.expand_dims(in2, -1), tf.reverse(in1, axis=[2]), in1)",
            "def transform(in1, in2):\n    return tf.where(tf.expand_dims(tf.cast(in2, tf.bool), -1), tf.reverse(in1, axis=[-1]), in1)",
            "def transform(in1, in2):\n    return tf.where(tf.cast(in2, tf.bool), tf.reverse(in1, [-1]), in1)",
            "def transform(in1, in2):\n    return tf.where(tf.cast(in2, tf.bool), in1[:, ::-1], in1)",
            "def transform(in1, in2):\n    return tf.where(tf.reshape(tf.cast(in2, tf.bool),(-1, 1)), tf.reverse(in1, [2]), in1)",
            "def transform(in1, in2):\n    return tf.where(tf.expand_dims(in2, -1), tf.reverse(in1, axis=[2]), in1)",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 1), in1[:,:,::-1], in1)"
        ],
        "tf_operators": {
            "tf.equal": 2,
            "tf.where": 10,
            "tf.reverse": 8,
            "tf.expand_dims": 5,
            "tf.cast": 5,
            "tf.bool": 5,
            "tf.reshape": 1
        },
        "coverage_percentage": 33.33333333333333,
        "total_covered": 1,
        "total_in_target": 3,
        "parsed_constants": [
            [
                1,
                2
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                1
            ],
            [
                -1,
                2
            ],
            [
                -1,
                -1
            ],
            [
                -1
            ],
            [
                -1
            ],
            [
                -1,
                1,
                2
            ],
            [
                -1,
                2
            ],
            [
                1,
                -1
            ]
        ],
        "all_constants": [
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 30,
            "axis": 4,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 14,
            "tf_bool": 5
        }
    },
    {
        "name": "stackoverflow_46",
        "description": "convert segment lengths to segment ids",
        "target_program": "tf.cast(tf.where(tf.sequence_mask(in1))[:, 0], tf.int32)",
        "source": "https://stackoverflow.com/questions/58652161/how-to-convert-2-3-4-to-0-0-1-1-1-2-2-2-2-to-utilize-tf-math-segment-sum",
        "constants": "[]",
        "examples": {
            "inputs": "[[3, 4, 1],]",
            "outputs": "[0, 0, 0, 1, 1, 1, 1, 2]"
        },
        "completions": [
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(len(in1)), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(len(in1)), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(len(in1)), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(len(in1)), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)"
        ],
        "tf_operators": {
            "tf.repeat": 10,
            "tf.shape": 8,
            "tf.range": 10
        },
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 4,
        "parsed_constants": [
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ]
        ],
        "all_constants": [
            0
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "axis": 0,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 8,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_47",
        "description": "put given values into a sequence mask",
        "target_program": "tf.reshape(tf.gather(in1, tf.cumsum(tf.reshape(tf.cast(in2, tf.int32), [-1]), exclusive=True) * tf.reshape(tf.cast(in2, tf.int32), [-1])), in2.shape)",
        "source": "https://stackoverflow.com/questions/58641546/how-can-i-put-the-sequential-values-to-the-sequence-mask",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],[[True, True, True, False, False], [True, True, False, False, False], [True, True, True, True, True], [True, True, True, True, False], [True, False, False, False, False], [True, True, False, False, False]],]",
            "outputs": "[[0, 1, 2, 0, 0],    [3, 4, 0, 0, 0],    [5, 6, 7, 8, 9],    [10, 11, 12, 13, 0],    [14, 0, 0, 0, 0],    [15, 16, 0, 0, 0]]"
        },
        "completions": [
            "masks = tf.cast(in2, tf.int32)\nindices = tf.cumsum(masks, axis=1, exclusive=True)\nreturn tf.reshape(tf.gather(in1, indices), tf.shape(in2))",
            "return tf.reshape(tf.boolean_mask(in1, tf.reshape(in2, [-1])), tf.shape(in2))",
            "indices = tf.where(in2)\n updates = tf.gather(in1, tf.range(tf.reduce_sum(tf.cast(in2, tf.int32))))\n return tf.scatter_nd(indices, updates, tf.shape(in2))",
            "return tf.scatter_nd(tf.where(in2), in1[:tf.math.count_nonzero(in2)], tf.shape(in2))",
            "return tf.boolean_mask(in1, tf.cast(tf.reshape(in2, [-1]), tf.bool), axis=0)",
            "shape = tf.shape(in2)\nin1 = tf.reshape(in1[:tf.reduce_sum(shape)], shape)\nresult = tf.where(in2,in1,0)\nreturn result",
            "mask = tf.cast(in2, tf.int32)\nidx = tf.reshape(tf.where(mask), [-1])\nval = tf.gather(in1, idx)\npadding = tf.fill(tf.shape(in2), 0)\nout = tf.where(mask, val, padding)\nreturn out",
            "result = tf.zeros_like(in2, dtype=tf.int32)\ncounter = tf.constant([0])\nfor i in range(in2.shape[0]):\n    for j in range(in2.shape[1]):\n        if in2[i][j]:\n            result[i,j].assign(in1[counter])\n            counter += 1\nreturn result",
            "return tf.reshape(tf.boolean_mask(in1, tf.cast(tf.reshape(in2, [-1]), tf.bool)), tf.shape(in2))",
            "mask = tf.cast(in2, tf.int32)\nindices = tf.repeat(tf.range(tf.shape(mask)[1]), tf.reduce_sum(mask, axis=0))\nupdates = tf.boolean_mask(in1, tf.reshape(mask, [-1]))\nshape = tf.shape(mask)\nreturn tf.scatter_nd(tf.expand_dims(indices, axis=-1), updates, shape)"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    masks = tf.cast(in2, tf.int32)\n    indices = tf.cumsum(masks, axis=1, exclusive=True)\n    return tf.reshape(tf.gather(in1, indices), tf.shape(in2))",
            "def transform(in1, in2):\n    return tf.reshape(tf.boolean_mask(in1, tf.reshape(in2, [-1])), tf.shape(in2))",
            null,
            "def transform(in1, in2):\n    return tf.scatter_nd(tf.where(in2), in1[:tf.math.count_nonzero(in2)], tf.shape(in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.cast(tf.reshape(in2, [-1]), tf.bool), axis=0)",
            "def transform(in1, in2):\n    shape = tf.shape(in2)\n    in1 = tf.reshape(in1[:tf.reduce_sum(shape)], shape)\n    result = tf.where(in2,in1,0)\n    return result",
            "def transform(in1, in2):\n    mask = tf.cast(in2, tf.int32)\n    idx = tf.reshape(tf.where(mask), [-1])\n    val = tf.gather(in1, idx)\n    padding = tf.fill(tf.shape(in2), 0)\n    out = tf.where(mask, val, padding)\n    return out",
            "def transform(in1, in2):\n    result = tf.zeros_like(in2, dtype=tf.int32)\n    counter = tf.constant([0])\n    for i in range(in2.shape[0]):\n        for j in range(in2.shape[1]):\n            if in2[i][j]:\n                result[i,j].assign(in1[counter])\n                counter += 1\n    return result",
            "def transform(in1, in2):\n    return tf.reshape(tf.boolean_mask(in1, tf.cast(tf.reshape(in2, [-1]), tf.bool)), tf.shape(in2))",
            "def transform(in1, in2):\n    mask = tf.cast(in2, tf.int32)\n    indices = tf.repeat(tf.range(tf.shape(mask)[1]), tf.reduce_sum(mask, axis=0))\n    updates = tf.boolean_mask(in1, tf.reshape(mask, [-1]))\n    shape = tf.shape(mask)\n    return tf.scatter_nd(tf.expand_dims(indices, axis=-1), updates, shape)"
        ],
        "tf_operators": {
            "tf.reshape": 7,
            "tf.gather": 3,
            "tf.cast": 6,
            "tf.int32": 5,
            "tf.shape": 8,
            "tf.cumsum": 1,
            "tf.boolean_mask": 4,
            "tf.where": 4,
            "tf.range": 2,
            "tf.reduce_sum": 3,
            "tf.scatter_nd": 3,
            "tf.math.count_nonzero": 1,
            "tf.bool": 2,
            "tf.fill": 1,
            "tf.zeros_like": 1,
            "tf.constant": 1,
            "tf.expand_dims": 1,
            "tf.repeat": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 5,
        "total_in_target": 5,
        "parsed_constants": [
            [
                1
            ],
            [
                -1
            ],
            [],
            [],
            [
                -1,
                0
            ],
            [
                0
            ],
            [
                -1,
                0
            ],
            [
                0,
                0,
                1,
                1
            ],
            [
                -1
            ],
            [
                1,
                0,
                -1,
                -1
            ]
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 34,
            "axis": 0,
            "tf_int32": 4,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 17,
            "tf_bool": 2
        }
    },
    {
        "name": "stackoverflow_48",
        "description": "find the indices of all elements",
        "target_program": "tf.cast(tf.argmax(tf.cast(tf.equal(in1, tf.expand_dims(in2, 1)), tf.int32), axis=1), tf.int32)",
        "source": "https://stackoverflow.com/questions/58481332/getting-the-indices-of-several-elements-in-a-tensorflow-at-once",
        "constants": "[]",
        "examples": {
            "inputs": "[[32, 53, 45, 38, 29, 89, 64, 23],[38, 53, 89, 38, 32, 64],]",
            "outputs": "[3, 1, 5, 3, 0, 6]"
        },
        "completions": [
            "return tf.cast(tf.squeeze([tf.where(tf.equal(in1, i)) for i in in2]), tf.int32)",
            "return tf.cast(tf.argsort(tf.searchsorted(in1, in2)), tf.int32)",
            "return tf.cast(tf.squeeze([tf.where(tf.equal(in1, x)) for x in in2]), tf.int32)",
            "return tf.cast(tf.squeeze([tf.where(tf.equal(in1, i)) for i in in2]), tf.int32)",
            "return tf.cast(tf.squeeze(tf.where(tf.equal(tf.expand_dims(in1, 1), in2))), tf.int32)",
            "return tf.cast(tf.concat([tf.where(tf.equal(in1, n)) for n in in2], axis=0), tf.int32)[:, 0]",
            "return tf.cast(tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2)), tf.int32)",
            "return tf.cast(tf.map_fn(lambda x: tf.where(tf.equal(in1, x))[0][0], in2), tf.int32)",
            "return tf.cast(tf.searchsorted(tf.sort(in1), in2), tf.int32)",
            "return tf.cast(tf.where(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), tf.int32)[:,1]"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.cast(tf.squeeze([tf.where(tf.equal(in1, i)) for i in in2]), tf.int32)",
            "def transform(in1, in2):\n    return tf.cast(tf.argsort(tf.searchsorted(in1, in2)), tf.int32)",
            "def transform(in1, in2):\n    return tf.cast(tf.squeeze([tf.where(tf.equal(in1, x)) for x in in2]), tf.int32)",
            "def transform(in1, in2):\n    return tf.cast(tf.squeeze([tf.where(tf.equal(in1, i)) for i in in2]), tf.int32)",
            "def transform(in1, in2):\n    return tf.cast(tf.squeeze(tf.where(tf.equal(tf.expand_dims(in1, 1), in2))), tf.int32)",
            "def transform(in1, in2):\n    return tf.cast(tf.concat([tf.where(tf.equal(in1, n)) for n in in2], axis=0), tf.int32)[:, 0]",
            "def transform(in1, in2):\n    return tf.cast(tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2)), tf.int32)",
            "def transform(in1, in2):\n    return tf.cast(tf.map_fn(lambda x: tf.where(tf.equal(in1, x))[0][0], in2), tf.int32)",
            "def transform(in1, in2):\n    return tf.cast(tf.searchsorted(tf.sort(in1), in2), tf.int32)",
            "def transform(in1, in2):\n    return tf.cast(tf.where(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), tf.int32)[:,1]"
        ],
        "tf_operators": {
            "tf.where": 7,
            "tf.squeeze": 4,
            "tf.equal": 7,
            "tf.cast": 10,
            "tf.int32": 10,
            "tf.argsort": 2,
            "tf.searchsorted": 3,
            "tf.expand_dims": 2,
            "tf.concat": 1,
            "tf.gather": 1,
            "tf.sort": 2,
            "tf.map_fn": 1
        },
        "coverage_percentage": 80.0,
        "total_covered": 4,
        "total_in_target": 5,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [
                1
            ],
            [
                0,
                0
            ],
            [],
            [
                0,
                0
            ],
            [],
            [
                1,
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 21,
            "axis": 0,
            "tf_int32": 10,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 6,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_49",
        "description": "multiply tensors by scalars in a batched way",
        "target_program": "tf.transpose(tf.multiply(in2, tf.transpose(in1)))",
        "source": "https://stackoverflow.com/questions/58466562/given-a-batch-of-n-images-how-to-scalar-multiply-each-image-by-a-different-scal",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]], [[[0.8, 1.0, 0.0], [0.6, 0.4, 0.2]]], [[[0.9, 0.8, 0.7], [0.1, 0.2, 0.3]]]],[2.0, 0.5, 1.0],]",
            "outputs": "[[[[0.2, 0.4, 0.6], [0.8, 1.0, 1.2]]],    [[[0.4, 0.5, 0.0], [0.3, 0.2, 0.1]]],    [[[0.9, 0.8, 0.7], [0.1, 0.2, 0.3]]]]"
        },
        "completions": [
            "return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))",
            "return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, 1), 1), 1))",
            "return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 1))",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.cast(in2, tf.float32), 1), 2))",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.cast(in2, tf.float32), -1), -1))",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.cast(in2, tf.float32), axis=-1), axis=-1))",
            "return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, 1), 1), 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.cast(in2, tf.float32), 1), 2))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.cast(in2, tf.float32), -1), -1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.cast(in2, tf.float32), axis=-1), axis=-1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))"
        ],
        "tf_operators": {
            "tf.multiply": 10,
            "tf.reshape": 4,
            "tf.expand_dims": 6,
            "tf.cast": 3,
            "tf.float32": 3
        },
        "coverage_percentage": 50.0,
        "total_covered": 1,
        "total_in_target": 2,
        "parsed_constants": [
            [
                -1,
                1,
                1,
                1
            ],
            [
                -1,
                1,
                1,
                1
            ],
            [
                1,
                1,
                1
            ],
            [
                -1,
                1,
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                -1
            ],
            [
                1,
                2
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                1,
                1,
                1
            ]
        ],
        "all_constants": [
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "axis": 1,
            "tf_int32": 0,
            "provided": 0,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 3,
            "common": 28,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_50",
        "description": "create a binary matrix where a specified column is set to one",
        "target_program": "tf.cast(tf.one_hot(tf.fill((in1,), in3), in2), tf.int32)",
        "source": "https://stackoverflow.com/questions/58537495/tensorflow-initialize-a-sparse-tensor-with-only-one-line-column-not-zero",
        "constants": "[]",
        "examples": {
            "inputs": "[5]",
            "outputs": "[[0, 0, 0, 1, 0, 0],    [0, 0, 0, 1, 0, 0],    [0, 0, 0, 1, 0, 0],    [0, 0, 0, 1, 0, 0],    [0, 0, 0, 1, 0, 0]]"
        },
        "completions": [
            "return tf.pad(tf.reshape(tf.one_hot(in1, 2*in1+1, dtype=tf.int32), (1, -1)), [[in1-1, in1-1], [0, 0]])",
            "return tf.one_hot(in1, 2*in1, axis=1)",
            "return tf.one_hot(in1, depth=in1*2, axis=1)",
            "return tf.scatter_nd([[i, in1] for i in range(in1+1)], tf.ones(in1+1, dtype=tf.int32), [in1+1, in1+1])",
            "return tf.scatter_nd([[in1]], [1], [6, 6])",
            "return tf.one_hot(in1, 2*in1 + 1)[:, 3]",
            "return tf.one_hot(in1, in1*2)[:, in1]",
            "return tf.one_hot(in1, 2 * in1 + 1)[:, in1]",
            "return tf.pad(tf.expand_dims(tf.eye(in1, in1+1)[:, 3],-1), [[0,0],[0,0],[0,in1-1]])[:,:,0]",
            "return tf.one_hot(in1, 2 * in1 + 1, dtype=tf.int32)[:, in1]"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.pad(tf.reshape(tf.one_hot(in1, 2*in1+1, dtype=tf.int32), (1, -1)), [[in1-1, in1-1], [0, 0]])",
            "def transform(in1):\n    return tf.one_hot(in1, 2*in1, axis=1)",
            "def transform(in1):\n    return tf.one_hot(in1, depth=in1*2, axis=1)",
            "def transform(in1):\n    return tf.scatter_nd([[i, in1] for i in range(in1+1)], tf.ones(in1+1, dtype=tf.int32), [in1+1, in1+1])",
            "def transform(in1):\n    return tf.scatter_nd([[in1]], [1], [6, 6])",
            "def transform(in1):\n    return tf.one_hot(in1, 2*in1 + 1)[:, 3]",
            "def transform(in1):\n    return tf.one_hot(in1, in1*2)[:, in1]",
            "def transform(in1):\n    return tf.one_hot(in1, 2 * in1 + 1)[:, in1]",
            "def transform(in1):\n    return tf.pad(tf.expand_dims(tf.eye(in1, in1+1)[:, 3],-1), [[0,0],[0,0],[0,in1-1]])[:,:,0]",
            "def transform(in1):\n    return tf.one_hot(in1, 2 * in1 + 1, dtype=tf.int32)[:, in1]"
        ],
        "tf_operators": {
            "tf.one_hot": 7,
            "tf.reshape": 1,
            "tf.pad": 2,
            "tf.int32": 3,
            "tf.ones": 1,
            "tf.scatter_nd": 2,
            "tf.eye": 1,
            "tf.expand_dims": 1
        },
        "coverage_percentage": 50.0,
        "total_covered": 2,
        "total_in_target": 4,
        "parsed_constants": [
            [
                2,
                1,
                1,
                -1,
                1,
                1,
                0,
                0
            ],
            [
                2,
                1
            ],
            [
                2,
                1
            ],
            [
                1,
                1,
                1,
                1
            ],
            [
                1,
                6,
                6
            ],
            [
                2,
                1,
                3
            ],
            [
                2
            ],
            [
                2,
                1
            ],
            [
                1,
                3,
                -1,
                0,
                0,
                0,
                0,
                0,
                1,
                0
            ],
            [
                2,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            6,
            -1
        ],
        "constant_counts": [
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 25,
            "axis": 0,
            "tf_int32": 3,
            "provided": 9,
            "shape_tuple": 0,
            "tf_int64": 0,
            "shape": 0,
            "tf_float32": 0,
            "common": 24,
            "tf_bool": 0
        }
    }
]