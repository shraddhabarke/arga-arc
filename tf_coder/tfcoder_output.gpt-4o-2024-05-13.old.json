[
    {
        "name": "google_01",
        "description": "Convert index tensor into pairs for SparseTensor indexing",
        "target_program": "tf.cast(tf.where(tf.sequence_mask(tf.math.bincount(in1))), tf.int32)",
        "source": "From an internal Google chat room, 09/07/2018",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 0, 0, 1, 3, 3],]",
            "outputs": "[[0, 0], [0, 1], [0, 2], [1, 0], [3, 0], [3, 1]]"
        },
        "completions": [
            "```python\n    return tf.stack([tf.range(tf.shape(in1)[0]), in1], axis=1)\n```",
            "```python\n    return tf.stack([in1 // 2, tf.range(tf.size(in1)) % 2], axis=1)\n```",
            "```\n    indices = tf.stack([in1, tf.range(tf.size(in1)) % 2], axis=1)\n    return tf.gather_nd(indices, tf.where(in1 >= 0))\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.size(in1) // tf.math.count_nonzero(in1))], axis=1)\n```",
            "```python\n    return tf.stack([tf.range(tf.shape(in1)[0]), in1], axis=1)\n```",
            "```python\n    return tf.stack([in1 // 2, in1 % 2], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.math.count_nonzero(tf.equal(in1, in1))) // tf.reduce_max(in1)], axis=1)\n```",
            "```python\n    return tf.stack([in1 // 3, in1 % 3], axis=1)\n```",
            "```python\n    return tf.stack([in1 // 3, in1 % 3], axis=1)\n```",
            "```python\n    return tf.stack([in1 // 3, in1 % 3], axis=1)\n```",
            "```\n    return tf.reshape(tf.stack([in1, tf.range(tf.shape(in1)[0])], axis=1), [-1, 2])\n```",
            "```python\n    pairs = tf.expand_dims(in1, 1)\n    ones = tf.ones_like(pairs)\n    counts = tf.math.cumsum(ones, axis=0, exclusive=True)\n    return tf.concat([pairs, counts], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.shape(in1)[0]) % 2], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.reduce_sum(tf.math.bincount(in1)))], axis=1)\n```",
            "```python\n    return tf.stack([in1 // 2, tf.range(tf.shape(in1)[0]) % 2], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.math.count_nonzero(tf.equal(in1, in1)))], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(len(in1)) % 2], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.reduce_sum(tf.ones_like(in1)))], axis=1)\n```",
            "```python\n    indices = tf.expand_dims(tf.reduce_sum(tf.sequence_mask(in1, tf.math.reduce_max(in1)), axis=0) - 1, axis=1)\n    return tf.transpose(tf.concat([indices, tf.expand_dims(tf.range(tf.shape(in1)[0]), axis=1)], axis=1))\n```",
            "```python\n    return tf.stack([in1 // 3, in1 % 3], axis=1)\n```",
            "```python\n    return tf.concat([tf.expand_dims(tf.repeat(tf.range(tf.reduce_max(in1)+1), tf.cast(tf.equal(tf.range(tf.reduce_max(in1)+1), i), tf.int32)), axis=1) for i in in1], axis=1)\n```",
            "```python\n    indices = tf.range(tf.size(in1))\n    return tf.stack([in1, indices % tf.reduce_sum(tf.ones_like(in1))], axis=1)\n```",
            "```python\n    indices = tf.math.bincount(in1)\n    range_tensor = tf.range(tf.reduce_sum(indices))\n    return tf.stack([tf.repeat(tf.range(tf.size(indices)), indices), range_tensor], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.shape(in1)[0]) % 2], axis=1)\n```",
            "```python\n    return tf.stack([in1 // 3, tf.range(tf.shape(in1)[0]) % 3], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.shape(in1)[0]) % 2], axis=1)\n```",
            "```python\n    idxs = tf.range(tf.shape(in1)[0])\n    pairs = tf.stack([in1, idxs], axis=1)\n    return tf.reverse(pairs, axis=[1])\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.reduce_sum(in1)) % 2], axis=1)\n```",
            "```python\n    idx = tf.range(tf.size(in1))\n    return tf.stack([in1, idx % 2], axis=1)\n```",
            "```python\n    return tf.stack(tf.unstack(tf.argsort(in1, direction='ASCENDING', stable=True)), axis=1)\n```",
            "```python\n    return tf.stack([in1 // 3, in1 % 3], axis=1)\n```",
            "```python\n    return tf.transpose(tf.stack([in1, tf.math.floormod(tf.range(tf.size(in1)), 2)]))\n```",
            "```\n    return tf.stack([tf.gather_nd(tf.expand_dims(in1, 1), [[i] for i in range(tf.shape(in1)[0])]), tf.range(tf.shape(in1)[0])], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.shape(in1)[0]) % 2], axis=1)\n```",
            "```python\n    return tf.stack([tf.range(tf.reduce_max(in1) + 1), in1], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.size(in1) % 2)], axis=1)\n```",
            "```python\n    return tf.stack([in1 // 2, in1 % 2], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.shape(in1)[0]) % 2], axis=1)\n```",
            "```python\n    return tf.stack([tf.range(0, tf.math.count_nonzero(in1)), tf.argsort(in1, stable=True)], axis=1)\n```",
            "```python\n    indices = tf.expand_dims(in1, -1)\n    counts = tf.range(tf.reduce_sum(in1) if tf.reduce_any(in1 < 0) else tf.cast(tf.math.count_nonzero(in1), in1.dtype))\n    return tf.concat([tf.broadcast_to(tf.range(tf.shape(in1)[0]), [tf.size(in1), 1]), counts[:, None]], axis=1)\n```",
            "```python\n    return tf.stack([tf.range(tf.size(in1)), in1], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.reduce_sum(tf.ones_like(in1))) // tf.math.count_nonzero(in1, keepdims=True)], axis=1)\n```",
            "```python\n    return tf.expand_dims(in1, 1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.size(in1) // tf.reduce_sum(tf.cast(in1 == in1[0], tf.int32)))], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.shape(in1)[0])], axis=1)\n```",
            "```\n    indices = tf.range(tf.reduce_sum(in1), dtype=tf.int64)\n    segments = tf.repeat(indices, tf.gather_nd(tf.math.bincount(in1), tf.reshape(in1, [-1])))\n    return tf.stack([segments, indices], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.size(in1)) % 2], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.reduce_sum(tf.ones_like(in1), axis=0))], axis=1)\n```",
            "```python\n    return tf.stack([tf.range(tf.reduce_max(in1)+1), tf.argsort(in1)], axis=1)\n```",
            "```python\n    return tf.transpose([in1, tf.range(tf.math.count_nonzero(in1) // tf.math.count_nonzero(in1))])\n```",
            "```python\n    return tf.stack([in1 // 3, in1 % 3], axis=1)\n```",
            "```\n    n = tf.shape(in1)[0]\n    idx = tf.range(n)\n    return tf.stack([in1, idx], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.size(in1) % 2)], axis=1)\n```",
            "```python\n    return tf.stack([tf.math.floormod(tf.range(tf.size(in1)), tf.expand_dims(tf.reduce_sum(in1, axis=0), 0)), in1], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.size(in1)) % 2], axis=1)\n```",
            "```python\n    idx = tf.range(tf.reduce_sum(tf.one_hot(in1, tf.reduce_max(in1) + 1), axis=0, keepdims=True))\n    return tf.transpose(tf.stack([in1, tf.squeeze(idx)]))\n```",
            "```python\n    return tf.stack([in1 // 2, in1 % 2], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.size(in1) % in1.shape[0])], axis=1)\n```",
            "```python\n    return tf.stack([in1 // 2, tf.range(tf.shape(in1)[0]) % 2], axis=1)\n```",
            "```\n    return tf.stack([in1, tf.range(tf.size(in1)) % 2], axis=1)\n```",
            "```python\n    return tf.stack([tf.cast(tf.range(tf.math.count_nonzero(tf.not_equal(in1, -1)), dtype=tf.int32), tf.int64), in1], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.shape(in1)[0]) % 2], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.math.count_nonzero(in1))], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.shape(in1)[0]) % 2], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.shape(in1)[0])], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.shape(in1)[0]) % 2], axis=1)\n```",
            "```python\n    return tf.stack([tf.repeat(tf.range(tf.reduce_max(in1)+1), tf.bincount(in1)), tf.concat([tf.range(c) for c in tf.bincount(in1)], axis=0)], axis=1)\n```",
            "```python\n    return tf.stack([in1 // 3, in1 % 3], axis=1)\n```",
            "```python\n    return tf.stack([tf.shape(in1)[0] * [0] + in1.numpy().tolist(), in1], axis=1)\n```",
            "```\n    return tf.stack([in1, tf.range(tf.shape(in1)[0])], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.size(in1) % 2)], axis=1)\n```",
            "```\n    return tf.stack([in1, tf.range(tf.reduce_sum(tf.sequence_mask(tf.broadcast_to([tf.reduce_max(in1)], tf.shape(in1))), axis=0)) % 2], axis=1)\n```",
            "```python\n    return tf.stack([in1 // 2, tf.range(tf.size(in1)) % 2], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.count_nonzero(in1))], axis=1)\n```",
            "```python\n    return tf.stack([in1 // tf.reduce_max(in1), tf.cumsum(tf.ones_like(in1), exclusive=True) % tf.reduce_max(in1)], axis=1)\n```",
            "```python\n    n = tf.shape(in1)[0]\n    return tf.stack([in1, tf.math.floormod(tf.range(n), 2)], axis=1)\n```",
            "```python\n    indices = tf.range(tf.shape(in1)[0])\n    return tf.stack([in1, indices], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.math.floormod(tf.range(tf.size(in1)), 2)], axis=1)\n```",
            "```python\n    return tf.stack([tf.div(tf.range(tf.math.count_nonzero(in1)), tf.reverse(tf.cumsum(in1), axis=[0])), in1], axis=1)\n```",
            "```python\n    indices = tf.range(tf.shape(in1)[0])\n    return tf.stack([in1, indices], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.reduce_sum(in1))], axis=1)\n```",
            "```\n    return tf.stack([tf.repeat(tf.range(tf.reduce_max(in1)+1), tf.reduce_sum(in1)), tf.gather(in1, tf.argsort(in1))], axis=1)\n```",
            "```python\n    return tf.stack(tf.unstack(tf.stack([in1 // 2, in1 % 2], axis=1), axis=1), axis=1)\n```",
            "```python\n    return tf.transpose([in1, tf.range(tf.size(in1))])\n```",
            "```python\n    return tf.stack([tf.range(tf.math.count_nonzero(in1, axis=0)), in1], axis=1)\n```",
            "```python\n    return tf.stack([in1 // 3, in1 % 3], axis=1)\n```",
            "```python\n    return tf.stack([in1 // tf.cast(in1>0, tf.int32), tf.range(tf.size(in1)) % tf.reduce_max(in1)], axis=1)\n```",
            "```python\n    idx = tf.range(tf.math.count_nonzero(in1, axis=0))\n    return tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.math.count_nonzero(in1, axis=1)), idx], axis=1)\n```",
            "```\n    return tf.transpose(tf.stack([in1, tf.range(tf.shape(in1)[0])]))\n```",
            "```python\n    return tf.expand_dims(in1, 1)\n```",
            "```python\n    return tf.expand_dims(tf.range(tf.reduce_max(in1) + 1), 1) * 0 + tf.expand_dims(in1, 1)\n```",
            "```\n    length = tf.shape(in1)[0]\n    indices0 = tf.repeat(tf.range(length), in1)\n    indices1 = tf.concat([tf.range(i) for i in in1], axis=0)\n    return tf.stack([indices0, indices1], axis=1)\n```",
            "```python\n    return tf.stack([in1 // 2, in1 % 2], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.math.count_nonzero(in1)) % 2], axis=1)\n```",
            "```python\n    return tf.stack([tf.range(tf.shape(in1)[0]), in1], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.size(in1)) % 2], axis=1)\n```",
            "```python\n    return tf.stack([in1 // 3, in1 % 3], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.shape(in1)[0]) // 2], axis=1)\n```",
            "```python\n    return tf.stack([in1 // 2, tf.range(tf.shape(in1)[0])], axis=1)\n```",
            "```python\n    return tf.stack([in1, tf.range(tf.math.count_nonzero(in1)+1)], axis=1)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2670.47,
        "usage": {
            "prompt_tokens": 1478,
            "completion_tokens": 3323,
            "total_tokens": 4801
        }
    },
    {
        "name": "google_03",
        "description": "Slice the first dimension of a SparseTensor",
        "target_program": "tf.divide(in1, tf.expand_dims(tf.reduce_sum(in1, axis=1), 1))",
        "source": "Real task encountered by Googler, 11/01/2018",
        "constants": "[]",
        "examples": {
            "inputs": "tf.SparseTensor(indices=[[0, 0, 0], [0, 1, 1], [1, 1, 1], [1, 1, 2]], values=[1., 1., 1., 1.], dense_shape=[2, 2, 800])",
            "outputs": "tf.SparseTensor(indices=[[0, 0, 0], [0, 1, 1]], values=[1., 1.], dense_shape=[1, 2, 800])"
        },
        "completions": [
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, tf.shape(in1)[1], tf.shape(in1)[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, start=[0, 0, 0], size=[1, -1, -1])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, start=[0, 0, 0], size=[1, -1, -1])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0,0,0], [1,in1.dense_shape[1],in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, start=[0, 0, 0], size=[1, -1, -1])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, tf.shape(in1)[1], tf.shape(in1)[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, tf.shape(in1)[1], tf.shape(in1)[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, start=[0, 0, 0], size=[1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, tf.shape(in1)[1], tf.shape(in1)[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, start=[0, 0, 0], size=[1, -1, -1])\n```",
            "```python\n    return tf.sparse.slice(in1, start=[0, 0, 0], size=[1, -1, -1])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, tf.shape(in1)[1], tf.shape(in1)[2]])",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n```",
            "```python\n    return tf.sparse.slice(in1, start=[0, 0, 0], size=[1, -1, -1])\n```",
            "```python\n    return tf.sparse.slice(in1, start=[0, 0, 0], size=[1, -1, -1])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, start=[0, 0, 0], size=[1, -1, -1])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, start=[0, 0, 0], size=[1, 2, 800])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.SparseTensor(in1.indices[:2], in1.values[:2], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0,0,0], [1,2,800])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, -1, -1])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, start=[0], size=[1])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, tf.shape(in1)[1], tf.shape(in1)[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, start=[0, 0, 0], size=[1, 2, 800])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, -1, -1])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, start=[0, 0, 0], size=[1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```",
            "```python\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2828.335,
        "usage": {
            "prompt_tokens": 1797,
            "completion_tokens": 3916,
            "total_tokens": 5713
        }
    },
    {
        "name": "google_04",
        "description": "Reshape a flat array into a rank 3 tensor",
        "target_program": "tf.reshape(in1, shape=(4, 3, 2))",
        "source": "Real task encountered by Googler, 3/21/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[111, 112, 121, 122, 131, 132, 211, 212, 221, 222, 231, 232, 311, 312, 321, 322, 331, 332, 411, 412, 421, 422, 431, 432],]",
            "outputs": "[[[111, 112], [121, 122], [131, 132]],    [[211, 212], [221, 222], [231, 232]],    [[311, 312], [321, 322], [331, 332]],    [[411, 412], [421, 422], [431, 432]]]"
        },
        "completions": [
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, (4, 3, 2))\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, (4, 3, 2))\n```",
            "```python\n    return tf.reshape(in1, (4, 3, 2))\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, (4, 3, 2))\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, (4, 3, 2))\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, (4, 3, 2))\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, (4, 3, 2))\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, (4, 3, 2))\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, (4, 3, 2))\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, (4, 3, 2))\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```",
            "```python\n    return tf.reshape(in1, [4, 3, 2])\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2257.395,
        "usage": {
            "prompt_tokens": 1557,
            "completion_tokens": 2000,
            "total_tokens": 3557
        }
    },
    {
        "name": "google_05",
        "description": "Repeat each input entry 6 times",
        "target_program": "tf.tile(tf.expand_dims(in1, 1), (1, 6, 1))",
        "source": "Real task encountered by Googler, 3/22/2019",
        "constants": "[6]",
        "examples": {
            "inputs": "[[[1, 2, 3, 4], [5, 6, 7, 8]],]",
            "outputs": "[[[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4],     [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]],    [[5, 6, 7, 8], [5, 6, 7, 8], [5, 6, 7, 8],     [5, 6, 7, 8], [5, 6, 7, 8], [5, 6, 7, 8]]]"
        },
        "completions": [
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, axis=1), repeats=6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, axis=1), repeats=6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, axis=1), repeats=6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(in1[:, tf.newaxis, :], 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, 1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, 1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, 1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(in1, 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, axis=1), repeats=6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, 1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(in1[:, tf.newaxis, :], 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, 1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), repeats=6, axis=1)\n```",
            "```python\n    return tf.repeat(in1, 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), repeats=6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, 1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, axis=1), repeats=6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, 1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, axis=1), repeats=6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.tile(tf.expand_dims(in1, axis=1), [1, 6, 1])\n```",
            "```python\n    return tf.repeat(in1, repeats=6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, axis=1), repeats=6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, axis=1), repeats=6, axis=1)\n```",
            "```python\n    return tf.tile(tf.expand_dims(in1, 1), [1, 6, 1])\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(in1, repeats=6, axis=1)\n```",
            "```\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.tile(tf.expand_dims(in1, 1), [1, 6, 1])\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), repeats=6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, 1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, axis=1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, axis=1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, axis=1), repeats=6, axis=1)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 1810.552,
        "usage": {
            "prompt_tokens": 1572,
            "completion_tokens": 2399,
            "total_tokens": 3971
        }
    },
    {
        "name": "google_06",
        "description": "Take the max from each group of elements",
        "target_program": "tf.math.segment_max(in2, in1)",
        "source": "Real task encountered by Googler, 3/28/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 1, 1, 2, 3, 3, 3, 3],[1, 3, 4, 5, 10, 8, 9, 4],]",
            "outputs": "[1, 4, 5, 10]"
        },
        "completions": [
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n```",
            "```\ndef transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n```",
            "```\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)\n```",
            "```\n  return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2105.1530000000002,
        "usage": {
            "prompt_tokens": 1490,
            "completion_tokens": 1724,
            "total_tokens": 3214
        }
    },
    {
        "name": "google_07",
        "description": "Take the argmax of each group of elements",
        "target_program": "tf.cast(tf.argmax((tf.sequence_mask(tf.cumsum(tf.math.bincount(in1)), dtype=tf.int32) - tf.sequence_mask(tf.cumsum(tf.math.bincount(in1), exclusive=True), dtype=tf.int32, maxlen=in1.shape[0])) * in2, axis=1), tf.int32) - tf.cumsum(tf.math.bincount(in1), exclusive=True)",
        "source": "Real task encountered by Googler, 3/29/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 4, 5, 5],[4, 1, 8, 2, 5, 7, 9, 3, 7, 3, 1, 42, 1, 2, 4, 0],]",
            "outputs": "[2, 3, 1, 0, 1, 0]"
        },
        "completions": [
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\nreturn tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    seg_max = tf.math.segment_max(in2, in1)\n    return tf.reduce_max(seg_max, axis=0)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```",
            "```python\n    return tf.math.segment_max(in2, in1)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2361.072,
        "usage": {
            "prompt_tokens": 1532,
            "completion_tokens": 1653,
            "total_tokens": 3185
        }
    },
    {
        "name": "google_08",
        "description": "create a mask for sequences of the given lengths",
        "target_program": "tf.cast(tf.greater(tf.expand_dims(in1, 1), tf.range(5)), tf.int32)",
        "source": "Real task encountered by Googler, 4/11/2019",
        "constants": "[5]",
        "examples": {
            "inputs": "[[3, 4, 2, 1],]",
            "outputs": "[[1, 1, 1, 0, 0],    [1, 1, 1, 1, 0],    [1, 1, 0, 0, 0],    [1, 0, 0, 0, 0]]"
        },
        "completions": [
            "```python\n    return tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1, maxlen=5)\n```",
            "```python\n    return tf.sequence_mask(in1, 5, dtype=tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1, maxlen=5, dtype=tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1, maxlen=5, dtype=tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1, maxlen=5)\n```",
            "```python\n    return tf.sequence_mask(in1, 5)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1, 5, dtype=tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1, 5)\n```",
            "```python\n    return tf.sequence_mask(in1, 5, dtype=tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1, maxlen=5, dtype=tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1, 5, tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1, 5)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1, maxlen=5, dtype=tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1, maxlen=5, dtype=tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1, 5, dtype=tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1, 5, tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1, maxlen=5)\n```",
            "```python\n    return tf.sequence_mask(in1, 5, tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1, maxlen=5)\n```",
            "```python\n    return tf.sequence_mask(in1, maxlen=5, dtype=tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1, maxlen=5, dtype=tf.int32)\n```",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1, maxlen=5)\n```",
            "```python\n    return tf.sequence_mask(in1, maxlen=5)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1, maxlen=5, dtype=tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1, maxlen=5)\n```",
            "```\n    return tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1, 5, dtype=tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)\n```",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)",
            "```python\n    return tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1, 5)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1, maxlen=5, dtype=tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1, maxlen=5, dtype=tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 1765.2179999999998,
        "usage": {
            "prompt_tokens": 1488,
            "completion_tokens": 2086,
            "total_tokens": 3574
        }
    },
    {
        "name": "google_09",
        "description": "sort the segments",
        "target_program": "tf.gather(in2, tf.argsort(in1, stable=True))",
        "source": "Real task encountered by Googler, 8/9/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[1, 1, 1, 0, 0, 2],[10, 20, 30, 14, 15, 26],]",
            "outputs": "[14, 15, 10, 20, 30, 26]"
        },
        "completions": [
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, stable=True))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, stable=True))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, stable=True))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, stable=True))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=-1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.concat([tf.sort(tf.boolean_mask(in2, tf.equal(in1, i))) for i in tf.unique(in1)[0]], axis=0)\n```",
            "```python\ndef transform(in1, in2):\n    sorted_indices = tf.argsort(in1, axis=0)\n    return tf.gather(in2, sorted_indices)\n```",
            "```python\ndef transform(in1, in2):\n    sorted_indices = tf.argsort(in1, axis=0, stable=True)\n    return tf.gather(in2, sorted_indices)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.concat([tf.sort(tf.boolean_mask(in2, tf.equal(in1, i))) for i in tf.range(tf.reduce_max(in1)+1)], axis=0)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    sorted_indices = tf.argsort(in2, axis=-1, stable=True)\n    return tf.gather(in2, tf.argsort(in1, axis=-1, stable=True)[sorted_indices])\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, stable=True))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, stable=True))\n```",
            "```python\ndef transform(in1, in2):\n    _, idx, count = tf.unique_with_counts(in1)\n    return tf.gather(in2, tf.argsort(idx))\n```",
            "```python\ndef transform(in1, in2):\n    segments,_ = tf.unique_with_counts(in1)\n    return tf.concat(\n        [tf.sort(tf.boolean_mask(in2, tf.equal(in1, s))) for s in segments], axis=0\n    )\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0, stable=True))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, stable=True))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, stable=True))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    _, idx = tf.math.top_k(-tf.cast(in1, tf.int32), tf.size(in1))\n    return tf.gather(in2, idx)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=-1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    seg_ids, indices = tf.argsort(in1, stable=True), tf.range(tf.shape(in1)[0])\n    return tf.gather(in2, tf.argsort(tf.concat([in1, indices], axis=0), axis=0)[:tf.shape(in1)[0]])\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather_nd(in2, tf.argsort(in1, stable=True))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0, stable=True))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.concat([tf.sort(tf.boolean_mask(in2, tf.equal(in1, s))) for s in tf.unique(in1)[0]], axis=0)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, stable=True))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather_nd(in2, tf.argsort(in1, stable=True))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    segments = tf.argsort(in1)\n    return tf.gather(in2, segments)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, stable=True))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, stable=True))\n```",
            "```python\ndef transform(in1, in2):\n    unique_ids, _ = tf.unique_with_counts(in1)\n    sorted_segments = []\n    for segment_id in unique_ids:\n        segment = tf.boolean_mask(in2, tf.equal(in1, segment_id))\n        sorted_segments.append(tf.sort(segment))\n    return tf.concat(sorted_segments, axis=0)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    num_segments = tf.reduce_max(in1) + 1\n    sorted_indices = tf.argsort(in1)\n    sorted_in1 = tf.gather(in1, sorted_indices)\n    sorted_in2 = tf.gather(in2, sorted_indices)\n    segment_sorted_in2 = tf.math.unsorted_segment_max(sorted_in2, sorted_in1, num_segments)\n    return tf.gather(segment_sorted_in2, sorted_in1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, stable=True))\n```",
            "```python\ndef transform(in1, in2):\n    segments = tf.unstack(in2, axis=0)\n    sorted_segments = [tf.sort(t, axis=0) for t in tf.split(in2, tf.unique_with_counts(in1).y)]\n    return tf.concat(sorted_segments, axis=0)\n```",
            "```python\ndef transform(in1, in2):\n    _, indices = tf.unique_with_counts(in1)\n    return tf.gather(in2, tf.argsort(in1, axis=0)) \n```",
            "```python\ndef transform(in1, in2):\n    segments = tf.argsort(in1, axis=0)\n    return tf.gather(in2, segments)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    sorted_indices = tf.argsort(in1, axis=0)\n    return tf.gather(in2, sorted_indices)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0, stable=True))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, stable=True))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, stable=True))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))\n```",
            "```python\ndef transform(in1, in2):\n    max_seg = tf.reduce_max(in1) + 1\n    sorted_segments = tf.concat([tf.sort(tf.boolean_mask(in2, tf.equal(in1, i))) for i in tf.range(max_seg)], axis=0)\n    return sorted_segments\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    _, indices = tf.unique_with_counts(in1)\n    return tf.gather(in2, tf.argsort(indices, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.concat([tf.sort(tf.gather(in2, tf.where(tf.equal(in1, i))), axis=0) for i in tf.unique(in1)[0]], axis=0)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in2, in1, tf.reduce_max(in1) + 1)\n```",
            "```python\ndef transform(in1, in2):\n    _, idx = tf.unique_with_counts(in1)\n    return tf.gather(in2, tf.argsort(idx, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.concat([tf.sort(tf.gather(in2, tf.where(tf.equal(in1, i))), axis=0) for i in tf.unique(in1)[0]], axis=0)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    indices = tf.argsort(in1)\n    return tf.gather(in2, indices)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0, stable=True))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.concat([tf.sort(tf.boolean_mask(in2, tf.equal(in1, i))) for i in range(tf.reduce_max(in1) + 1)], axis=0)\n```",
            "```python\ndef transform(in1, in2):\n    sorted_in2 = tf.gather(in2, tf.argsort(in1))\n    return tf.sort(sorted_in2, axis=0)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=-1, stable=True))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=-1, stable=True))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))\n```",
            "```python\ndef transform(in1, in2):\n    s = tf.argsort(in1, axis=0, stable=True)\n    return tf.gather_nd(in2, tf.expand_dims(s, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, stable=True))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, stable=True))\n```",
            "```python\ndef transform(in1, in2):\n    indices = tf.argsort(in1)\n    return tf.gather(in2, indices)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    unique_segments = tf.unique_with_counts(in1)[0]\n    sorted_elements = []\n    for seg in unique_segments:\n        mask = tf.equal(in1, seg)\n        sorted_elements.append(tf.sort(tf.boolean_mask(in2, mask)))\n    return tf.concat(sorted_elements, axis=0)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    segment_ids = tf.argsort(in1, axis=0, stable=True)\n    return tf.gather(in2, segment_ids)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    _, idx = tf.math.top_k(-in1, tf.size(in1))\n    return tf.gather(in2, idx)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2910.101,
        "usage": {
            "prompt_tokens": 1471,
            "completion_tokens": 3547,
            "total_tokens": 5018
        }
    },
    {
        "name": "google_11",
        "description": "count the number of elements greater than 0 in each row",
        "target_program": "tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)",
        "source": "Real task encountered by Googler, 8/26/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1.0, 0.3, -4.2, 0.0, 2.1, 0.4], [-0.1, 0.0, 1.4, -1.0, 0.4, 0.0], [0.1, 0.0, 0.7, -0.3, 0.5, -0.1], [1.4, 2.5, 0.3, 0.01, 0.0, 1.2]],]",
            "outputs": "[4, 2, 3, 5]"
        },
        "completions": [
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\nreturn tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\nreturn tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0.), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```",
            "```python\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2195.6730000000002,
        "usage": {
            "prompt_tokens": 1565,
            "completion_tokens": 2433,
            "total_tokens": 3998
        }
    },
    {
        "name": "google_12",
        "description": "identify elements between 0 and 1",
        "target_program": "tf.cast(tf.logical_and(0 <= in1, in1 <= 1), tf.int32)",
        "source": "Real task encountered by Googler, 8/26/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1.0, 0.3, -4.2, 0.0, 2.1], [-0.1, 0.0, 1.4, -1.0, 0.4], [0.1, 0.0, 0.7, -0.3, 0.5], [1.4, 2.5, 0.3, -0.1, 0.0]],]",
            "outputs": "[[1, 1, 0, 1, 0],    [0, 1, 0, 0, 1],    [1, 1, 1, 0, 1],    [0, 0, 1, 0, 1]]"
        },
        "completions": [
            "```python\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(tf.greater_equal(in1, 0.0), tf.less_equal(in1, 1.0)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n```",
            "```python\nreturn tf.cast(tf.math.logical_and(in1 > 0, in1 < 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(tf.greater(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.math.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(tf.greater_equal(in1, 0.0), tf.less_equal(in1, 1.0)), tf.int32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 > 0, in1 < 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n```",
            "```\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(tf.greater(in1, 0), tf.less(in1, 1)), tf.int32)\n```",
            "```python\n    mask = tf.logical_and(in1 >= 0, in1 <= 1)\n    return tf.cast(mask, tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(tf.greater(in1, 0), tf.less(in1, 1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 > 0, in1 < 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 > 0, in1 < 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(tf.greater(in1, 0), tf.less(in1, 1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 > 0, in1 < 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(tf.greater(in1, 0), tf.less(in1, 1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n```",
            "```\ndef transform(in1):\n    return tf.cast(tf.math.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    in_range = tf.logical_and(in1 >= 0, in1 <= 1)\n    return tf.cast(in_range, tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(in1 > 0, in1 < 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(in1>=0, in1<=1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(tf.greater(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 > 0, in1 < 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(tf.greater(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 >= 0, in1 < 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(tf.greater(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0.), tf.less_equal(in1, 1.)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\ndef transform(in1):\n    mask = tf.math.logical_and(tf.greater(in1, 0), tf.less_equal(in1, 1))\n    return tf.cast(mask, tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(tf.greater(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 > 0, in1 < 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0.0), tf.less_equal(in1, 1.0)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(\n        tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.math.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 > 0, in1 < 1), tf.int32)\n```",
            "```\ndef transform(in1):\n    return tf.cast(tf.math.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(in1 > 0, in1 < 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.math.logical_and(in1 > 0, in1 < 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(tf.greater(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 > 0, in1 < 1), tf.int32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.math.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 > 0, in1 < 1), tf.int32)\n```",
            "```\ndef transform(in1):\n    return tf.cast(tf.math.logical_and(tf.greater(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.where(tf.math.logical_and(in1 > 0, in1 < 1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(tf.greater(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(tf.greater(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(tf.greater(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    mask0 = tf.greater_equal(in1, 0.0)\n    mask1 = tf.less_equal(in1, 1.0)\n    return tf.cast(tf.math.logical_and(mask0, mask1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.math.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(tf.greater(in1, 0), tf.less(in1, 1)), tf.int32)\n```",
            "```python\n    mask1 = tf.greater(in1, 0)\n    mask2 = tf.less(in1, 1)\n    return tf.cast(tf.math.logical_and(mask1, mask2), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(tf.greater(in1, 0), tf.less(in1, 1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 > 0, in1 < 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 > 0, in1 < 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 > 0, in1 < 1), tf.int32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(tf.greater(in1, 0), tf.less(in1, 1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 > 0, in1 < 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 > 0, in1 < 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 > 0, in1 < 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(tf.greater(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.logical_and(tf.greater(in1, 0), tf.less(in1, 1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 > 0, in1 < 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 > 0, in1 < 1), tf.int32)\n```",
            "```python\n    return tf.cast(tf.math.logical_and(in1 > 0, in1 < 1), tf.int32)\n```",
            "```python\nreturn tf.cast(tf.math.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 4741.865,
        "usage": {
            "prompt_tokens": 1572,
            "completion_tokens": 3111,
            "total_tokens": 4683
        }
    },
    {
        "name": "google_13",
        "description": "Concatenate batches of sequences",
        "target_program": "tf.concat([in1, in2], axis=1)",
        "source": "Real task encountered by Googler, 9/13/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1, 2], [10, 20]],[[3, 4, 5], [30, 40, 50]],]",
            "outputs": "[[1, 2, 3, 4, 5], [10, 20, 30, 40, 50]]"
        },
        "completions": [
            "```python\nreturn tf.concat([in1, in2], axis=1)\n```",
            "```\n    return tf.concat([in1, in2], axis=1)\n```",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n```",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n```",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n```",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=-1)",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n```",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n```",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n```",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "```\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\nreturn tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n```",
            "```\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n```",
            "```\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n```",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n```",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n```",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "```\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n```",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "```python\nreturn tf.concat([in1, in2], axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=-1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\nreturn tf.concat([in1, in2], axis=1)\n```",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "```\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n```",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n```",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "```python\n    return tf.concat([in1, in2], axis=1)\n```",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "```python\n     return tf.concat([in1, in2], axis=1)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 4865.3589999999995,
        "usage": {
            "prompt_tokens": 1491,
            "completion_tokens": 2268,
            "total_tokens": 3759
        }
    },
    {
        "name": "google_14",
        "description": "circular buffer",
        "target_program": "tf.roll(in1, 1, 1)",
        "source": "From internal Colab, 10/17/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1, 3, 2, 0, 0], [4, 6, 5, 0, 0], [8, 7, 9, 0, 0]],]",
            "outputs": "[[0, 1, 3, 2, 0], [0, 4, 6, 5, 0], [0, 8, 7, 9, 0]]"
        },
        "completions": [
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```",
            "```python\n    return tf.roll(in1, shift=1, axis=1)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2798.4399999999996,
        "usage": {
            "prompt_tokens": 1496,
            "completion_tokens": 1899,
            "total_tokens": 3395
        }
    },
    {
        "name": "google_15",
        "description": "pad a zero column",
        "target_program": "tf.pad(in1, [[0, 0], [0, 1]], 'CONSTANT')",
        "source": "Real task encountered by Googler, 10/23/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1, 3, 5, 7], [2, 4, 6, 8]],]",
            "outputs": "[[1, 3, 5, 7, 0], [2, 4, 6, 8, 0]]"
        },
        "completions": [
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```\n    paddings = [[0, 0], [0, 1]]\n    return tf.pad(in1, paddings)\n```",
            "```\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```\n    return tf.pad(in1, [[0, 0], [0, 1]])\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]])\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]])\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0,0], [0,1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "import tensorflow as tf\n\ndef transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]])",
            "```\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]])\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]])\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')",
            "```\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]])\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]])\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]])\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]])\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]])\n```",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)",
            "```\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]])\n```",
            "```python\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT', constant_values=0)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2218.384,
        "usage": {
            "prompt_tokens": 1471,
            "completion_tokens": 2941,
            "total_tokens": 4412
        }
    },
    {
        "name": "google_16",
        "description": "replicate elements a given number of times",
        "target_program": "tf.gather(in1, tf.where(tf.sequence_mask(in2))[:, 0])",
        "source": "From an internal Google forum",
        "constants": "[]",
        "examples": {
            "inputs": "[[1, 2, 0, 3],[2, 1, 2, 3],]",
            "outputs": "[1, 1, 2, 0, 0, 3, 3, 3]"
        },
        "completions": [
            "```python\n    return tf.cast(tf.repeat(in1, in2), tf.int32)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.gather_nd(in1, [[i] for i in tf.boolean_mask(tf.repeat(tf.range(tf.shape(in1)[0]), in2), tf.greater(in2, 0))])\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.gather(in1, tf.repeat(tf.range(tf.size(in1)), in2))\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.gather(in1, tf.repeat(tf.range(tf.shape(in1)[0]), in2))\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.gather(in1, tf.repeat(tf.range(tf.shape(in1)[0]), in2))\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.gather(in1, tf.repeat(tf.range(tf.shape(in1)[0]), in2))\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```\n    return tf.repeat(in1, in2)\n```",
            "```\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```",
            "```python\n    return tf.repeat(in1, in2)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2804.389,
        "usage": {
            "prompt_tokens": 1472,
            "completion_tokens": 1477,
            "total_tokens": 2949
        }
    },
    {
        "name": "google_17",
        "description": "use bool tensor as condition",
        "target_program": "tf.where(in1, in2, tf.multiply(in2, -10))",
        "source": "From an internal Google forum",
        "constants": "[-10]",
        "examples": {
            "inputs": "[[True, False, False, True, False],[1, 2, 3, 4, 5],]",
            "outputs": "[1, -20, -30, 4, -50]"
        },
        "completions": [
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, tf.constant(-10)))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, tf.constant(-10)))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, tf.constant(-10)))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```\ndef transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, tf.constant(-10)))\n```",
            "```\ndef transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, tf.constant(-10)))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.where(in1, in2, tf.negative(in2)*10)\n```",
            "```\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```\n    return tf.where(in1, in2, tf.multiply(tf.cast(in1, tf.int32), -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```\ndef transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, -10 * in2)\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, tf.constant(-10)))",
            "```\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, tf.constant(-10, dtype=in2.dtype)))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, tf.constant(-10)))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, tf.constant(-10)))\n```",
            "```\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```\ndef transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```\ndef transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, tf.constant(-10)))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, tf.constant(-10)))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```\ndef transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```\ndef transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```\ndef transform(in1, in2):\n    return tf.where(in1, in2, tf.negative(tf.multiply(in2, 10)))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, in2 * -10)\n```",
            "```\ndef transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\ntf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, tf.constant(-10)))\n```",
            "```\ndef transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```\ndef transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, tf.constant(-10)))\n```",
            "```\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.where(in1, in2, tf.negative(tf.multiply(in2, 10)))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```\ndef transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```\ndef transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```python\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```",
            "```\ndef transform(in1, in2):\n    return tf.where(in1, in2, tf.multiply(in2, -10))\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 3122.777,
        "usage": {
            "prompt_tokens": 1467,
            "completion_tokens": 2393,
            "total_tokens": 3860
        }
    },
    {
        "name": "google_18",
        "description": "(\\'sum of elements in the first tensor but partitioned by the second tensor\\')",
        "target_program": "tf.linalg.matvec(tf.cast(tf.equal(in2[:, None], in2), tf.int32), in1)",
        "source": "From an internal Google forum",
        "constants": "[]",
        "examples": {
            "inputs": "[[5, 7, -12, 10, 20],[1, 2, 3, 1, 2],]",
            "outputs": "[15, 27, -12, 15, 27]"
        },
        "completions": [
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n```",
            "```python\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n```",
            "```\n    return tf.math.unsorted_segment_sum(in1, in2, num_segments=tf.reduce_max(in2) + 1)\n```",
            "```python\n    return tf.math.unsorted_segment_sum(in1, in2, num_segments=tf.reduce_max(in2) + 1)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\nreturn tf.math.segment_sum(in1, in2)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n```",
            "```python\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n```",
            "```python\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n```",
            "```python\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n```",
            "```python\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(tf.math.segment_sum(in1, in2), in2 - 1)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\nreturn tf.math.segment_sum(in1, in2)\n```",
            "```python\nreturn tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\nreturn tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\nreturn tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```",
            "```python\n    return tf.math.segment_sum(in1, in2)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 1816.733,
        "usage": {
            "prompt_tokens": 1487,
            "completion_tokens": 1899,
            "total_tokens": 3386
        }
    },
    {
        "name": "google_19",
        "description": "scatter a 2-D tensor with indices",
        "target_program": "tf.gather(in1, tf.argsort(in2, axis=1), batch_dims=1)",
        "source": "From an internal Google forum",
        "constants": "[]",
        "examples": {
            "inputs": "[[[11, 12, 13], [30, 20, 10], [77, 88, 99]],[[2, 0, 1], [1, 0, 2], [0, 2, 1]],]",
            "outputs": "[[12, 13, 11],    [20, 30, 10],    [77, 99, 88]]"
        },
        "completions": [
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(tf.transpose(in2), -1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0])[:, None], in2], axis=-1))\n```",
            "```python\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=-1), batch_dims=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=-1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1))\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1)\n```",
            "```\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    indices = tf.stack([tf.range(tf.shape(in1)[0])[:, tf.newaxis]] * tf.shape(in1)[1], axis=-1)\n    indices = tf.reshape(indices + in2 * tf.shape(in1)[0], (-1, 1))\n    return tf.gather_nd(tf.reshape(in1, [-1]), indices)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1))\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=-1), batch_dims=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=2))\n```",
            "```python\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=-1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=-1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=-1))\n```",
            "```python\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=-1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=-1), batch_dims=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(tf.range(tf.shape(in1)[0]), 1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(tf.argsort(in2), 1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=-1), batch_dims=1)\n```",
            "```\ndef transform(in1, in2):\n    return tf.gather_nd(in1, tf.expand_dims(tf.range(tf.shape(in1)[0]), 1) * tf.ones_like(in2) + in2)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=-1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)\n```",
            "```\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=-1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 2), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=-1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=-1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=2), batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1)\n```",
            "```\ndef transform(in1, in2):\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=-1), batch_dims=1)\n```",
            "```\ndef transform(in1, in2):\n    return tf.gather_nd(in1, tf.expand_dims(tf.transpose(in2), axis=-1), batch_dims=1)\n```",
            "```\n    indices = tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1)\n    return tf.gather_nd(in1, indices)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 2), batch_dims=0)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 2), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=-1))\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\n    indices = tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=-1)\n    return tf.gather_nd(in1, indices)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2419.078,
        "usage": {
            "prompt_tokens": 1501,
            "completion_tokens": 2597,
            "total_tokens": 4098
        }
    },
    {
        "name": "google_20",
        "description": "sort a tensor and return sorted index in original order",
        "target_program": "tf.cast(tf.argsort(tf.argsort(in1)), tf.int32)",
        "source": "From an internal Google forum",
        "constants": "[]",
        "examples": {
            "inputs": "[[10, 7, 4, 3, 2, 8],]",
            "outputs": "[5, 3, 2, 1, 0, 4]"
        },
        "completions": [
            "```python\ndef transform(in1):\n    return tf.argsort(in1)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(tf.argsort(in1))\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(tf.argsort(in1))\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, stable=True)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(tf.argsort(in1))\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(tf.argsort(in1))\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, stable=True)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0, stable=True)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, stable=True)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, stable=True)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(tf.argsort(in1))\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(tf.argsort(in1))\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, stable=True)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, stable=True)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0, stable=True)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=-1)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(tf.argsort(in1, axis=-1), axis=-1)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, stable=True)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=-1)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(tf.argsort(in1))\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=-1, stable=True)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=-1, stable=True)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(tf.argsort(in1))\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(tf.argsort(in1))\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(tf.argsort(in1, stable=True))\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, stable=True)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=-1, stable=True)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(tf.argsort(in1))\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "def transform(in1):\n    return tf.argsort(tf.argsort(in1))",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=-1)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, stable=True)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, stable=True)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=-1)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(tf.argsort(in1, axis=-1), axis=-1)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=-1)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, stable=True)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(tf.argsort(in1), axis=-1)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=-1)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, stable=True)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=-1)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=-1)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=-1)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, stable=True)\n```",
            "```\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=-1)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=-1, stable=True)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, stable=True)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=-1)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(in1, axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.argsort(tf.argsort(in1))\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 1728.955,
        "usage": {
            "prompt_tokens": 1467,
            "completion_tokens": 2069,
            "total_tokens": 3536
        }
    },
    {
        "name": "google_21",
        "description": "update a tensor at the given indices",
        "target_program": "tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, (-1,)))",
        "source": "Real task encountered by Googler, 12/15/2020",
        "constants": "[]",
        "examples": {
            "inputs": "{'tensor': [[1, 2, 3, 4, 5], [4, 5, 6, 7, 8], [7, 8, 9, 10, 11]], 'indices': [[0, 0], [0, 2], [1, 1], [1, 3], [2, 2], [2, 4]], 'updates': [[0, -2], [-1, -3], [-2, -4]],}",
            "outputs": "[[0, 2, -2, 4, 5], [4, -1, 6, -3, 8], [7, 8, -2, 10, -4]]"
        },
        "completions": [
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, (-1,)))\n```",
            "```python\nreturn tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\nreturn tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(tf.concat(updates, axis=0), [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\n    shape = tf.shape(tensor)\n    updates = tf.reshape(updates, [-1])\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\nreturn tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\nreturn tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, (-1,)))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, (-1,)))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\nreturn tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\n    updates = tf.reshape(updates, [-1])\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\nreturn tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\nreturn tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, (-1,)))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, (-1,)))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, (-1,)))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\nreturn tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\n    updates = tf.tile(tf.expand_dims(updates, 1), [1, 2])\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\nreturn tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, (-1,)))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, (-1,)))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, (-1,)))\n```",
            "```python\nreturn tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\nreturn tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\nreturn tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, (-1,)))\n```",
            "```python\nreturn tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, (-1,)))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    updates = tf.gather_nd(tensor, indices)\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, (-1,)))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, (-1,)))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```",
            "```python\nreturn tf.tensor_scatter_nd_update(tensor, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, [-1]))\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 1953.325,
        "usage": {
            "prompt_tokens": 1572,
            "completion_tokens": 2376,
            "total_tokens": 3948
        }
    },
    {
        "name": "google_22",
        "description": "pair with row index",
        "target_program": "tf.cast(tf.where(tf.reduce_max(tf.one_hot(in1, tf.reduce_max(in1) + 1), axis=1)), tf.int32)",
        "source": "Real task encountered by Googler, 12/15/2020",
        "constants": "[]",
        "examples": {
            "inputs": "[[[0, 2], [1, 3], [2, 4]],]",
            "outputs": "[[0, 0], [0, 2], [1, 1], [1, 3], [2, 2], [2, 4]]"
        },
        "completions": [
            "```python\n    return tf.reshape(tf.concat([tf.broadcast_to(tf.range(tf.shape(in1)[0])[:, None], tf.shape(in1)), in1], axis=1), [-1, 2])\n```",
            "```python\n    return tf.gather_nd(in1, tf.repeat(tf.expand_dims(tf.range(tf.shape(in1)[0]), 1), tf.shape(in1)[1], axis=1))\n```",
            "```python\n    return tf.concat([tf.stack([tf.fill((tf.shape(in1)[1],), i), row], axis=1) for i, row in enumerate(in1)], axis=0)\n```",
            "```python\n    return tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    idx = tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1])\n    return tf.stack([idx, tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    return tf.concat([tf.stack([tf.fill([tf.shape(in1)[1]], i), row], axis=1) for i, row in enumerate(tf.unstack(in1))], axis=0)\n```",
            "```python\n    idx = tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1])\n    vals = tf.reshape(in1, [-1])\n    return tf.stack([idx, vals], axis=1)\n```",
            "```python\n    return tf.transpose(tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])]))\n```",
            "```python\n    idx = tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1])\n    return tf.stack([idx, tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    return tf.concat([tf.stack([tf.ones_like(in1[:, :1], dtype=tf.range(0).dtype) * i, in1[:, i:i+1]], axis=1) for i in tf.range(tf.shape(in1)[1])], axis=0)\n```",
            "```python\n    return tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1)\n```",
            "```\ndef transform(in1):\n    return tf.concat([tf.stack([tf.fill([tf.shape(in1)[1]], i), row]) for i, row in enumerate(tf.unstack(in1))], axis=1)\n```",
            "```python\n    return tf.concat([tf.stack([tf.fill([tf.shape(in1)[1]], i), r], axis=1) for i, r in enumerate(in1)], axis=0)\n```",
            "```\ndef transform(in1):\n    r = tf.range(tf.shape(in1)[0])\n    r = tf.repeat(r, tf.shape(in1)[1])\n    return tf.stack([r, tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    return tf.concat([tf.stack([tf.fill([tf.shape(in1)[1]], i), row], axis=1) for i, row in enumerate(in1)], axis=0)\n```",
            "```python\n    idx = tf.range(tf.shape(in1)[0])\n    idx_exp = tf.repeat(idx, tf.shape(in1)[1])\n    return tf.stack([idx_exp, tf.reshape(in1, [-1])], axis=1)\n```",
            "```\ndef transform(in1):\n    rows = tf.range(tf.shape(in1)[0])\n    return tf.reshape(tf.stack(tf.meshgrid(rows, tf.squeeze(in1), indexing='ij'), axis=-1), [-1, 2])\n```",
            "```python\n    return tf.concat([tf.stack([tf.fill((tf.shape(in1)[1],), i), row]) for i, row in enumerate(tf.unstack(in1))], axis=1)\n```",
            "```python\n    return tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    row_indices = tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1])\n    flat_in1 = tf.reshape(in1, [-1])\n    return tf.stack([row_indices, flat_in1], axis=1)\n```",
            "```python\n    indices = tf.repeat(tf.range(tf.shape(in1)[0]), 2)\n    return tf.stack([indices, tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    indices = tf.repeat(tf.range(tf.shape(in1)[0]), 2)\n    return tf.stack([indices, tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.reshape(tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1), [-1, 2])\n```",
            "```python\n    rows = tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1])\n    cols = tf.reshape(in1, [-1])\n    return tf.stack([rows, cols], axis=1)\n```",
            "```python\ndef transform(in1):\n    n = tf.shape(in1)[0]\n    indices = tf.range(n)\n    indices = tf.repeat(indices, tf.shape(in1)[1])\n    return tf.stack([indices, tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    return tf.reshape(tf.concat([tf.stack([tf.fill([tf.shape(in1)[1]], i), row], axis=1) for i, row in enumerate(in1)], axis=0), [-1, 2])\n```",
            "```python\n    row_indices = tf.range(tf.shape(in1)[0])\n    return tf.stack([tf.repeat(row_indices, tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\ndef transform(in1):\n    indices = tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1])\n    flat_in1 = tf.reshape(in1, [-1])\n    return tf.transpose(tf.stack([indices, flat_in1]))\n```",
            "```python\ndef transform(in1):\n    row_indices = tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1])\n    pairs = tf.stack([row_indices, tf.reshape(in1, [-1])], axis=1)\n    return pairs\n```",
            "```python\n    row_indices = tf.range(tf.shape(in1)[0])\n    repeated_indices = tf.repeat(row_indices, tf.shape(in1)[1])\n    flattened = tf.reshape(in1, [-1])\n    return tf.stack([repeated_indices, flattened], axis=1)\n```",
            "```python\n    return tf.concat([tf.stack([tf.fill([tf.shape(in1)[1]], i), row], axis=1) for i, row in enumerate(tf.unstack(in1, axis=0))], axis=0)\n```",
            "```python\ndef transform(in1):\n    rows = tf.range(tf.shape(in1)[0])\n    return tf.stack([tf.repeat(rows, tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    row_indices = tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1])\n    col_values = tf.reshape(in1, [-1])\n    return tf.stack([row_indices, col_values], axis=1)\n```",
            "```python\n    return tf.concat([tf.stack([tf.fill((tf.shape(in1)[1],), i), row], axis=1) for i, row in enumerate(in1)], axis=0)\n```",
            "```python\n    return tf.concat([tf.stack([tf.fill([tf.shape(in1)[0]], i), row], axis=1) for i, row in enumerate(in1)], axis=0)\n```",
            "```python\n    indices = tf.repeat(tf.expand_dims(tf.range(tf.shape(in1)[0]), axis=1), tf.shape(in1)[1], axis=1)\n    return tf.concat([tf.expand_dims(indices, 2), tf.expand_dims(in1, 2)], axis=2)\n```",
            "```python\n    row_indices = tf.range(tf.shape(in1)[0])\n    gathered = tf.gather(in1, tf.repeat(row_indices, [tf.shape(in1)[1]]))\n    return tf.reshape(gathered, [-1, 2])\n```",
            "```python\n    return tf.concat([tf.stack([tf.fill([tf.shape(in1)[1]], i), row], axis=1) for i, row in enumerate(in1)], axis=0)\n```",
            "```python\n    row_indices = tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1])\n    return tf.stack([row_indices, tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    return tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    row_indices = tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1])\n    values = tf.reshape(in1, [-1])\n    return tf.stack([row_indices, values], axis=1)\n```",
            "```python\n    return tf.concat([tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1)], axis=0)\n```",
            "```python\n    indices = tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1])\n    return tf.stack([indices, tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    row_indices = tf.range(tf.shape(in1)[0])\n    indices = tf.tile(tf.expand_dims(row_indices, 1), [1, tf.shape(in1)[1]])\n    return tf.stack([tf.reshape(indices, [-1]), tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    row_indices = tf.range(tf.shape(in1)[0])\n    row_indices_expanded = tf.expand_dims(row_indices, 1)\n    tiled_row_indices = tf.tile(row_indices_expanded, [1, tf.shape(in1)[1]])\n    combined = tf.stack([tiled_row_indices, in1], axis=2)\n    return tf.reshape(combined, [-1, 2])\n```",
            "```python\n    return tf.concat([tf.stack([tf.repeat(i, tf.shape(row)[0]), row], axis=1) for i, row in enumerate(in1)], axis=0)\n```",
            "```python\n    rows = tf.range(tf.shape(in1)[0])\n    rows_expanded = tf.expand_dims(rows, 1)\n    pairs = tf.concat([tf.tile(rows_expanded, [1, tf.shape(in1)[1]]), in1], axis=1)\n    return tf.reshape(pairs, [-1, 2])\n```",
            "```python\n    return tf.concat([tf.stack([tf.fill([tf.shape(in1)[1]], i), row], axis=1) for i, row in enumerate(in1)], axis=0)\n```",
            "```python\ndef transform(in1):\n    rows = tf.range(tf.shape(in1)[0])\n    rows_expanded = tf.repeat(rows[:, tf.newaxis], tf.shape(in1)[1], axis=1)\n    return tf.reshape(tf.concat([rows_expanded[..., tf.newaxis], in1[..., tf.newaxis]], axis=2), [-1, 2])\n```",
            "```python\n    return tf.concat([tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1)], axis=0)\n```",
            "```python\n    return tf.reshape(tf.stack([tf.tile(tf.range(tf.shape(in1)[0]), [tf.shape(in1)[1]]), tf.reshape(in1, [-1])], axis=1), [-1, 2])\n```",
            "```python\n    row_indices = tf.range(tf.shape(in1)[0])\n    expanded_indices = tf.expand_dims(row_indices, 1)\n    tiled_indices = tf.tile(expanded_indices, [1, tf.shape(in1)[1]])\n    paired_indices = tf.stack([tiled_indices, in1], axis=2)\n    return tf.reshape(paired_indices, [-1, 2])\n```",
            "```python\n    return tf.reshape(tf.concat([tf.stack([tf.fill([tf.shape(in1)[1]], i), row], axis=1) for i, row in enumerate(in1)], axis=0), [-1, 2])\n```",
            "```python\n    row_indices = tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1])\n    elements = tf.reshape(in1, [-1])\n    return tf.stack([row_indices, elements], axis=1)\n```",
            "```python\n    return tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    rows = tf.range(tf.shape(in1)[0])\n    expanded_rows = tf.expand_dims(rows, -1)\n    repeated_rows = tf.tile(expanded_rows, [1, tf.shape(in1)[1]])\n    paired = tf.stack([tf.reshape(repeated_rows, [-1]), tf.reshape(in1, [-1])], axis=1)\n    return tf.reshape(paired, [-1, 2])\n```",
            "```python\ndef transform(in1):\n    row_indices = tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1])\n    return tf.stack([row_indices, tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    indices = tf.range(tf.shape(in1)[0])\n    indices = tf.repeat(indices, tf.shape(in1)[1])\n    values = tf.reshape(in1, [-1])\n    return tf.stack([indices, values], axis=1)\n```",
            "```python\nimport tensorflow as tf\n\ndef transform(in1):\n    n = tf.shape(in1)[0]\n    row_indices = tf.repeat(tf.range(n), tf.shape(in1)[1])\n    return tf.stack([row_indices, tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    return tf.reshape(tf.concat([tf.stack((tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])), axis=1)], axis=0), [-1, 2])\n```",
            "```python\n    idx = tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1])\n    return tf.stack([idx, tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    return tf.concat([tf.stack([tf.repeat(i, tf.shape(row)[0]), row], axis=1) for i, row in enumerate(in1)], axis=0)\n```",
            "```python\n    return tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\ndef transform(in1):\n    row_indices = tf.range(tf.shape(in1)[0])\n    expanded_indices = tf.tile(tf.expand_dims(row_indices, axis=1), [1, tf.shape(in1)[1]])\n    return tf.stack([tf.reshape(expanded_indices, [-1]), tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    return tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), 2), tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    r = tf.range(tf.shape(in1)[0])\n    r = tf.repeat(r, tf.shape(in1)[1])\n    return tf.stack([r, tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    return tf.concat([tf.stack([tf.repeat(i, tf.shape(row)[0]), row], axis=1) for i, row in enumerate(in1)], axis=0)\n```",
            "```python\ndef transform(in1):\n    idx = tf.tile(tf.range(tf.shape(in1)[0])[:, tf.newaxis], [1, tf.shape(in1)[1]])\n    return tf.stack([tf.reshape(idx, [-1]), tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    row_indices = tf.expand_dims(tf.range(tf.shape(in1)[0]), 1)\n    row_indices = tf.tile(row_indices, [1, tf.shape(in1)[1]])\n    combined = tf.stack([tf.reshape(row_indices, [-1]), tf.reshape(in1, [-1])], axis=1)\n    return combined\n```",
            "```python\n    rows = tf.range(tf.shape(in1)[0])\n    repeated_rows = tf.repeat(rows, tf.shape(in1)[1])\n    flattened_values = tf.reshape(in1, [-1])\n    return tf.stack([repeated_rows, flattened_values], axis=1)\n```",
            "```python\n    return tf.concat([tf.stack([tf.repeat(i, tf.shape(in1)[1]), in1[i]], axis=1) for i in range(tf.shape(in1)[0])], axis=0)\n```",
            "```python\n    row_indices = tf.range(tf.shape(in1)[0])\n    repeated_indices = tf.repeat(row_indices, tf.shape(in1)[1])\n    flat_values = tf.reshape(in1, [-1])\n    return tf.stack([repeated_indices, flat_values], axis=1)\n```",
            "```python\n    indices = tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1])\n    values = tf.reshape(in1, [-1])\n    return tf.stack([indices, values], axis=1)\n```",
            "```python\n    return tf.reshape(tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1), [-1, 2])\n```",
            "```python\n    return tf.reshape(tf.concat([tf.stack([tf.repeat([i], tf.shape(in1)[1]), row], axis=1) for i, row in enumerate(in1)], axis=0), [-1, 2])\n```",
            "```python\n    return tf.concat([tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), 2), tf.reshape(in1, [-1])], axis=1)], axis=0)\n```",
            "```python\n    rows = tf.range(tf.shape(in1)[0])\n    return tf.reshape(tf.stack([tf.repeat(rows, tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1), [-1, 2])\n```",
            "```python\ndef transform(in1):\n    rows = tf.range(tf.shape(in1)[0])\n    rows_expanded = tf.repeat(tf.expand_dims(rows, axis=1), tf.shape(in1)[1], axis=1)\n    return tf.concat([tf.expand_dims(rows_expanded, axis=2), tf.expand_dims(in1, axis=2)], axis=2)\n```",
            "```python\n    idx = tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1])\n    return tf.stack([idx, tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    rows = tf.range(tf.shape(in1)[0])\n    rows_repeated = tf.repeat(rows, tf.shape(in1)[1])\n    paired = tf.stack([rows_repeated, tf.reshape(in1, [-1])], axis=1)\n    return paired\n```",
            "```python\n    return tf.concat([tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1)], axis=1)\n```",
            "```python\ndef transform(in1):\n    idx = tf.range(tf.shape(in1)[0])\n    idx = tf.repeat(idx, tf.shape(in1)[1])\n    return tf.concat([tf.expand_dims(idx, 1), tf.reshape(in1, (-1, 1))], axis=1)\n```",
            "```python\n    return tf.concat([tf.stack([tf.fill([tf.shape(in1)[1]], i), row], axis=1) for i, row in enumerate(tf.unstack(in1))], axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.reshape(tf.concat([tf.stack([tf.fill([2], i), row]) for i, row in enumerate(in1)], axis=0), [-1, 2])\n```",
            "```python\n    return tf.concat([tf.stack([tf.repeat(tf.range(in1.shape[0]), in1.shape[1]), tf.reshape(in1, [-1])], axis=1)], axis=1)\n```",
            "```python\n    return tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    idx = tf.range(tf.shape(in1)[0])\n    return tf.repeat(tf.stack([idx, idx], axis=1), tf.shape(in1)[1], axis=0)\n```",
            "```python\n    row_indices = tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1])\n    return tf.stack([row_indices, tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.reshape(tf.transpose(tf.unstack(in1), perm=[1, 0]).flatten(), [-1, 2])\n```",
            "```python\n    row_indices = tf.range(tf.shape(in1)[0])\n    paired_indices = tf.repeat(tf.expand_dims(row_indices, axis=1), tf.shape(in1)[1], axis=1)\n    return tf.stack([tf.reshape(paired_indices, [-1]), tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    rows = tf.range(tf.shape(in1)[0])\n    rows_expanded = tf.expand_dims(rows, -1)\n    rows_tiled = tf.tile(rows_expanded, [1, tf.shape(in1)[1]])\n    indices = tf.reshape(tf.stack([rows_tiled, in1], axis=-1), [-1, 2])\n    return tf.cast(indices, tf.int32)\n```",
            "```python\n    return tf.concat([tf.stack([tf.repeat([i], len(row)), row], axis=1) for i, row in enumerate(in1)], axis=0)\n```",
            "```python\ndef transform(in1):\n    rows = tf.range(tf.shape(in1)[0])\n    paired_rows = tf.repeat(rows, tf.shape(in1)[1])\n    return tf.stack([paired_rows, tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    idx = tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1])\n    flatened = tf.reshape(in1, [-1])\n    return tf.stack([idx, flatened], axis=1)\n```",
            "```\ndef transform(in1):\n    rows = tf.range(tf.shape(in1)[0])\n    return tf.reshape(tf.gather_nd(in1, tf.stack(tf.meshgrid(rows, tf.range(tf.shape(in1)[1]), indexing='ij'), axis=-1)), (-1, 2))\n```",
            "```python\n    return tf.reshape(tf.concat([tf.stack([tf.fill([tf.shape(in1)[1]], i), row]) for i, row in enumerate(in1)], axis=0), [-1, 2])\n```",
            "```python\n    return tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), 2), tf.reshape(in1, [-1])], axis=1)\n```",
            "```python\n    return tf.concat([tf.stack([tf.fill([tf.shape(in1)[1]], i), row], axis=1) for i, row in enumerate(in1)], axis=0)\n```",
            "```python\n    return tf.stack([tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1]), tf.reshape(in1, [-1])], axis=1)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 4143.964999999999,
        "usage": {
            "prompt_tokens": 1476,
            "completion_tokens": 5131,
            "total_tokens": 6607
        }
    },
    {
        "name": "stackoverflow_01",
        "description": "reshape by separating and duplicating columns",
        "target_program": "tf.transpose(tf.cast((in1, in1), tf.float32))",
        "source": "https://stackoverflow.com/questions/40441503/tensorflow-tensor-reshape",
        "constants": "[]",
        "examples": {
            "inputs": "[[[5., 2.], [1., 3.], [0., -1.]],]",
            "outputs": "[[[5., 5.], [1., 1.], [0., 0.]],    [[2., 2.], [3., 3.], [-1., -1.]]]"
        },
        "completions": [
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, -1), [1, 1, 2]), perm=[2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 1), [1, 2, 1]), perm=[1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), perm=[1, 2, 0])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]))\n```",
            "```python\n    return tf.transpose(tf.stack([tf.tile(tf.expand_dims(in1[:, i], 1), [1, 2]) for i in range(tf.shape(in1)[1])]), [1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.stack([tf.repeat(in1[:,i:i+1], 2, axis=1) for i in range(2)], axis=0), perm=[1,0,2])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), perm=[0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=2), [1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.stack([tf.repeat(in1[:, i:i+1], 2, axis=1) for i in range(in1.shape[1])]), [1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), perm=[2, 1, 0])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), perm=[2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), perm=[0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), perm=[1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), perm=[0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, axis=0), [2, 1, 1]), perm=[1, 2, 0])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), perm=[1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), perm=[0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.repeat(tf.transpose(in1), repeats=2), perm=[1, 0])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), perm=[0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=-1), perm=[2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 1), [1, 2, 1]), perm=[2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=-1), perm=[1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 2), [1, 1, 2]), [1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.stack([tf.tile(tf.expand_dims(in1[:, i], 1), [1, 2]) for i in range(tf.shape(in1)[1])]), [1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.repeat(tf.transpose(in1), 2), perm=[1, 0])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), perm=[0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```",
            "```\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.stack([tf.repeat(tf.expand_dims(in1[:, i], 0), 2, 0) for i in range(in1.shape[1])]), perm=[1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), perm=[1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=1), perm=[2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.transpose(in1), [2, 1]), [1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]))\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, axis=0), [2, 1, 1]), perm=[1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.stack([tf.tile(tf.expand_dims(in1[:, i], 1), [1, 2]) for i in range(tf.shape(in1)[1])]), perm=[1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 2]), [2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.repeat(tf.transpose(in1), 2), [1, 0])\n```",
            "```python\n     return tf.transpose(tf.tile(tf.expand_dims(in1, -1), [1, 1, 2]), [1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [1, 2, 0])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), perm=[0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.broadcast_to(tf.expand_dims(in1, 0), [2, tf.shape(in1)[0], tf.shape(in1)[1]]), [1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.stack(tf.unstack(in1, axis=1)*2), perm=[1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=2), [2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, axis=0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), perm=[0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(tf.transpose(in1), -1), [1, 1, 2]), [1, 0, 2])\n```",
            "```python\n    transposed = tf.transpose(in1)\n    duplicated = tf.tile(transposed[:, :, tf.newaxis], [1, 1, 2])\n    return tf.transpose(duplicated, perm=[1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, axis=0), [2, 1, 1]), perm=[2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), perm=[2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.stack([tf.tile(tf.expand_dims(in1[:, i], 1), [1, 2]) for i in range(tf.shape(in1)[1])]), [1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), perm=[0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.stack([tf.repeat(tf.gather(in1, i, axis=1), 2) for i in range(in1.shape[1])]), perm=[1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [1, 2, 0])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), perm=[0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), perm=[2, 1, 0])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), perm=[0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(in1, [1, 2]), [1, 0])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, -1), [1, 1, 2]), [1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), perm=[0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), perm=[0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.repeat(tf.transpose(in1), 2), [1, 0])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, -1), [1, 1, 2]), [2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2877.559,
        "usage": {
            "prompt_tokens": 1512,
            "completion_tokens": 3728,
            "total_tokens": 5240
        }
    },
    {
        "name": "stackoverflow_02",
        "description": "clip values that are greater than 1",
        "target_program": "tf.minimum(in1, tf.constant(1))",
        "source": "https://stackoverflow.com/questions/46408839/tensorflow-trim-values-in-tensor",
        "constants": "[1]",
        "examples": {
            "inputs": "[[5, 1, 0, 3, 0, -1, 2, -10, 2],]",
            "outputs": "[[1, 1, 0, 1, 0, -1, 1, -10, 1]]"
        },
        "completions": [
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```\ndef transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```\n    return tf.clip_by_value(in1, clip_value_min=tf.constant(-float('inf')), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, -float('inf'), 1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, -float('inf'), 1)\n```",
            "```\ndef transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=in1, clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=None, clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, tf.reduce_min(in1), 1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\ndef transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, -float('inf'), 1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\nreturn tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=None, clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, -float('inf'), 1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(tf.expand_dims(in1, 0), -float('inf'), 1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n```",
            "```\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-tf.reduce_sum(tf.zeros_like(in1)), clip_value_max=1)",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, -1e10, 1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n```",
            "```\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\ndef transform(in1):\n    return tf.clip_by_value(in1, -float('inf'), 1)\n```",
            "```python\n    return tf.clip_by_value(in1, -float('inf'), 1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=in1, clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, -float('inf'), 1)\n```",
            "```python\n    return tf.clip_by_value(in1, -1e10, 1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, tf.constant(float('-inf')), 1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=-1e9, clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=in1, clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n```",
            "```python\ndef transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(tf.expand_dims(in1, 0), clip_value_min=tf.constant(-1e10), clip_value_max=tf.constant(1))\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, -float('inf'), 1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=-tf.constant(float('inf')), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)",
            "```python\n    return tf.clip_by_value(in1, -1e10, 1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=in1, clip_value_max=1)\n```",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\ndef transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, tf.reduce_min(in1), 1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, tf.constant(float('-inf')), tf.constant(1))\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=-tf.constant(float('inf')), clip_value_max=1)\n```",
            "```python\ndef transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=float('-inf'), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=None, clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n```",
            "```python\n    return tf.clip_by_value(in1, clip_value_min=tf.reduce_min(in1), clip_value_max=1)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2311.625,
        "usage": {
            "prompt_tokens": 1490,
            "completion_tokens": 2700,
            "total_tokens": 4190
        }
    },
    {
        "name": "stackoverflow_03",
        "description": "replace certain columns with columns from the other tensor",
        "target_program": "tf.reduce_sum(tf.one_hot(tf.range(3, 5), depth=in1.shape[1], dtype=tf.int32), axis=0) * in2 + (1 - tf.reduce_sum(tf.one_hot(tf.range(3, 5), depth=in1.shape[1], dtype=tf.int32), axis=0)) * in1",
        "source": "https://stackoverflow.com/questions/44657388/how-to-replace-certain-values-in-tensorflow-tensor-with-the-values-of-the-other",
        "constants": "[3, 4, 5]",
        "examples": {
            "inputs": "[[[11, 22, 33, 44, 55, 66, 77], [70, 60, 50, 40, 30, 20, 10]],[[-9, -8, -7, -6, -5, -4, -3], [11, 12, 13, 14, 15, 16, 17]],]",
            "outputs": "[[[11, 22, 33, -6, -5, 66, 77], [70, 60, 50, 14, 15, 20, 10]]]"
        },
        "completions": [
            "```python\n    indices = [[0, 3], [0, 4], [1, 3], [1, 4]]\n    updates = tf.gather_nd(in2, indices)\n    in1_updated = tf.tensor_scatter_nd_update(in1, indices, updates)\n    return tf.expand_dims(in1_updated, 0)\n```",
            "```python\n    indices = [[0, 3], [0, 4], [1, 3], [1, 4]]\n    updates = tf.gather_nd(in2, indices)\n    result = tf.tensor_scatter_nd_update(in1, indices, updates)\n    return tf.expand_dims(result, 0)\n```",
            "```python\n    indices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n    updates = tf.gather_nd(in2, indices)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```python\n    updates = tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]])\n    indices = [[0, 3], [0, 4], [1, 3], [1, 4]]\n    updated_tensor = tf.tensor_scatter_nd_update(in1, indices, updates)\n    return tf.expand_dims(updated_tensor, axis=0)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, [[0,3], [0,4], [1,3], [1,4]], tf.gather_nd(in2, [[0,3],[0,4],[1,3],[1,4]]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(\n        in1, \n        [[0, 3], [0, 4], [1, 3], [1, 4]], \n        tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]])\n    )\n```",
            "```python\n    return tf.tensor_scatter_nd_update(\n        in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]])\n    )\n```",
            "```python\n    indices = [[0, 3], [0, 4], [1, 3], [1, 4]]\n    updates = tf.gather_nd(in2, indices)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```python\n    indices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n    updates = tf.gather_nd(in2, indices)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]]))\n```",
            "```\n    indices = [[0], [1]]\n    updates = tf.gather_nd(in2, indices)\n    in1 = tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], updates)\n    return tf.expand_dims(in1, 0)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]]))\n```",
            "```python\n    updates = tf.gather(in2, [3, 4], axis=1)\n    updates = tf.expand_dims(updates, 0)\n    indices = tf.constant([[0, 0, 3], [0, 0, 4], [0, 1, 3], [0, 1, 4]])\n    return tf.tensor_scatter_nd_update(tf.expand_dims(in1, 0), indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]]), tf.gather_nd(in2, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])))\n```",
            "```python\n    idx = [3, 4]\n    in1 = tf.tensor_scatter_nd_update(in1, tf.expand_dims(idx, 1), tf.gather(in2, idx, axis=1))\n    return tf.expand_dims(in1, 0)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [1, 3], [0, 4], [1, 4]]), tf.gather_nd(in2, tf.constant([[0, 3], [1, 3], [0, 4], [1, 4]])))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]]), tf.gather_nd(in2, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])))\n```",
            "```python\n    updates = tf.gather(in2, [3, 4], axis=1)\n    indices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n    return tf.tensor_scatter_nd_update(in1, indices, tf.reshape(updates, [-1]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]]))\n```",
            "```python\n    idx = [3, 4]\n    return tf.tensor_scatter_nd_update(in1, [[0, i] for i in idx], tf.gather_nd(in2, [[0, i] for i in idx]))[None, :]\n```",
            "```\ndef transform(in1, in2):\n    updates = tf.gather(in2, [3, 4], axis=1)\n    indices = tf.expand_dims(tf.range(tf.shape(in1)[0]), axis=1)\n    indices = tf.concat([indices, tf.constant([[3], [4]])], axis=1)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```python\n    idx = tf.constant([[0, 1, 2, 3, 4, 5, 6], [3, 4]])\n    return tf.tensor_scatter_nd_update(in1, idx, tf.gather_nd(in2, idx))\n```",
            "```python\n    indices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n    updates = tf.gather_nd(in2, indices)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```python\n    updates = tf.gather(in2, [3, 4], axis=1)\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.reshape(updates, [-1]))\n```",
            "```python\n    updates = tf.gather(in2, [3, 4], axis=1)\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.reshape(updates, [-1]))\n```",
            "```python\n    indices = [[0, 3], [0, 4], [1, 3], [1, 4]]\n    updates = tf.gather_nd(in2, indices)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]]), tf.gather_nd(in2, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]]), tf.gather_nd(in2, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.reshape(tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]]), [-1]))\n```",
            "```python\n    updates = tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]])\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]]))\n```",
            "```python\n    indices = [[0, 0, 3], [0, 0, 4], [0, 1, 3], [0, 1, 4]]\n    updates = tf.gather_nd(in2, indices)\n    return tf.tensor_scatter_nd_update(tf.expand_dims(in1, 0), indices, updates)\n```",
            "```python\ndef transform(in1, in2):\n    updates = tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]])\n    return tf.tensor_scatter_nd_update(\n        in1, [[0, 3], [0, 4], [1, 3], [1, 4]], updates\n    )\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]]))\n```",
            "```python\n    updates = tf.gather(in2, tf.constant([3, 4]), axis=1)\n    tensor = tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.reshape(updates, [-1]))\n    return tf.expand_dims(tensor, axis=0)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], \n                                       tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]]))\n```",
            "```python\n    updates = tf.gather(in2, [3, 4], axis=1)\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.reshape(updates, [-1]))\n```",
            "```python\n    mask = tf.constant([False, False, False, True, True, False, False])\n    return tf.where(tf.expand_dims(mask, 0), in2, in1)\n```",
            "```python\n    indices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n    updates = tf.gather_nd(in2, indices)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```python\n    mask = tf.constant([False, False, False, True, True, False, False])\n    return tf.where(mask, in2, in1)\n```",
            "```\ndef transform(in1, in2):\n    updates = in2[:, 3:5]\n    in1 = tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.reshape(updates, [-1]))\n    return tf.expand_dims(in1, 0)\n```",
            "```python\n    indices = [[0, 3], [0, 4], [1, 3], [1, 4]]\n    updates = tf.gather_nd(in2, indices)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```python\n    indices = [[0, 3], [0, 4], [1, 3], [1, 4]]\n    updates = tf.gather_nd(in2, indices)\n    in1 = tf.tensor_scatter_nd_update(in1, indices, updates)\n    return tf.expand_dims(in1, 0)\n```",
            "```python\n    return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)\n```",
            "```python\n    indices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n    updates = tf.gather_nd(in2, indices)\n    in1_updated = tf.tensor_scatter_nd_update(in1, indices, updates)\n    return tf.expand_dims(in1_updated, 0)\n```",
            "```python\n    indices = [[0, 3, 4], [1, 3, 4]]\n    for i in range(len(indices)):\n        in1[i, indices[i]] = in2[i, indices[i]]\n    return tf.expand_dims(in1, 0)\n```",
            "```python\n    mask = [0, 0, 0, 1, 1, 0, 0]\n    return tf.where(mask, in2, in1)\n```",
            "```python\n    idx = tf.constant([[0], [1]])\n    updates = tf.gather_nd(in2[:, 3:5], idx)\n    return tf.tensor_scatter_nd_update(in1, idx, updates)\n```",
            "```python\n    indices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n    updates = tf.gather_nd(in2, indices)\n    tensor_indices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n    return tf.tensor_scatter_nd_update(in1, tensor_indices, updates)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, [[i, j] for i in range(in1.shape[0]) for j in range(3, 5)], tf.boolean_mask(in2, tf.sequence_mask([2, 5], 7)))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [1, 3], [0, 4], [1, 4]], tf.gather_nd(in2, [[0, 3], [1, 3], [0, 4], [1, 4]]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]]))\n```",
            "```python\n    indices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n    updates = tf.gather_nd(in2, indices)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```python\n    updates = tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]])\n    indices = [[0, 3], [0, 4], [1, 3], [1, 4]]\n    return tf.expand_dims(tf.tensor_scatter_nd_update(in1, indices, updates), 0)\n```",
            "```python\n    updates = tf.gather_nd(in2, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]]))\n    indices = tf.stack([tf.constant([0, 0, 1, 1]), tf.constant([3, 4, 3, 4])], axis=1)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```python\n    in1 = tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]]), tf.gather_nd(in2, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])))\n    return in1\n```",
            "```python\n    mask = tf.constant([False, False, False, True, True, False, False])\n    return tf.where(mask, in2, in1)\n```",
            "```python\n    indices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n    updates = tf.gather_nd(in2, indices)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```python\n    indices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n    updates = tf.gather_nd(in2, indices)\n    result = tf.tensor_scatter_nd_update(in1, indices, updates)\n    return tf.expand_dims(result, 0)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(\n        tf.expand_dims(in1, 0), \n        tf.constant([[[0, 0, 3], [0, 0, 4], [0, 1, 3], [0, 1, 4]]]), \n        tf.gather_nd(in2, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]]))\n    )\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]]))\n```",
            "```python\n     return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], in2[:, 3:5].reshape(-1))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]]))\n```",
            "```python\n    cols = tf.constant([3, 4])\n    indices = tf.stack([tf.range(tf.shape(in1)[0]), cols], axis=1)\n    return tf.tensor_scatter_nd_update(in1, indices, tf.gather(in2, cols, axis=1))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]]))\n```",
            "```python\n    updates = tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]])\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], updates)\n```",
            "```python\n    indices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n    updates = tf.gather_nd(in2, indices)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```python\n    indices = [[0, 3], [0, 4], [1, 3], [1, 4]]\n    updates = tf.gather_nd(in2, indices)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```python\n    indices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n    updates = tf.gather_nd(in2, indices)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```python\n    indices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n    updates = tf.gather_nd(in2, indices)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```python\n    indices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n    updates = tf.gather_nd(in2, indices)\n    updates = tf.reshape(updates, (2, 2))\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```python\n    indices = [[0, 3], [0, 4], [1, 3], [1, 4]]\n    updates = tf.gather_nd(in2, indices)\n    in1 = tf.tensor_scatter_nd_update(in1, indices, updates)\n    return tf.expand_dims(in1, 0)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]]))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather(in2, [3, 4], axis=1))\n```",
            "```python\n    updates = tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]])\n    indices = [[0, 3], [0, 4], [1, 3], [1, 4]]\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]]))\n```",
            "```python\n    indices = [[0, 3], [0, 4], [1, 3], [1, 4]]\n    updates = tf.gather_nd(in2, indices)\n    return tf.tensor_scatter_nd_update(tf.expand_dims(in1, 0), indices, updates)\n```",
            "```python\n    idx = [[0, 1, 2, 3, 4, 5, 6]]\n    updates = tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]])\n    return tf.tensor_scatter_nd_update(tf.expand_dims(in1, 0), [[0, 0, 3], [0, 0, 4], [0, 1, 3], [0, 1, 4]], updates)\n```",
            "```python\n    return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)\n```",
            "```python\n    idx = [3, 4]\n    return tf.tensor_scatter_nd_update(tf.expand_dims(in1, 0), tf.constant([[0, i] for i in idx]), tf.gather(in2, idx, axis=1))\n```",
            "```python\ndef transform(in1, in2):\n    updates = tf.gather(in2, [3, 4], axis=1)\n    indices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n    return tf.tensor_scatter_nd_update(\n        in1[tf.newaxis],\n        indices,\n        tf.reshape(updates, [-1])\n    )\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]]), tf.gather_nd(in2, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])))\n```",
            "```python\n    in1 = tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]]))\n    return tf.expand_dims(in1, 0)\n```",
            "```python\n    indices = [[0, 3], [0, 4], [1, 3], [1, 4]]\n    updates = [in2[0, 3], in2[0, 4], in2[1, 3], in2[1, 4]]\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(\n        in1, \n        tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]]), \n        tf.gather_nd(in2, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]]))\n    )\n```",
            "```python\n    indices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n    updates = tf.gather_nd(in2, indices)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]]), tf.gather_nd(in2, tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])))\n```",
            "```python\n    indices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n    updates = tf.gather_nd(in2, indices)\n    updates = tf.reshape(updates, [2, 2])\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```python\n    indices = [[0,3],[0,4],[1,3],[1,4]]\n    updates = tf.gather_nd(in2, indices)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]]))\n```",
            "```python\n    indices = [[0, 3], [0, 4], [1, 3], [1, 4]]\n    updates = tf.gather_nd(in2, indices)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```python\n    updates = tf.gather(in2, indices=[3, 4], axis=1)\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.reshape(updates, [-1]))\n```",
            "```python\n    indices = [[0,3],[0,4],[1,3],[1,4]]\n    updates = tf.gather_nd(in2, indices)\n    in1 = tf.tensor_scatter_nd_update(in1, indices, updates)\n    return tf.expand_dims(in1, 0)\n```",
            "```python\n    indices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n    updates = tf.gather_nd(in2, indices)\n    tensor = tf.tensor_scatter_nd_update(in1, indices, updates)\n    return tf.expand_dims(tensor, axis=0)\n```",
            "```python\n    indices = tf.constant([[0, 3], [0, 4], [1, 3], [1, 4]])\n    updates = tf.gather_nd(in2, indices)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```python\n    updates = tf.gather(in2, [3, 4], axis=1)\n    in1 = tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.reshape(updates, [-1]))\n    return in1\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 4499.259999999999,
        "usage": {
            "prompt_tokens": 1533,
            "completion_tokens": 6901,
            "total_tokens": 8434
        }
    },
    {
        "name": "stackoverflow_04",
        "description": "index into the tensor",
        "target_program": "tf.gather_nd(in1, tf.stack((in2, in3), axis=-1))",
        "source": "https://stackoverflow.com/questions/33736795/tensorflow-numpy-like-tensor-indexing",
        "constants": "[]",
        "examples": {
            "inputs": "[  [[5., 2.], [1., 3.], [0., -1.]]]",
            "outputs": "[[[5., 5.], [1., 1.], [0., 0.]],  [[2., 2.], [3., 3.], [-1., -1.]]]"
        },
        "completions": [
            "```python\n    return tf.transpose(tf.stack([in1, in1]), [1, 0, 2])\n```",
            "```python\n    return tf.transpose(in1)\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=0), perm=[1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.stack([in1] * tf.shape(in1)[1]), [1, 0, 2])\n```",
            "```python\n    return tf.transpose(in1, perm=[1, 0])\n```",
            "```python\n    return tf.gather(in1, [0, 1], axis=1)\n```",
            "```python\n    idx = tf.constant([[0, 1]])\n    return tf.gather_nd(in1, idx)\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.stack([tf.gather(in1[:, i], tf.range(tf.shape(in1)[0])) for i in range(tf.shape(in1)[1])]), perm=[1, 2, 0])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.stack([in1]*2, axis=0), perm=[1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [tf.shape(in1)[1], 1, 1]), [1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [tf.shape(in1)[1], 1, 1]))\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), perm=[0, 2, 1])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.repeat(tf.expand_dims(in1, -1), 2, -1), [2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1]), perm=[2, 1, 0])\n```",
            "```python\n    return tf.transpose(tf.stack([in1]*2, axis=2))\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [tf.shape(in1)[1], 1, 1]), [1, 2, 0])\n```",
            "```python\n    return tf.gather(tf.transpose(in1), [0, 1], axis=0)\n```",
            "```python\n    indices = tf.range(2)\n    return tf.gather(in1, indices, axis=1)\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=1), perm=[2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 1, 0])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=2), [2, 0, 1])\n```",
            "```python\n    return tf.gather_nd(tf.transpose(in1), tf.constant([[0], [1]]))\n```",
            "```python\n    return tf.cast(tf.unstack(in1, axis=1), tf.float32)\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=2), [2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.expand_dims(in1, 1), perm=[2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 1, 0])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.stack([in1] * int(tf.shape(in1)[1]), axis=2), perm=[2, 1, 0])\n```",
            "```python\n    indices = tf.transpose(tf.stack([tf.range(tf.shape(in1)[0]), tf.range(tf.shape(in1)[0])]))\n    return tf.gather_nd(in1, indices)\n```",
            "```python\n    return tf.transpose(tf.gather(tf.transpose(in1), [0, 0, 1, 1]), perm=[1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [0, 2, 1])\n```",
            "```python\n    return tf.unstack(tf.transpose(in1), axis=0)\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [2, 1, 0])\n```",
            "```python\n    return tf.transpose(tf.stack(tf.unstack(in1, axis=1)), perm=[1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=0), perm=[1, 2, 0])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=0), perm=[1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.repeat(in1, 2, axis=1), [1, 0])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=0), perm=[1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=0), perm=[1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 0, 1])\n```",
            "```python\n    return tf.gather_nd(tf.transpose(in1), [[i, i] for i in range(tf.shape(in1)[1])])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=1), perm=[2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 1, 0])\n```",
            "```python\nreturn tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=0), perm=[1, 0, 2])\n```",
            "```python\n    indices = [[0], [1]]\n    updates = [in1[:, 0], in1[:, 1]]\n    return tf.gather(tf.stack(updates), indices)\n```",
            "```python\n    indices = tf.range(tf.shape(in1)[1])\n    return tf.gather(in1, indices, axis=1)\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 1, 0])\n```",
            "```python\nreturn tf.transpose(tf.tile(tf.expand_dims(in1, 0), [tf.shape(in1)[1], 1, 1]), perm=(1, 0, 2))\n```",
            "```python\n    return tf.tile(tf.expand_dims(in1, axis=0), [tf.shape(in1)[1], 1, 1])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=0), perm=[1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.stack(tf.unstack(in1, axis=1)), perm=[1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [tf.shape(in1)[1], 1, 1]), [1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.repeat(tf.transpose(in1), 2), perm=[1, 0])\n```",
            "```python\n    return tf.unstack(tf.transpose(tf.stack([in1]*2, axis=2), perm=[2, 0, 1]), axis=0)\n```",
            "```python\n    return tf.transpose(tf.stack([in1] * tf.shape(in1)[1]), perm=[1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 0, 1])\n```",
            "```python\n    indices = tf.stack([tf.range(tf.shape(in1)[0])] * 2, axis=-1)\n    return tf.gather_nd(in1, indices)\n```",
            "```python\n    return tf.transpose(tf.stack([in1]*tf.shape(in1)[1], axis=0), perm=[1, 0, 2])\n```",
            "```python\n    return tf.unstack(tf.tile(tf.expand_dims(in1, axis=0), [2, 1, 1]), axis=0)\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [2, 1, 1]), [1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.gather(in1, [0, 1], axis=1), [1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [tf.shape(in1)[1], 1, 1]), perm=[1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1]), [1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[1, 0, 2])\n```",
            "```python\n    indices = tf.transpose(tf.stack([tf.range(tf.shape(in1)[0]), tf.zeros_like(tf.range(tf.shape(in1)[0]), dtype=tf.int32)]))\n    idxs = tf.concat([indices, tf.add(indices, [0,1])], axis=0)\n    return tf.gather_nd(in1, idxs)\n```",
            "```python\n    idx = tf.constant([0, 1])\n    return tf.gather(in1, idx, axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 1], axis=1)\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 0), [tf.shape(in1)[1], 1, 1]), perm=[1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.tile(tf.expand_dims(in1, 1), [1, 2, 1]), [2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.stack([in1] * 2, axis=2), perm=[2, 0, 1])\n```",
            "```python\n    return tf.cast(tf.unstack(in1, axis=1), tf.float32)\n```",
            "```python\n    return tf.transpose(tf.tile(in1[..., tf.newaxis], [1, 1, tf.shape(in1)[1]]), perm=[2, 1, 0])\n```",
            "```python\n    return tf.transpose(tf.reshape(tf.tile(tf.expand_dims(in1, 0), [tf.shape(in1)[1], 1, 1]), [tf.shape(in1)[1], -1]))\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=2), [2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.expand_dims(in1, 0), [2, 1, 0])\n```",
            "```python\n    return tf.transpose(in1, perm=[1, 0])\n```",
            "```python\n    return tf.transpose(tf.gather_nd(in1, [[[i, j] for i in range(tf.shape(in1)[0])] for j in range(tf.shape(in1)[1])]), [1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.gather_nd(tf.transpose(in1), [[i] for i in range(tf.shape(in1)[1])]))\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=0), perm=[1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 0, 1])\n```",
            "```python\n    return tf.transpose(tf.stack([in1] * 2), perm=[2, 0, 1])\n```",
            "```python\nreturn tf.transpose(tf.stack([in1, in1], axis=0), perm=[1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.stack(tf.unstack(in1, axis=1)), perm=[1, 0, 2])\n```",
            "```python\n    return tf.gather_nd(in1, [[0, 0], [1, 0], [2, 0], [0, 1], [1, 1], [2, 1]])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=0), perm=[1, 0, 2])\n```",
            "```python\n    return tf.transpose(tf.stack([in1, in1], axis=2), perm=[2, 0, 1])\n```",
            "```python\n    indices = tf.stack([tf.range(tf.shape(in1)[0])] * tf.shape(in1)[1], axis=1)\n    return tf.gather_nd(in1, tf.transpose(indices))\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2332.0769999999998,
        "usage": {
            "prompt_tokens": 1509,
            "completion_tokens": 3225,
            "total_tokens": 4734
        }
    },
    {
        "name": "stackoverflow_05",
        "description": "tensor multiplication like np.tensordot",
        "target_program": "tf.tensordot(in1, in2, 1)",
        "source": "https://stackoverflow.com/questions/43067338/tensor-multiplication-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[4, 3, 1], [6, 5, 2]],[[[5, 5]], [[1, 5]], [[6, 0]]],]",
            "outputs": "[[[29, 35]], [[47, 55]]]"
        },
        "completions": [
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, tf.squeeze(in2), axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[1, 0])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[1, 0])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1],[0]])\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=((1), (0)))\n```",
            "```python\nreturn tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\nreturn tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\nreturn tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 1974.619,
        "usage": {
            "prompt_tokens": 1480,
            "completion_tokens": 2227,
            "total_tokens": 3707
        }
    },
    {
        "name": "stackoverflow_06",
        "description": "binary tensor from vector indicating if elements are equal",
        "target_program": "tf.cast(tf.equal(in1, tf.expand_dims(in1, 1)), tf.float32)",
        "source": "https://stackoverflow.com/questions/47816231/create-binary-tensor-from-vector-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[3, 5, 0, 2, 3, 3, 0],]",
            "outputs": "[[1., 0., 0., 0., 1., 1., 0.],    [0., 1., 0., 0., 0., 0., 0.],    [0., 0., 1., 0., 0., 0., 1.],    [0., 0., 0., 1., 0., 0., 0.],    [1., 0., 0., 0., 1., 1., 0.],    [1., 0., 0., 0., 1., 1., 0.],    [0., 0., 1., 0., 0., 0., 1.]]"
        },
        "completions": [
            "```python\ndef transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.equal(in1, tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.equal(in1[:, None], in1), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.equal(in1, tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.equal(in1, tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.equal(in1, tf.expand_dims(in1, axis=1)), tf.float32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.equal(in1, tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.equal(in1, in1[:, None]), tf.float32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, -1), in1), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n```",
            "```python\n    return tf.equal(tf.expand_dims(in1, 1), in1) * 1.0\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(in1[None, :], in1[:, None]), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.expand_dims(in1, 0)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, -1), in1), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(in1[:, None], in1[None, :]), tf.float32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\ndef transform(in1):\n    return tf.cast(tf.equal(in1, tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    unique_vals, _ = tf.unique_with_counts(in1)\n    num_unique = tf.shape(unique_vals)[0]\n    eye_matrix = tf.eye(num_unique)\n    indices = tf.searchsorted(unique_vals, in1)\n    return tf.gather(eye_matrix, indices)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, -1), tf.expand_dims(in1, 0)), tf.float32)\n```",
            "```python\n    n = tf.reduce_max(in1) + 1\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(tf.range(n), 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.expand_dims(in1, -1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, -1), in1), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(in1[:, None], in1), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1))\n```",
            "```python\nreturn tf.cast(tf.equal(in1, tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.one_hot(in1, tf.size(in1))\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1)), tf.float32)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2877.0099999999998,
        "usage": {
            "prompt_tokens": 1598,
            "completion_tokens": 3057,
            "total_tokens": 4655
        }
    },
    {
        "name": "stackoverflow_08",
        "description": "(\\'select the values in the second tensor where the first tensor is greater than 1\\')",
        "target_program": "tf.boolean_mask(in2, tf.greater(in1, tf.constant(1)))",
        "source": "https://stackoverflow.com/questions/33769041/tensorflow-indexing-with-boolean-tensor",
        "constants": "[1]",
        "examples": {
            "inputs": "[[-1, 0, -3, 2, 1, 3, 5, -1, -9, 2, 10],[12, 3, 45, 6, 7, 8, 9, 87, 65, 4, 32],]",
            "outputs": "[6, 8, 9, 4, 32]"
        },
        "completions": [
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\nreturn tf.where(tf.greater(in1, 1), in2, tf.zeros_like(in2))[tf.greater(in1, 1)]\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    mask = tf.greater(in1, 1)\n    return tf.boolean_mask(in2, mask)\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\nreturn tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    mask = tf.greater(in1, 1)\n    return tf.boolean_mask(in2, mask)\n```",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, tf.constant(1)))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "```python\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2320.023,
        "usage": {
            "prompt_tokens": 1520,
            "completion_tokens": 2647,
            "total_tokens": 4167
        }
    },
    {
        "name": "stackoverflow_09",
        "description": "group items by value and get the group indices",
        "target_program": "tf.unique_with_counts(in1)[1]",
        "source": "https://stackoverflow.com/questions/53054668/assign-values-between-0-and-n-1-for-a-vector-of-length-l-with-n-different-eleme",
        "constants": "[]",
        "examples": {
            "inputs": "[[37, 42, 42, 37, 28, 15, 42, 15],]",
            "outputs": "[0, 1, 1, 0, 2, 3, 1, 3]"
        },
        "completions": [
            "```python\n    idx = tf.argsort(in1)\n    sorted_in1 = tf.gather(in1, idx)\n    group_idx = tf.searchsorted(sorted_in1, in1, side='left')\n    return group_idx\n```",
            "```python\n    return tf.cast(tf.unique_with_counts(in1)[1], tf.int32)\n```",
            "def transform(in1):\n    return tf.argsort(tf.argsort(in1))",
            "```python\n    _, _, idx = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    return tf.cast(tf.unique_with_counts(in1)[1], tf.int32)\n```",
            "```python\n    return tf.cast(tf.unique_with_counts(in1)[1], tf.int32)\n```",
            "```python\n    _, _, idx = tf.unique_with_counts(in1)\n    return idx\n```",
            "def transform(in1):\n    return tf.cast(tf.argsort(tf.argsort(in1)), tf.int32)",
            "```python\n    return tf.argsort(tf.argsort(in1))\n```",
            "```python\n    _, _, counts = tf.unique_with_counts(in1)\n    return tf.gather(counts, in1)\n```",
            "```python\n    _, indices = tf.unique_with_counts(in1)\n    return indices\n```",
            "def transform(in1):\n    return tf.gather(tf.argsort(tf.unique_with_counts(in1)[0]), tf.unique_with_counts(in1)[1])",
            "```python\n    return tf.unique_with_counts(in1)[1]\n```",
            "```python\n    _, indices, _ = tf.unique_with_counts(in1)\n    return indices\n```",
            "```python\n    _, _, out = tf.unique_with_counts(in1)\n    return out - 1\n```",
            "```python\n    _, idx, _ = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    _, indices, _ = tf.unique_with_counts(in1)\n    return indices\n```",
            "```python\n    _, idx = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    _, _, idx = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    _, indices, _ = tf.unique_with_counts(in1)\n    return indices\n```",
            "```python\n    u, _, idx = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    return tf.cast(tf.unique_with_counts(in1)[1], tf.int32)\n```",
            "```python\n    uniq_vals, _, counts = tf.unique_with_counts(in1)\n    return tf.gather(tf.argsort(uniq_vals, stable=True), tf.searchsorted(uniq_vals, in1))\n```",
            "```python\n    _, indices, _ = tf.unique_with_counts(in1)\n    return indices\n```",
            "```python\n    vals, _, idx = tf.unique_with_counts(in1)\n    return tf.gather(tf.argsort(vals), idx)\n```",
            "```python\n    _, idx, _ = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    return tf.cast(tf.math.unsorted_segment_max(tf.range(tf.size(in1)), tf.argsort(in1, axis=0), num_segments=tf.size(tf.unique_with_counts(in1)[0])), tf.int32)\n```",
            "```python\n    return tf.cast(tf.argsort(tf.argsort(in1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.unique_with_counts(in1)[1], tf.int32)\n```",
            "```python\n    unique, idx, _ = tf.unique_with_counts(in1)\n    return idx\n```",
            "```\n_, indices, _ = tf.unique_with_counts(in1)\nreturn indices\n```",
            "```python\n    _, idx, _ = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    _, out, _ = tf.unique_with_counts(in1)\n    return out\n```",
            "```python\n    _, indices = tf.unique_with_counts(in1)\n    return indices\n```",
            "```python\n    _, _, i = tf.unique_with_counts(in1)\n    return i\n```",
            "```python\n    _, indices, _ = tf.unique_with_counts(in1)\n    return indices\n```",
            "```python\n    _, _, groups = tf.unique_with_counts(in1)\n    return groups\n```",
            "```python\n    return tf.argsort(tf.argsort(in1))\n```",
            "```python\n    _, indices = tf.unique_with_counts(in1)\n    return indices\n```",
            "```python\n    uniq, _, idx = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    return tf.unique_with_counts(in1)[1]\n```",
            "```python\n    _, idx, _ = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    _, idx, _ = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    _, indices = tf.unique_with_counts(in1)\n    return indices\n```",
            "```python\n    _, _, ids = tf.unique_with_counts(in1)\n    return ids\n```",
            "```python\n    return tf.argsort(tf.argsort(in1))\n```",
            "```python\n    return tf.argsort(tf.argsort(in1))\n```",
            "```python\n    _, indices = tf.unique_with_counts(in1)\n    return indices\n```",
            "```python\n    _, indices, _ = tf.unique_with_counts(in1)\n    return indices\n```",
            "```python\n    _, _, idx = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    u, _, idx = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    _, segment_ids, _ = tf.unique_with_counts(in1)\n    return segment_ids\n```",
            "```python\n    _, idx, _ = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    _, indices = tf.unique_with_counts(in1)\n    return indices\n```",
            "```python\n    _, indices, _ = tf.unique_with_counts(in1)\n    return indices\n```",
            "```\nreturn tf.gather_nd(tf.argsort(tf.unique_with_counts(in1)[0]), tf.expand_dims(in1, 1))\n```",
            "```python\n    _, indices = tf.unique_with_counts(in1)\n    return indices\n```",
            "```python\n    _, idx = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    u, _, indices = tf.unique_with_counts(in1)\n    return indices\n```",
            "```python\n    _, _, idx = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    _, _, idx = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    _, _, idx = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    _, idx, _ = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    return tf.cast(tf.argsort(tf.argsort(in1)), tf.int32)\n```",
            "```python\n    _, indices = tf.unique_with_counts(in1)\n    return indices\n```",
            "```python\n    _, idx, _ = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    return tf.cast(tf.unique_with_counts(in1)[1], tf.int32)\n```",
            "```python\n    return tf.cast(tf.unique_with_counts(in1)[1], tf.int32)\n```",
            "```python\n    _, idx, _ = tf.unique_with_counts(in1)\n    return idx - 1\n```",
            "```python\n    return tf.cast(tf.unique_with_counts(in1)[1], tf.int32)\n```",
            "```python\n    _, _, idx = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    _, idx = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    _, idx, _ = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    _, indices, _ = tf.unique_with_counts(in1)\n    return indices\n```",
            "```python\n    uniq, _, idx = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    _, _, idx = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    _, idx = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    return tf.cast(tf.unique_with_counts(in1)[1], tf.int32)\n```",
            "```python\n    unique, idx, _ = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    _, idx = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    _, idx, _ = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    return tf.cast(tf.unique_with_counts(in1)[1], tf.int32)\n```",
            "```python\n    _, _, idx = tf.unique_with_counts(in1)\n    return idx\n```",
            "def transform(in1):\n    _, indices = tf.unique_with_counts(in1)\n    return indices",
            "```python\n    _, in1_gathered = tf.unique_with_counts(in1)\n    return tf.subtract(in1_gathered, 1)\n```",
            "```python\n    y, _, idx = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    _, indices, _ = tf.unique_with_counts(in1)\n    return indices\n```",
            "```python\n    _, idx, _ = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    u, _, idx = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    _, idx, _ = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    _, indices, _ = tf.unique_with_counts(in1)\n    return indices\n```",
            "```python\n    _, idx, _ = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    return tf.argsort(tf.argsort(in1, stable=True), stable=True)\n```",
            "```python\n    _, _, idx = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    _, _, ids = tf.unique_with_counts(in1)\n    return ids\n```",
            "```python\n    _, _, idx = tf.unique_with_counts(in1)\n    return idx\n```",
            "```\nreturn tf.cast(tf.unique_with_counts(in1)[1], tf.int32)\n```",
            "```python\n    unique_values, idx, _ = tf.unique_with_counts(in1)\n    return idx\n```",
            "```python\n    _, indices, _ = tf.unique_with_counts(in1)\n    return indices\n```",
            "```python\n    return tf.gather(in1, tf.argsort(in1))\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2293.7340000000004,
        "usage": {
            "prompt_tokens": 1469,
            "completion_tokens": 2139,
            "total_tokens": 3608
        }
    },
    {
        "name": "stackoverflow_10",
        "description": "perform matrix multiplication",
        "target_program": "tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 1))",
        "source": "https://stackoverflow.com/questions/53094212/tensorflow-sxn-matrix-multiply-with-sxd-matrix-to-output-sxnxd-array",
        "constants": "[]",
        "examples": {
            "inputs": "[[[15, 10], [20, -5]],[[2, 3, 1], [-2, 5, 0]],]",
            "outputs": "[[[30, 45, 15], [20, 30, 10]],[[-40, 100, 0], [10, -25, 0]]]"
        },
        "completions": [
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 0), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 2), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 2), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, axis=1), in2)\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, axis=0), tf.expand_dims(in2, axis=1))\n```",
            "```python\n    return tf.matmul(in1, tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), in2)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 2), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))\n```",
            "```python\nreturn tf.matmul(tf.expand_dims(in1, 2), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 2), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=0))\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 2), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(in1, tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=0))\n```",
            "```python\nreturn tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 0), tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, axis=1), in2)\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=1))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, axis=1), in2)\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```\n    return tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), in2)\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))\n```",
            "```python\n     return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, axis=1), in2)\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), in2)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 1805.302,
        "usage": {
            "prompt_tokens": 1504,
            "completion_tokens": 2410,
            "total_tokens": 3914
        }
    },
    {
        "name": "stackoverflow_11",
        "description": "count the number of occurences of each distinct number",
        "target_program": "tf.math.bincount(in1)",
        "source": "https://stackoverflow.com/questions/45194672/how-to-count-elements-in-tensorflow-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[4, 0, 1, 1, 0, 4, 0, 0, 3, 4, 1],]",
            "outputs": "[4, 3, 0, 1, 3]"
        },
        "completions": [
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```\ndef transform(in1):\n    _, _, counts = tf.unique_with_counts(in1)\n    return counts\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    vals, _, counts = tf.unique_with_counts(in1)\n    return tf.scatter_nd(tf.expand_dims(vals, 1), counts, [tf.reduce_max(vals) + 1])\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    unique_elements, _, count = tf.unique_with_counts(in1)\n    return tf.math.unsorted_segment_sum(tf.ones_like(in1), unique_elements, tf.reduce_max(unique_elements) + 1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```",
            "```python\n    return tf.math.bincount(in1)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2729.107,
        "usage": {
            "prompt_tokens": 1470,
            "completion_tokens": 1469,
            "total_tokens": 2939
        }
    },
    {
        "name": "stackoverflow_12",
        "description": "remove a column from the tensor",
        "target_program": "tf.gather(in1, (0, 2), axis=1, batch_dims=0)",
        "source": "https://stackoverflow.com/questions/47447183/remove-a-set-of-tensors-from-a-tensor-in-tensorflow",
        "constants": "[0, 1, 2]",
        "examples": {
            "inputs": "[[[12, 34, 56], [33, 22, 11]]]",
            "outputs": "[[12, 56], [33, 11]]"
        },
        "completions": [
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.concat([tf.gather(in1, [0], axis=1), tf.gather(in1, [2], axis=1)], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.concat([tf.gather(in1, [0], axis=1), tf.gather(in1, [2], axis=1)], axis=1)\n```",
            "```python\n    return tf.concat([tf.gather(in1, [0], axis=1), tf.gather(in1, [2], axis=1)], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.concat([tf.gather(in1, indices=[0], axis=1), tf.gather(in1, indices=[2], axis=1)], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.concat([tf.gather(in1, [0], axis=1), tf.gather(in1, [2], axis=1)], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.concat([tf.gather(in1, [0], axis=1), tf.gather(in1, [2], axis=1)], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, indices=[0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\nreturn tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.concat([tf.gather(in1, [0], axis=1), tf.gather(in1, [2], axis=1)], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\nreturn tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.concat([tf.gather(in1, [0], axis=1), tf.gather(in1, [2], axis=1)], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.squeeze(tf.gather(in1, [0, 2], axis=1))\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\nreturn tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.concat([tf.gather(in1, [0], axis=1), tf.gather(in1, [2], axis=1)], axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\nreturn tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```",
            "```python\n    return tf.gather(in1, [0, 2], axis=1)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 1946.1779999999999,
        "usage": {
            "prompt_tokens": 1457,
            "completion_tokens": 2373,
            "total_tokens": 3830
        }
    },
    {
        "name": "stackoverflow_13",
        "description": "multiply vectors by tensor",
        "target_program": "tf.tensordot(in1, in2, (1, 1))",
        "source": "https://stackoverflow.com/questions/50777704/n-d-tensor-matrix-multiplication-with-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[3, 5], [10, 2]],[[[1, 0], [5, 4]], [[3, 10], [2, -2]]],]",
            "outputs": "[[[28, 20], [19, 20]], [[20, 8], [34, 96]]]"
        },
        "completions": [
            "```python\ndef transform(in1, in2):\n    return tf.matmul(in2, tf.expand_dims(in1, -1))[..., 0]\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, -2), in2)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=[[2], [1]])\n```",
            "```python\ndef transform(in1, in2):\n    return tf.matmul(in1, tf.transpose(in2, perm=[0, 2, 1]))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.matmul(in1, tf.transpose(in2, perm=[0, 2, 1]))\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, axis=-1))[..., 0]\n```",
            "```python\ndef transform(in1, in2):\n    return tf.matmul(in2, tf.transpose(in1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.matmul(in2, in1, transpose_b=True)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.matmul(in1, tf.transpose(in2, [0, 2, 1]))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.matmul(in2, tf.expand_dims(in1, -1))[..., 0]\n```",
            "```python\ndef transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, 2), in2)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.matmul(in2, tf.expand_dims(in1, -1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.matmul(in2, tf.expand_dims(in1, -1))[..., 0]\n```",
            "```python\ndef transform(in1, in2):\n    return tf.matmul(in2, tf.expand_dims(in1, 2))\n```",
            "```\ndef transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, 1), in2)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.matmul(in2, tf.expand_dims(in1, -1))[:,:,0]\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, 2))\n```",
            "```python\n    return tf.matmul(tf.cast(in2, tf.int32), tf.transpose(tf.cast(in1, tf.int32)))\n```",
            "```python\n    return tf.matmul(in1, tf.transpose(in2, perm=[0, 2, 1]))\n```",
            "```python\n    return tf.einsum('ij,ijk->ik', in1, in2)\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(in2, tf.transpose(in1))\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(in1, tf.transpose(in2, perm=[0, 2, 1]))\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, axis=2))[:, :, 0]\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, -1))[:, :, 0]\n```",
            "```python\n    return tf.matmul(in1, tf.transpose(in2, [0, 2, 1]))\n```",
            "```python\n    return tf.matmul(in1, tf.transpose(in2, perm=[0, 2, 1]))\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, -1))[:, :, 0]\n```",
            "```python\n    return tf.matmul(in1, tf.transpose(in2, [0, 2, 1]))\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, -1))[..., 0]\n```",
            "```python\n    return tf.matmul(in1, tf.transpose(in2, perm=[0, 2, 1]))\n```",
            "```python\n    return tf.matmul(in2, tf.transpose(in1))\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, -1))[..., 0]\n```",
            "```python\n    return tf.matmul(in1, tf.transpose(in2, perm=[0, 2, 1]))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, axis=2), in2).numpy()\n```",
            "```python\n    return tf.matmul(in1, tf.transpose(in2, [0, 2, 1]))\n```",
            "```python\n    return tf.tensordot(in2, in1, axes=[[2], [1]])\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, -1))[..., 0]\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, -1))\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, -1))[:, :, 0]\n```",
            "```python\ndef transform(in1, in2):\n    return tf.matmul(in1, tf.transpose(in2, [0, 2, 1]))\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(in1, tf.transpose(in2, [0, 2, 1]))\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(in1, tf.transpose(in2, perm=[0, 2, 1]))\n```",
            "```python\n    return tf.matmul(in1, tf.transpose(in2, perm=[0, 2, 1]))\n```",
            "```python\n    return tf.matmul(in1, tf.transpose(in2, perm=[0, 2, 1]))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 1), in2)\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, -1))[..., 0]\n```",
            "```\n    return tf.matmul(in1, tf.transpose(in2, [0, 2, 1]))\n```",
            "```\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, -1))[:, :, 0]\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, -1))[:, :, 0]\n```",
            "```python\ndef transform(in1, in2):\n    return tf.matmul(in2, tf.expand_dims(in1, -1))[..., 0]\n```",
            "```python\n    return tf.matmul(in1, tf.transpose(in2, perm=[0, 2, 1]))\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```\n    return tf.matmul(tf.expand_dims(in1, 1), in2)\n```",
            "```python\n    return tf.matmul(in1, tf.transpose(in2, perm=[0, 2, 1]))\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, -1))[..., 0]\n```",
            "```python\n    return tf.matmul(in1, tf.transpose(in2, [0, 2, 1]))\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, axis=2), in2)\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, -1))[..., 0]\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, -1))[..., 0]\n```",
            "```python\n    return tf.matmul(in2, tf.transpose(in1))\n```",
            "```python\n    return tf.matmul(in2, in1, transpose_b=True)\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, -1))\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(tf.expand_dims(in1, -1), in2), axis=1)\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, axis=-1))[..., 0]\n```",
            "```python\n    return tf.matmul(in2, tf.transpose(in1))\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, axis=2))[:, :, 0]\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, 2))\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, -1))[..., 0]\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, axis=-1))[..., 0]\n```",
            "```python\n    return tf.matmul(in1, tf.transpose(in2, [0, 2, 1]))\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, axis=-1))[..., 0]\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, -1))\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, -1))[..., 0]\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, -1))[..., 0]\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, -1))[..., 0]\n```",
            "```python\n    return tf.matmul(in2, tf.transpose(in1))\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, -1))[..., 0]\n```",
            "```python\n    return tf.matmul(in2, tf.transpose(in1))\n```",
            "```python\n    return tf.einsum('ij,jkl->ikl', in1, in2)\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, -1))[..., 0]\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(in1, tf.transpose(in2, [0, 2, 1]))\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, axis=-1))\n```",
            "```python\n    return tf.matmul(in1, tf.transpose(in2, [0, 2, 1]))\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, axis=-1))[..., 0]\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, -1))[..., 0]\n```",
            "```python\n    return tf.matmul(in1, in2)\n```",
            "```python\n    return tf.matmul(in2, tf.expand_dims(in1, -1))[..., 0]\n```",
            "```python\n    return tf.matmul(in1, tf.transpose(in2, perm=[0, 2, 1]))\n```",
            "```python\n    return tf.matmul(in2, tf.transpose(in1))\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 1579.292,
        "usage": {
            "prompt_tokens": 1501,
            "completion_tokens": 2325,
            "total_tokens": 3826
        }
    },
    {
        "name": "stackoverflow_14",
        "description": "choose True if any value in a row is True, False otherwise",
        "target_program": "tf.reduce_any(in1, axis=-1)",
        "source": "https://stackoverflow.com/questions/35657003/aggregate-each-element-of-tensor-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[False, False, True],  [False, False, False],  [True, False, True],  [False, True, False],  [False, False, False],  [True, True, True],  [True, True, False]]],]",
            "outputs": "[[True, False, True, True, False, True, True]]"
        },
        "completions": [
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(tf.squeeze(in1), axis=1), 0)\n```",
            "```\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "```\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "```\n    return tf.expand_dims(tf.reduce_any(in1, axis=-1), axis=0)\n```",
            "```python\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), 0)\n```",
            "```python\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=1)\n```",
            "```\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), 0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "```python\n    return tf.reduce_any(in1, axis=2)\n```",
            "```\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), 0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), 1)\n```",
            "```python\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "```python\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), 0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), 0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), 0)\n```",
            "```python\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "def transform(in1):\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)",
            "```python\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "def transform(in1):\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), 0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), 0)\n```",
            "```python\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), 0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), 0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), 0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), 0)\n```",
            "```python\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), 0)\n```",
            "```python\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), 0)\n```",
            "```python\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "```python\ndef transform(in1):\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), 0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), 0)\n```",
            "```\n    return tf.reduce_any(in1, axis=2)\n```",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "```python\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=1)\n```",
            "```python\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), 0)\n```",
            "```python\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), 0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), 0)\n```",
            "```python\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "```python\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=1)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "def transform(in1):\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), 0)",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "```python\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), 0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), 0)\n```",
            "def transform(in1):\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=1), 0)\n```",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "```python\n    return tf.reduce_any(in1, axis=2)\n```",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)",
            "```python\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\n    return tf.reduce_any(in1, axis=2)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), 0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), 0)\n```",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```",
            "def transform(in1):\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)",
            "```python\n    return tf.expand_dims(tf.reduce_any(in1, axis=2), axis=0)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 1963.694,
        "usage": {
            "prompt_tokens": 1501,
            "completion_tokens": 2086,
            "total_tokens": 3587
        }
    },
    {
        "name": "stackoverflow_15",
        "description": "set all instances of 1 to 0",
        "target_program": "tf.subtract(in1, tf.cast(tf.equal(in1, tf.constant(1)), tf.int32))",
        "source": "https://stackoverflow.com/questions/39045797/conditional-assignment-of-tensor-values-in-tensorflow",
        "constants": "[0, 1]",
        "examples": {
            "inputs": "[[3, 1, 2, 0, 1, -1, 10, 1, -10],]",
            "outputs": "[3, 0, 2, 0, 0, -1, 10, 0, -10]"
        },
        "completions": [
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(in1 == 1, tf.zeros_like(in1), in1)\n```",
            "```\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(in1 == 1, tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(in1 == 1, tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```\nreturn tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```\n    return tf.where(in1 == 1, tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n```",
            "```python\n    return tf.where(tf.equal(in1, 1), 0, in1)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2560.594,
        "usage": {
            "prompt_tokens": 1491,
            "completion_tokens": 2381,
            "total_tokens": 3872
        }
    },
    {
        "name": "stackoverflow_16",
        "description": "multiply tensors across the first axis",
        "target_program": "tf.multiply(in1, tf.expand_dims(in2, 1))",
        "source": "https://stackoverflow.com/questions/46240646/tensor-multiply-along-axis-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[2, 5], [3, 0], [8, -7]],[4, 10, -6],]",
            "outputs": "[[8, 20], [30, 0], [-48, 42]]"
        },
        "completions": [
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=-1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=-1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, -1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=-1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\n    return tf.transpose(tf.multiply(tf.transpose(in1), in2))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, -1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, -1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.math.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.math.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=-1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 3313.8849999999998,
        "usage": {
            "prompt_tokens": 1484,
            "completion_tokens": 2023,
            "total_tokens": 3507
        }
    },
    {
        "name": "stackoverflow_17",
        "description": "duplicate each element of a tensor",
        "target_program": "tf.stack((in1, in1), axis=1)",
        "source": "https://stackoverflow.com/questions/51761353/about-tensor-of-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[17, -32, 99],]",
            "outputs": "[[17, 17], [-32, -32], [99, 99]]"
        },
        "completions": [
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2, axis=0), [-1, 2])\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "```python\n    return tf.expand_dims(in1, 1) * tf.ones((1, 2), dtype=in1.dtype)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), repeats=2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "def transform(in1):\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))",
            "```python\n    return tf.repeat(tf.expand_dims(in1, axis=1), repeats=2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), repeats=2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, -1), 2, axis=1)\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (tf.shape(in1)[0], 2))\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, -1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), repeats=2, axis=1)\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, axis=1), repeats=2, axis=1)\n```",
            "```python\n    return tf.expand_dims(in1, 1).repeat(2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), [-1, 2])\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, axis=1), repeats=2, axis=1)\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "```python\n    return tf.expand_dims(in1, 1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, -1), 2, axis=-1)\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, axis=1), 2, axis=1)\n```",
            "```\n    return tf.reshape(tf.repeat(in1, 2), [-1, 2])\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, 1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, axis=1), repeats=2, axis=1)\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "def transform(in1):\n    return tf.expand_dims(in1, -1)",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), repeats=2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, axis=1), repeats=2, axis=1)\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (tf.shape(in1)[0], 2))\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, axis=1), 2, axis=1)\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), [-1, 2])\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, axis=1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, -1), 2, axis=-1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, axis=1), repeats=2, axis=1)\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (tf.shape(in1)[0], 2))\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), [-1, 2])\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, axis=1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, axis=1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.expand_dims(in1, 1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, -1), 2, axis=-1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, axis=1), 2, axis=1)\n```",
            "```python\n    return tf.repeat(tf.expand_dims(in1, axis=1), repeats=2, axis=1)\n```",
            "```python\n    return tf.reshape(tf.repeat(in1, 2), (-1, 2))\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2057.759,
        "usage": {
            "prompt_tokens": 1460,
            "completion_tokens": 2341,
            "total_tokens": 3801
        }
    },
    {
        "name": "stackoverflow_18",
        "description": "multiply 3D tensor and 2D tensor and add another tensor",
        "target_program": "tf.add(in3, tf.matmul(in1, in2))",
        "source": "https://stackoverflow.com/questions/38222126/tensorflow-efficient-way-for-tensor-multiplication",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[1, 1, 1], [1, 0, 1]], [[1, 2, 3], [4, 5, 6]]], [[1, 1, 1, 1], [1, 2, 3, 4], [5, 6, 7, 8]], [100, 200, 300, 400],]",
            "outputs": "[[[107, 209, 311, 413], [106, 207, 308, 409]], [[118, 223, 328, 433], [139, 250, 361, 472]]]"
        },
        "completions": [
            "```python\n    t = tf.tensordot(in1, in2, axes=1)\n    return tf.add(t, in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.matmul(in1, in2), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.matmul(in1, in2), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), tf.expand_dims(in3, 0))\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(\n        tf.matmul(in1, in2), \n        tf.expand_dims(in3, axis=0)\n    )\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.matmul(in1, in2), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=[[2],[0]]), in3)\n```",
            "```python\n    return tf.add(tf.matmul(in1, in2), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(\n        tf.tensordot(in1, in2, axes=1),\n        tf.reshape(in3, (1, 1, -1))\n    )\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(\n        tf.matmul(in1, in2), \n        tf.reshape(in3, (1, 1, -1))\n    )\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.matmul(in1, in2), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.matmul(in1, in2), in3)\n```",
            "```python\n    return tf.add_n([tf.tensordot(in1, in2, axes=[[2], [0]]), tf.reshape(in3, [1, 1, -1])])\n```",
            "```python\n    return tf.add(tf.matmul(in1, in2), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, [[2], [0]]), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.matmul(in1, in2), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), tf.expand_dims(in3, 0))\n```",
            "```python\n    return tf.add(\n        tf.tensordot(in1, in2, axes=1),\n        tf.reshape(in3, (1, 1, -1))\n    )\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.matmul(in1, in2), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n```",
            "```python\n    return tf.add(tf.matmul(in1, in2), in3)\n```",
            "```python\n    return tf.add(tf.matmul(in1, in2), in3)\n```",
            "```python\n    return tf.add_n([tf.tensordot(in1, in2, axes=1), tf.expand_dims(in3, 0)])\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.matmul(in1, in2), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.matmul(in1, in2), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.matmul(in1, in2), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.matmul(in1, in2), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    a = tf.tensordot(in1, in2, axes=1)\n    return tf.add(a, in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.matmul(in1, in2), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=(2, 0)), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```\n    return tf.add(tf.matmul(in1, in2), in3)\n```",
            "```python\n    return tf.add(\n        tf.tensordot(in1, in2, axes=[2, 0]),\n        tf.expand_dims(in3, 0)\n    )\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n```",
            "```python\n    return tf.add(tf.matmul(in1, in2), in3)\n```",
            "```python\n    return tf.add(\n        tf.tensordot(in1, in2, axes=[[2], [0]]), \n        tf.expand_dims(in3, axis=0)\n    )\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(\n        tf.tensordot(in1, in2, axes=[[2], [0]]),\n        tf.expand_dims(in3, axis=0)\n    )\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=[2, 0]), in3)\n```",
            "```python\n    return tf.add(tf.matmul(in1, in2), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), tf.expand_dims(in3, 0))\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), tf.expand_dims(in3, 0))\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add_n([tf.tensordot(in1, in2, axes=1), tf.expand_dims(in3, 0)])\n```",
            "```python\n    return tf.add(\n        tf.tensordot(in1, in2, axes=1),\n        tf.expand_dims(in3, axis=0)\n    )\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=[[-1], [0]]), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.matmul(in1, in2), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, 1), in3)\n```",
            "```python\n    return tf.add(tf.matmul(in1, in2), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```",
            "```python\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2051.815,
        "usage": {
            "prompt_tokens": 1554,
            "completion_tokens": 2671,
            "total_tokens": 4225
        }
    },
    {
        "name": "stackoverflow_19",
        "description": "(\\'sort a tensor considering the first column, breaking ties using the second column\\')",
        "target_program": "tf.gather(tf.gather(in1, tf.argsort(in1[:, 1], stable=True)), tf.argsort(tf.gather(in1, tf.argsort(in1[:, 1], stable=True))[:, 0], stable=True))",
        "source": "https://stackoverflow.com/questions/49399198/sort-a-tensor-based-on-two-columns-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[3, 1, 2], [1, 0, 4], [1, 2, 3], [0, 5, 1], [1, 1, 2], [2, 3, 1], [2, 1, 0]],]",
            "outputs": "[[0, 5, 1],    [1, 0, 4],    [1, 1, 2],    [1, 2, 3],    [2, 1, 0],    [2, 3, 1],    [3, 1, 2]]"
        },
        "completions": [
            "```python\ninds = tf.argsort(in1, axis=0, stable=True)\nreturn tf.gather_nd(in1, tf.stack((inds[:,0], tf.range(tf.shape(in1)[0])), axis=1))\n```",
            "```python\n    idx = tf.argsort(in1, axis=0)\n    idx = tf.argsort(tf.gather(in1, idx[..., 0]), axis=1)\n    return tf.gather(in1, idx)\n```",
            "```python\n    indices = tf.argsort(in1, axis=0, stable=True)\n    sorted_tensor = tf.gather(in1, indices[:, 0])\n    sorted_by_second = tf.gather(sorted_tensor, tf.argsort(sorted_tensor[:, 1], axis=0, stable=True))\n    return sorted_by_second\n```",
            "```python\ni=tf.argsort(in1,axis=1)\nreturn tf.gather_nd(in1,tf.stack((tf.range(tf.shape(in1)[0])[:,None],i),2))\n```",
            "```python\n    idx = tf.argsort(in1[:, 1], stable=True)\n    in1 = tf.gather(in1, idx)\n    idx = tf.argsort(in1[:, 0], stable=True)\n    return tf.gather(in1, idx)\n```",
            "```python\n    indices = tf.argsort(in1, axis=1, stable=True)\n    sorted = tf.gather(in1, indices, batch_dims=1)\n    return tf.gather_nd(sorted, tf.argsort(sorted, axis=0, stable=True))\n```",
            "```python\n    keys = tf.argsort(tf.argsort(in1[:, :2], axis=0), axis=0)\n    return tf.gather(in1, tf.argsort(keys[:, 0] * in1.shape[0] + keys[:, 1]))\n```",
            "```python\n    indices = tf.argsort(in1[:, :2], axis=0, stable=True)\n    return tf.gather(in1, indices[:, 0])\n```",
            "```python\n    idx = tf.argsort(in1, axis=0, stable=True)[:, 0]\n    return tf.gather(in1, idx)\n```",
            "```python\n    indices = tf.argsort(in1, axis=0, stable=True)\n    sorted_indices = tf.gather(indices, tf.range(2), axis=1)\n    return tf.gather(in1, sorted_indices[:, 0], axis=0)\n```",
            "```python\nidx = tf.argsort(in1[:, 1], axis=0, stable=True)\nidx = tf.argsort(tf.gather(in1, idx), axis=0, stable=True)\nreturn tf.gather(in1, idx)\n```",
            "```python\n    idx = tf.argsort(in1[:, :2], axis=0, stable=True)\n    idx = tf.gather(idx, 0, axis=1)\n    return tf.gather(in1, idx)\n```",
            "```python\nindices = tf.argsort(in1[:, :2], axis=0, stable=True)\ngathered = tf.gather(in1, indices[:, 1], axis=0)\nreturn gathered\n```",
            "```python\nindices = tf.argsort(tf.cast(in1[:, :2], tf.int32), axis=0)\nsorted_indices = tf.gather_nd(indices, [[i] for i in tf.range(tf.shape(in1)[0])])\nreturn tf.gather(in1, tf.cast(sorted_indices, tf.int32))\n```",
            "```python\n    indices = tf.argsort(in1, axis=0, stable=True)\n    sorted_indices = tf.gather(indices, [0, 1], axis=1)\n    flat_sorted_indices = tf.gather_nd(in1, tf.expand_dims(sorted_indices, axis=-1))\n    return tf.gather(in1, indices=tf.argsort(flat_sorted_indices, axis=1, stable=True)[:,0], axis=0)\n```",
            "```python\nindices = tf.argsort(tf.stack([in1[:,0], in1[:,1]], axis=1), axis=0, stable=True)\nreturn tf.gather(in1, indices[:,0])\n```",
            "```python\n    idx = tf.argsort(in1[:, :2], axis=0, stable=True)\n    sort1 = tf.gather(in1, idx[:, 0])\n    idx2 = tf.argsort(sort1[:, 1], axis=0, stable=True)\n    return tf.gather(sort1, idx2, axis=0)\n```",
            "```python\nargsort1 = tf.argsort(in1, axis=0, stable=True)\nin1 = tf.gather(in1, argsort1[:, 0])\nargsort2 = tf.argsort(in1, axis=1, stable=True)\nreturn tf.gather(in1, argsort2[:, 1])\n```",
            "```python\n    indices = tf.argsort(tf.stack(tf.unstack(in1, axis=1)[:2], axis=1), axis=0, stable=True)\n    indices = indices[:, 0]\n    return tf.gather(in1, indices)\n```",
            "```python\nidx = tf.argsort(in1[:, 1], stable=True)\nidx = tf.argsort(tf.gather(in1, idx)[:, 0], stable=True)\nreturn tf.gather(in1, idx)\n```",
            "```python\n    idx = tf.argsort(in1, axis=0, stable=True)\n    return tf.gather_nd(in1, tf.gather(idx, 0, axis=1))\n```",
            "```python\n    indices = tf.argsort(in1, axis=0, stable=True)\n    return tf.gather_nd(in1, tf.stack((indices[:,0], indices[:,1]), axis=-1))\n```",
            "```python\n    idx = tf.argsort(in1[:, :2], axis=0, stable=True)\n    idx = tf.gather(idx[:, 0], tf.argsort(tf.gather(in1[:, 0], idx[:, 0]), stable=True))\n    return tf.gather(in1, idx)\n```",
            "```python\nindices = tf.lexsort(tf.transpose(in1)[:2, ::-1])\nreturn tf.gather(in1, indices)\n```",
            "```python\nreturn tf.gather_nd(in1, tf.argsort(in1, axis=0, stable=True))\n```",
            "```python\n    idx = tf.argsort(in1, axis=0, stable=True)\n    idx = tf.gather(idx, [0, 1], axis=1)\n    idx = tf.argsort(idx[:, 0], stable=True)\n    return tf.gather(in1, idx, axis=0)\n```",
            "```python\n    indices = tf.argsort(tf.cast(in1[:, :2], tf.int64), axis=0)\n    sorted_first_two = tf.gather(in1, indices[:, 0], axis=0)\n    sorted_first_two = tf.gather(sorted_first_two, tf.argsort(sorted_first_two[:, 1], axis=0), axis=0)\n    return sorted_first_two\n```",
            "```python\nimport tensorflow as tf\nindices = tf.argsort(in1[:, :2], axis=0, stable=True)\nsorted_indices = tf.gather(indices, [0, 1], axis=1)\nreturn tf.gather_nd(in1, sorted_indices)\n```",
            "```python\n    idx = tf.argsort(in1, axis=0, stable=True)\n    idx_first = tf.gather(idx[:, 0], tf.range(tf.shape(in1)[0]))\n    idx_second = tf.argsort(tf.gather(in1, idx_first), stable=True)\n    return tf.gather(in1, idx_second)\n```",
            "def transform(in1):\n    idx = tf.argsort(in1[:,0], stable=True)\n    return tf.gather(in1, tf.argsort(tf.gather(in1[:, 1], tf.gather(idx, tf.bool(tf.not_equal(tf.gather(in1[:, 0], idx), tf.gather(in1[:, 0], tf.roll(idx, shift=-1, axis=0))))), stable=True)), axis=0))",
            "```python\nindices = tf.argsort(in1[:, :2], axis=0, stable=True)\nreturn tf.gather(in1, indices[:, 0])\n```",
            "```python\ni = tf.argsort(in1[:, :2], axis=0)\ni = tf.sort(i, axis=0)\ni = tf.reshape(i, (-1,))\nreturn tf.gather_nd(in1, tf.expand_dims(i, 1))\n```",
            "```python\na = tf.argsort(in1, axis=1, stable=True)\nindices = tf.argsort(tf.gather_nd(a, to_gather), axis=1, stable=True)\nreturn tf.gather(in1, indices)\n```",
            "```python\nidx = tf.argsort(in1[:, :2], axis=0, stable=True)[:, 0]\nreturn tf.gather(in1, tf.gather(idx, tf.argsort(tf.gather(idx, tf.argsort(idx)))))\n```",
            "```python\n    indices = tf.argsort(in1, axis=0, stable=True)\n    first_sorted = tf.gather(in1, indices[:, 0])\n    return tf.gather(first_sorted, tf.argsort(first_sorted[:, 1], axis=0, stable=True))\n```",
            "```python\nindices = tf.argsort(in1, axis=0, stable=True)\nsorted_first_col = tf.gather(in1, indices[:, 0])\nfinal_indices = tf.argsort(sorted_first_col[:, 1], axis=0, stable=True)\nreturn tf.gather(sorted_first_col, final_indices)\n```",
            "```python\n    indices = tf.argsort(in1[:, :2], axis=0, stable=True)[:, 0]\n    return tf.gather(in1, indices)\n```",
            "```python\nindices = tf.argsort(tf.stack([in1[:, 0], in1[:, 1]], axis=1), axis=0, stable=True)\nrow_indices = indices[:, 0]\nreturn tf.gather(in1, row_indices)\n```",
            "```python\n    return tf.gather(in1, tf.argsort(in1, axis=0, stable=True)[:, 0])\n```",
            "```python\nv = tf.argsort(in1[:, :2], axis=0, stable=True)\nindices = v[:, 0]\nindices = tf.where(tf.equal(v[:, 0][:, None], tf.reduce_min(v[:, :2], axis=1)[:, None]), tf.argsort(in1[:, :2], axis=1, stable=True)[:, 1], indices)\nreturn tf.gather(in1, tf.sort(indices, stable=True), axis=0)\n```",
            "```python\ni = tf.argsort(in1[:, :2], axis=0, stable=True)\nj = tf.gather_nd(i, [[0, 0], [0, 1], [1, 0], [2, 0], [3, 0], [4, 0]])\nreturn tf.gather(in1, j)\n```",
            "```python\n    indices = tf.argsort(in1, axis=0, stable=True)\n    cols_sorted = [tf.gather(in1[:, i], indices[:, i]) for i in range(in1.shape[1])]\n    return tf.stack(cols_sorted, axis=1)\n```",
            "```python\ninds = tf.argsort(in1[:, :2], axis=0)\ninds = tf.gather_nd(inds, [0])\nreturn tf.gather(in1, inds)\n```",
            "```python\nidx = tf.argsort(in1[:, :2])\nreturn tf.gather(in1, tf.argsort(idx, axis=0)[:, 0])\n```",
            "```python\n    indices = tf.argsort(in1[:, :2], axis=0, stable=True)\n    sorted_rows = tf.gather(in1, indices[:, 0], axis=0)\n    return tf.cast(sorted_rows, tf.int32)\n```",
            "```python\nidx = tf.argsort(in1[:, :2], axis=0, stable=True)\nsorted_in1 = tf.gather(in1, idx[:, 0])\nreturn tf.gather(sorted_in1, tf.argsort(idx[:, 0], axis=0))\n```",
            "```python\n    idx = tf.argsort(in1[:, :2], axis=0, stable=True)\n    return tf.gather(in1, tf.argsort(idx[:,0], stable=True))\n```",
            "```python\na = tf.argsort(in1[:, :2], axis=0)\nsorted_by_first_col = tf.gather(in1, tf.gather(a[:, 0], tf.range(in1.shape[0])), axis=0)\nreturn tf.gather(sorted_by_first_col, tf.argsort(sorted_by_first_col[:, 1], axis=0, stable=True), axis=0)\n```",
            "```python\nindices = tf.argsort(in1[:, :2], axis=0, stable=True)\nsorted_indices = indices[:, 0]\nreturn tf.gather(in1, sorted_indices, axis=0)\n```",
            "```python\nidx = tf.argsort(tf.transpose(in1), axis=-1, stable=True)\nidx1 = tf.gather_nd(idx, [[1]])\nidx2 = tf.gather_nd(idx, [[0]])\nsorted_idx = tf.argsort(tf.stack([idx1, idx2], axis=1), axis=-1, stable=True)\nreturn tf.gather(in1, sorted_idx, axis=0)\n```",
            "```python\n    indices = tf.argsort(in1, axis=0, stable=True)\n    return tf.gather(in1, indices[:, 0])\n```",
            "```python\nindices = tf.argsort(in1[:, :2], axis=0, stable=True)\nreturn tf.gather(in1, indices[:,0])\n```",
            "```python\nidx = tf.argsort(in1[:, :2], axis=0)\nsorted_idx = tf.gather(idx, [1, 0], axis=1)\nreturn tf.gather(in1, sorted_idx[:, 0])\n```",
            "```python\nindices = tf.argsort(in1[:, :2], axis=0, stable=True)\nindices = tf.argsort(indices[:, 0], axis=0, stable=True)\nreturn tf.gather(in1, indices)\n```",
            "```python\n    sorted_index = tf.argsort(in1[:, :2], axis=0, stable=True)\n    sorted_index = tf.argsort(sorted_index[:, 0], stable=True)\n    return tf.gather(in1, sorted_index, axis=0)\n```",
            "```python\n    indices = tf.argsort(in1, axis=0)\n    return tf.gather(in1, indices[:, 0])\n```",
            "```python\n    indices_1 = tf.argsort(in1[:, 1], stable=True)\n    in1_sorted_by_second_col = tf.gather(in1, indices_1, axis=0)\n    indices_final = tf.argsort(in1_sorted_by_second_col[:, 0], stable=True)\n    return tf.gather(in1_sorted_by_second_col, indices_final, axis=0)\n```",
            "```python\nidx = tf.argsort(in1[:, :2], axis=0, stable=True)\nreturn tf.gather_nd(in1, tf.expand_dims(idx[:, 0], axis=-1))\n```",
            "```python\n    sorted_indices = tf.argsort(in1, axis=0, stable=True)\n    return tf.gather_nd(in1, sorted_indices)\n```",
            "```python\n    idxs = tf.argsort(in1, axis=0, stable=True)\n    prim_sort_idx = tf.gather(idxs[:, 0], tf.argsort(idxs[:, 0], axis=0))\n    sec_sort_idx = tf.gather(idxs[:, 1], tf.argsort(idxs[:, 0], axis=0))\n    return tf.gather(in1, prim_sort_idx)\n```",
            "```python\n    indices = tf.argsort(in1, axis=0, stable=True)\n    return tf.gather(in1, indices[:,0], axis=0)\n```",
            "```python\n    indices = tf.argsort(in1[:, :2], axis=0)\n    sorted_indices = tf.gather(indices, [1, 2, 0], axis=1)\n    return tf.gather(in1, sorted_indices[:, 0])\n```",
            "```python\n    indices = tf.argsort(in1[:, 1], stable=True)\n    sorted_cols = tf.gather(in1, indices)\n    indices = tf.argsort(sorted_cols[:, 0], stable=True)\n    return tf.gather(sorted_cols, indices)\n```",
            "```python\nindices = tf.argsort(in1, axis=0, stable=True)\nindices = tf.argsort(indices, axis=0, stable=True)[:, 0]\nreturn tf.gather(in1, indices)\n```",
            "```python\nidx = tf.argsort(in1[:, 1], axis=0)\nsorted_by_col2 = tf.gather(in1, idx)\nreturn tf.gather(sorted_by_col2, tf.argsort(sorted_by_col2[:, 0], axis=0))\n```",
            "```python\nidx = tf.argsort(in1[:,0], stable=True)\nin1 = tf.gather(in1, idx)\nidx = tf.argsort(in1[:,1], stable=True)\nreturn tf.gather(in1, idx)\n```",
            "```python\n    idx = tf.argsort(tf.argsort(in1, axis=1), axis=0)\n    return tf.gather_nd(in1, tf.where(tf.argsort(idx, axis=0, stable=True)))\n```",
            "```python\nidx = tf.argsort(in1, axis=0, stable=True)\nidx = idx[:, 0]\nreturn tf.gather(in1, idx)\n```",
            "```python\nindices = tf.argsort(in1[:, :2], axis=0, stable=True)\nsorted_indices = tf.gather(indices, tf.argsort(indices, axis=0)[:, 0])\nreturn tf.gather(in1, sorted_indices)\n```",
            "```python\n    idx = tf.argsort(in1[:, :2], axis=0, stable=True)\n    idx = tf.gather_nd(idx, tf.transpose([tf.range(tf.shape(idx)[0]), idx[:, 0]]))\n    return tf.gather(in1, idx)\n```",
            "```python\nidx = tf.argsort(in1[:, :2], axis=0, stable=True)\nreturn tf.gather(in1, idx[:, 0])\n```",
            "```python\nindices = tf.argsort(in1[:, :2], axis=0, stable=True)\nsorted_indices = tf.gather_nd(indices, tf.argsort(indices[:, 0], axis=0))\nreturn tf.gather(in1, sorted_indices)\n```",
            "```python\nidx = tf.argsort(in1[:, :2], axis=0, stable=True)[:, 0]\nreturn tf.gather(in1, idx)\n```",
            "```python\n    return tf.gather(in1, tf.argsort(in1, axis=0, stable=True)[:, 0])\n```",
            "```python\n    indices = tf.argsort(in1, axis=0)\n    sorted1 = tf.gather(in1, tf.argsort(in1[:, 0], stable=True), axis=0)\n    sorted2 = tf.gather(sorted1, tf.argsort(sorted1[:, 1], stable=True), axis=0)\n    return sorted2\n```",
            "```python\n    idx0 = tf.argsort(in1[:,0], stable=True)\n    return tf.gather(in1, tf.argsort(tf.gather(in1, idx0)[:,1], stable=True))\n```",
            "```python\n    indices = tf.argsort(in1, axis=0, stable=True)\n    first_sort = tf.gather(in1, indices[:, 0])\n    return tf.gather(first_sort, tf.argsort(first_sort, axis=0)[:, 1])\n```",
            "```python\nindices = tf.argsort(in1, axis=0)\nidx = tf.gather(indices, [0])\nsorted_tensor = tf.gather_nd(in1, idx, batch_dims=1)\nfor col in range(1, in1.shape[1]):\n    idx = tf.gather(indices, [col])\n    sorted_tensor = tf.sort(tf.concat([sorted_tensor, tf.gather_nd(in1, idx, batch_dims=1)], axis=1), axis=0)\nreturn sorted_tensor\n```",
            "```python\n    indices = tf.argsort(in1, axis=1, stable=True)\n    sorted_by_cols = tf.gather(in1, indices, axis=1, batch_dims=1)\n    return tf.gather(sorted_by_cols, tf.argsort(sorted_by_cols[:, :2], axis=0, stable=True)[:, 0], axis=0)\n```",
            "```python\nindices = tf.argsort(in1[:, :2], axis=0, stable=True)\nsorted_cols = tf.gather(in1, indices[:, 0], axis=0)\nreturn tf.gather(sorted_cols, tf.argsort(sorted_cols[:, 1], axis=0, stable=True), axis=0)\n```",
            "```python\ni=tf.argsort(in1[:,1])\nsorted_by_second=tf.gather(in1,i)\ni=tf.argsort(sorted_by_second[:,0])\nreturn tf.gather(sorted_by_second,i)\n```",
            "```python\ni = tf.argsort(tf.stack([in1[:, 0], in1[:, 1]], axis=1), axis=0)\nreturn tf.gather(in1, tf.gather(i, 0))\n```",
            "```python\n    return tf.gather_nd(in1, tf.argsort(in1, axis=0, stable=True))\n```",
            "```python\ndef transform(in1):\n    idx = tf.argsort(in1, axis=0, stable=True)[:, :2]  \n    idx = tf.argsort(tf.gather(in1, idx[:, 0]), axis=0, stable=True)\n    return tf.gather(in1, idx)\n```",
            "```python\n    indices = tf.argsort(in1[:, :2], axis=0, stable=True)\n    sorted_indices = tf.gather(indices[:, 0], indices[:, 1])\n    return tf.gather(in1, sorted_indices)\n```",
            "```python\nk2 = tf.argsort(in1[:,1], stable=True)\nk1 = tf.argsort(tf.gather(in1, k2)[:,0], stable=True)\nreturn tf.gather(in1, tf.gather(k2, k1))\n```",
            "```python\nindices = tf.argsort(in1, axis=0, stable=True)\nindices = tf.gather(indices, [0, 1], axis=1)\nreturn tf.gather_nd(in1, indices)\n```",
            "```python\n    idx = tf.argsort(in1, axis=0, stable=True)\n    return tf.gather(in1, idx[:,0], axis=0)\n```",
            "```python\nidx = tf.argsort(in1, axis=0, stable=True)\nreturn tf.gather(in1, tf.gather(idx[:, 0], tf.argsort(tf.gather(idx, idx[:, 0]), axis=1, stable=True)[:, 0]))\n```",
            "```python\n    idx = tf.argsort(in1[:, :2], axis=0)\n    idx = tf.gather(idx, [0, 1], axis=1)\n    return tf.gather(in1, idx)\n```",
            "```python\n    indices = tf.argsort(in1[:, :2], axis=0, stable=True)\n    return tf.gather(in1, indices[:, 0])\n```",
            "```python\ni = tf.argsort(in1, axis=0, stable=True)\nreturn tf.gather(in1, tf.gather(i[:, 1], tf.argsort(i[:, 0], stable=True)))\n```",
            "```python\nidx = tf.argsort(in1[:, :2], axis=0, stable=True)\nreturn tf.gather(in1, idx[:, 0])\n```",
            "```python\n    indices = tf.argsort(in1[:, :2], axis=0, stable=True)\n    return tf.gather(in1, indices[:, 0])\n```",
            "```python\nidx = tf.argsort(in1[:, :2], axis=0, stable=True)\nreturn tf.gather_nd(in1, idx)\n```",
            "```python\nindices = tf.argsort(in1[:, :2], axis=0, stable=True)\nreturn tf.gather(in1, tf.gather(indices, tf.range(tf.shape(in1)[0]), axis=-1))\n```",
            "```python\ns = tf.gather_nd(in1, tf.argsort(tf.gather_nd(in1, tf.argsort(in1, axis=1, stable=True)), axis=0, stable=True))\nreturn s\n```",
            "```python\n    indices = tf.argsort(in1, axis=0, stable=True)[:, 0]\n    return tf.gather(in1, tf.argsort(tf.gather(in1, indices), axis=0, stable=True)[:, 1])\n```",
            "```python\nidx = tf.argsort(in1[:, :2], axis=0, stable=True)[:, 0]\nreturn tf.gather(in1, idx[:, tf.newaxis])\n```",
            "```python\nindices = tf.argsort(in1[:, :2], axis=0, stable=True)[:, 0]\nreturn tf.gather(in1, indices)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 4735.539,
        "usage": {
            "prompt_tokens": 1541,
            "completion_tokens": 5191,
            "total_tokens": 6732
        }
    },
    {
        "name": "stackoverflow_20",
        "description": "compute argmax in each tensor and set it to 1",
        "target_program": "tf.cast(tf.one_hot(tf.argmax(in1, axis=1), 3), tf.int32)",
        "source": "https://stackoverflow.com/questions/44834739/argmax-on-a-tensor-and-ceiling-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[0.7, 0.2, 0.1], [0.4, 0.5, 0.1], [0.4, 0.4, 0.2], [0.3, 0.4, 0.3], [0.0, 0.0, 1.0]],]",
            "outputs": "[[1, 0, 0],    [0, 1, 0],    [1, 0, 0],    [0, 1, 0],    [0, 0, 1]]"
        },
        "completions": [
            "```python\n    idx = tf.argmax(in1, axis=1, output_type=tf.int32)\n    return tf.one_hot(idx, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\ndef transform(in1):\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\ndef transform(in1):\n    idx = tf.argmax(in1, axis=1)\n    return tf.one_hot(idx, in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=tf.shape(in1)[1])\n```",
            "```python\ndef transform(in1):\n    idx = tf.argmax(in1, axis=1)\n    return tf.one_hot(idx, tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\ndef transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1], dtype=tf.int32)\n```",
            "```python\ndef transform(in1):\n    idx = tf.argmax(in1, axis=1)\n    return tf.one_hot(idx, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\ndef transform(in1):\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\ndef transform(in1):\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\ndef transform(in1):\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\ndef transform(in1):\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    one_hot = tf.one_hot(indices, tf.shape(in1)[1])\n    return tf.cast(one_hot, tf.int32)\n```",
            "```python\ndef transform(in1):\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\ndef transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1])\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=tf.shape(in1)[1])\n```",
            "```python\n    argmax = tf.argmax(in1, axis=1)\n    return tf.one_hot(argmax, depth=in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    idx = tf.argmax(in1, axis=1)\n    return tf.one_hot(idx, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    idx = tf.argmax(in1, axis=1)\n    return tf.one_hot(idx, depth=in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1, output_type=tf.int32)\n    return tf.one_hot(indices, depth=in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.expand_dims(tf.argmax(in1, axis=1), 1)\n    return tf.one_hot(indices, depth=in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    idx = tf.argmax(in1, axis=1, output_type=tf.int32)\n    return tf.one_hot(idx, depth=in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1, output_type=tf.int32)\n    return tf.one_hot(indices, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, in1.shape[1], dtype=tf.int64)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    idx = tf.argmax(in1, axis=1)\n    return tf.one_hot(idx, tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    argmax_indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(argmax_indices, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    argmax_indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(argmax_indices, depth=in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, 1)\n    return tf.one_hot(indices, depth=in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    idx = tf.argmax(in1, axis=1)\n    return tf.one_hot(idx, depth=in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=tf.shape(in1)[1])\n```",
            "```python\n    idx = tf.argmax(in1, axis=1)\n    updates = tf.ones_like(idx)\n    return tf.one_hot(idx, tf.shape(in1)[1])\n```",
            "```python\n    argmax_indices = tf.argmax(in1, axis=1)\n    one_hot = tf.one_hot(argmax_indices, depth=tf.shape(in1)[1])\n    return tf.cast(one_hot, tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    idx = tf.argmax(in1, axis=1)\n    return tf.one_hot(idx, depth=in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.expand_dims(tf.argmax(in1, axis=1), 1)\n    return tf.scatter_nd(indices, tf.ones(tf.shape(indices)[0], tf.int32), tf.shape(in1))\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\ndef transform(in1):\n    argmax_indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(argmax_indices, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    argmax = tf.argmax(in1, axis=1)\n    return tf.one_hot(argmax, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    idx = tf.argmax(in1, axis=1)\n    return tf.one_hot(idx, in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    idx = tf.argmax(in1, axis=1)\n    return tf.one_hot(idx, depth=tf.shape(in1)[1])\n```",
            "```python\n    argmax_indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(argmax_indices, depth=in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    idx = tf.argmax(in1, axis=1)\n    return tf.one_hot(idx, tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    shape = tf.shape(in1)\n    updates = tf.ones(tf.shape(indices), dtype=in1.dtype)\n    return tf.scatter_nd(tf.expand_dims(indices, 1), updates, shape)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    argmax_indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(argmax_indices, depth=tf.shape(in1)[1])\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1, output_type=tf.int32)\n    return tf.one_hot(indices, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    argmax = tf.argmax(in1, axis=1)\n    return tf.one_hot(argmax, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    argmax_indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(argmax_indices, in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    argmax_indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(argmax_indices, depth=tf.shape(in1)[1])\n```",
            "```python\n    argmax_indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(argmax_indices, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    argmax_indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(argmax_indices, depth=in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    idx = tf.expand_dims(tf.argmax(in1, axis=1), 1)\n    return tf.cast(tf.equal(tf.range(tf.shape(in1)[1]), idx), tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    idx = tf.argmax(in1, axis=1)\n    return tf.one_hot(idx, in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    idx = tf.argmax(in1, axis=1)\n    return tf.one_hot(idx, depth=in1.shape[1])\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, in1.shape[1], dtype=tf.int32)\n```",
            "```python\nindices = tf.argmax(in1, axis=1, output_type=tf.int32)\nupdates = tf.ones(tf.shape(indices), dtype=tf.int32)\nshape = tf.shape(in1, out_type=tf.int32)\nreturn tf.scatter_nd(tf.expand_dims(tf.range(shape[0]), 1), updates, shape)\n```",
            "```python\n    idx = tf.argmax(in1, axis=1)\n    return tf.one_hot(idx, tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    result = tf.one_hot(indices, tf.shape(in1)[1], dtype=tf.int32)\n    return result\n```",
            "```python\n    argmax_indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(argmax_indices, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=in1.shape[1])\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    shape = tf.shape(in1)\n    updates = tf.ones(shape[0], dtype=tf.int32)\n    return tf.scatter_nd(tf.expand_dims(indices, 1), updates, shape)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    updates = tf.ones_like(indices)\n    shape = tf.shape(in1)\n    return tf.scatter_nd(tf.expand_dims(indices, 1), updates, shape)\n```",
            "```python\n    idx = tf.argmax(in1, axis=1)\n    return tf.one_hot(idx, in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1, output_type=tf.int32)\n    return tf.one_hot(indices, tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    idx = tf.argmax(in1, axis=1)\n    return tf.one_hot(idx, in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=in1.shape[1], dtype=tf.int64)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=tf.shape(in1)[1], dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(indices, depth=in1.shape[1], dtype=tf.int32)\n```",
            "```python\n    argmax_indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(argmax_indices, depth=tf.shape(in1)[1], dtype=tf.int32)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2796.0060000000003,
        "usage": {
            "prompt_tokens": 1538,
            "completion_tokens": 3754,
            "total_tokens": 5292
        }
    },
    {
        "name": "stackoverflow_21",
        "description": "gather elements in a tensor along axis 1",
        "target_program": "tf.gather(in2, in1, axis=1, batch_dims=1)",
        "source": "https://stackoverflow.com/questions/51690095/how-to-gather-element-with-index-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[2], [0], [1], [0]],[[0.2, 0.5, 0.3], [0.1, 0.3, 0.6], [0.1, 0.6, 0.3], [0.7, 0.0, 0.3]],]",
            "outputs": "[[0.3], [0.1], [0.6], [0.7]]"
        },
        "completions": [
            "```python\n    return tf.gather(in2, in1, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in2, tf.expand_dims(in1, -1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in2, tf.expand_dims(in1, axis=-1))\n```",
            "```python\n    return tf.gather_nd(in2, in1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in2, tf.expand_dims(in1, axis=-1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\nreturn tf.gather_nd(in2, tf.expand_dims(in1, axis=1))\n```",
            "```python\n    return tf.gather_nd(in2, tf.expand_dims(in1, -1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=-1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in2, tf.expand_dims(in1, -1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in2, tf.expand_dims(in1, axis=-1))\n```",
            "```python\n    return tf.gather_nd(in2, tf.expand_dims(in1, -1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in2, tf.expand_dims(in1, axis=1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, tf.squeeze(in1, axis=1), axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in2, tf.expand_dims(in1, -1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in2, tf.expand_dims(in1, axis=-1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in2, tf.expand_dims(in1, -1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in2, in1, axis=1, batch_dims=-1)\n```",
            "```python\n    return tf.gather_nd(in2, tf.expand_dims(in1, axis=-1), batch_dims=1)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2073.2560000000003,
        "usage": {
            "prompt_tokens": 1524,
            "completion_tokens": 2387,
            "total_tokens": 3911
        }
    },
    {
        "name": "stackoverflow_22",
        "description": "multiply a vector with a matrix without reshaping the vector",
        "target_program": "tf.tensordot(tf.cast(in1, tf.float32), in2, 1)",
        "source": "https://stackoverflow.com/questions/43284897/how-can-i-multiply-a-vector-and-a-matrix-in-tensorflow-without-reshaping",
        "constants": "[]",
        "examples": {
            "inputs": "[[3, 1, 10],[[0.6, 0.4], [0.5, 1.0], [3.0, 4.0]],]",
            "outputs": "[32.3, 42.2]"
        },
        "completions": [
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 0), in2)[0]\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n     return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.matmul(tf.expand_dims(in1, 0), in2)[0]\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(tf.expand_dims(in1, 1), in2), axis=0)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1[:, tf.newaxis], in2), axis=0)\n```",
            "```\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=(0, 0))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2112.428,
        "usage": {
            "prompt_tokens": 1484,
            "completion_tokens": 2275,
            "total_tokens": 3759
        }
    },
    {
        "name": "stackoverflow_23",
        "description": "place 1 at the indices in the input tensor",
        "target_program": "tf.cast(tf.reduce_max(tf.one_hot(in1, 9), axis=1), tf.int32)",
        "source": "https://stackoverflow.com/questions/53414433/tensorflow-tensor-binarization",
        "constants": "[]",
        "examples": {
            "inputs": "[[[0, 5, 2], [3, 1, 4], [5, 1, 5]],]",
            "outputs": "[[1, 0, 1, 0, 0, 1, 0, 0, 0],    [0, 1, 0, 1, 1, 0, 0, 0, 0],    [0, 1, 0, 0, 0, 1, 0, 0, 0]]"
        },
        "completions": [
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    return tf.one_hot(in1, 9, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    return tf.one_hot(in1, 9, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(in1, depth=9)\n```",
            "```python\n    return tf.one_hot(in1, 9, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(in1, depth=9)\n```",
            "```python\n    return tf.one_hot(in1, depth=9)\n```",
            "```python\n    return tf.one_hot(in1, 9, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(in1, depth=9)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    return tf.one_hot(in1, depth=9)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    return tf.one_hot(in1, 9, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    return tf.one_hot(in1, 9, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(in1, depth=9)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    return tf.one_hot(in1, depth=9)\n```",
            "```python\n    return tf.one_hot(in1, depth=9)\n```",
            "```python\n    return tf.one_hot(in1, depth=9)\n```",
            "```python\n    return tf.one_hot(in1, 9, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    return tf.cast(tf.one_hot(in1, depth=9), tf.int32)\n```",
            "```python\n    return tf.one_hot(in1, 9, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    return tf.one_hot(in1, depth=9, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(in1, depth=9, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(in1, 9, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(in1, 9, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(in1, depth=9)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    return tf.reduce_sum(tf.one_hot(in1, 9), axis=1)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```\n    return tf.one_hot(in1, 9, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(in1, 9, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(in1, 9, dtype=tf.int32)\n```",
            "```python\n    return tf.reduce_sum(tf.one_hot(in1, depth=9), axis=1)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    return tf.one_hot(in1, depth=9)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    return tf.one_hot(in1, depth=9)\n```",
            "```python\n    return tf.one_hot(in1, 9, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(in1, depth=9)\n```",
            "```python\n    return tf.one_hot(in1, depth=9)\n```",
            "```python\n    return tf.one_hot(in1, 9, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(in1, depth=9, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(in1, 9, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(in1, 9, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(in1, 9, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    return tf.one_hot(in1, depth=9)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    return tf.reduce_sum(tf.one_hot(in1, depth=9), axis=1)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```\n  return tf.one_hot(in1, depth=9)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    return tf.one_hot(in1, 9, dtype=tf.int32)\n```",
            "```\n    return tf.one_hot(in1, depth=9)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    return tf.one_hot(in1, 9, tf.constant(1), tf.constant(0))\n```",
            "```python\n    return tf.one_hot(in1, depth=9)\n```",
            "```python\n    return tf.one_hot(in1, depth=9)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    return tf.one_hot(in1, depth=9)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    return tf.one_hot(in1, depth=9)\n```",
            "```python\n    return tf.one_hot(in1, depth=9)\n```",
            "```python\n    return tf.one_hot(in1, depth=9)\n```",
            "```python\n    return tf.one_hot(in1, 9, tf.constant(1), tf.constant(0))\n```",
            "```python\n    return tf.one_hot(in1, 9, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(in1, depth=9)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    depth = tf.reduce_max(in1) + 1\n    return tf.one_hot(in1, depth)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    return tf.one_hot(in1, 9, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(in1, depth=9)\n```",
            "```python\n    return tf.one_hot(in1, 9, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    depth = tf.reduce_max(in1) + 1\n    return tf.one_hot(in1, depth)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    return tf.one_hot(in1, 9, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(in1, 9, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(in1, 9)\n```",
            "```python\n    return tf.one_hot(in1, 9, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(in1, depth=9, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(in1, 9, dtype=tf.int32)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 3052.727,
        "usage": {
            "prompt_tokens": 1515,
            "completion_tokens": 1750,
            "total_tokens": 3265
        }
    },
    {
        "name": "stackoverflow_24",
        "description": "(\\'like tf.divide(), but when dividing by 0, return the numerator\\')",
        "target_program": "tf.where(tf.cast(in2, tf.bool), x=tf.divide(in1, in2), y=in1)",
        "source": "https://stackoverflow.com/questions/53643339/tensorflow-overriding-tf-divide-to-return-the-numerator-when-dividing-by-0",
        "constants": "[0]",
        "examples": {
            "inputs": "[[3.0, 1.0, 4.0, 5.0, 2.0, 8.0, -6.0, -7.0],[0.5, 0.0, -2.0, 0.0, 1.0, -1.0, 0.0, 2.0],]",
            "outputs": "[6.0, 1.0, -2.0, 5.0, 2.0, -8.0, -6.0, -3.5]"
        },
        "completions": [
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(in2 == 0, in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.not_equal(in2, 0), tf.divide(in1, in2), in1)\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0.), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\nreturn tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\nreturn tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.math.divide_no_nan(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.not_equal(in2, 0), tf.divide(in1, in2), in1)\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0.0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.not_equal(in2, 0), tf.divide(in1, in2), in1)\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n```",
            "```python\n    return tf.where(tf.not_equal(in2, 0), tf.divide(in1, in2), in1)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2281.602,
        "usage": {
            "prompt_tokens": 1544,
            "completion_tokens": 2704,
            "total_tokens": 4248
        }
    },
    {
        "name": "stackoverflow_25",
        "description": "copy the tensor tf.eye(3), 4 times",
        "target_program": "tf.tile(tf.eye(in1), (in2, 1))",
        "source": "https://stackoverflow.com/questions/53602691/duplicate-a-tensor-n-times",
        "constants": "[]",
        "examples": {
            "inputs": "[3,4,]",
            "outputs": "[[1.0, 0.0, 0.0],    [0.0, 1.0, 0.0],    [0.0, 0.0, 1.0],    [1.0, 0.0, 0.0],    [0.0, 1.0, 0.0],    [0.0, 0.0, 1.0],    [1.0, 0.0, 0.0],    [0.0, 1.0, 0.0],    [0.0, 0.0, 1.0],    [1.0, 0.0, 0.0],    [0.0, 1.0, 0.0],    [0.0, 0.0, 1.0]]"
        },
        "completions": [
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.repeat(tf.eye(in1), in2, axis=0)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```\ndef transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\ndef transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.repeat(tf.eye(in1), in2, axis=0)\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\nreturn tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\nreturn tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.repeat(tf.eye(in1), in2, axis=0)\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.repeat(tf.eye(in1), in2, axis=0)\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```",
            "```python\n    return tf.tile(tf.eye(in1), [in2, 1])\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2311.4150000000004,
        "usage": {
            "prompt_tokens": 1553,
            "completion_tokens": 2085,
            "total_tokens": 3638
        }
    },
    {
        "name": "stackoverflow_26",
        "description": "reduction operation for multiple dimensions simultaneously",
        "target_program": "tf.reduce_sum(tf.reduce_sum(in1, axis=1), axis=1)",
        "source": "https://stackoverflow.com/questions/54294780/how-to-perform-reduce-op-on-multiple-dimensions-at-once",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[3, 4], [1, 2]], [[5, -2], [-10, 3]], [[10, 20], [-4, 7]]]]",
            "outputs": "[10, -4, 33]"
        },
        "completions": [
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=(1, 2))\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=(1, 2))\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\nreturn tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=(1, 2))\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, [1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=(1, 2))\n```",
            "```python\n    return tf.reduce_sum(in1, [1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1,2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```\nreturn tf.reduce_sum(in1, axis=[1,2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=(1, 2))\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, (3, 4)), axis=1)\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(tf.reduce_sum(in1, axis=1), axis=1)\n```",
            "```\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=(1, 2))\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```",
            "```python\n    return tf.reduce_sum(in1, axis=[1, 2])\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 4822.8730000000005,
        "usage": {
            "prompt_tokens": 1489,
            "completion_tokens": 1901,
            "total_tokens": 3390
        }
    },
    {
        "name": "stackoverflow_27",
        "description": "boolean tensor with 1 at the indices in the input tensor",
        "target_program": "tf.cast(tf.reduce_max(tf.one_hot(in1, in2), axis=0), tf.int32)",
        "source": "https://stackoverflow.com/questions/54225704/how-do-i-get-a-tensor-representing-the-on-positions-in-the-original-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 3, 5, 6],8,]",
            "outputs": "[1, 0, 0, 1, 0, 1, 1, 0]"
        },
        "completions": [
            "```python\n    return tf.reduce_any(tf.equal(tf.range(in2), tf.expand_dims(in1, 0)), axis=0)\n```",
            "```python\n    return tf.sequence_mask(in1 + 1, in2, dtype=tf.int32)\n```",
            "```python\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)\n```",
            "```python\n    return tf.cast(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), tf.int32)\n```",
            "```python\n    return tf.reduce_any(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), axis=0)\n```",
            "```\n    return tf.cast(tf.sequence_mask(in1, in2), tf.int32)[0]\n```",
            "```python\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)\n```",
            "```python\n    return tf.squeeze(tf.one_hot(in1, in2, dtype=tf.int32), axis=0)\n```",
            "```python\n    return tf.cast(tf.reduce_any(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), axis=0), tf.int32)\n```",
            "```python\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)\n```",
            "```python\n    return tf.reduce_any(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), axis=0)\n```",
            "```python\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)\n```",
            "```python\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1 + 1, in2, dtype=tf.int32)[..., -1]\n```",
            "```python\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1+1, in2, dtype=tf.int32)[:, -1]\n```",
            "```\n    return tf.reduce_sum(tf.one_hot(in1, in2), axis=0)\n```",
            "```python\n    return tf.cast(tf.reduce_any(tf.equal(tf.range(in2), tf.expand_dims(in1, 0)), axis=1), tf.int32)\n```",
            "```\n    mask = tf.zeros(in2, dtype=tf.int32)\n    updates = tf.ones_like(in1, dtype=tf.int32)\n    return tf.scatter_nd(tf.expand_dims(in1, 1), updates, [in2])\n```",
            "```python\n    return tf.sequence_mask(in1+1, in2, tf.int32)[:, -1]\n```",
            "```python\n    return tf.sequence_mask(in1 + 1, in2, tf.int32)[:, -1]\n```",
            "```python\n    return tf.squeeze(tf.gather(tf.sequence_mask(in2, in2), tf.expand_dims(in1, 1)), axis=1)\n```",
            "```python\n    return tf.squeeze(tf.one_hot(in1, in2), axis=0)\n```",
            "```python\n    return tf.reduce_any(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), axis=0)\n```",
            "```python\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1 + 1, in2, dtype=tf.int32)[-1]\n```",
            "```\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1 + 1, in2, dtype=tf.int32)\n```",
            "```python\n    return tf.reduce_any(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), axis=0)\n```",
            "```python\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)\n```",
            "```python\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)\n```",
            "```\n    return tf.sequence_mask(in1 + 1, maxlen=in2, dtype=tf.int32)[:, -1]\n```",
            "```python\n    return tf.squeeze(tf.one_hot(in1, in2), axis=0)\n```",
            "```python\n    return tf.sequence_mask(in1 + 1, in2, dtype=tf.int32)\n```",
            "```python\n    return tf.reduce_any(tf.one_hot(in1, in2), axis=0)\n```",
            "```python\n    return tf.sequence_mask(in1 + 1, in2, tf.int32)[:, -1]\n```",
            "```python\n    return tf.sequence_mask(in1+1, in2, dtype=tf.int32)\n```",
            "```python\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)\n```",
            "```python\n    return tf.squeeze(tf.sequence_mask(in1 + 1, in2, tf.int32)[:, -1:])\n```",
            "```\n    return tf.reduce_any(tf.equal(in1[:, None], tf.range(in2)), axis=0)\n```",
            "```python\n    return tf.reduce_any(tf.equal(tf.expand_dims(tf.range(in2), 1), in1), axis=1)\n```",
            "```python\n    return tf.reduce_any(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), axis=0)\n```",
            "```python\n    return tf.reduce_any(tf.equal(tf.range(in2), tf.expand_dims(in1, 0)), axis=1)\n```",
            "```python\n    return tf.squeeze(tf.sequence_mask(in1 + 1, in2, tf.int32)[:, -1:])\n```",
            "```python\n    return tf.reduce_any(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), axis=0)\n```",
            "```python\n    return tf.reduce_any(tf.equal(tf.expand_dims(tf.range(in2), 0), tf.expand_dims(in1, 1)), axis=0)\n```",
            "```python\n    return tf.squeeze(tf.gather_nd(tf.eye(in2), tf.expand_dims(in1, 1)))\n```",
            "```python\n    return tf.squeeze(tf.gather(tf.sequence_mask(in2), in1), axis=0)\n```",
            "```python\n    return tf.reduce_any(tf.one_hot(in1, in2), axis=0)\n```",
            "```python\n    mask = tf.zeros(in2, dtype=tf.int32)\n    updates = tf.ones_like(in1)\n    return tf.tensor_scatter_nd_update(mask, tf.expand_dims(in1, axis=1), updates)\n```",
            "```python\n    return tf.reduce_any(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), axis=0)\n```",
            "```python\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)\n```",
            "```python\n    mask = tf.sequence_mask(in1 + 1, in2)\n    return tf.cast(tf.reduce_sum(mask, axis=0), tf.bool)\n```",
            "```python\n    return tf.reduce_any(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.one_hot(in1, in2), axis=0)\n```",
            "```python\n    return tf.reduce_any(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), axis=0)\n```",
            "```python\n    return tf.cast(tf.reduce_any(tf.equal(tf.range(in2), in1[:,None]), axis=0), tf.int32)\n```",
            "```\n    return tf.sequence_mask(in1 + 1, in2, dtype=tf.int32)[:, -1]\n```",
            "```python\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)\n```",
            "```python\n    return tf.squeeze(tf.sequence_mask(in1+1, in2, dtype=tf.int32), axis=0)\n```",
            "```python\n    return tf.squeeze(tf.one_hot(in1, in2, dtype=tf.int32), axis=0)\n```",
            "```python\n    return tf.sequence_mask(in1 + 1, in2, dtype=tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1 + 1, in2, tf.bool)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1+1, in2), tf.int32)[:, -1]\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1 + 1, in2), tf.int32)[:, -1]\n```",
            "```python\n    return tf.reduce_any(tf.equal(tf.expand_dims(tf.range(in2), 1), in1), axis=1)\n```",
            "```python\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1 + 1, in2, dtype=tf.int32)[..., -1]\n```",
            "```python\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)\n```",
            "```\n    return tf.reduce_any(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), axis=0)\n```",
            "```python\n    return tf.cast(tf.reduce_any(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), axis=0), tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1+1, in2, dtype=tf.int32)[:, -1]\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1 + 1, in2), tf.int32)[-1]\n```",
            "```python\n    return tf.squeeze(tf.one_hot(in1, in2), axis=0)\n```",
            "```python\n    return tf.sequence_mask(in1 + 1, in2, dtype=tf.int32)[-1]\n```",
            "```python\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)\n```",
            "```python\n    return tf.squeeze(tf.one_hot(in1, in2), axis=0)\n```",
            "```python\n    return tf.sequence_mask(in1+1, in2, tf.int32)[:, -1]\n```",
            "def transform(in1, in2):\n    return tf.reduce_any(tf.equal(tf.expand_dims(tf.range(in2), 1), in1), axis=1)",
            "```python\n    return tf.reduce_any(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), axis=0)\n```",
            "```python\n    return tf.reduce_any(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), axis=0)\n```",
            "```python\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)\n```",
            "```python\n    return tf.reduce_any(tf.equal(tf.range(in2), tf.expand_dims(in1, axis=1)), axis=0)\n```",
            "```python\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)\n```",
            "```\n    return tf.cast(tf.reduce_any(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), axis=0), tf.int32)\n```",
            "```python\n    return tf.squeeze(tf.one_hot(in1, in2, on_value=1, off_value=0), axis=-2)\n```",
            "```python\n    return tf.cast(tf.reduce_any(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), axis=0), tf.int32)\n```",
            "```python\n    return tf.reduce_any(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.one_hot(in1, in2), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.one_hot(in1, in2), axis=0)\n```",
            "```python\n    return tf.sque math.logical_or(tf.one_hot(in1, in2), axis=0))\n```",
            "```python\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tf.zeros(in2), tf.expand_dims(in1, 1), tf.ones(tf.shape(in1)))\n```",
            "```python\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)\n```",
            "```python\n    return tf.squeeze(tf.gather(tf.eye(in2, dtype=tf.int32), in1), axis=0)\n```",
            "```python\n    return tf.reduce_any(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), axis=0)\n```",
            "```python\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)\n```",
            "```python\n    return tf.cast(tf.reduce_sum(tf.one_hot(in1, in2), axis=0), tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1 + 1, maxlen=in2, dtype=tf.int32)[-1]\n```",
            "```python\n    return tf.reduce_any(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), axis=0)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2188.595,
        "usage": {
            "prompt_tokens": 1469,
            "completion_tokens": 2785,
            "total_tokens": 4254
        }
    },
    {
        "name": "stackoverflow_28",
        "description": "extract columns from a 3D tensor given column indices",
        "target_program": "tf.squeeze(tf.gather(in1, tf.expand_dims(in2, 1), axis=-1, batch_dims=1))",
        "source": "https://stackoverflow.com/questions/54274074/selecting-columns-from-3d-tensor-according-to-a-1d-tensor-of-indices-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[5, 3],  [0, 2]], [[7, 4],  [5, 1]], [[10, 20],  [15, 30]], [[11, 16],  [14, 12]], [[-2, -7],  [-4, 6]]],[1, 0, 1, 1, 0],]",
            "outputs": "[[3, 2], [7, 5], [20, 30], [16, 12], [-2, -4]]"
        },
        "completions": [
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), axis=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=2, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=2, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=2)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=-1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, tf.range(tf.shape(in1)[0]), axis=1, batch_dims=1)[:, in2]\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=2, batch_dims=1)\n```",
            "```python\n    indices = tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1)\n    return tf.gather_nd(in1, indices)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=1), batch_dims=1)\n```",
            "```python\n    indices = tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1)\n    return tf.gather_nd(in1, indices)\n```",
            "```python\n    return tf.gather(in1, in2, axis=2, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=-1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=-1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=2, batch_dims=2)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=2, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)\n```",
            "```python\n    idx = tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1)\n    return tf.gather_nd(in1, idx)\n```",
            "```python\n    return tf.gather(in1, in2, axis=2, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(tf.range(tf.shape(in1)[0]), 1) * tf.shape(in1)[1] + tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=2, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=0)\n```",
            "```python\n    idx = tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1)\n    return tf.gather_nd(in1, idx)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(tf.range(tf.shape(in1)[0]), 1) * tf.shape(in1)[1] + tf.expand_dims(in2, 1))\n```",
            "```python\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\n     return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=2, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather(in1, in2, axis=2, batch_dims=1)\n```",
            "```python\n    idx = tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1)\n    return tf.gather_nd(in1, idx)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.transpose(tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1), [0, 1])\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=0)\n```",
            "```python\n    return tf.gather(in1, in2, axis=2, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=-1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather(in1, in2, axis=2, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=2, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=-1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n```",
            "```python\n    idx = tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1)\n    return tf.gather_nd(in1, idx)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=2, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=2, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=2, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=2)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=2, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, -1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2632.234,
        "usage": {
            "prompt_tokens": 1547,
            "completion_tokens": 2669,
            "total_tokens": 4216
        }
    },
    {
        "name": "stackoverflow_29",
        "description": "place continuous values into buckets given bucket boundaries",
        "target_program": "tf.searchsorted(in1, in2, side='left')",
        "source": "https://stackoverflow.com/questions/54155085/bucketing-continous-value-tensors-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[-1.0, -0.8, -0.6, -0.4, -0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0],[0.1, -10, -0.1, 1.1, 0.41],]",
            "outputs": "[6, 0, 5, 11, 8]"
        },
        "completions": [
            "```\ndef transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\ndef transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='left')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```\ndef transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\ndef transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\ndef transform(boundaries, values):\n    return tf.searchsorted(boundaries, values, side='right')\n```",
            "```python\ndef transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\ndef transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\ndef transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2)\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\ndef transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\ndef transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "```python\n    return tf.searchsorted(in1, in2, side='left')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\ndef transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\ndef transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2)\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\ndef transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "```python\ndef transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\ndef transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\ndef transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='left')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='left')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```\ndef transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\ndef transform(in1, in2):\n    return tf.searchsorted(in1, in2)\n```",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\ndef transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\ndef transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\ndef transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='left')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\ndef transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\ndef transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    indices = tf.searchsorted(in1, in2, side='right')\n    return indices.tolist()\n```",
            "```python\n    in1 = tf.expand_dims(in1, 0)\n    return tf.squeeze(tf.searchsorted(in1, in2, side='right'))\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\ndef transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='right')\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 1894.911,
        "usage": {
            "prompt_tokens": 1527,
            "completion_tokens": 2115,
            "total_tokens": 3642
        }
    },
    {
        "name": "stackoverflow_30",
        "description": "compute Euclidean distance between two tensors",
        "target_program": "tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))",
        "source": "https://stackoverflow.com/questions/54147780/tensorflow-how-to-calculate-the-euclidean-distance-between-two-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1., 2.], [3., 4.], [5., 6.]],[[9., 4.], [8., 5.], [7., 6.]],]",
            "outputs": "[[math.sqrt(68), math.sqrt(58), math.sqrt(52)],    [math.sqrt(36), math.sqrt(26), math.sqrt(20)],    [math.sqrt(20), math.sqrt(10), math.sqrt(4)]]"
        },
        "completions": [
            "```python\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n```",
            "```python\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))\n```",
            "```python\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2))\n```",
            "```python\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n```",
            "```python\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n```",
            "```python\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(diff ** 2, axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    dist = tf.sqrt(tf.reduce_sum(diff * diff, axis=2))\n    return dist\n```",
            "```python\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n```",
            "```python\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(diff**2, axis=2))\n```",
            "```python\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))\n```",
            "```python\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2))\n```",
            "```python\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n```",
            "```python\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    dist = tf.sqrt(tf.reduce_sum(diff ** 2, axis=2))\n    return dist\n```",
            "```python\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n```",
            "```python\n    return tf.sqrt(tf.add_n([tf.square(tf.expand_dims(in1, 1) - in2)]))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    sq_diff = tf.math.squared_difference(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0)) \n    return tf.sqrt(tf.reduce_sum(sq_diff, axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.add_n([tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0))]))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    sq_diff = tf.square(diff)\n    sum_sq_diff = tf.reduce_sum(sq_diff, axis=2)\n    return tf.sqrt(sum_sq_diff)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    sq_diff = tf.square(diff)\n    return tf.sqrt(tf.reduce_sum(sq_diff, axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.expand_dims(tf.reduce_sum(tf.square(in1), axis=1), 1) +\n                   tf.reduce_sum(tf.square(in2), axis=1) -\n                   2 * tf.matmul(in1, tf.transpose(in2)))\n```",
            "```python\ndef transform(in1, in2):\n    d = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(d), axis=-1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(diff**2, axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    sq_diff = tf.square(diff)\n    sum_sq_diff = tf.reduce_sum(sq_diff, axis=-1)\n    return tf.sqrt(sum_sq_diff)\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    dif = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(dif), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.expand_dims(tf.reduce_sum(tf.square(in1), axis=1), 1) + tf.reduce_sum(tf.square(in2), axis=1) - 2 * tf.matmul(in1, tf.transpose(in2)))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - in2\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=-1))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - in2\n    sq_diff = tf.square(diff)\n    sum_sq_diff = tf.reduce_sum(sq_diff, axis=2)\n    return tf.sqrt(sum_sq_diff)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=-1))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    squared_diff = tf.square(diff)\n    return tf.sqrt(tf.reduce_sum(squared_diff, axis=-1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))\n```",
            "```python\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    dist_squared = tf.reduce_sum(diff ** 2, axis=-1)\n    return tf.sqrt(dist_squared)\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=-1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(diff**2, axis=-1))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=-1))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(diff ** 2, axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(diff ** 2, axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    squared_diff = tf.square(diff)\n    sum_squared_diff = tf.reduce_sum(squared_diff, 2)\n    return tf.sqrt(sum_squared_diff)\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(diff**2, axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n```",
            "```\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - in2\n    sq_diff = tf.square(diff)\n    sum_sq_diff = tf.reduce_sum(sq_diff, axis=-1)\n    return tf.sqrt(sum_sq_diff)\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(\n        tf.reduce_sum(\n            tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)),\n            axis=2\n        )\n    )\n```",
            "```python\n    in1_squared = tf.reduce_sum(tf.square(in1), axis=1, keepdims=True)\n    in2_squared = tf.reduce_sum(tf.square(in2), axis=1, keepdims=True)\n    dot_product = tf.tensordot(in1, in2, axes=[[1], [1]])\n    distances = tf.sqrt(tf.transpose(in1_squared) + in2_squared - 2 * dot_product)\n    return distances\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.add_n([tf.square(tf.expand_dims(in1, 1) - in2)]))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    diff = in1[:, tf.newaxis] - in2\n    return tf.sqrt(tf.reduce_sum(diff ** 2, axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    d = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(d), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    a2 = tf.reduce_sum(tf.square(in1), axis=1, keepdims=True)\n    b2 = tf.reduce_sum(tf.square(in2), axis=1)\n    ab = tf.tensordot(in1, tf.transpose(in2), axes=1)\n    return tf.sqrt(a2 - 2 * ab + b2)\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(diff ** 2, axis=-1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n```",
            "```python\n    return tf.sqrt(tf.expand_dims(tf.reduce_sum(tf.square(in1), axis=1), 1) + tf.transpose(tf.expand_dims(tf.reduce_sum(tf.square(in2), axis=1), 1)) - 2 * tf.matmul(in1, tf.transpose(in2)))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    dist = tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))\n    return dist\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=-1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    sq_diff = tf.square(diff)\n    sum_sq_diff = tf.reduce_sum(sq_diff, axis=2)\n    return tf.sqrt(sum_sq_diff)\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, axis=1) - tf.expand_dims(in2, axis=0)\n    sq_diff = tf.square(diff)\n    sum_sq_diff = tf.reduce_sum(sq_diff, axis=-1)\n    return tf.sqrt(sum_sq_diff)\n```",
            "```python\ndef transform(in1, in2):\n    expanded_in1 = tf.expand_dims(in1, 1)\n    expanded_in2 = tf.expand_dims(in2, 0)\n    distances = tf.sqrt(tf.reduce_sum(tf.square(expanded_in1 - expanded_in2), axis=2))\n    return distances\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - in2\n    squared_diff = tf.square(diff)\n    summed_squared_diff = tf.reduce_sum(squared_diff, axis=2)\n    return tf.sqrt(summed_squared_diff)\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    sq_diff = tf.square(diff)\n    return tf.sqrt(tf.reduce_sum(sq_diff, axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))\n```",
            "```python\n    diffs = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diffs), axis=-1))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    dist_squared = tf.reduce_sum(tf.square(diff), axis=2)\n    return tf.sqrt(dist_squared)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.add_n([tf.square(tf.expand_dims(in1, 1) - in2)]))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2))\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 3910.643,
        "usage": {
            "prompt_tokens": 1529,
            "completion_tokens": 4762,
            "total_tokens": 6291
        }
    },
    {
        "name": "stackoverflow_31",
        "description": "squared error between two tensors, one being a sparse tensor",
        "target_program": "tf.reduce_sum(tf.square(tf.subtract(in2, tf.sparse.to_dense(in1))))",
        "source": "https://stackoverflow.com/questions/45032668/tensorflow-how-to-compute-the-square-error-between-a-tensor-and-a-sparse-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "tf.SparseTensor(indices=[[0, 0], [0, 1], [1, 1]], values=[1.0, 1.5, -2.0], dense_shape=[2, 2]), [[3.0, 1.0], [0.2, -1.0]],",
            "outputs": "5.29"
        },
        "completions": [
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    error = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(error)\n```",
            "```python\n    sp_dense = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(sp_dense, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    sp_dense = tf.sparse.to_dense(in1, default_value=0.0)\n    return tf.reduce_sum(tf.math.squared_difference(sp_dense, in2))\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    diff = tf.subtract(dense_in1, in2)\n    squared_diff = tf.square(diff)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    in1_dense = tf.sparse.to_dense(in1, default_value=0)\n    squared_diff = tf.math.squared_difference(in1_dense, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1, 0.0), in2))\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    error = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(error)\n```",
            "```python\n    sp_dense = tf.sparse.to_dense(in1, default_value=0.)\n    squared_errors = tf.math.squared_difference(sp_dense, in2)\n    return tf.reduce_sum(squared_errors)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    return tf.reduce_sum(tf.math.squared_difference(dense_in1, in2))\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    return tf.reduce_sum(tf.square(tf.subtract(dense_in1, in2)))\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    sp_dense = tf.sparse.to_dense(in1, default_value=0)\n    squared_diff = tf.math.squared_difference(sp_dense, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    squared_diff = tf.square(tf.subtract(dense_in1, in2))\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0)\n    return tf.reduce_sum(tf.math.squared_difference(dense_in1, in2))\n```",
            "```python\n    d1 = tf.sparse.to_dense(in1)\n    se = tf.math.squared_difference(d1, in2)\n    return tf.reduce_sum(se)\n```",
            "```python\n    dense = tf.sparse.to_dense(in1)\n    return tf.reduce_sum(tf.math.squared_difference(dense, in2))\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    squared_error = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_error)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    sp_dense = tf.sparse.to_dense(in1, default_value=0)\n    return tf.reduce_sum(tf.math.squared_difference(sp_dense, in2))\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense1 = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(dense1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    return tf.reduce_sum(tf.sparse.to_dense(in1) - in2) ** 2\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    sp_dense = tf.sparse.to_dense(in1)\n    sq_diff = tf.math.squared_difference(sp_dense, in2)\n    return tf.reduce_sum(sq_diff)\n```",
            "```python\n    sparse_dense = tf.sparse.to_dense(in1, default_value=0.0)\n    squared_diff = tf.math.squared_difference(sparse_dense, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    sp_dense = tf.sparse.to_dense(in1, default_value=0.0)\n    return tf.reduce_sum(tf.math.squared_difference(sp_dense, in2))\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    return tf.reduce_sum(tf.math.squared_difference(dense_in1, in2))\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    errors = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(errors)\n```",
            "```python\n    sp_dense = tf.sparse.to_dense(in1, default_value=0)\n    squared_diff = tf.math.squared_difference(sp_dense, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    sq_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(sq_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    sparse_in1 = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(sparse_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    sq_diff = tf.square(tf.subtract(dense_in1, in2))\n    return tf.reduce_sum(sq_diff)\n```",
            "```python\n    sparse_dense = tf.sparse.to_dense(in1, default_value=0.0)\n    squared_error = tf.math.squared_difference(sparse_dense, in2)\n    return tf.reduce_sum(squared_error)\n```",
            "```python\n    sparse_dense = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(sparse_dense, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    sp_dense = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(sp_dense, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    return tf.reduce_sum(tf.square(tf.sparse.to_dense(in1) - in2))\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    squared_difference = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_difference)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, 0.0)\n    return tf.reduce_sum(tf.math.squared_difference(dense_in1, in2))\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    return tf.reduce_sum(tf.square(tf.subtract(dense_in1, in2)))\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    return tf.reduce_sum(tf.math.squared_difference(dense_in1, in2))\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    return tf.reduce_sum(tf.math.squared_difference(dense_in1, in2))\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    return tf.reduce_sum(tf.math.squared_difference(dense_in1, in2))\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    squared_diff = tf.reduce_sum(tf.math.squared_difference(dense_in1, in2))\n    return squared_diff\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, 0.0)\n    diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    sq_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(sq_diff)\n```",
            "```python\n    sp_dense = tf.sparse.to_dense(in1, default_value=0.0)\n    squared_diff = tf.math.squared_difference(sp_dense, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense1 = tf.sparse.to_dense(in1, default_value=0.0)\n    squared_diff = tf.math.squared_difference(dense1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    return tf.reduce_sum(tf.square(tf.subtract(dense_in1, in2)))\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    sp_dense = tf.sparse.to_dense(in1)\n    return tf.reduce_sum(tf.square(tf.subtract(sp_dense, in2)))\n```",
            "```python\n    in1_dense = tf.sparse.to_dense(in1, default_value=0.0)\n    squared_diff = tf.math.squared_difference(in1_dense, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense1 = tf.sparse.to_dense(in1, default_value=0.0)\n    return tf.reduce_sum(tf.math.squared_difference(dense1, in2))\n```",
            "```python\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1, 0), in2))\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    return tf.reduce_sum(tf.math.squared_difference(dense_in1, in2))\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    sp_dense = tf.sparse.to_dense(in1, default_value=0.0)\n    error = tf.math.squared_difference(sp_dense, in2)\n    return tf.reduce_sum(error)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    return tf.reduce_sum(tf.square(tf.subtract(dense_in1, in2)))\n```",
            "```python\n    sp_dense = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(sp_dense, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    return tf.reduce_sum(tf.math.squared_difference(dense_in1, in2))\n```",
            "```python\n    return tf.reduce_sum(tf.square(tf.sparse.to_dense(in1) - in2))\n```",
            "```python\n    return tf.reduce_sum(tf.squared_difference(tf.sparse.to_dense(in1, 0.0), in2))\n```",
            "```python\n    in1_dense = tf.sparse.to_dense(in1, default_value=0.0)\n    return tf.reduce_sum(tf.square(tf.subtract(in1_dense, in2)))\n```",
            "```python\n    dense_tensor = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(dense_tensor, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense1 = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(dense1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    return tf.reduce_sum(tf.square(tf.subtract(dense_in1, in2)))\n```",
            "```python\n    sp_dense = tf.sparse.to_dense(in1, default_value=0.0)\n    return tf.reduce_sum(tf.math.squared_difference(sp_dense, in2))\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    return tf.reduce_sum(tf.math.squared_difference(dense_in1, in2))\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    return tf.reduce_sum(tf.math.squared_difference(dense_in1, in2))\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    return tf.reduce_sum(tf.math.squared_difference(dense_in1, in2))\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    return tf.reduce_sum(tf.math.squared_difference(dense_in1, in2))\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    return tf.reduce_sum(tf.math.squared_difference(dense_in1, in2))\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    error = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(error)\n```",
            "```python\n    dense = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(dense, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(squared_diff)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1)\n    error = tf.math.squared_difference(dense_in1, in2)\n    return tf.reduce_sum(error)\n```",
            "```python\n    dense_in1 = tf.sparse.to_dense(in1, default_value=0.0)\n    return tf.reduce_sum(tf.square(tf.subtract(dense_in1, in2)))\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 3071.971,
        "usage": {
            "prompt_tokens": 1738,
            "completion_tokens": 4164,
            "total_tokens": 5902
        }
    },
    {
        "name": "stackoverflow_32",
        "description": "weighted sum across rows, where the column index is the weight",
        "target_program": "tf.tensordot(in1, tf.cast(tf.range(4), tf.float32), 1)",
        "source": "https://stackoverflow.com/questions/48659449/how-to-compute-the-weighted-sum-of-a-tensor-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[0.1, 0.6, 0.2, 0.1], [0.3, 0.1, 0.4, 0.2], [0.2, 0.1, 0.2, 0.5]],]",
            "outputs": "[1.3, 1.5, 2.0]"
        },
        "completions": [
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=in1.dtype), axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\n    indices = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(tf.multiply(in1, indices), axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(in1 * weights, axis=1)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=in1.dtype), axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\n    indices = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(tf.multiply(in1, indices), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=in1.dtype)), axis=1)\n```",
            "```python\n    indices = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(in1 * indices, axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=in1.dtype)), axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=in1.dtype), axis=1)\n```",
            "```python\n    indices = tf.range(tf.shape(in1)[1])\n    return tf.reduce_sum(tf.multiply(in1, indices), axis=1)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=in1.dtype), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=in1.dtype)), axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1])\n    return tf.reduce_sum(in1 * weights, axis=1)\n```",
            "```python\n    indices = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(in1 * indices, axis=1)\n```",
            "```python\ndef transform(in1):\n    indices = tf.constant([0, 1, 2, 3], dtype=tf.float32)\n    weighted = tf.multiply(in1, indices)\n    return tf.reduce_sum(weighted, axis=1)\n```",
            "```python\n    weights = tf.constant([0, 1, 2, 3], dtype=tf.float32)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=tf.float32)), axis=1)\n```",
            "```python\n    indices = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(tf.multiply(in1, indices), axis=1)\n```",
            "```python\ndef transform(in1):\n    indices = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(in1 * indices, axis=1)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=in1.dtype), axis=1)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=in1.dtype), axis=1)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=in1.dtype), axis=1)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=tf.float32), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=in1.dtype)), axis=1)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=in1.dtype), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=tf.float32)), axis=1)\n```",
            "```python\n    indices = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(tf.multiply(in1, indices), axis=1)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=tf.float32), axis=1)\n```",
            "```python\ndef transform(in1):\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=in1.dtype), axis=1)\n```",
            "```python\n    indices = tf.range(tf.shape(in1)[1])\n    return tf.reduce_sum(tf.multiply(in1, indices), axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\ndef transform(in1):\n    indices = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(tf.multiply(in1, indices), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=in1.dtype)), axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=in1.dtype), axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(in1 * weights, axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1])), axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(in1 * weights, axis=1)\n```",
            "```python\n    cols = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(tf.multiply(in1, cols), axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\n    indices = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(tf.multiply(in1, indices), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=tf.float32)), axis=1)\n```",
            "```python\ndef transform(in1):\n    weights = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=in1.dtype)), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=in1.dtype)), axis=1)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1]), axis=1)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=in1.dtype), axis=1)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=in1.dtype), axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=in1.dtype), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=tf.float32)), axis=1)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=tf.float32), axis=1)\n```",
            "```python\n    weights = tf.constant([0, 1, 2, 3], dtype=in1.dtype)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(in1 * weights, axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    weighted_sum = tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n    return weighted_sum\n```",
            "```\ndef transform(in1):\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(in1 * weights, axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(in1 * weights, axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```\ndef transform(in1):\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=in1.dtype)), axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(in1 * weights, axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\ndef transform(in1):\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=in1.dtype), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=tf.float32)), axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=in1.dtype), axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\n    weights = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=tf.float32), axis=1)\n```",
            "```python\ndef transform(in1):\n    indices = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(in1 * indices, axis=1)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1]), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=in1.dtype)), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=in1.dtype)), axis=1)\n```",
            "```python\n    weights = tf.expand_dims(tf.range(tf.shape(in1)[1], dtype=tf.float32), 0)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=tf.float32), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=tf.float32)), axis=1)\n```",
            "```python\n    indices = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(tf.multiply(in1, indices), axis=1)\n```",
            "```\ndef transform(in1):\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=in1.dtype), axis=1)\n```",
            "```python\ndef transform(in1):\n    indices = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(tf.multiply(in1, indices), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=in1.dtype)), axis=1)\n```",
            "```python\n    indices = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(in1 * indices, axis=1)\n```",
            "```python\ndef transform(in1):\n    weights = tf.range(tf.shape(in1)[1], dtype=in1.dtype)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=in1.dtype), axis=1)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=in1.dtype), axis=1)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1], dtype=in1.dtype), axis=1)\n```",
            "```python\n    indices = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(tf.multiply(in1, indices), axis=1)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2577.604,
        "usage": {
            "prompt_tokens": 1502,
            "completion_tokens": 3473,
            "total_tokens": 4975
        }
    },
    {
        "name": "stackoverflow_33",
        "description": "find the minimum distance between two sets of points",
        "target_program": "tf.reduce_min(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 0), tf.expand_dims(in2, 1))), axis=2), axis=1)",
        "source": "https://stackoverflow.com/questions/40558251/computing-minimum-distance-for-each-element-in-a-tensor-relative-to-another-tens",
        "constants": "[]",
        "examples": {
            "inputs": "[[[.3, .1, .4], [.1, .5, .9], [.2, .6, .5], [.3, .5, .8],[.9, .7, .9]],[[.3, .2, .3], [.8, .4, .6], [.2, .6, .4], [.3, .3, .8]],]",
            "outputs": "[0.02, 0.19, 0.01, 0.04]"
        },
        "completions": [
            "```python\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\nreturn tf.reduce_min(dists, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndiff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\ndist = tf.reduce_sum(tf.square(diff), axis=-1)\nreturn tf.reduce_min(dist, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    dist = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)\n    return tf.reduce_min(dist, axis=1)\n```",
            "```python\n    dst = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dst, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\nd = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\nreturn tf.reduce_min(tf.reduce_sum(tf.square(d), axis=2), axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    dist = tf.reduce_sum(tf.square(diff), axis=2)\n    return tf.reduce_min(dist, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    diffs = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    dists = tf.reduce_sum(tf.square(diffs), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\nmin_dists = tf.reduce_min(dists, axis=1)\nreturn min_dists\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\nreturn tf.sqrt(tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2), axis=1))\n```",
            "```python\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.sqrt(tf.reduce_min(dists, axis=1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)), axis=1)\n```",
            "```\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\n    dists = tf.reduce_sum(tf.math.squared_difference(tf.expand_dims(in1, 1), in2), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\n    dists = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    squared_dists = tf.reduce_sum(tf.square(dists), axis=2)\n    min_dists = tf.reduce_min(squared_dists, axis=1)\n    return min_dists\n```",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2), axis=1)",
            "```python\n    distances = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(distances, axis=1)\n```",
            "```python\n    distances = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.sqrt(tf.reduce_min(distances, axis=1))\n```",
            "```python\n    dist = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dist, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\n```",
            "```python\ndists = tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2))\nreturn tf.reduce_min(dists, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)\n    return tf.sqrt(tf.reduce_min(dists, axis=1))\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, axis=1) - tf.expand_dims(in2, axis=0)), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndist = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\nreturn tf.reduce_min(dist, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    d = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)\n    return tf.reduce_min(d, axis=1)\n```",
            "def transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)\n    return tf.reduce_min(dists, axis=1)",
            "```python\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)), axis=1)\n```",
            "```python\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)\n    return tf.sqrt(tf.reduce_min(dists, axis=1))\n```",
            "```python\n    diffs = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    dists = tf.reduce_sum(tf.square(diffs), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\n    dists = tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n    dists = tf.reduce_sum(tf.square(dists), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.math.squared_difference(tf.expand_dims(in1, 1), in2), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```\nsquared_diff = tf.math.squared_difference(tf.expand_dims(in1, 1), in2)\ndistances = tf.reduce_sum(squared_diff, axis=2)\nreturn tf.sqrt(tf.reduce_min(distances, axis=1))\n```",
            "```python\n    dist = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dist, axis=1)\n```",
            "```python\ndist = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\nreturn tf.reduce_min(dist, axis=1)\n```",
            "```\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)), axis=1)\n```",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2), axis=1)",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndistances = tf.math.squared_difference(tf.expand_dims(in1, 1), in2)\nreturn tf.reduce_min(tf.reduce_sum(distances, axis=2), axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    dist = tf.reduce_sum(tf.square(diff), axis=2)\n    return tf.reduce_min(dist, axis=1)\n```",
            "```python\na = tf.expand_dims(in1, 1)\nb = tf.expand_dims(in2, 0)\ndeltas = tf.subtract(a, b)\ndistances = tf.reduce_sum(tf.square(deltas), axis=2)\nreturn tf.reduce_min(distances, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    dist = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dist, axis=1)\n```",
            "```python\n    return tf.sqrt(tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2), axis=1))\n```",
            "def transform(in1, in2):\n    dists = tf.reduce_sum(tf.math.squared_difference(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)",
            "```python\n    return tf.reduce_min(tf.math.squared_difference(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0)), axis=2)\n```",
            "```\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)\n    return tf.sqrt(tf.reduce_min(dists, axis=1))\n```",
            "```python\n    return tf.sqrt(tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2), axis=1))\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.math.squared_difference(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)\n    return tf.sqrt(tf.reduce_min(dists, axis=1))\n```",
            "```python\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    dist = tf.reduce_sum(tf.square(diff), axis=-1)\n    return tf.reduce_min(dist, axis=1)\n```",
            "```python\n    dist = tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2))\n    return tf.reduce_min(dist, axis=1)\n```",
            "```python\n    distances = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.sqrt(tf.reduce_min(distances, axis=1))\n```",
            "```python\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    dist = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)\n    return tf.reduce_min(dist, axis=1)\n```",
            "```python\n    diffs = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    dists = tf.reduce_sum(tf.square(diffs), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\n    d = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    dist = tf.reduce_sum(tf.square(d), axis=2)\n    return tf.reduce_min(dist, axis=1)\n```",
            "```python\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)), axis=1)\n```",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)), axis=1)",
            "```python\ndists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\nreturn tf.reduce_min(dists, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    d = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(d, axis=1)\n```",
            "```python\ndists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\nreturn tf.reduce_min(dists, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(in1[:, tf.newaxis] - in2), axis=2)), axis=1)\n```",
            "```\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\nreturn tf.reduce_min(dists, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\n    d = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)\n    return tf.sqrt(tf.reduce_min(d, axis=1))\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n```",
            "```python\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    dist = tf.reduce_sum(tf.square(diff), axis=2)\n    return tf.reduce_min(dist, axis=1)\n```",
            "```python\ndists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\nreturn tf.reduce_min(dists, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\nmin_dists = tf.reduce_min(dists, axis=1)\nreturn min_dists\n```",
            "```python\ndists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)\nreturn tf.reduce_min(dists, axis=1)\n```",
            "```python\n    dists = tf.reduce_sum(tf.math.squared_difference(tf.expand_dims(in1, axis=1), in2), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\n    dists = tf.reduce_sum(tf.square(in1[:, None, :] - in2[None, :, :]), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```",
            "```python\ndists = tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2)\nreturn tf.reduce_min(dists, axis=1)\n```",
            "```python\n    d = tf.stack([tf.reduce_sum(tf.square(tf.subtract(p2, p1))) for p1 in in1 for p2 in in2])\n    d = tf.reshape(d, [tf.shape(in1)[0], tf.shape(in2)[0]])\n    return tf.reduce_min(d, axis=1)\n```",
            "```python\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    dists = tf.reduce_sum(tf.square(diff), axis=2)\n    return tf.sqrt(tf.reduce_min(dists, axis=1))\n```",
            "```python\nd = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\ndistances = tf.reduce_sum(tf.square(d), axis=2)\nreturn tf.sqrt(tf.reduce_min(distances, axis=1))\n```",
            "```python\ndef transform(in1, in2):\n    dists = tf.reduce_sum(tf.square(tf.expand_dims(in1, axis=1) - tf.expand_dims(in2, axis=0)), axis=2)\n    return tf.reduce_min(dists, axis=1)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 3096.013,
        "usage": {
            "prompt_tokens": 1573,
            "completion_tokens": 4897,
            "total_tokens": 6470
        }
    },
    {
        "name": "stackoverflow_34",
        "description": "compute a weighted sum of tensors",
        "target_program": "tf.tensordot(in2, in1, 1)",
        "source": "https://stackoverflow.com/questions/49532371/compute-a-linear-combination-of-tensors-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[1, 2], [3, 4]],[[5, 6], [7, 8]],[[10, 20], [30, 40]]],[3, 5, 10],]",
            "outputs": "[[128, 236], [344, 452]]"
        },
        "completions": [
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(tf.expand_dims(in2, -1), in1), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(tf.expand_dims(in2, -1), in1), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, [1, 2])), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    weights = tf.expand_dims(in2, 1)\n    weighted_sum = tf.matmul(weights, tf.reshape(in1, [3, -1]))\n    return tf.reshape(weighted_sum, [2, 2])\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(tf.transpose(in1, perm=[2, 1, 0]), in2), axis=2)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.expand_dims(in2, axis=-1), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.expand_dims(in2, -1), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(tf.expand_dims(in2, axis=1), in1), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(tf.expand_dims(in2, -1), in1), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.expand_dims(in2, -1), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(tf.expand_dims(in2, 1), in1), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(tf.expand_dims(in2, axis=-1), in1), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(tf.expand_dims(in2, -1), in1), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(tf.expand_dims(in2, axis=1), in1), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.tensordot(tf.cast(in1, tf.float32), in2, axes=([0],[0]))\n```",
            "```python\n    expanded_weights = tf.expand_dims(in2, axis=1)\n    weighted_tensors = tf.multiply(in1, expanded_weights)\n    return tf.reduce_sum(weighted_tensors, axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)\n```",
            "```python\n    return tf.tensordot(in2, in1, axes=([0], [0]))\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(tf.expand_dims(in2, -1), in1), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(tf.expand_dims(in2, -1), in1), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(tf.expand_dims(in2, 1), in1), axis=0)\n```",
            "```python\n    return tf.tensordot(tf.cast(in1, tf.float32), in2, axes=([0], [0]))\n```",
            "```\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.expand_dims(in2, axis=1), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)\n```",
            "```python\n    weights = tf.reshape(in2, (3, 1, 1))\n    weighted_tensors = tf.multiply(in1, weights)\n    return tf.reduce_sum(weighted_tensors, axis=0)\n```",
            "```python\n    expanded_weights = tf.expand_dims(in2, axis=1)\n    weighted_tensors = tf.multiply(in1, expanded_weights)\n    return tf.reduce_sum(weighted_tensors, axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=[1,2])), axis=0)\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.expand_dims(in2, -1), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```\n    weights_expanded = tf.expand_dims(in2, axis=-1)\n    weighted_tensors = tf.multiply(in1, weights_expanded)\n    return tf.reduce_sum(weighted_tensors, axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n```",
            "```\n    weighted_tensors = tf.multiply(tf.expand_dims(in2, -1), in1)\n    return tf.reduce_sum(weighted_tensors, axis=0)\n```",
            "```python\n    return tf.tensordot(in2, in1, axes=1)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n```",
            "```python\n    return tf.tensordot(in2, in1, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=([0], [0]))\n```",
            "```python\n    return tf.reduce_sum(in1 * tf.expand_dims(in2, -1), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    expanded_weights = tf.expand_dims(in2, axis=1)\n    weighted = tf.multiply(in1, expanded_weights)\n    return tf.reduce_sum(weighted, axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(tf.expand_dims(in2, -1), in1), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(tf.cast(in2, tf.float32), axis=-1)), axis=0)\n```",
            "```python\n    return tf.tensordot(in2, in1, axes=1)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(tf.cast(in2, tf.float32), 1)), axis=0)\n```",
            "```\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(tf.expand_dims(in2, -1), in1), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    expanded_in2 = tf.expand_dims(in2, axis=1)\n    weighted_in1 = tf.multiply(in1, expanded_in2)\n    return tf.reduce_sum(weighted_in1, axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(tf.expand_dims(in2, 1), in1), axis=0)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2355.232,
        "usage": {
            "prompt_tokens": 1497,
            "completion_tokens": 2854,
            "total_tokens": 4351
        }
    },
    {
        "name": "stackoverflow_35",
        "description": "linear interpolation between two tensors",
        "target_program": "tf.add(in2, tf.multiply(tf.expand_dims(in3, 1), tf.subtract(in1, in2)))",
        "source": "https://stackoverflow.com/questions/49643371/keras-compute-convex-combination-of-two-tensors",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]], [[10., 20.], [30., 40.], [50., 60.]]],[[[9.0, 8.0], [7.0, 6.0], [5.0, 4.0]], [[90., 80.], [70., 60.], [50., 40.]]],[0.1, 0.4, 0.8],]",
            "outputs": "[[[8.2, 7.4], [5.4, 5.2], [5.0, 5.6]],    [[82., 74.], [54., 52.], [50., 56.]]]"
        },
        "completions": [
            "```python\n    return tf.add(tf.multiply(in1, tf.reshape(1-in3, [-1, 1, 1])), \n                  tf.multiply(in2, tf.reshape(in3, [-1, 1, 1])))\n```",
            "```python\n    return tf.add(in1 * (1 - tf.expand_dims(in3, -1)), in2 * tf.expand_dims(in3, -1))\n```",
            "```python\n    return tf.add(tf.multiply(tf.cast(tf.expand_dims(in3, 1), in1.dtype), tf.subtract(in2, in1)), in1)\n```",
            "```python\n    return tf.add(tf.multiply(in1, tf.expand_dims(1-in3, -1)),\n                  tf.multiply(in2, tf.expand_dims(in3, -1)))\n```",
            "```python\n    return tf.add(tf.multiply(in1, tf.reshape(1 - in3, [3, 1, 1])), tf.multiply(in2, tf.reshape(in3, [3, 1, 1])))\n```",
            "```python\n    weights = tf.expand_dims(in3, axis=(-1, -2))\n    return in1 * (1 - weights) + in2 * weights\n```",
            "```python\n    in3 = tf.reshape(in3, (-1, 1, 1))\n    return in1 + (in2 - in1) * in3\n```",
            "```python\n    return tf.add(tf.multiply(in1, tf.expand_dims(tf.subtract(1.0, in3), -1)), tf.multiply(in2, tf.expand_dims(in3, -1)))\n```",
            "```python\n    return tf.add(tf.multiply(tf.expand_dims(in3, -1), in2), tf.multiply(tf.expand_dims(tf.subtract(1, in3), -1), in1))\n```",
            "```python\n    w = tf.expand_dims(in3, axis=-1)\n    return tf.add(tf.multiply(in1, 1 - w), tf.multiply(in2, w))\n```",
            "```python\n    weights = tf.expand_dims(in3, axis=-1)\n    return in1 * (1 - weights) + in2 * weights\n```",
            "```python\n    return tf.add(tf.multiply(tf.expand_dims(in3, -1), tf.subtract(in2, in1)), in1)\n```",
            "```python\n    in3 = tf.expand_dims(in3, axis=-1)\n    return tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n```",
            "```python\n    return tf.add(tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(tf.subtract(1, in3), (1, 2))), \n                  tf.multiply(tf.expand_dims(in2, 2), tf.expand_dims(in3, (1, 2))))\n```",
            "```python\n    weights = tf.expand_dims(in3, 1)\n    diff = tf.subtract(in2, in1)\n    weighted_diff = tf.multiply(weights, diff)\n    return tf.add(in1, weighted_diff)\n```",
            "```python\n    in3_expanded = tf.expand_dims(in3, -1)\n    return in1 + (in2 - in1) * in3_expanded\n```",
            "```python\n    a = tf.expand_dims(in3, -1)\n    return tf.add(tf.multiply(a, in1), tf.multiply(1 - a, in2))\n```",
            "```python\n    return tf.add(tf.multiply(in2, tf.expand_dims(in3, 1)), tf.multiply(in1, tf.expand_dims(tf.subtract(1., in3), 1)))\n```",
            "```python\n    w = tf.expand_dims(in3, axis=-1)\n    return in1 * (1 - w) + in2 * w\n```",
            "```python\n    return tf.add(tf.multiply(tf.expand_dims(in3, 1), tf.subtract(in2, in1)), in1)\n```",
            "```python\n    return tf.add(tf.multiply(in1, tf.expand_dims(1 - in3, axis=-1)), tf.multiply(in2, tf.expand_dims(in3, axis=-1)))\n```",
            "```python\n    return tf.add(\n        in1 * tf.expand_dims(1 - in3, axis=-1), \n        in2 * tf.expand_dims(in3, axis=-1)\n    )\n```",
            "```python\n    return tf.add(tf.multiply(tf.expand_dims(in1, 0), tf.expand_dims(1 - in3, 2)), tf.multiply(tf.expand_dims(in2, 0), tf.expand_dims(in3, 2)))\n```",
            "```python\n    return tf.add(\n        tf.multiply(tf.expand_dims(in3, -1), in2),\n        tf.multiply(tf.expand_dims(1 - in3, -1), in1)\n    )\n```",
            "```python\n    return in1 + tf.expand_dims(in3, -1) * (in2 - in1)\n```",
            "```\ndef transform(in1, in2, in3):\n    in3_exp = tf.expand_dims(in3, axis=-1)\n    return tf.add(tf.multiply(tf.subtract(tf.constant(1.0), in3_exp), in1), tf.multiply(in3_exp, in2))\n```",
            "```python\n    t = tf.transpose(in1, perm=[1, 0, 2])\n    u = tf.transpose(in2, perm=[1, 0, 2])\n    w = tf.expand_dims(in3, -1)\n    v = tf.add(tf.multiply(t, w), tf.multiply(u, tf.subtract(1.0, w)))\n    return tf.transpose(v, perm=[1, 0, 2])\n```",
            "```python\n    return tf.add(tf.multiply(in1, tf.reshape(1 - in3, [3, 1, 1])), tf.multiply(in2, tf.reshape(in3, [3, 1, 1])))\n```",
            "```python\n    return tf.add(\n        tf.multiply(tf.expand_dims(1 - tf.expand_dims(in3, -1), 0), in1),\n        tf.multiply(tf.expand_dims(tf.expand_dims(in3, -1), 0), in2)\n    )\n```",
            "```python\n    factors = tf.expand_dims(in3, axis=-1)\n    return tf.add(tf.multiply(in1, 1 - factors), tf.multiply(in2, factors))\n```",
            "```python\n    return tf.add(tf.multiply(in1, tf.expand_dims(1 - in3, -1)), tf.multiply(in2, tf.expand_dims(in3, -1)))\n```",
            "```python\n    alphas_expanded = tf.expand_dims(in3, axis=-1)\n    return (1 - alphas_expanded) * in1 + alphas_expanded * in2\n```",
            "```python\nl = tf.expand_dims(in3, 1)\nreturn in1 * (1 - l) + in2 * l\n```",
            "```python\n    return tf.add(tf.multiply(tf.expand_dims(in3, -1), in2), tf.multiply(tf.expand_dims(tf.subtract(1.0, in3), -1), in1))\n```",
            "```python\n    return tf.add(tf.multiply(in1, tf.expand_dims(1 - in3, -1)), tf.multiply(in2, tf.expand_dims(in3, -1)))\n```",
            "```python\n    weights = tf.reshape(in3, (-1, 1, 1))\n    return in1 + weights * (in2 - in1)\n```",
            "```python\n    return tf.add(tf.multiply(in1, tf.expand_dims(1 - in3, -1)), tf.multiply(in2, tf.expand_dims(in3, -1)))\n```",
            "```python\n    return tf.add(\n        tf.multiply(tf.expand_dims(in3, -1), tf.subtract(in2, in1)),\n        in1\n    )\n```",
            "```python\n    alpha = tf.expand_dims(in3, -1)\n    return tf.add(tf.multiply(1 - alpha, in1), tf.multiply(alpha, in2))\n```",
            "```python\n    return tf.add(tf.multiply(in1, tf.expand_dims(1-in3, -1)), tf.multiply(in2, tf.expand_dims(in3, -1)))\n```",
            "```python\ndef transform(in1, in2, in3):\n    in3 = tf.expand_dims(in3, axis=-1)\n    return in1 * (1 - in3) + in2 * in3\n```",
            "```python\n    return tf.add(tf.multiply(in1, tf.expand_dims(1 - in3, -1)), tf.multiply(in2, tf.expand_dims(in3, -1)))\n```",
            "```python\n    return tf.add(tf.multiply(in1, tf.expand_dims(1 - in3, 1)), tf.multiply(in2, tf.expand_dims(in3, 1)))\n```",
            "```python\n    weights = tf.expand_dims(in3, axis=-1)\n    return in1 * (1 - weights) + in2 * weights\n```",
            "```python\n    alphas = tf.transpose(tf.expand_dims(in3, -1), perm=[1, 0, 2])\n    return tf.add(tf.multiply(tf.expand_dims(1 - in3, -1), in1), tf.multiply(alphas, in2))\n```",
            "```python\n    return tf.add(tf.multiply(in1, tf.expand_dims(1 - in3, axis=-1)), tf.multiply(in2, tf.expand_dims(in3, axis=-1)))\n```",
            "```python\n    in3 = tf.expand_dims(in3, axis=-1)\n    return tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n```",
            "```python\n    return tf.add(tf.multiply(tf.expand_dims(in3, -1), in2), \n                  tf.multiply(tf.expand_dims(1.0 - in3, -1), in1))\n```",
            "```python\n    w1 = tf.expand_dims(in3, axis=-1)\n    return tf.add(tf.multiply(in1, 1-w1), tf.multiply(in2, w1))\n```",
            "```python\n    return tf.add(tf.multiply(tf.expand_dims(in3, -1), tf.subtract(in2, in1)), in1)\n```",
            "```python\n    in3_expanded = tf.expand_dims(in3, axis=(1, 2))\n    return in1 + in3_expanded * (in2 - in1)\n```",
            "```python\n    return tf.add(tf.multiply(in1, tf.expand_dims(1 - in3, -1)), tf.multiply(in2, tf.expand_dims(in3, -1)))\n```",
            "```python\n    w = tf.expand_dims(in3, axis=-1)\n    return in1 * (1 - w) + in2 * w\n```",
            "```python\n    return tf.add(\n        tf.multiply(tf.expand_dims(in3, axis=(1, 2)), tf.subtract(in2, in1)),\n        in1\n    )\n```",
            "```python\n    in3 = tf.reshape(in3, (-1, 1, 1))\n    return in1 + in3 * (in2 - in1)\n```",
            "```python\ndef transform(in1, in2, in3):\n    return tf.add(tf.multiply(tf.expand_dims(in3, 1), tf.subtract(in2, in1)), in1)\n```",
            "```python\n    return tf.add(tf.multiply(tf.expand_dims(in3, -1), tf.subtract(in2, in1)), in1)\n```",
            "```python\n    alphas = tf.reshape(in3, [-1, 1, 1])\n    interpolated = in1 * (1 - alphas) + in2 * alphas\n    return interpolated\n```",
            "```python\n    return tf.add(tf.multiply(in1, (1 - tf.expand_dims(in3, 1))), tf.multiply(in2, tf.expand_dims(in3, 1)))\n```",
            "```python\ndef transform(in1, in2, in3):\n    return tf.add(tf.multiply(tf.expand_dims(in3, 1), tf.subtract(in2, in1)), in1)\n```",
            "```python\n    alphas = tf.reshape(in3, (-1, 1, 1))\n    return in1 * (1 - alphas) + in2 * alphas\n```",
            "```python\n    return tf.add(tf.multiply(in1, tf.expand_dims(1 - in3, 1)), tf.multiply(in2, tf.expand_dims(in3, 1)))\n```",
            "```python\n    return tf.add(tf.multiply(in3[:, None, None], in2), tf.multiply(1 - in3[:, None, None], in1))\n```",
            "```python\n    return tf.add(tf.multiply(in1, tf.expand_dims(in3, -1)), \n                  tf.multiply(in2, tf.expand_dims(1 - in3, -1)))\n```",
            "```python\n    alphas = tf.expand_dims(in3, axis=-1)\n    return tf.add(tf.multiply(in1, tf.subtract(1.0, alphas)), tf.multiply(in2, alphas))\n```",
            "```python\n    weights = tf.expand_dims(in3, axis=(1, 2))\n    return tf.add(tf.multiply(weights, in2), tf.multiply(1-weights, in1))\n```",
            "```python\n    in3_exp = tf.expand_dims(in3, 1)\n    return tf.add(tf.multiply(tf.subtract(in2, in1), in3_exp), in1)\n```",
            "```python\n    return tf.add(tf.multiply(in1, tf.broadcast_to(1 - in3[:, None, None], tf.shape(in1))),\n                  tf.multiply(in2, tf.broadcast_to(in3[:, None, None], tf.shape(in2))))\n```",
            "```python\n    a = tf.expand_dims(in3, axis=-1)\n    b = tf.expand_dims(in1, axis=2)\n    c = tf.expand_dims(in2, axis=2)\n    weights = tf.tile(a, [1, tf.shape(in1)[1], tf.shape(in1)[2]])\n    return tf.add(tf.multiply(weights, c), tf.multiply(1.0 - weights, b))\n```",
            "```python\n    weights = tf.expand_dims(in3, axis=-1)\n    return in1 + weights * (in2 - in1)\n```",
            "```python\n    in3 = tf.reshape(in3, [-1, 1, 1])\n    return tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n```",
            "```python\n    return tf.add(tf.multiply(in1, tf.expand_dims(1-in3, -1)), tf.multiply(in2, tf.expand_dims(in3, -1)))\n```",
            "```python\n    alphas = tf.reshape(in3, (-1, 1, 1))\n    return in1 + alphas * (in2 - in1)\n```",
            "```python\n    return tf.add(tf.multiply(in1, tf.expand_dims(1-in3, -1)), tf.multiply(in2, tf.expand_dims(in3, -1)))\n```",
            "```python\n    in3 = tf.reshape(in3, [-1, 1, 1])\n    return tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n```",
            "```python\n    return tf.add(tf.multiply(in1, tf.expand_dims(1 - in3, -1)), tf.multiply(in2, tf.expand_dims(in3, -1)))\n```",
            "```python\n    return tf.add(tf.multiply(in2, tf.reshape(in3, (-1, 1, 1))), tf.multiply(in1, tf.subtract(1, tf.reshape(in3, (-1, 1, 1)))))\n```",
            "```python\n    return tf.add(tf.multiply(tf.expand_dims(in3, -1), tf.subtract(in2, in1)), in1)\n```",
            "```python\n    return in1 + tf.expand_dims(in3, -1) * (in2 - in1)\n```",
            "```python\n    alphas = tf.expand_dims(in3, 1)\n    return tf.add(in1 * (1 - alphas), in2 * alphas)\n```",
            "```python\n    return tf.add(tf.multiply(in1, tf.expand_dims(1-in3, axis=1)), \n                  tf.multiply(in2, tf.expand_dims(in3, axis=1)))\n```",
            "```python\n    in3_expanded = tf.expand_dims(in3, axis=1)\n    return tf.add(tf.multiply(in1, 1 - in3_expanded), tf.multiply(in2, in3_expanded))\n```",
            "```python\n    alphas = tf.expand_dims(in3, axis=-1)\n    return in1 + alphas * (in2 - in1)\n```",
            "```python\n    return tf.add(tf.multiply(tf.expand_dims(in3, -1), tf.subtract(in2, in1)), in1)\n```",
            "```python\n    return tf.add(tf.multiply(tf.expand_dims(in3, axis=(1, 2)), tf.subtract(in2, in1)), in1)\n```",
            "```python\n    return tf.add(tf.multiply(tf.expand_dims(in3, -1), tf.subtract(in2, in1)), in1)\n```",
            "```python\ndef transform(in1, in2, in3):\n    alphas = tf.expand_dims(in3, axis=-1)\n    return tf.add(tf.multiply(in1, tf.subtract(1.0, alphas)), tf.multiply(in2, alphas))\n```",
            "```python\n    return tf.add(tf.multiply(in1, tf.expand_dims(1 - in3, 1)),\n                  tf.multiply(in2, tf.expand_dims(in3, 1)))\n```",
            "```python\n    alphas = tf.reshape(in3, (-1, 1, 1))\n    return in1 * (1 - alphas) + in2 * alphas\n```",
            "```python\n    return tf.reduce_sum(tf.expand_dims(in1, 2) * tf.expand_dims(tf.expand_dims(in3, 0), 2) + tf.expand_dims(in2, 2) * (1 - tf.expand_dims(tf.expand_dims(in3, 0), 2)), axis=1)\n```",
            "```python\n    in3 = tf.expand_dims(in3, axis=-1)\n    return tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n```",
            "```python\n    alpha = tf.expand_dims(in3, axis=-1)\n    return in1 * (1 - alpha) + in2 * alpha\n```",
            "```python\n    return tf.add(\n        tf.multiply(tf.expand_dims(in3, axis=-1), tf.subtract(in2, in1)), \n        in1\n    )\n```",
            "```python\n    alphas_expanded = tf.expand_dims(in3, axis=-1)\n    return tf.add(tf.multiply(in1, 1 - alphas_expanded), tf.multiply(in2, alphas_expanded))\n```",
            "```python\n    mix = tf.expand_dims(in3, axis=[1, 2])\n    return in1 * (1 - mix) + in2 * mix\n```",
            "```python\n    alpha = tf.expand_dims(in3, axis=-1)\n    return in1 * (1 - alpha) + in2 * alpha\n```",
            "```python\n    alphas = tf.reshape(in3, (-1, 1, 1))\n    return in1 * (1 - alphas) + in2 * alphas\n```",
            "```python\n    return tf.add(tf.multiply(tf.expand_dims(in3, -1), in2), tf.multiply(tf.expand_dims(1 - in3, -1), in1))\n```",
            "```python\n    return in1 + tf.expand_dims(in3, -1) * (in2 - in1)\n```",
            "```python\n    return tf.add(tf.multiply(in1, tf.expand_dims(1 - in3, axis=(-2, -1))), tf.multiply(in2, tf.expand_dims(in3, axis=(-2, -1))))\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 3625.833,
        "usage": {
            "prompt_tokens": 1612,
            "completion_tokens": 4103,
            "total_tokens": 5715
        }
    },
    {
        "name": "stackoverflow_36",
        "description": "divide each element by the column index",
        "target_program": "tf.cast(tf.divide(in1, tf.add(in1, tf.range(8))), tf.float32)",
        "source": "https://stackoverflow.com/questions/43306788/divide-elements-of-1-d-tensor-by-the-corrispondent-index",
        "constants": "[]",
        "examples": {
            "inputs": "[[1, 0, 1, 1, 0, 1, 0, 1],]",
            "outputs": "[1., 0., 0.333333, 0.25, 0., 0.166667, 0., 0.125]"
        },
        "completions": [
            "```python\n    idx = tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32)\n    return tf.divide(tf.cast(in1, tf.float32), idx)\n```",
            "```python\n    return tf.divide(in1, tf.range(1, len(in1) + 1, dtype=tf.float32))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0]+1))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "```python\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, len(in1) + 1, dtype=tf.float32))\n```",
            "```python\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, len(in1) + 1, 1, dtype=tf.float32))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "```python\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n```",
            "```python\ndef transform(in1):\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "```python\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, len(in1)+1, dtype=tf.float32))\n```",
            "```python\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, len(in1) + 1, dtype=tf.float32))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0]+1))\n```",
            "```python\n    indices = tf.range(1, len(in1) + 1, dtype=tf.float32)\n    return tf.divide(in1, indices)\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "```python\n    return tf.where(tf.equal(tf.range(tf.shape(in1)[0]), 0), tf.cast(in1, tf.float32), tf.divide(tf.cast(in1, tf.float32), tf.cast(tf.range(tf.shape(in1)[0]), tf.float32)))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1))\n```",
            "```python\n    indices = tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32)\n    return tf.divide(tf.cast(in1, tf.float32), indices)\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.size(in1) + 1, dtype=tf.float32))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0]+1))\n```",
            "```python\n    indices = tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32)\n    return tf.divide(tf.cast(in1, tf.float32), indices)\n```",
            "```python\n    return tf.divide(in1, tf.range(1., tf.shape(in1)[0] + 1))\n```",
            "```python\n    indices = tf.range(1, tf.size(in1) + 1, dtype=tf.float32)\n    return tf.divide(tf.cast(in1, tf.float32), indices)\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "```python\n    idx = tf.range(tf.shape(in1)[0])\n    idx = tf.maximum(idx, tf.ones_like(idx))  # Prevent division by zero for first element\n    return tf.divide(tf.cast(in1, tf.float32), tf.cast(idx, tf.float32))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1))\n```",
            "```python\ndef transform(in1):\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "```python\ndef transform(in1):\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "```python\n    return tf.math.divide_no_nan(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=in1.dtype))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, 1, dtype=in1.dtype))\n```",
            "```python\n    col_indices = tf.range(1, len(in1) + 1)\n    return tf.divide(tf.cast(in1, tf.float32), tf.cast(col_indices, tf.float32))\n```",
            "```python\n    col_indices = tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32)\n    return tf.divide(tf.cast(in1, tf.float32), col_indices)\n```",
            "```python\n    idxs = tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32)\n    return tf.divide(tf.cast(in1, tf.float32), idxs)\n```",
            "```python\n    indices = tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32)\n    return tf.divide(tf.cast(in1, tf.float32), indices)\n```",
            "```python\n    col_indices = tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32)\n    return tf.divide(in1, col_indices)\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "```python\n    idx = tf.range(tf.shape(in1)[0])\n    return tf.divide(in1, tf.cast(idx + 1, tf.float32))\n```",
            "```python\n    idx = tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32)\n    return tf.divide(tf.cast(in1, tf.float32), idx)\n```",
            "```python\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, len(in1) + 1, 1, dtype=tf.float32))\n```",
            "```python\n    return tf.where(tf.equal(tf.range(tf.shape(in1)[0]), 0), in1, tf.divide(in1, tf.range(1, tf.shape(in1)[0]+1)))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "```python\n    indices = tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32)\n    return tf.divide(in1, indices)\n```",
            "```python\n    indices = tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32)\n    return tf.divide(in1, indices)\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.size(in1) + 1, 1, dtype=tf.float32))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.size(in1) + 1, dtype=tf.float32))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.size(in1) + 1, dtype=tf.float32))\n```",
            "```python\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.size(in1) + 1, dtype=tf.float32))\n```",
            "```python\n    idx = tf.range(start=1, limit=tf.shape(in1)[0] + 1, delta=1, dtype=tf.float32)\n    return tf.divide(in1, idx)\n```",
            "```python\n    idx = tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32)\n    return tf.divide(in1, idx)\n```",
            "```python\n    col_indices = tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32)\n    return tf.divide(tf.cast(in1, tf.float32), col_indices)\n```",
            "```python\n    indices = tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32)\n    return tf.divide(tf.cast(in1, tf.float32), indices)\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0]+1, dtype=tf.float32))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1))\n```",
            "```python\n    indices = tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32)\n    return tf.divide(in1, indices)\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "```python\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.size(in1) + 1, 1, dtype=tf.float32))\n```",
            "```python\n    indices = tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32)\n    return tf.divide(tf.cast(in1, tf.float32), indices)\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1))\n```",
            "```python\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0]+1, dtype=tf.float32))\n```",
            "```python\n    indices = tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32)\n    return tf.divide(tf.cast(in1, tf.float32), indices)\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "```python\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, len(in1) + 1, dtype=tf.float32))\n```",
            "```python\n    return tf.where(tf.range(tf.shape(in1)[0]) > 0, tf.divide(in1, tf.cast(tf.range(tf.shape(in1)[0]), tf.float32)), in1)\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "```python\n    indices = tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32)\n    return tf.divide(in1, indices)\n```",
            "```python\n    indices = tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32)\n    return tf.divide(in1, indices)\n```",
            "```python\n    indices = tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32)\n    return tf.divide(tf.cast(in1, tf.float32), indices)\n```",
            "```python\n    indices = tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32)\n    return tf.divide(tf.cast(in1, tf.float32), indices)\n```",
            "```python\n    return tf.math.divide_no_nan(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "```python\n    return tf.divide(in1, tf.range(1., len(in1) + 1))\n```",
            "```python\n    return tf.where(tf.equal(tf.range(tf.shape(in1)[0])[None], 0),\n                    in1,\n                    tf.math.divide_no_nan(in1, tf.range(1, tf.shape(in1)[0], dtype=tf.float32)))\n```",
            "```python\n    indices = tf.range(1, tf.size(in1) + 1)\n    return tf.divide(tf.cast(in1, tf.float32), tf.cast(indices, tf.float32))\n```",
            "```python\n    indices = tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32)\n    return tf.divide(tf.cast(in1, tf.float32), indices)\n```",
            "```python\n    indices = tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32)\n    return tf.divide(in1, indices)\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "```python\n    idx = tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32)\n    return tf.divide(tf.cast(in1, tf.float32), idx)\n```",
            "```python\ndef transform(in1):\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "```python\n    indices = tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32)\n    return tf.divide(in1, indices)\n```",
            "```python\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, len(in1) + 1))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1))\n```",
            "```python\n    indices = tf.range(1, len(in1) + 1, dtype=tf.float32)\n    return tf.divide(in1, indices)\n```",
            "```python\n    return tf.where(tf.range(tf.shape(in1)[0]) == 0, in1, tf.divide(in1, tf.cast(tf.range(tf.shape(in1)[0]), tf.float32)))\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "```python\n    indices = tf.range(1, tf.size(in1) + 1, dtype=tf.float32)\n    return tf.divide(in1, indices)\n```",
            "```python\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n```",
            "def transform(in1):\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2742.651,
        "usage": {
            "prompt_tokens": 1487,
            "completion_tokens": 3561,
            "total_tokens": 5048
        }
    },
    {
        "name": "stackoverflow_37",
        "description": "dot product a vector with last dimension of a tensor",
        "target_program": "tf.tensordot(in1, in2, 1)",
        "source": "https://stackoverflow.com/questions/49206051/multiply-4-d-tensor-with-1-d-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]],  [[1.2, 3.4, 5.6], [7.8, 9.8, 7.6]]]],[0.5, 1.0, 2.0],]",
            "outputs": "[[[8.5, 19.0], [15.2, 28.9]]]"
        },
        "completions": [
            "```python\n    return tf.tensordot(in1, in2, axes=[-1, 0])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```\n    return tf.tensordot(in1, in2, axes=(-1,))\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[-1, 0])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[-1, 0])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[-1, 0])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[-1, 0])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=-1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[-1, 0])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[-1, 0])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\nreturn tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=([-1], [0]))\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "    return tf.tensordot(in1, in2, axes=1)",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=([-1], [0]))\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\nreturn tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[-1, 0])\n```",
            "```python\n    return tf.squeeze(tf.tensordot(in1, in2, axes=[[3], [0]]), axis=-1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=([-1], [0]))\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=((3), (0)))\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[-1, 0])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[-1, 0])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[-1, 0])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=([-1], [0]))\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[-1, 0])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[-1, 0])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[-1, 0])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=([-1], [0]))\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[-1, 0])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=([-1], [0]))\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[-1, 0])\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=1)\n```",
            "```python\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 1981.7910000000002,
        "usage": {
            "prompt_tokens": 1529,
            "completion_tokens": 2371,
            "total_tokens": 3900
        }
    },
    {
        "name": "stackoverflow_38",
        "description": "compute the product of marked elements",
        "target_program": "tf.reduce_prod(tf.maximum(tf.reduce_max(in2), tf.multiply(in1, in2)), axis=1)",
        "source": "https://stackoverflow.com/questions/49511529/tensorflow-compute-multiplication-by-binary-matrix",
        "constants": "[]",
        "examples": {
            "inputs": "[[9, 2, 5, 3, 7, 4],[[0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1]],]",
            "outputs": "[35, 9, 120]"
        },
        "completions": [
            "```python\n    return tf.math.segment_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), tf.reduce_sum(in2, axis=1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(\n        tf.boolean_mask(in1, tf.reshape(in2, [-1])), \n        tf.repeat(tf.range(tf.shape(in2)[0]), tf.math.count_nonzero(in2, axis=1))\n    )\n```",
            "```python\ndef transform(in1, in2):\n    masked = tf.boolean_mask(in1, in2)\n    segments = tf.where(in2)[:, 0]\n    return tf.math.segment_prod(masked, segments)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.range(tf.shape(in2)[0]))\n```",
            "```python\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.range(tf.shape(in2)[0]))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.range(tf.shape(in2)[0]))\n```",
            "```python\ndef transform(in1, in2):\n    masked = tf.multiply(in1, tf.cast(in2, tf.float32))\n    return tf.reduce_prod(tf.where(in2, masked, tf.ones_like(masked)), axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2 > 0), tf.argmax(in2, axis=1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.range(tf.shape(in2)[0]))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(tf.expand_dims(in1, 0), in2), axis=1)\n```",
            "```python\n    return tf.math.segment_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), tf.argmax(in2, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    masked_elements = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    return tf.math.segment_prod(masked_elements, tf.repeat(tf.range(tf.shape(in2)[0]), tf.math.count_nonzero(in2, axis=1)))\n```",
            "```python\n    return tf.math.segment_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), tf.range(tf.shape(in2)[0]))\n```",
            "```python\ndef transform(in1, in2):\n    masked = tf.boolean_mask(in1, in2)\n    segments = tf.repeat(tf.range(tf.shape(in2)[0]), tf.reduce_sum(tf.cast(in2, tf.int32), axis=1))\n    return tf.math.segment_prod(masked, segments)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.range(tf.shape(in2)[0]))\n```",
            "```python\ndef transform(in1, in2):\n    marked_elements = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    segment_ids = tf.repeat(tf.range(tf.shape(in2)[0]), tf.math.count_nonzero(in2, axis=1))\n    return tf.math.segment_prod(marked_elements, segment_ids)\n```",
            "```python\ndef transform(in1, in2):\n    masked = tf.boolean_mask(in1, in2)\n    return tf.reduce_prod(masked, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    masked = tf.boolean_mask(in1, in2)\n    segment_ids = tf.range(tf.shape(in2)[0])\n    return tf.math.segment_prod(masked, segment_ids)\n```",
            "```python\ndef transform(in1, in2):\n    data = tf.boolean_mask(tf.tile(in1, [tf.shape(in2)[0]]), tf.reshape(in2, [-1]))\n    segment_ids = tf.repeat(tf.range(tf.shape(in2)[0]), tf.math.count_nonzero(in2, axis=1))\n    return tf.math.segment_prod(data, segment_ids)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.argmax(in2, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.reduce_prod(tf.boolean_mask(in1, in2), axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.argmax(in2, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    masked_values = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    segment_ids = tf.repeat(tf.range(tf.shape(in2)[0]), tf.math.count_nonzero(in2, axis=1))\n    return tf.math.segment_prod(masked_values, segment_ids)\n```",
            "```python\ndef transform(in1, in2):\n    masked_elements = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    segment_ids = tf.repeat(tf.range(tf.shape(in2)[0]), tf.math.count_nonzero(in2, axis=1))\n    return tf.math.segment_prod(masked_elements, segment_ids)\n```",
            "```python\ndef transform(in1, in2):\n    masked_vals = tf.boolean_mask(in1, in2)\n    segment_ids = tf.repeat(tf.range(tf.shape(in2)[0]), tf.math.count_nonzero(in2, axis=1))\n    return tf.math.segment_prod(masked_vals, segment_ids)\n```",
            "```python\nreturn tf.math.segment_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), tf.reshape(tf.where(in2), [-1]))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), tf.argmax(in2, axis=1))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.range(tf.shape(in2)[0]))\n```",
            "```python\ndef transform(in1, in2):\n    masked_elements = tf.boolean_mask(in1, in2)\n    segment_ids = tf.argmax(in2, axis=0)\n    return tf.math.segment_prod(masked_elements, segment_ids)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, tf.reshape(in2, [-1])), tf.where(tf.reshape(in2, [-1]))[:, 0])\n```",
            "```python\ndef transform(in1, in2):\n    masked_elements = tf.boolean_mask(in1, in2)\n    return tf.math.segment_prod(masked_elements, tf.repeat(tf.range(tf.shape(in2)[0]), tf.math.count_nonzero(in2, axis=1)))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.where(in2)[..., 0])\n```",
            "```python\ndef transform(in1, in2):\n    prod = tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.argmax(in2, axis=0))\n    return tf.reduce_sum(tf.reshape(prod, (3, -1)), axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.argmax(in2, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    masked = tf.boolean_mask(in1, in2)\n    segment_ids = tf.repeat(tf.range(tf.shape(in2)[0]), tf.reduce_sum(in2, axis=1))\n    return tf.math.segment_prod(masked, segment_ids)\n```",
            "```python\ndef transform(in1, in2):\n    masked = tf.boolean_mask(in1, in2)\n    segments = tf.where(in2)[0][:,-1]\n    return tf.math.segment_prod(masked, segments)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.argmax(in2, 0))\n```",
            "```python\ndef transform(in1, in2):\n    masked = tf.boolean_mask(in1, in2)\n    segments = tf.where(in2)\n    segment_ids = tf.squeeze(segments[:, 0])\n    return tf.math.segment_prod(masked, segment_ids)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.argmax(in2, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    masked_elements = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    segment_ids = tf.repeat(tf.range(tf.shape(in2)[0]), tf.math.count_nonzero(in2, axis=1))\n    return tf.math.segment_prod(masked_elements, segment_ids)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.range(tf.shape(in2)[0]))\n```",
            "```python\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.range(tf.shape(in2)[0]))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), tf.boolean_mask(tf.range(tf.shape(in2)[0]), tf.cast(tf.reduce_sum(in2, axis=1), tf.bool)))\n```",
            "```python\ndef transform(in1, in2):\n    masked = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    segment_ids = tf.repeat(tf.range(tf.shape(in2)[0]), tf.math.count_nonzero(in2, axis=1))\n    return tf.math.segment_prod(masked, segment_ids)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), tf.where(in2)[..., 0])\n```",
            "```python\ndef transform(in1, in2):\n    masked_elements = tf.boolean_mask(in1, in2)\n    segment_ids = tf.argmax(in2, axis=0)\n    return tf.math.segment_prod(masked_elements, segment_ids)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.range(tf.shape(in2)[0]))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.argmax(in2, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    masked = tf.boolean_mask(in1, in2)\n    return tf.math.segment_prod(masked, tf.where(in2)[0][:, 0])\n```",
            "```python\ndef transform(in1, in2):\n    masked = tf.boolean_mask(in1, in2)\n    return tf.math.segment_prod(masked, tf.argmin(in2, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    masked = tf.boolean_mask(in1, in2)\n    segment_ids = tf.repeat(tf.range(tf.shape(in2)[0]), tf.math.count_nonzero(in2, axis=1))\n    return tf.math.segment_prod(masked, segment_ids)\n```",
            "```python\ndef transform(in1, in2):\n    masked_elements = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    segment_ids = tf.repeat(tf.range(tf.shape(in2)[0]), tf.math.count_nonzero(in2, axis=1))\n    return tf.math.segment_prod(masked_elements, segment_ids)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.where(in2)[0])\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.argmax(in2, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    masked_elements = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    product_per_segment = tf.math.segment_prod(masked_elements, tf.where(in2)[..., 0])\n    return product_per_segment\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.argmax(in2, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.range(tf.shape(in2)[0]))\n```",
            "```python\ndef transform(in1, in2):\n    masked_elements = tf.boolean_mask(tf.tile(tf.expand_dims(in1, axis=0), [tf.shape(in2)[0], 1]), in2)\n    segment_ids = tf.repeat(tf.range(tf.shape(in2)[0]), tf.math.count_nonzero(in2, axis=1))\n    return tf.math.segment_prod(masked_elements, segment_ids)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), tf.where(tf.boolean_mask(in2, tf.cast(in2, tf.bool)))[0])\n```",
            "```python\ndef transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, in2), axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.argmax(in2, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.range(tf.shape(in2)[0]))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), tf.where(in2)[0][:, 0])\n```",
            "```python\ndef transform(in1, in2):\n    mask = tf.boolean_mask(in1, in2)\n    segment_ids = tf.repeat(tf.range(tf.shape(in2)[0]), tf.reduce_sum(in2, axis=1))\n    return tf.math.segment_prod(mask, segment_ids)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), tf.argmax(in2, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    masked = tf.boolean_mask(in1, in2)\n    segment_ids = tf.argmax(in2, axis=0)\n    return tf.math.segment_prod(masked, segment_ids)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.reduce_prod(tf.boolean_mask(in1, in2), axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.where(in2)[0][:, 0])\n```",
            "```python\ndef transform(in1, in2):\n    masked_elements = tf.boolean_mask(in1, in2)\n    segment_ids = tf.argmax(in2, axis=0)\n    return tf.math.segment_prod(masked_elements, segment_ids)\n```",
            "```python\ndef transform(in1, in2):\n    masked = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    segment_ids = tf.repeat(tf.range(tf.shape(in2)[0]), tf.reduce_sum(in2, axis=1))\n    return tf.math.segment_prod(masked, segment_ids)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.reduce_prod(tf.boolean_mask(in1, in2), axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    masked_elements = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    segment_ids = tf.repeat(tf.range(tf.shape(in2)[0]), tf.reduce_sum(tf.cast(in2, tf.int32), axis=1))\n    return tf.math.segment_prod(masked_elements, segment_ids)\n```",
            "```python\ndef transform(in1, in2):\n    masked = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    segment_ids = tf.repeat(tf.range(tf.shape(in2)[0]), tf.reduce_sum(tf.cast(in2, tf.int32), axis=1))\n    return tf.math.segment_prod(masked, segment_ids)\n```",
            "```python\ndef transform(in1, in2):\n    masked_elements = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    segment_ids = tf.repeat(tf.range(tf.shape(in2)[0]), tf.math.count_nonzero(in2, axis=1))\n    return tf.math.segment_prod(masked_elements, segment_ids)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), tf.where(in2)[:, 0])\n```",
            "```python\ndef transform(in1, in2):\n    data = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    seg_ids = tf.repeat(tf.range(tf.shape(in2)[0]), tf.reduce_sum(tf.cast(in2, tf.int32), axis=1))\n    return tf.math.segment_prod(data, seg_ids)\n```",
            "```python\ndef transform(in1, in2):\n    masked = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    return tf.math.segment_prod(masked, tf.reshape(tf.range(tf.shape(in2)[0]), (-1,)))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.where(in2)[0][:, 0])\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.reduce_sum(tf.boolean_mask(in2, tf.ones_like(in2), axis=0)))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.reshape(tf.where(tf.equal(in2, 1)), [-1]))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.argmax(in2, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    masked = tf.boolean_mask(in1, in2)\n    segment_ids = tf.reduce_sum(tf.cast(in2, tf.int32), 1) - 1\n    return tf.math.segment_prod(masked, segment_ids)\n```",
            "```python\ndef transform(in1, in2):\n    masked_values = tf.boolean_mask(tf.tile(tf.expand_dims(in1, 0), [tf.shape(in2)[0], 1]), in2)\n    segmented_prod = tf.math.segment_prod(masked_values, tf.reshape(tf.where(tf.equal(in2, 1)), [-1]))\n    return segmented_prod\n```",
            "```python\ndef transform(in1, in2):\n    masked = tf.multiply(in1, tf.cast(in2, tf.float32))\n    return tf.reduce_prod(masked, axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    masked_elements = tf.boolean_mask(in1, in2)\n    segment_ids = tf.repeat(tf.range(tf.shape(in2)[0]), tf.math.count_nonzero(in2, axis=1))\n    return tf.math.segment_prod(masked_elements, segment_ids)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, in2), tf.argmax(in2, axis=0))\n```",
            "```python\ndef transform(in1, in2):\n    masked_elements = tf.boolean_mask(tf.tile(tf.expand_dims(in1, 0), [tf.shape(in2)[0], 1]), in2)\n    segment_ids = tf.repeat(tf.range(tf.shape(in2)[0]), tf.math.count_nonzero(in2, axis=1))\n    return tf.math.segment_prod(masked_elements, segment_ids)\n```",
            "```python\ndef transform(in1, in2):\n    masked_elements = tf.boolean_mask(in1, in2)\n    segment_ids = tf.reduce_sum(masked_elements * tf.range(1, tf.shape(in2)[0] + 1), axis=1)\n    return tf.math.segment_prod(masked_elements, segment_ids)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, in2), axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    masked = tf.boolean_mask(in1, in2)\n    indices = tf.argmax(in2, axis=0)\n    segment_ids = tf.range(tf.shape(in2)[0])\n    return tf.math.segment_prod(masked, segment_ids)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(tf.broadcast_to(in1, tf.shape(in2)), tf.cast(in2, tf.bool)), axis=1)\n```",
            "```python\ndef transform(in1, in2):\n    masked_elements = tf.boolean_mask(in1, in2)\n    segment_ids = tf.argmax(in2, axis=0)\n    return tf.math.segment_prod(masked_elements, segment_ids)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.math.segment_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)),\n                                tf.math.argmax(in2, 1))\n```",
            "```python\ndef transform(in1, in2):\n    marked_elements = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    segment_ids = tf.repeat(tf.range(tf.shape(in2)[0]), tf.reduce_sum(in2, axis=1))\n    return tf.math.segment_prod(marked_elements, segment_ids)\n```",
            "```\ndef transform(in1, in2):\n    masked = tf.boolean_mask(in1, in2)\n    segments = tf.cast(tf.range(tf.shape(in2)[0]), tf.int32)\n    return tf.math.segment_prod(masked, segments)\n```",
            "def transform(in1, in2):\n    masked = tf.boolean_mask(in1, in2)\n    return tf.math.segment_prod(masked, tf.range(tf.shape(in2)[0]))",
            "```python\ndef transform(in1, in2):\n    masked_elements = tf.boolean_mask(in1, in2)\n    segment_ids = tf.argmax(in2, axis=0)\n    return tf.math.segment_prod(masked_elements, segment_ids)\n```",
            "```python\ndef transform(in1, in2):\n    masked_elements = tf.boolean_mask(in1, in2)\n    segment_ids = tf.range(tf.shape(in2)[0])\n    return tf.math.segment_prod(masked_elements, segment_ids)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2967.811,
        "usage": {
            "prompt_tokens": 1497,
            "completion_tokens": 4829,
            "total_tokens": 6326
        }
    },
    {
        "name": "stackoverflow_39",
        "description": "(\\'set to 0 the elements with absolute value less than 1, and square the other elements\\')",
        "target_program": "tf.multiply(tf.square(in1), tf.cast(tf.cast(tf.cast(in1, tf.int32), tf.bool), tf.float32))",
        "source": "https://stackoverflow.com/questions/37912161/how-can-i-compute-element-wise-conditionals-on-batches-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[-1.5, 1.0, 0.9, 2.0], [1.1, 0.0, -0.1, -0.9], [-1.0, 0.1, -1.1, 2.5]],]",
            "outputs": "[[2.25, 1.0, 0.0, 4.0],    [1.21, 0.0, 0.0, 0.0],    [1.0, 0.0, 1.21, 6.25]]"
        },
        "completions": [
            "```\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    return tf.where(mask, tf.square(in1), tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, 0)\n```",
            "```python\n    in1 = tf.where(tf.abs(in1) < 1, 0.0, tf.square(in1))\n    return in1\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(tf.where(mask, in1, 0))\n    return tf.where(mask, squared, tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, 0)\n```",
            "```python\n    return tf.square(tf.where(tf.greater_equal(tf.abs(in1), 1), in1, 0))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, 0)\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, 0)\n```",
            "```python\n    return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), tf.zeros_like(in1))\n```",
            "```python\n    cond = tf.greater_equal(tf.abs(in1), 1)\n    return tf.square(tf.where(cond, in1, 0))\n```",
            "```python\n    mask = tf.greater(tf.abs(in1), 1)\n    return tf.where(mask, tf.square(in1), tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, 0)\n```",
            "```\nin1 = tf.where(tf.abs(in1) < 1, 0.0, tf.square(in1))\n```",
            "```python\n    return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(tf.where(mask, in1, 0))\n    return squared\n```",
            "```python\n    mask = tf.abs(in1) >= 1\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))\n```",
            "```python\n    cond = tf.greater_equal(tf.abs(in1), 1)\n    return tf.square(tf.where(cond, in1, tf.zeros_like(in1)))\n```",
            "```python\n    return tf.where(tf.abs(in1) < 1, 0.0, tf.square(in1))\n```",
            "```\nabs_in1 = tf.abs(in1)\ncondition = tf.greater_equal(abs_in1, 1)\nsquared = tf.square(in1)\nreturn tf.where(condition, squared, tf.zeros_like(in1))\n```",
            "```python\nabs_in1 = tf.abs(in1)\nmask = tf.greater_equal(abs_in1, 1)\nsquared = tf.square(in1)\nreturn tf.where(mask, squared, tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))\n```",
            "```python\n    in1 = tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), in1)\n    return tf.square(in1)\n```",
            "```python\ndef transform(in1):\n    cond = tf.greater_equal(tf.abs(in1), 1)\n    return tf.square(tf.where(cond, in1, tf.zeros_like(in1)))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))\n```",
            "```python\n    return tf.where(tf.abs(in1) < 1, 0.0, tf.square(in1))\n```",
            "```python\n    return tf.square(tf.where(tf.greater_equal(tf.abs(in1), 1), in1, tf.zeros_like(in1)))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))\n```",
            "```python\n    in1 = tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), in1)\n    return tf.square(in1)\n```",
            "```python\n    return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), tf.zeros_like(in1))\n```",
            "```python\n    abs_in1 = tf.abs(in1)\n    mask = tf.greater_equal(abs_in1, 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    zeroed = tf.zeros_like(in1)\n    return tf.where(mask, squared, zeroed)\n```",
            "```python\n    return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), tf.zeros_like(in1))\n```",
            "```python\n    return tf.where(tf.abs(in1) < 1, 0., tf.square(in1))\n```",
            "```python\n    return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), tf.zeros_like(in1))\n```",
            "```python\n    cond = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(cond, squared, tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    return tf.where(mask, tf.square(in1), tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared_values = tf.square(in1)\n    return tf.where(mask, squared_values, 0)\n```",
            "```python\n    cond = tf.greater_equal(tf.abs(in1), 1)\n    return tf.where(cond, tf.square(in1), tf.zeros_like(in1))\n```",
            "```python\n    abs_in1 = tf.abs(in1)\n    mask = tf.greater_equal(abs_in1, 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    return tf.where(mask, tf.square(in1), tf.zeros_like(in1))\n```",
            "```python\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n```",
            "```python\ndef transform(in1):\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    zeros = tf.zeros_like(in1)\n    return tf.where(mask, squared, zeros)\n```",
            "```python\ndef transform(in1):\n    mask = tf.greater_equal(tf.abs(in1), 1.0)\n    return tf.where(mask, tf.square(in1), tf.zeros_like(in1))\n```",
            "```\ndef transform(in1):\n    return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))\n```",
            "```python\n    return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), tf.zeros_like(in1))\n```",
            "```python\n    return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    return tf.where(mask, tf.square(in1), tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))\n```",
            "```python\ndef transform(in1):\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    return tf.where(mask, tf.square(in1), tf.zeros_like(in1))\n```",
            "```python\n    in1 = tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), in1)\n    return tf.square(in1)\n```",
            "```python\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n```",
            "```python\n    return tf.square(tf.where(tf.abs(in1) < 1, 0.0, in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared_vals = tf.square(in1)\n    return tf.where(mask, squared_vals, tf.zeros_like(in1))\n```",
            "```python\n    return tf.square(tf.where(tf.greater_equal(tf.abs(in1), 1), in1, 0))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    zeros = tf.zeros_like(in1)\n    return tf.where(mask, squared, zeros)\n```",
            "```python\n    abs_in1 = tf.abs(in1)\n    mask = tf.greater_equal(abs_in1, 1)\n    squared = tf.square(in1)\n    zeros = tf.zeros_like(in1)\n    return tf.where(mask, squared, zeros)\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    return tf.where(mask, tf.square(in1), tf.zeros_like(in1))\n```",
            "```python\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n```",
            "```python\n    abs_in1 = tf.abs(in1)\n    condition = tf.greater_equal(abs_in1, 1)\n    squared = tf.square(in1)\n    return tf.where(condition, squared, tf.zeros_like(in1))\n```",
            "```python\n    return tf.where(tf.abs(in1) >= 1, tf.square(in1), tf.zeros_like(in1))\n```",
            "```python\n    return tf.where(tf.abs(in1) < 1, 0., tf.square(in1))\n```",
            "```python\n    abs_in1 = tf.abs(in1)\n    mask = tf.greater_equal(abs_in1, 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))\n```",
            "```python\n    abs_in1 = tf.abs(in1)\n    mask = tf.greater_equal(abs_in1, 1)\n    squared = tf.square(in1)\n    zeroed = tf.zeros_like(in1)\n    return tf.where(mask, squared, zeroed)\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared_values = tf.square(in1)\n    return tf.where(mask, squared_values, tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1.0)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))\n```",
            "```python\n    return tf.square(tf.where(tf.abs(in1) < 1, 0.0, in1))\n```",
            "```python\ndef transform(in1):\n    return tf.square(tf.where(tf.greater_equal(tf.abs(in1), 1), in1, 0))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1.0)\n    squared = tf.square(in1)\n    zeroed = tf.zeros_like(in1)\n    return tf.where(mask, squared, zeroed)\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    return tf.square(tf.where(mask, in1, tf.zeros_like(in1)))\n```",
            "```python\n    return tf.square(tf.where(tf.greater_equal(tf.abs(in1), 1), in1, 0))\n```",
            "```python\n    cond = tf.greater_equal(tf.abs(in1), 1)\n    return tf.square(tf.where(cond, in1, 0))\n```",
            "```python\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))\n```",
            "```python\ndef transform(in1):\n    cond = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(cond, squared, tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))\n```",
            "```python\n    return tf.square(tf.where(tf.greater_equal(tf.abs(in1), 1), in1, 0))\n```",
            "```\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    squared = tf.square(in1)\n    return tf.where(mask, squared, tf.zeros_like(in1))\n```",
            "```python\n    abs_vals = tf.abs(in1)\n    mask = tf.greater_equal(abs_vals, 1)\n    squared_vals = tf.square(in1)\n    return tf.where(mask, squared_vals, tf.zeros_like(in1))\n```",
            "```python\n    cond = tf.greater_equal(tf.abs(in1), 1)\n    return tf.square(tf.where(cond, in1, 0.0))\n```",
            "```python\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    return tf.where(mask, tf.square(in1), tf.zeros_like(in1))\n```",
            "```python\n    return tf.square(tf.where(tf.greater_equal(tf.abs(in1), 1), in1, 0))\n```",
            "```python\n    mask = tf.greater_equal(tf.abs(in1), 1)\n    return tf.where(mask, tf.square(in1), tf.zeros_like(in1))\n```",
            "```python\n    in1 = tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), in1)\n    return tf.square(in1)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2980.073,
        "usage": {
            "prompt_tokens": 1555,
            "completion_tokens": 3766,
            "total_tokens": 5321
        }
    },
    {
        "name": "stackoverflow_40",
        "description": "use the output of tf.nn.top_k to make a sparse tensor",
        "target_program": "tf.sparse.to_dense(tf.SparseTensor(tf.cast(in2, tf.int64), in1, (3, 5)))",
        "source": "https://stackoverflow.com/questions/43996831/make-a-sparse-tensor-based-on-the-output-of-tf-nn-top-k",
        "constants": "[]",
        "examples": {
            "inputs": "[[4, 5, 2, 7, 8, 6],[[0, 2], [0, 4], [1, 1], [1, 3], [2, 0], [2, 3]],]",
            "outputs": "[[0, 0, 4, 0, 5],[0, 2, 0, 7, 0],[8, 0, 0, 6, 0]]"
        },
        "completions": [
            "```\n    k = tf.math.top_k(in1, k=1).indices\n    return tf.scatter_nd(tf.cast(in2, tf.int64), tf.gather_nd(in1, k), [3, 5])\n```",
            "```\n    values, indices = tf.math.top_k(in1, k=tf.shape(in1)[0])\n    sparse_tensor_shape = [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1]\n    return tf.scatter_nd(in2, in1, sparse_tensor_shape)\n```",
            "```\n    top_k_vals = tf.math.top_k(in1, k=2, sorted=False).values\n    updates = tf.reshape(top_k_vals, [-1])\n    return tf.scatter_nd(in2, updates, [3, 5])\n```",
            "```\n    top_k_values, top_k_indices = tf.math.top_k(in1, k=1, sorted=True)\n    updates = tf.reshape(top_k_values,[-1])\n    shape = tf.reduce_max(in2, axis=0) + 1\n    return tf.scatter_nd(in2, updates, shape)\n```",
            "```python\n    k = tf.shape(in2)[0]\n    top_k_values, top_k_indices = tf.math.top_k(in1, k)\n    shape = tf.maximum(tf.reduce_max(in2, axis=0) + 1, [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1])\n    return tf.scatter_nd(in2, top_k_values, shape)\n```",
            "```\n    indices = tf.expand_dims(tf.range(tf.shape(in2)[0]), 1)\n    updates = tf.gather(in1, indices)\n    shape = [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1]\n    return tf.scatter_nd(in2, tf.squeeze(updates), shape)\n```",
            "```python\n    k_values = tf.math.top_k(in1, k=1).values\n    indices = tf.cast(in2, tf.int32)\n    shape = [tf.reduce_max(indices[:, 0]) + 1, tf.reduce_max(indices[:, 1]) + 1]\n    return tf.scatter_nd(indices, k_values, shape)\n```",
            "```\n    top_k = tf.math.top_k(in1, k=1)\n    sparse_values = tf.boolean_mask(in1, in2)\n    return tf.scatter_nd(in2, sparse_values, [3, 5])\n```",
            "```python\n    k = tf.expand_dims(in2[:,1], -1)\n    v = tf.gather(in1, k)\n    return tf.scatter_nd(in2, tf.squeeze(v, -1), [tf.reduce_max(in2[:,0])+1, tf.reduce_max(in2[:,1])+1])\n```",
            "```python\n    indices = tf.cast(in2, tf.int64)\n    values = tf.gather(in1, tf.range(tf.shape(in1)[0]))\n    shape = [tf.reduce_max(indices[:, 0]) + 1, tf.reduce_max(indices[:, 1]) + 1]\n    return tf.scatter_nd(indices, values, shape)\n```",
            "```\n    shape = [tf.reduce_max(in2) + 1, tf.reduce_max(in1) + 1]\n    return tf.scatter_nd(in2, in1, shape)\n```",
            "```\n    values, indices = tf.math.top_k(in1, k=tf.shape(in1)[-1]-1)\n    shape = [tf.reduce_max(in2[:, 0]).numpy() + 1, tf.reduce_max(in2[:, 1]).numpy() + 1]\n    return tf.scatter_nd(in2, values, shape)\n```",
            "```\ndef transform(in1, in2):\n    shape = tf.add_n([tf.reduce_max(in2, axis=0), tf.constant([1, 1])])\n    updates = tf.gather(in1, tf.gather_nd(in2, tf.argsort(in2, axis=0, stable=True)[:,:1]))\n    return tf.scatter_nd(in2, updates, shape)\n```",
            "```\n    updates = tf.gather_nd(in1, in2)\n    shape = [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1]\n    return tf.scatter_nd(in2, updates, shape)\n```",
            "```python\n    shape = tf.reduce_max(in2, axis=0) + 1\n    sparse_tensor = tf.scatter_nd(in2, in1, shape)\n    return sparse_tensor\n```",
            "```\n    top_k = tf.math.top_k(in1, k=1, sorted=True)\n    indices = in2\n    updates = tf.reshape(top_k.values, [-1])\n    shape = tf.cast(tf.reduce_max(indices, axis=0) + 1, tf.int32)\n    return tf.scatter_nd(indices, updates, shape)\n```",
            "```python\n    shape = tf.reduce_max(in2, axis=0) + 1\n    return tf.scatter_nd(in2, in1, shape)\n```",
            "```python\n    top_k = tf.math.top_k(in1, k=1)\n    values = top_k.values\n    indices = in2\n    shape = tf.reduce_max(indices, axis=0) + 1\n    return tf.scatter_nd(indices, values, shape)\n```",
            "```python\n    top_values = tf.gather(in1, tf.argmax(in1, axis=-1))\n    indices = in2\n    sparse_tensor = tf.scatter_nd(indices, top_values, shape=[tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1])\n    return sparse_tensor\n```",
            "```python\n    shape = [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1]\n    return tf.scatter_nd(in2, in1, shape)\n```",
            "```python\n    top_k_indices = tf.math.top_k(in1, k=1).indices\n    updates = tf.gather(in1, top_k_indices)\n    return tf.scatter_nd(in2, updates, tf.shape(in2))\n```",
            "```python\n    top_values, indices = tf.math.top_k(in1, k=1, sorted=False)\n    updates = tf.squeeze(top_values, axis=1)\n    return tf.scatter_nd(in2, updates, tf.constant([3, 5]))\n```",
            "```python\ndef transform(in1, in2):\n    shape = [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1]\n    return tf.scatter_nd(in2, in1, shape)\n```",
            "```python\n    indices = tf.nn.top_k(in1, k=1).indices\n    sparse_shape = [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1]\n    sparse_values = tf.gather(in1, indices[:, 0])\n    return tf.scatter_nd(in2, sparse_values, sparse_shape)\n```",
            "```python\n    values, indices = tf.math.top_k(in1, k=1)\n    updates = tf.squeeze(values)\n    return tf.scatter_nd(in2, updates, shape=[3, 5])\n```",
            "```python\n    indices, values = tf.nn.top_k(in1, k=tf.shape(in2)[0]).indices, in1\n    return tf.scatter_nd(in2, values, [3, 5])\n```",
            "```python\n    shape = tf.cast(tf.reduce_sum(tf.cast(in2 >= 0, tf.int32), axis=0), tf.int64)\n    values = tf.scatter_nd(in2, in1, shape)\n    return tf.reshape(values, [3, 5])\n```",
            "```python\n    indices = tf.gather_nd(in2, tf.argsort(in2[:, 1], 0))\n    values = tf.gather(in1, tf.range(tf.shape(in1)[0]))\n    shape = [tf.reduce_sum(tf.cast(in2[:, 0], tf.int32))+1, tf.reduce_sum(tf.cast(in2[:, 1], tf.int32))+1]\n    return tf.scatter_nd(indices, values, shape)\n```",
            "```python\n    values, indices = tf.math.top_k(in1, k=tf.shape(in2)[0])\n    shape = tf.concat([tf.reduce_max(in2, axis=0, keepdims=True) + 1, [tf.expand_dims(tf.reduce_sum(in2[:, 1]), 0) + 1]], axis=0)\n    return tf.scatter_nd(in2, in1, shape=shape)\n```",
            "```python\n    rows = tf.gather(in2, indices=1, axis=1)\n    cols = tf.gather(in2, indices=0, axis=1)\n    sparse_values = tf.gather(in1, cols)\n    shape = [tf.reduce_max(rows) + 1, tf.reduce_max(cols) + 1]\n    return tf.scatter_nd(tf.stack([rows, cols], axis=1), sparse_values, shape)\n```",
            "```python\n    k = tf.shape(in2)[0]\n    top_k_values, indices = tf.math.top_k(in1, k)\n    updates = top_k_values\n    shape = [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1]\n    return tf.scatter_nd(in2, updates, shape)\n```",
            "```python\n    top_k = tf.math.top_k(in1, k=tf.math.count_nonzero(in1))\n    return tf.scatter_nd(in2, top_k.values, tf.shape(in1))\n```",
            "```python\n    top_k = tf.math.top_k(in1, k=1)\n    updates = tf.reshape(top_k.values, [-1])\n    indices = in2\n    shape = [tf.reduce_max(indices[:, 0]) + 1, tf.reduce_max(indices[:, 1]) + 1]\n    return tf.scatter_nd(indices, updates, shape)\n```",
            "```python\n    vals = tf.math.top_k(in1, k=tf.shape(in2)[0]).values\n    updates = tf.scatter_nd(in2, vals, [3, 5])\n    return updates\n```",
            "```python\n    top_k = tf.reshape(tf.math.top_k(in1, k=2).values, (-1,))\n    indices = tf.cast(in2, tf.int64)\n    shape = tf.constant([3, 5], dtype=tf.int64)\n    return tf.scatter_nd(indices, top_k, shape)\n```",
            "```python\n    values, indices = tf.math.top_k(in1, k=tf.shape(in2)[0])\n    shape = [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1]\n    return tf.scatter_nd(in2, values, shape)\n```",
            "```python\n    top_k = tf.math.top_k(in1, tf.shape(in1)[0])\n    return tf.scatter_nd(in2, top_k.values, [3, 5])\n```",
            "```python\n    top_values = tf.math.top_k(in1, k=1).values[:, 0]\n    shape = [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1]\n    return tf.scatter_nd(in2, top_values, shape)\n```",
            "```\n    top_k = tf.math.top_k(in1, k=1)\n    return tf.scatter_nd(in2, top_k.values, [3, 5])\n```",
            "```python\n    top_k_indices = tf.math.top_k(in1, k=tf.reduce_max(in2) + 1).indices\n    top_k_sparse_indices = tf.gather_nd(in2, tf.reshape(top_k_indices, [-1, 1]))\n    return tf.scatter_nd(top_k_sparse_indices, in1, tf.reduce_max(in2, axis=0))\n```",
            "```python\n    indices = tf.cast(in2, tf.int64)\n    shape = tf.concat([tf.expand_dims(tf.reduce_max(indices[:, 0]) + 1, 0),\n                       tf.expand_dims(tf.reduce_max(indices[:, 1]) + 1, 0)], 0)\n    return tf.scatter_nd(indices, in1, shape)\n```",
            "```python\n    top_k = tf.math.top_k(in1, k=1).values\n    k_indices = tf.expand_dims(tf.range(tf.shape(in1)[0]), 1)\n    updates = tf.cast(tf.ones_like(top_k), tf.int32)\n    sparse = tf.scatter_nd(tf.concat([in2, k_indices], axis=1), updates * top_k, [3, 5])\n    return tf.cast(sparse, tf.int32)\n```",
            "```python\n    values, indices = tf.math.top_k(in1, k=len(in1))\n    return tf.scatter_nd(in2, values, tf.constant([3, 5]))\n```",
            "```python\n    k_values, k_indices = tf.math.top_k(in1, k=1)\n    updates = tf.squeeze(k_values)\n    shape = [tf.reduce_sum(tf.cast(tf.greater(in2, 0), tf.int32)), tf.reduce_max(in2) + 1]\n    return tf.scatter_nd(in2, updates, shape)\n```",
            "```python\n    top_values, _ = tf.math.top_k(in1, k=1)\n    sparse_tensor = tf.scatter_nd(in2, in1, [3, 5])\n    return sparse_tensor\n```",
            "```python\n    values, indices = tf.math.top_k(in1, tf.shape(in1)[0])\n    shape = tf.reduce_max(in2, axis=0) + 1\n    return tf.scatter_nd(in2, in1, shape)\n```",
            "```python\n    indices, updates = tf.nn.top_k(in1, k=tf.shape(in1)[0]).indices, in1\n    return tf.scatter_nd(in2, updates, [3, 5])\n```",
            "```python\n    indices, values = tf.math.top_k(tf.expand_dims(in1, 0), k=tf.shape(in1)[0])\n    updates = tf.gather_nd(values, tf.expand_dims(indices, -1))\n    return tf.scatter_nd(in2, tf.squeeze(updates), tf.constant([3, 5]))\n```",
            "```python\n    sp_idx = tf.nn.top_k(in2, tf.size(in1)).indices\n    updates = tf.gather(in1, tf.argsort(sp_idx))\n    shape = [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1]\n    return tf.scatter_nd(in2, updates, shape)\n```",
            "```python\n    values, indices = tf.nn.top_k(in1, k=1)\n    updates = tf.squeeze(values)\n    sparse_tensor = tf.scatter_nd(in2, updates, [tf.reduce_max(in2[:, 0])+1, tf.reduce_max(in2[:, 1])+1])\n    return sparse_tensor\n```",
            "```python\n    updates = tf.gather(in1, tf.reshape(tf.argsort(in2[:, 0]), [-1]))\n    return tf.scatter_nd(in2, updates, [tf.reduce_max(in2, 0)[0]+1, tf.reduce_max(in2, 0)[1]+1])\n```",
            "```python\n    updates = tf.gather_nd(in1, in2)\n    shape = [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1]\n    return tf.scatter_nd(in2, updates, shape)\n```",
            "```python\n    shape = [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1]\n    return tf.scatter_nd(in2, in1, shape)\n```",
            "```python\n    top_k_vals = tf.math.top_k(in1, k=1).values\n    result = tf.scatter_nd(in2, top_k_vals, tf.shape(in1))\n    return tf.reshape(result, [3, 5])\n```",
            "```python\n    top_k_values = tf.math.top_k(in1, k=1).values\n    sparse_indices = tf.concat([in2, tf.expand_dims(tf.squeeze(top_k_values), axis=1)], axis=1)\n    shape = tf.reduce_max(in2, axis=0) + 1\n    sparse_tensor = tf.scatter_nd(sparse_indices, in1, shape)\n    return sparse_tensor\n```",
            "```\n    updates = tf.reshape(tf.nn.top_k(in1, k=6, sorted=True).values, [-1])\n    shape = [tf.reduce_max(in2, axis=0)[0] + 1, tf.reduce_max(in2, axis=0)[1] + 1]\n    return tf.scatter_nd(in2, updates, shape)\n```",
            "```python\n    values, indices = tf.math.top_k(in1, len(in1))\n    shape = [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1]\n    sparse_updates = tf.scatter_nd(in2, values, shape)\n    return sparse_updates\n```",
            "```python\n    top_values, indices = tf.math.top_k(tf.reshape(in1, [-1]), k=tf.shape(in1)[0])\n    shape = [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1]\n    return tf.scatter_nd(in2, top_values, shape)\n```",
            "```python\n    return tf.scatter_nd(in2, in1, [3, 5])\n```",
            "```python\n    top_k_values, indices = tf.math.top_k(in1, k=tf.shape(in2)[1])\n    updates = tf.squeeze(tf.gather(in1, indices))\n    return tf.scatter_nd(in2, updates, [3, 5])\n```",
            "```python\n    updates = tf.gather(in1, tf.reshape(in2, [-1, 1])[:, 1])\n    return tf.scatter_nd(in2, updates, [3, 5])\n```",
            "```python\n    values, indices = tf.math.top_k(in1, k=1)\n    updates = tf.squeeze(values)\n    return tf.scatter_nd(in2, updates, [3, 5])\n```",
            "```python\n    inds, vals = tf.nn.top_k(tf.reshape(in1, [-1, 1]), sorted=False)\n    sparse = tf.scatter_nd(in2, tf.reshape(vals, [-1]), tf.math.reduce_max(in2, axis=0) + 1)\n    return sparse\n```",
            "```python\n    top_k = tf.math.top_k(in1, k=len(in1))\n    indices = tf.cast(top_k.indices, tf.int64)\n    sparse_indices = tf.stack(indices, axis=1)\n    return tf.scatter_nd(in2, tf.gather(in1, sparse_indices[:, 0]), tf.constant([3, 5], dtype=tf.int64))\n```",
            "```python\n    vals, idxs = tf.math.top_k(in1, k=1)\n    updates = tf.squeeze(vals, axis=1)\n    return tf.scatter_nd(in2, updates, [3, 5])\n```",
            "```python\n    values, indices = tf.nn.top_k(in1, k=tf.reduce_max(in2) + 1, sorted=False)\n    sparse_tensor = tf.scatter_nd(in2, values, [3, 5])\n    return sparse_tensor\n```",
            "```python\n    indices, values = tf.math.top_k(in2, tf.shape(in1)[0])\n    updates = tf.gather(in1, values)\n    shape = [tf.reduce_max(indices[:, 0]) + 1, tf.reduce_max(indices[:, 1]) + 1]\n    return tf.scatter_nd(indices, updates, shape)\n```",
            "```python\n    values, indices = tf.math.top_k(in1, k=tf.shape(in1)[0])\n    updates = tf.squeeze(values)\n    return tf.scatter_nd(in2, updates, [3, 5])\n```",
            "```python\n    k_vals = tf.math.top_k(in1, 3).values\n    return tf.scatter_nd(in2, k_vals, tf.constant([3, 5]))\n```",
            "```python\n    indices, values = tf.nn.top_k(in1, k=1)\n    updates = tf.reshape(values, [-1])\n    sparse_tensor = tf.scatter_nd(in2, updates, [3, 5])\n    return sparse_tensor\n```",
            "```python\n    k = tf.shape(in1)[0]\n    values, indices = tf.math.top_k(in1, k)\n    updates = tf.gather(in1, indices)\n    shape = [tf.reduce_max(in2[:, 0])+1, tf.reduce_max(in2[:, 1])+1]\n    return tf.scatter_nd(in2, updates, shape)\n```",
            "```python\n    top_k_values, top_k_indices = tf.math.top_k(in1, k=1)\n    updates = tf.squeeze(top_k_values, axis=1)\n    shape = [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1]\n    return tf.scatter_nd(in2, updates, shape)\n```",
            "```python\n    values, indices = tf.math.top_k(in1, k=1)\n    updates = tf.reshape(values, [-1])\n    shape = [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1]\n    return tf.scatter_nd(in2, updates, shape)\n```",
            "```python\n    values, indices = tf.math.top_k(in1, k=tf.shape(in1)[0])\n    updates = tf.gather(in1, indices)\n    return tf.scatter_nd(in2, updates, [3, 5])\n```",
            "```python\n    updates = tf.gather_nd(in1, in2)\n    shape = [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1]\n    return tf.scatter_nd(in2, updates, shape)\n```",
            "```python\n    values, indices = tf.math.top_k(in1, k=1)\n    sparse_values = tf.scatter_nd(in2, tf.squeeze(values, axis=1), [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1])\n    return sparse_values\n```",
            "```python\n    top_k_values, _ = tf.math.top_k(in1, k=2, sorted=False)\n    num_segments = tf.reduce_max(in2[:, 0]) + 1\n    shape = [num_segments] + [tf.reduce_max(in2[:, 1]) + 1]\n    return tf.tensor_scatter_nd_update(tf.zeros(shape), in2, top_k_values)\n```",
            "```python\ndef transform(in1, in2):\n    indices = tf.expand_dims(tf.range(tf.shape(in1)[0]), 1)\n    updates = tf.gather_nd(in1, in2)\n    shape = [tf.reduce_max(in2[:, 0])+1, tf.reduce_max(in2[:, 1])+1]\n    return tf.scatter_nd(in2, updates, shape)\n```",
            "```python\n     top_values = tf.math.top_k(in1, k=1).values\n     unique_indices, idx, counts = tf.unique_with_counts(in2[:, 0])\n     shape = [tf.reduce_max(unique_indices) + 1, tf.reduce_max(in2[:, 1]) + 1]\n     return tf.scatter_nd(in2, tf.squeeze(top_values, axis=1), shape)\n```",
            "```python\n    top_k = tf.math.top_k(in1, k=len(in1)).indices\n    updates = tf.gather(in1, top_k)\n    return tf.scatter_nd(in2, updates, tf.constant([3, 5]))\n```",
            "```python\n    k_indices = tf.math.top_k(tf.range(tf.shape(in1)[0]), tf.shape(in2)[0])[1]\n    return tf.scatter_nd(in2, tf.gather(in1, k_indices), tf.constant([3, 5]))\n```",
            "```python\n    top_values, _ = tf.math.top_k(in1, 2)\n    indices = tf.concat([in2, tf.expand_dims(tf.range(tf.shape(in1)[0]), axis=1)], axis=1)\n    updates = tf.gather_nd(in1, indices)\n    sparse_tensor = tf.scatter_nd(indices[:, :-1], updates, [tf.reduce_max(indices[:, 1])+1, tf.reduce_max(in2[:, 0])+1])\n    return tf.transpose(sparse_tensor)\n```",
            "```python\n    top_k = tf.math.top_k(in1, 2)\n    indices = tf.transpose(in2)\n    sparse_indices = tf.concat([tf.expand_dims(indices[:, 0], 1), tf.expand_dims(top_k.indices, 1)], axis = 1)\n    return tf.scatter_nd(sparse_indices, top_k.values, tf.shape(in2))\n```",
            "```python\n    updates = tf.gather_nd(in1, in2)\n    shape = [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1]\n    return tf.scatter_nd(in2, updates, shape)\n```",
            "```python\n    top_k_indices = tf.math.top_k(in1, 1).indices\n    return tf.scatter_nd(in2, in1, tf.shape(in2, out_type=tf.int32)[:1] * tf.constant([5]))\n```",
            "```python\n    top_k_values = tf.sparse.to_dense(\n        tf.SparseTensor(in2, in1, [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1])\n    )\n    return tf.cast(top_k_values, tf.int32)\n```",
            "```python\n    k = tf.reduce_max(in2, axis=1)[0] + 1\n    top_indices = tf.math.top_k(in1, k).indices\n    updates = tf.gather(in1, top_indices)\n    out_shape = [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1]\n    return tf.scatter_nd(indices=in2, updates=updates, shape=out_shape)\n```",
            "```python\n    updates = in1\n    indices = in2\n    shape = tf.reduce_max(indices, axis=0) + 1\n    sparse_tensor = tf.scatter_nd(indices, updates, shape)\n    return sparse_tensor\n```",
            "```python\n    values, indices = tf.nn.top_k(in1, k=tf.shape(in2)[0])\n    shape = [in2[:, 0].numpy().max() + 1, in2[:, 1].numpy().max() + 1]\n    return tf.scatter_nd(in2, values, shape)\n```",
            "```python\n    top_values = tf.math.top_k(in1, 1).values\n    indices = tf.concat([in2, tf.expand_dims(tf.zeros_like(in2[:, 0]), 1)], axis=1)\n    updates = tf.gather(in1, tf.squeeze(indices[:, -1], -1))\n    return tf.scatter_nd(in2, updates, tf.concat([tf.reduce_max(in2, axis=0, keepdims=True) + 1], axis=0))\n```",
            "```python\n    top_k_values, indices = tf.math.top_k(in1, k=1)\n    dense = tf.scatter_nd(in2, top_k_values, [3, 5])\n    return dense\n```",
            "```python\n    top_k_vals = in1\n    top_k_indices = in2\n    shape = tf.reduce_max(top_k_indices, axis=0) + 1\n    return tf.scatter_nd(top_k_indices, top_k_vals, shape)\n```",
            "```python\n    shape = [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1]\n    updates = tf.gather_nd(in1, tf.argsort(tf.gather_nd(in2, tf.argsort(in2, axis=0)[:, 0], batch_dims=0), axis=0))\n    return tf.scatter_nd(in2, updates, shape)\n```",
            "```python\n    updates = tf.gather_nd(in1, in2)\n    shape = [tf.reduce_max(in2[:, 0]) + 1, tf.reduce_max(in2[:, 1]) + 1]\n    return tf.scatter_nd(in2, updates, shape)\n```",
            "```python\n    k = tf.cast(tf.reduce_max(in2[:, 0]) + 1, dtype=tf.int32)\n    indices, updates = tf.split(in2, 2, axis=1)\n    sparse_tensor = tf.scatter_nd(indices, tf.gather(in1, updates[:, 0]), (k, tf.reduce_max(indices[:,1]) + 1))\n    return sparse_tensor\n```",
            "```python\n    shape = tf.reduce_max(in2, axis=0) + 1\n    return tf.scatter_nd(in2, in1, shape)\n```",
            "```python\n    values, indices = tf.math.top_k(in1, k=1)\n    updates = tf.squeeze(values, axis=1)\n    return tf.scatter_nd(in2, updates, tf.reduce_max(in2, axis=0) + 1)\n```",
            "```python\n    top_values = tf.math.top_k(in1, k=tf.shape(in2)[0]).values\n    updates = tf.cast(top_values, dtype=tf.int32)\n    return tf.scatter_nd(in2, updates, [3, 5])\n```",
            "```python\n    values, indices = tf.math.top_k(in1, k=1)\n    shape = tf.reduce_max(in2, axis=0).numpy() + 1\n    sparse_tensor = tf.scatter_nd(tf.concat([in2, indices], axis=1), tf.reshape(values, [-1]), shape)\n    return sparse_tensor\n```",
            "```python\n    k = tf.shape(in1)[0]\n    top_k_values, _ = tf.math.top_k(in1, k)\n    return tf.scatter_nd(in2, top_k_values, [3, 5])\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2623.932,
        "usage": {
            "prompt_tokens": 1519,
            "completion_tokens": 6313,
            "total_tokens": 7832
        }
    },
    {
        "name": "stackoverflow_41",
        "description": "copy all elements except at the given index",
        "target_program": "tf.boolean_mask(in1, tf.not_equal(tf.constant(in2), tf.range(10)))",
        "source": "https://stackoverflow.com/questions/54499051/elegant-way-to-access-python-list-and-tensor-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[5, 2, 8, 2, 4, 1, 1, 0, 2, 1],3,]",
            "outputs": "[5, 2, 8, 4, 1, 1, 0, 2, 1]"
        },
        "completions": [
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))\n```",
            "def transform(in1, in2):\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)",
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2 + 1:]], axis=0)\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.size(in1)), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2 + 1:]], axis=0)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))\n```",
            "def transform(in1, in2):\n    mask = tf.tile([True], [tf.shape(in1)[0]])\n    mask = tf.tensor_scatter_nd_update(mask, [[in2]], [False])\n    return tf.boolean_mask(in1, mask)",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "```\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2 + 1:]], axis=0)\n```",
            "def transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)",
            "```\ndef transform(in1, in2):\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    idx = tf.expand_dims(in2, 0)\n    zeros_like_idx = tf.zeros_like(idx)\n    updates = tf.expand_dims(in2, 0)\n    shape = tf.shape(in1)\n    return tf.squeeze(tf.tensor_scatter_nd_update(in1, tf.expand_dims(idx, 1), zeros_like_idx), [1])\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    mask = tf.cast(tf.range(tf.shape(in1)[0]) != in2, tf.bool)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\n    mask = tf.cast(tf.not_equal(tf.range(tf.shape(in1)[0]), in2), tf.bool)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```\n    mask = tf.concat([tf.ones([in2], dtype=tf.bool), [False], tf.ones([tf.shape(in1)[0] - in2 - 1], dtype=tf.bool)], axis=0)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2 + 1:]], axis=0)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2 + 1:]], axis=0)\n```",
            "```\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\n    mask = tf.cast(tf.range(tf.shape(in1)[0]) != in2, tf.bool)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    mask = tf.sequence_mask([in2], len(in1), tf.bool)\n    return tf.boolean_mask(in1, tf.math.logical_not(mask))\n```",
            "def transform(in1, in2):\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)",
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "def transform(in1, in2):\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)",
            "```python\n    mask = tf.cast(tf.not_equal(tf.range(tf.shape(in1)[0]), in2), tf.bool)\n    return tf.boolean_mask(in1, mask)\n```",
            "```\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2 + 1:]], axis=0)\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "def transform(in1, in2):\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)",
            "```python\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))\n```",
            "def transform(in1, in2):\n    idx = tf.one_hot(in2, tf.shape(in1)[0], on_value=False, off_value=True)\n    return tf.boolean_mask(in1, idx)",
            "```python\n    mask = tf.cast(tf.range(tf.shape(in1)[0]) != in2, tf.bool)\n    return tf.boolean_mask(in1, mask)\n```",
            "def transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2 + 1:]], axis=0)",
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2 + 1:]], axis=0)\n```",
            "```python\n    mask = tf.cast(tf.not_equal(tf.range(tf.shape(in1)[0]), in2), tf.bool)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], 0)\n```",
            "```python\n    mask = tf.concat([tf.range(in2), tf.range(in2 + 1, tf.shape(in1)[0])], axis=0)\n    return tf.gather(in1, mask)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2 + 1:]], axis=0)\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2 + 1:]], axis=0)\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\n    mask = tf.cast(tf.not_equal(tf.range(tf.shape(in1)[0]), in2), tf.bool)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n```",
            "```python\ndef transform(in1, in2):\n    mask = tf.not_equal(tf.range(tf.shape(in1)[0]), in2)\n    return tf.boolean_mask(in1, mask)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2424.998,
        "usage": {
            "prompt_tokens": 1479,
            "completion_tokens": 3157,
            "total_tokens": 4636
        }
    },
    {
        "name": "stackoverflow_42",
        "description": "create a binary vector where the max element is 1",
        "target_program": "tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
        "source": "https://stackoverflow.com/questions/54493814/binary-vector-of-max",
        "constants": "[]",
        "examples": {
            "inputs": "[[4, 6, 2, 6, 7, 3, -3],]",
            "outputs": "[0, 0, 0, 0, 1, 0, 0]"
        },
        "completions": [
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.size(in1), dtype=tf.int32)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0], on_value=1, off_value=0)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1, axis=0), depth=tf.size(in1), dtype=tf.int32)\n```",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0], dtype=tf.int32)",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1, axis=0), depth=tf.shape(in1)[0], dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0], dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.size(in1), on_value=1, off_value=0, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.size(in1), dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1, axis=0), depth=tf.shape(in1)[0])\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.size(in1), on_value=1, off_value=0)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.size(in1), dtype=tf.int32)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0], on_value=1, off_value=0)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0])\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```\ndef transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0])\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0])\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0])\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0], dtype=tf.int32)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0], on_value=1, off_value=0)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.size(in1), dtype=tf.int32)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), depth=tf.shape(in1)[0])\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    max_idx = tf.argmax(in1)\n    return tf.one_hot(max_idx, tf.shape(in1)[0], dtype=tf.int32)\n```",
            "```\ndef transform(in1):\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0], on_value=1, off_value=0, axis=0)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0])\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0], dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0], dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.size(in1), dtype=tf.int32)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), len(in1))\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0], dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0], on_value=1, off_value=0)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0])\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0], on_value=1, off_value=0)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0], dtype=tf.int32)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0], on_value=1, off_value=0)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0], on_value=1, off_value=0)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1, axis=0), tf.shape(in1)[0], on_value=1, off_value=0)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    max_idx = tf.argmax(in1)\n    return tf.one_hot(max_idx, tf.shape(in1)[0])\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0])\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1, axis=0), tf.shape(in1)[0], dtype=tf.int32)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    max_idx = tf.argmax(in1)\n    return tf.one_hot(max_idx, tf.shape(in1)[0])\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), depth=tf.shape(in1)[0])\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0])\n```",
            "```python\n    max_idx = tf.argmax(in1)\n    return tf.one_hot(max_idx, tf.shape(in1)[0], dtype=tf.int32)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), len(in1))\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), depth=tf.shape(in1)[0])\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.size(in1), dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0], on_value=1, off_value=0)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1, axis=0), tf.shape(in1)[0])\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0], dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0], on_value=1, off_value=0)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), depth=tf.shape(in1)[0])\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.size(in1), on_value=1, off_value=0)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0])\n```",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0], dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0])\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.size(in1), dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0])\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), depth=tf.shape(in1)[0])\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.argmax(in1), tf.shape(in1)[0], on_value=1, off_value=0)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 1972.7259999999999,
        "usage": {
            "prompt_tokens": 1473,
            "completion_tokens": 2490,
            "total_tokens": 3963
        }
    },
    {
        "name": "stackoverflow_43",
        "description": "extract elements of a tensor given row indices",
        "target_program": "tf.gather_nd(tf.transpose(in1), tf.expand_dims(in2, 1), batch_dims=1)",
        "source": "https://stackoverflow.com/questions/54455169/better-way-to-access-individual-elements-in-a-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[[12, 34, 56, 78, 90, 10], [99, 88, 77, 55, 44, 33], [-1, -2, -3, -4, -5, -6]],[0, 1, 1, 0, 2, 0],]",
            "outputs": "[12, 88, 77, 78, -5, 10]"
        },
        "completions": [
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=0, batch_dims=1)\n```",
            "```python\n    indices = tf.stack([tf.range(tf.shape(in1)[1]), in2], axis=1)\n    return tf.gather_nd(in1, indices)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.shape(in2)[0])], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    idx = tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1)\n    return tf.gather_nd(in1, idx)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)\n```",
            "```python\n    indices = tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1)\n    return tf.gather_nd(in1, indices)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[1]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)\n```",
            "```python\n    indices = tf.stack([tf.range(tf.shape(in1)[1]), in2], axis=1)\n    return tf.gather_nd(in1, indices)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.shape(in2)[0])], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    indices = tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1)\n    return tf.gather_nd(in1, indices)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    batch_indices = tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1)\n    return tf.gather_nd(in1, batch_indices)\n```",
            "```python\n    indices = tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1)\n    return tf.gather_nd(in1, indices)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)\n```",
            "```python\n    return tf.gather(in1, in2, axis=0, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.shape(in2)[0])], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.reshape(in2, [-1, 1]), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    indices = tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1)\n    return tf.gather_nd(in1, indices)\n```",
            "```python\n    indices = tf.stack((tf.range(tf.shape(in2)[0]), in2), axis=1)\n    return tf.gather_nd(in1, indices)\n```",
            "```python\n    return tf.gather(in1, in2, axis=1, batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```\n    return tf.gather(in1[tf.range(tf.shape(in1)[0]), in2])\n```",
            "```python\n    indices = tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1)\n    return tf.gather_nd(in1, indices)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.reshape(in2, (-1, 1)), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    indices = tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1)\n    return tf.gather_nd(in1, indices)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.shape(in2)[0])], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[1]), in2], axis=1))\n```",
            "```python\n    indices = tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1)\n    return tf.gather_nd(in1, indices)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[1]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    indices = tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1)\n    return tf.gather_nd(in1, indices)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=-1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    indices = tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1)\n    return tf.gather_nd(in1, indices)\n```",
            "```python\n    indices = tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1)\n    return tf.gather_nd(in1, indices)\n```",
            "```python\n    indices = tf.stack([tf.range(tf.shape(in1)[1]), in2], axis=1)\n    return tf.gather_nd(in1, indices)\n```",
            "```python\n    return tf.gather_nd(in1, tf.expand_dims(in2, axis=1), batch_dims=1)\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[1]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n```",
            "```python\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[1]), in2], axis=1))\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2376.202,
        "usage": {
            "prompt_tokens": 1502,
            "completion_tokens": 3128,
            "total_tokens": 4630
        }
    },
    {
        "name": "stackoverflow_44",
        "description": "sum across columns for pairs of consecutive rows",
        "target_program": "tf.squeeze(tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1))",
        "source": "https://stackoverflow.com/questions/54402389/sum-the-columns-for-each-two-consecutive-rows-of-a-tensor-of-3-dimensions",
        "constants": "[2]",
        "examples": {
            "inputs": "[[[3, 5, 2], [6, 2, 3], [8, 7, 1], [0, -3, 5], [-4, 7, 3], [2, 1, 6], [10, 20, 30], [4, 5, 6]],]",
            "outputs": "[[9, 7, 5],    [8, 4, 6],    [-2, 8, 9],    [14, 25, 36]]"
        },
        "completions": [
            "```python\n    return tf.add_n(tf.split(in1, num_or_size_splits=2, axis=0))\n```",
            "```python\n    return tf.math.add_n([in1[::2], in1[1::2]])\n```",
            "```python\n    return tf.math.unsorted_segment_sum(in1, tf.range(tf.shape(in1)[0]) // 2, tf.shape(in1)[0] // 2)\n```",
            "```python\n    return tf.add_n(tf.unstack(in1, axis=0)[::2], tf.unstack(in1, axis=0)[1::2])\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, tf.shape(in1)[1])), axis=1)\n```",
            "```python\n    return tf.reshape(tf.reduce_sum(tf.reshape(in1, [-1, 2, in1.shape[1]]), axis=1), [-1, in1.shape[1]])\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, in1.shape[1]]), axis=1)\n```",
            "```python\n    reshaped = tf.reshape(in1, (-1, 2, in1.shape[1]))\n    return tf.reduce_sum(reshaped, axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n```",
            "```python\n    return tf.add_n(tf.unstack(tf.reshape(in1, (-1, 2, tf.shape(in1)[1])), axis=1))\n```",
            "```python\n    return tf.add_n([in1[::2], in1[1::2]])\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]), axis=1)\n```",
            "```python\n    reshaped = tf.reshape(in1, [-1, 2, in1.shape[1]])\n    return tf.reduce_sum(reshaped, axis=1)\n```",
            "```python\n    return tf.add_n(tf.reshape(in1, [-1, 2, in1.shape[1]]), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, tf.shape(in1)[1])), axis=1)\n```",
            "```python\n    return tf.add_n(tf.split(in1, num_or_size_splits=2))\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, tf.shape(in1)[1])), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]), axis=1)\n```",
            "```python\n    return tf.add_n(tf.reshape(tf.reduce_sum(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]), axis=1), [-1, tf.shape(in1)[1]]))\n```",
            "```python\n    return tf.math.add_n(tf.split(in1, 2))\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n```",
            "```python\n    return tf.add_n(tf.split(in1, 2))\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, tf.shape(in1)[1])), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, tf.shape(in1)[1])), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, tf.shape(in1)[1])), axis=1)\n```",
            "```python\n    return tf.math.add_n(tf.split(tf.reduce_sum(in1, axis=0), num_or_size_splits=2))\n```",
            "```python\n    return tf.math.add_n(tf.unstack(tf.reshape(in1, [-1, 2, in1.shape[1]]), axis=1))\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, tf.shape(in1)[-1]]), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, in1.shape[1]]), axis=1)\n```",
            "```\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, tf.shape(in1)[-1])), axis=1)\n```",
            "```python\n    return tf.reshape(tf.reduce_sum(tf.reshape(in1, (-1, 2, tf.shape(in1)[1])), axis=1), (-1, tf.shape(in1)[1]))\n```",
            "```python\n    return tf.add_n(tf.split(in1, 2))\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]), axis=1)\n```",
            "```python\n    return tf.add_n(tf.reshape(in1, (-1, 2, tf.shape(in1)[1])))\n```",
            "```python\n    return tf.reshape(tf.reduce_sum(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]), axis=1), [-1, tf.shape(in1)[1]])\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, tf.shape(in1)[1])), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, tf.shape(in1)[1])), axis=1)\n```",
            "```python\n    return tf.add_n(tf.split(in1, num_or_size_splits=2))\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, in1.shape[1]]), axis=1)\n```",
            "```python\n    return tf.add_n(tf.stack(tf.unstack(tf.reshape(in1, (-1, 2, tf.shape(in1)[-1])), axis=1), axis=0))\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, tf.shape(in1)[1])), axis=1)\n```",
            "```python\n    return tf.add_n(tf.split(in1, num_or_size_splits=4))\n```",
            "```python\n    return tf.add_n(tf.split(in1, num_or_size_splits=2))\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]), axis=1)\n```",
            "```python\n    return tf.math.add_n(tf.split(in1, 2, axis=0))\n```",
            "```python\n    return tf.reshape(\n        tf.add_n(tf.unstack(in1, axis=0)[::2]) + tf.add_n(tf.unstack(in1, axis=0)[1::2]), \n        (-1, tf.shape(in1)[1])\n    )\n```",
            "```python\n    return tf.add_n([in1[::2], in1[1::2]])\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, in1.shape[1]]), axis=1)\n```",
            "```python\n    return tf.add_n([in1[::2], in1[1::2]])\n```",
            "```python\n    return tf.math.add_n([in1[::2], in1[1::2]])\n```",
            "```python\n    in1_reshaped = tf.reshape(in1, (-1, 2, tf.shape(in1)[1]))\n    return tf.reduce_sum(in1_reshaped, axis=1)\n```",
            "```python\n    return tf.reshape(tf.reduce_sum(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]), axis=1), [-1, tf.shape(in1)[1]])\n```",
            "```python\n    return tf.add_n([in1[::2], in1[1::2]])\n```",
            "```python\n    return tf.add_n(tf.split(in1, num_or_size_splits=2, axis=0))\n```",
            "```python\n    return tf.add_n(tf.split(in1, num_or_size_splits=2))\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, in1.shape[1]]), axis=1)\n```",
            "```python\n    return tf.reshape(tf.reduce_sum(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]), axis=1), [-1, tf.shape(in1)[1]])\n```",
            "```python\n    return tf.add_n(tf.split(in1, 2))\n```",
            "```python\n    return tf.add_n(tf.split(in1, 2))\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, in1.shape[1]]), axis=1)\n```",
            "```python\n    return tf.add_n(tf.split(in1, 2))\n```",
            "```python\n    return tf.reshape(tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1), (-1, in1.shape[1]))\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, tf.shape(in1)[1])), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]), axis=1)\n```",
            "```python\n    return tf.math.add_n(tf.unstack(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]), axis=1))\n```",
            "```python\n    return tf.add_n([in1[:-1:2], in1[1::2]])\n```",
            "```python\n    return tf.add_n(tf.split(in1, tf.shape(in1)[0] // 2))\n```",
            "```python\n    return tf.add_n([in1[::2], in1[1::2]])\n```",
            "```python\n    return tf.add_n(tf.reshape(in1, [-1, 2, in1.shape[1]]))\n```",
            "```python\n    return tf.add_n(tf.split(in1, num_or_size_splits=2))\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, tf.shape(in1)[1])), axis=1)\n```",
            "```python\n    return tf.add_n(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]))\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, in1.shape[1]]), axis=1)\n```",
            "```python\n    return tf.math.segment_sum(in1, tf.range(tf.shape(in1)[0]) // 2)\n```",
            "```python\n    return tf.reshape(tf.reduce_sum(tf.reshape(in1, (-1, 2, tf.shape(in1)[1])), axis=1), (-1, tf.shape(in1)[1]))\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]), axis=1)\n```",
            "```python\n    return tf.add_n(tf.split(in1, 2))\n```",
            "```python\n    return tf.add_n(tf.split(in1, [2, 2, 2, 2]))\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, tf.shape(in1)[1])), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]), axis=1)\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, in1.shape[1]]), axis=1)\n```",
            "```python\n    return tf.add_n([in1[i:i+2] for i in range(0, in1.shape[0], 2)])\n```",
            "```python\n    return tf.reshape(tf.reduce_sum(tf.reshape(in1, (-1, 2, tf.shape(in1)[1])), axis=1), (-1, tf.shape(in1)[1]))\n```",
            "```python\n    return tf.add_n(tf.split(in1, 2))\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]), axis=1)\n```",
            "```python\n    return tf.math.add_n(tf.reshape(in1, (-1, 2, in1.shape[1])))\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]), axis=1)\n```",
            "```python\n    return tf.add_n(tf.unstack(tf.reshape(in1, [-1, 2, in1.shape[1]]), axis=1))\n```",
            "```python\n    return tf.reshape(tf.reduce_sum(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]), axis=1), [-1, tf.shape(in1)[1]])\n```",
            "```python\n    return tf.math.add_n(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]))\n```",
            "```python\n    return tf.add_n([in1[::2], in1[1::2]])\n```",
            "```python\n    return tf.add_n([in1[::2], in1[1::2]])\n```",
            "```python\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n```",
            "```python\n    return tf.add_n(tf.reshape(in1, [-1, 2, in1.shape[-1]]))\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2158.727,
        "usage": {
            "prompt_tokens": 1546,
            "completion_tokens": 3029,
            "total_tokens": 4575
        }
    },
    {
        "name": "stackoverflow_45",
        "description": "reverse the order in the marked rows",
        "target_program": "tf.where(tf.sequence_mask(in2), x=tf.roll(in1, 1, -1), y=in1)",
        "source": "https://stackoverflow.com/questions/54337925/reverse-order-of-some-elements-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[12, 34], [56, 78], [23, 54], [76, 78], [42, 24]]],[1, 0, 1, 0, 1],]",
            "outputs": "[[[34, 12], [56, 78], [54, 23], [76, 78], [24, 42]]]"
        },
        "completions": [
            "```python\n    return tf.where(tf.expand_dims(in2, 1), tf.reverse(in1, [2]), in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.reverse(tf.boolean_mask(in1[0], mask), [1])\n    in1 = tf.tensor_scatter_nd_update(in1, tf.where(mask), reversed_rows)\n    return in1\n```",
            "```python\n    mask = tf.expand_dims(tf.cast(in2, tf.bool), -1)\n    to_reverse = tf.reverse(tf.boolean_mask(in1, mask), axis=[2])\n    return tf.tensor_scatter_nd_update(in1, tf.where(mask), to_reverse)\n```",
            "```python\n    return tf.where(tf.expand_dims(in2, -1), tf.reverse(in1, axis=[2]), in1)\n```",
            "```python\n    in1_t = tf.transpose(in1, [1, 0, 2])\n    reversed_rows = tf.reverse(in1_t, axis=[2])\n    return tf.transpose(tf.where(tf.expand_dims(in2, -1), reversed_rows, in1_t), [1, 0, 2])\n```",
            "```python\n    return tf.where(tf.expand_dims(in2, -1), tf.reverse(in1, axis=[2]), in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask, tf.reverse(in1, axis=[2]), in1)\n    return reversed_rows\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    return tf.where(tf.expand_dims(mask, -1), tf.reverse(in1, [2]), in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    in1 = tf.transpose(in1, [1, 0, 2])\n    in1 = tf.where(mask, tf.reverse(in1, axis=[2]), in1)\n    return tf.transpose(in1, [1, 0, 2])\n```",
            "```python\n    in1_reversed = tf.reverse(in1, axis=[2])\n    return tf.where(tf.expand_dims(in2, -1), in1_reversed, in1)\n```",
            "```python\n    return tf.where(tf.expand_dims(in2, 1), tf.reverse(in1, axis=[2]), in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.reverse(tf.boolean_mask(in1[0], mask), axis=[1])\n    mask_expanded = tf.expand_dims(mask, 1)\n    return tf.where(mask_expanded, tf.reshape(reversed_rows, (-1, 2)), in1[0])\n```",
            "```python\n    return tf.where(tf.expand_dims(tf.cast(in2, tf.bool), -1), tf.reverse(in1, [2]), in1)\n```",
            "```python\n    in1 = tf.reverse(in1, axis=[2])\n    return tf.where(tf.expand_dims(in2, -1), in1, in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_matrix = tf.reverse(in1, axis=[2])\n    return tf.where(tf.expand_dims(mask, 1), reversed_matrix, in1)\n```",
            "```python\n    return tf.where(tf.expand_dims(in2, 1), tf.reverse(in1, [2]), in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    in1_reversed = tf.reverse(in1, axis=[2])\n    return tf.where(tf.expand_dims(mask, -1), in1_reversed, in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask, tf.reverse(in1, axis=[2]), in1)\n    return reversed_rows\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_row = tf.reverse(tf.boolean_mask(in1, mask), axis=[2])\n    non_reversed_row = tf.boolean_mask(in1, tf.math.logical_not(mask))\n    return tf.tensor_scatter_nd_update(in1, tf.where(mask), reversed_row)\n```",
            "```python\n    return tf.where(tf.expand_dims(in2, -1), tf.reverse(in1, axis=[2]), in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    indices = tf.where(mask)[:, 0]\n    return tf.tensor_scatter_nd_update(in1, tf.expand_dims(indices, 1), tf.reverse(tf.gather_nd(in1, tf.expand_dims(indices, 1)), axis=[2]))\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask, tf.reverse(in1, [2]), in1)\n    return reversed_rows\n```",
            "```python\n    return tf.where(tf.expand_dims(in2, -1), tf.reverse(in1, axis=[2]), in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.reverse(in1, axis=[2])\n    return tf.where(tf.expand_dims(mask, -1), reversed_rows, in1)\n```",
            "```python\n    return tf.where(tf.expand_dims(in2, -1), tf.reverse(in1, [2]), in1)\n```",
            "```python\n    mask = tf.expand_dims(tf.cast(in2, tf.bool), -1)\n    reversed_rows = tf.reverse(in1, axis=[-1])\n    return tf.where(mask, reversed_rows, in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask, tf.reverse(in1, [2]), in1)\n    return reversed_rows\n```",
            "```python\n    mask = tf.expand_dims(in2, -1)\n    reversed_rows = tf.reverse(in1, axis=[-1])\n    return tf.where(mask, reversed_rows, in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    rows_to_reverse = tf.boolean_mask(in1, mask)\n    reversed_rows = tf.reverse(rows_to_reverse, axis=[2])\n    scatter_indices = tf.where(mask)\n    return tf.tensor_scatter_nd_update(in1, scatter_indices, reversed_rows)\n```",
            "```python\n    mask = tf.expand_dims(in2, -1)\n    reversed_rows = tf.reverse(in1, [2])\n    return tf.where(mask, reversed_rows, in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.reverse(tf.boolean_mask(in1, mask), axis=[2])\n    non_reversed_rows = tf.boolean_mask(in1, tf.math.logical_not(mask))\n    return tf.tensor_scatter_nd_update(in1, tf.where(mask), reversed_rows)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask[:, tf.newaxis, tf.newaxis], tf.reverse(in1, axis=[2]), in1)\n    return reversed_rows\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    rev_rows = tf.where(mask, tf.reverse(in1, axis=[2]), in1)\n    return rev_rows\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask, tf.reverse(in1, axis=[2]), in1)\n    return reversed_rows\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask, tf.reverse(in1, axis=[2]), in1)\n    return reversed_rows\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask[:, tf.newaxis], tf.reverse(in1, axis=[-1]), in1)\n    return reversed_rows\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.reverse(tf.boolean_mask(in1, mask), axis=[2])\n    return tf.tensor_scatter_nd_update(in1, tf.where(mask), reversed_rows)\n```",
            "```python\n    return tf.where(tf.expand_dims(tf.cast(in2, tf.bool), -1), tf.reverse(in1, axis=[2]), in1)\n```",
            "```python\n    mask = tf.expand_dims(tf.cast(in2, tf.bool), -1)\n    return tf.where(mask, tf.reverse(in1, axis=[2]), in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    rev_rows = tf.where(mask, tf.reverse(in1, axis=[2]), in1)\n    return rev_rows\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask[:, None], tf.reverse(in1, axis=[2]), in1)\n    return reversed_rows\n```",
            "```python\n    return tf.where(tf.expand_dims(in2, -1), tf.reverse(in1, axis=[2]), in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask, tf.reverse(in1[0], [1]), in1[0])\n    return tf.expand_dims(reversed_rows, 0)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask, tf.reverse(in1, axis=[2]), in1)\n    return tf.expand_dims(reversed_rows, axis=0)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask, tf.reverse(in1, axis=[2]), in1)\n    return reversed_rows\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.reverse(in1, axis=[2])\n    return tf.where(tf.expand_dims(mask, -1), reversed_rows, in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask, tf.reverse(in1, axis=[2]), in1)\n    return reversed_rows\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    return tf.where(tf.expand_dims(mask, -1), tf.reverse(in1, axis=[2]), in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask[:, None], tf.reverse(in1, axis=[2]), in1)\n    return reversed_rows\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    in1_masked = tf.boolean_mask(in1, mask, axis=1)\n    in1_masked_reversed = tf.reverse(in1_masked, axis=[2])\n    in1 = tf.tensor_scatter_nd_update(in1, tf.where(mask), in1_masked_reversed)\n    return in1\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.map_fn(lambda row: tf.reverse(row, axis=[-1]), tf.boolean_mask(in1, mask))\n    updates = tf.pad(reversed_rows, paddings=[[0, tf.shape(in1)[1] - tf.shape(reversed_rows)[0]], [0, 0]], mode='CONSTANT')\n    return tf.where(tf.expand_dims(mask, -1), updates, in1)\n```",
            "```python\n    mask = tf.expand_dims(tf.cast(in2, tf.bool), -1)\n    reversed_rows = tf.where(mask, tf.reverse(in1, axis=[2]), in1)\n    return reversed_rows\n```",
            "```python\n    rows_to_reverse = tf.boolean_mask(in1[0], in2)\n    reversed_rows = tf.reverse(rows_to_reverse, axis=[1])\n    result = tf.tensor_scatter_nd_update(in1[0], tf.where(in2), reversed_rows)\n    return tf.expand_dims(result, 0)\n```",
            "```python\n    return tf.where(tf.expand_dims(in2, -1), tf.reverse(in1, axis=[2]), in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.reverse(in1, axis=[2])\n    return tf.where(tf.expand_dims(mask, -1), reversed_rows, in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask, tf.reverse(in1, axis=[2]), in1)\n    return reversed_rows\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    in1_masked = tf.boolean_mask(in1, mask, axis=1)\n    in1_reversed = tf.reverse(in1_masked, axis=[2])\n    return tf.tensor_scatter_nd_update(in1, tf.where(mask), tf.gather_nd(in1_reversed, tf.where(mask)))\n```",
            "```python\n    return tf.where(tf.expand_dims(in2, -1), tf.reverse(in1, axis=[-1]), in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_tensor = tf.reverse(in1, axis=[2])\n    return tf.where(tf.expand_dims(mask, -1), reversed_tensor, in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask[:, None, None], tf.reverse(in1, axis=[-1]), in1)\n    return reversed_rows\n```",
            "```python\n    return tf.where(tf.expand_dims(in2, -1), tf.reverse(in1, [2]), in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask, tf.reverse(in1, axis=[2]), in1)\n    return reversed_rows\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask[:, None], tf.reverse(in1, axis=[2]), in1)\n    return reversed_rows\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask, tf.reverse(in1, axis=[2]), in1)\n    return reversed_rows\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask, tf.reverse(in1, axis=[2]), in1)\n    return tf.expand_dims(reversed_rows, 0)\n```",
            "```python\n    indices = tf.where(tf.cast(in2, tf.bool))\n    updates = tf.reverse(tf.gather_nd(in1, indices), axis=[2])\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.reverse(tf.boolean_mask(in1, mask), axis=[2])\n    in1 = tf.tensor_scatter_nd_update(in1, tf.where(mask), reversed_rows)\n    return in1\n```",
            "```python\n    return tf.where(tf.expand_dims(in2, -1), tf.reverse(in1, [2]), in1)\n```",
            "```python\n    return tf.where(tf.cast(in2, tf.bool), tf.reverse(in1, axis=[-1]), in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    in1_rev = tf.where(mask[:, tf.newaxis], tf.reverse(in1, axis=[2]), in1)\n    return in1_rev\n```",
            "```python\n    reversed_rows = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    reversed_rows = tf.reverse(reversed_rows, axis=[2])\n    scattered_rows = tf.tensor_scatter_nd_update(in1, tf.where(tf.cast(in2, tf.bool)), reversed_rows)\n    return scattered_rows\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask[:, tf.newaxis], tf.reverse(in1, axis=[-1]), in1)\n    return reversed_rows\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.transpose(tf.reverse(tf.transpose(in1, perm=[2, 1, 0]), axis=[0]), perm=[2, 1, 0])\n    return tf.where(tf.expand_dims(mask, axis=-1), reversed_rows, in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask[:, None], tf.reverse(in1, axis=[2]), in1)\n    return reversed_rows\n```",
            "```\n    return tf.where(tf.expand_dims(in2, -1), tf.reverse(in1, [2]), in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask, tf.reverse(in1, axis=[2]), in1)\n    return reversed_rows\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask, tf.reverse(in1, axis=[2]), in1)\n    return reversed_rows\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.reverse(tf.boolean_mask(in1, mask), axis=[2])\n    return tf.tensor_scatter_nd_update(in1, tf.where(mask), reversed_rows)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.reverse(in1, axis=[2])\n    return tf.where(tf.expand_dims(mask, axis=-1), reversed_rows, in1)\n```",
            "```python\n    return tf.where(tf.expand_dims(in2, axis=-1), tf.reverse(in1, axis=[-1]), in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask[:, None], tf.reverse(in1, [2]), in1)\n    return reversed_rows\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask, tf.reverse(in1, [2]), in1)\n    return reversed_rows\n```",
            "```python\n  return tf.where(tf.expand_dims(in2, -1), tf.reverse(in1, axis=[-1]), in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.reverse(in1, axis=[2])\n    return tf.where(tf.expand_dims(mask, axis=-1), reversed_rows, in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask[:, None, None], tf.reverse(in1, axis=[2]), in1)\n    return reversed_rows\n```",
            "```python\n    return tf.where(tf.expand_dims(tf.cast(in2, tf.bool), 1), tf.reverse(in1, [2]), in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask[:, None], tf.reverse(in1, [2]), in1)\n    return tf.squeeze(reversed_rows)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    unstacked = tf.unstack(in1, axis=1)\n    reversed = [tf.reverse(col, axis=[-1]) if m else col for col, m in zip(unstacked, mask)]\n    return tf.stack(reversed, axis=1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.reverse(tf.boolean_mask(in1[0], mask), axis=[1])\n    in1 = tf.tensor_scatter_nd_update(in1[0], tf.where(mask), reversed_rows)\n    return tf.expand_dims(in1, 0)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask, tf.reverse(in1, axis=[2]), in1)\n    return reversed_rows\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask[:, None], tf.reverse(in1, axis=[2]), in1)\n    return reversed_rows\n```",
            "```python\n    in1 = tf.reverse(in1, axis=[2])\n    return tf.where(tf.expand_dims(in2, -1), in1, in1)\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask, tf.reverse(in1, axis=[2]), in1)\n    return reversed_rows\n```",
            "```python\n    mask = tf.expand_dims(tf.cast(in2, tf.bool), axis=-1)\n    rows_to_reverse = tf.boolean_mask(in1, mask)\n    reversed_rows = tf.reverse(rows_to_reverse, axis=[2])\n    scattered = tf.tensor_scatter_nd_update(in1, tf.where(mask), reversed_rows)\n    return scattered\n```",
            "```python\n    return tf.where(tf.expand_dims(in2, -1), tf.reverse(in1, [2]), in1)\n```",
            "```python\n    to_reverse = tf.boolean_mask(in1, tf.equal(in2, 1))\n    reversed_rows = tf.reverse(to_reverse, axis=[2])\n    result = tf.tensor_scatter_nd_update(in1, tf.where(tf.equal(in2, 1)), reversed_rows)\n    return result\n```",
            "```python\n    return tf.where(tf.expand_dims(in2, axis=-1), tf.reverse(in1, axis=[-1]), in1)\n```",
            "```python\n    rows_to_reverse = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(rows_to_reverse, tf.reverse(in1, axis=[2]), in1)\n    return reversed_rows\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask[:, None], tf.reverse(in1, [2]), in1)\n    return reversed_rows\n```",
            "```python\n    mask = tf.cast(in2, tf.bool)\n    reversed_rows = tf.where(mask, tf.reverse(in1, axis=[2]), in1)\n    return reversed_rows\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2166.8509999999997,
        "usage": {
            "prompt_tokens": 1509,
            "completion_tokens": 4525,
            "total_tokens": 6034
        }
    },
    {
        "name": "stackoverflow_46",
        "description": "convert segment lengths to segment ids",
        "target_program": "tf.cast(tf.where(tf.sequence_mask(in1))[:, 0], tf.int32)",
        "source": "https://stackoverflow.com/questions/58652161/how-to-convert-2-3-4-to-0-0-1-1-1-2-2-2-2-to-utilize-tf-math-segment-sum",
        "constants": "[]",
        "examples": {
            "inputs": "[[3, 4, 1],]",
            "outputs": "[0, 0, 0, 1, 1, 1, 1, 2]"
        },
        "completions": [
            "```python\n    return tf.repeat(tf.range(tf.size(in1)), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, tf.reduce_sum(in1)), tf.int32)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    r = tf.range(tf.reduce_sum(in1))\n    return tf.cast(tf.sequence_mask(in1, tf.reduce_sum(in1)), tf.int32)[r]\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, tf.reduce_sum(in1)), tf.int32)\n```",
            "```python\n    return tf.sequence_mask(in1, tf.reduce_max(in1))\n```",
            "```python\n    return tf.repeat(tf.range(len(in1)), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.cast(tf.sequence_mask(in1, tf.reduce_sum(in1)), tf.int32)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.size(in1)), in1)\n```",
            "```python\n    return tf.repeat(tf.range(len(in1)), in1)\n```",
            "```python\n    return tf.reverse(tf.sequence_mask(in1)[..., ::-1], axis=[-1]).numpy().nonzero()[1]\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(len(in1)), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(len(in1)), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.broadcast_to(tf.range(len(in1)), [tf.reduce_sum(in1)])\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.size(in1)), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.size(in1)), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.reshape(tf.sequence_mask(in1, tf.reduce_sum(in1)), [-1])\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.size(in1)), in1)\n```",
            "```python\n    return tf.repeat(tf.range(len(in1)), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```",
            "```python\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 1899.1299999999999,
        "usage": {
            "prompt_tokens": 1456,
            "completion_tokens": 2018,
            "total_tokens": 3474
        }
    },
    {
        "name": "stackoverflow_47",
        "description": "put given values into a sequence mask",
        "target_program": "tf.reshape(tf.gather(in1, tf.cumsum(tf.reshape(tf.cast(in2, tf.int32), [-1]), exclusive=True) * tf.reshape(tf.cast(in2, tf.int32), [-1])), in2.shape)",
        "source": "https://stackoverflow.com/questions/58641546/how-can-i-put-the-sequential-values-to-the-sequence-mask",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],[[True, True, True, False, False], [True, True, False, False, False], [True, True, True, True, True], [True, True, True, True, False], [True, False, False, False, False], [True, True, False, False, False]],]",
            "outputs": "[[0, 1, 2, 0, 0],    [3, 4, 0, 0, 0],    [5, 6, 7, 8, 9],    [10, 11, 12, 13, 0],    [14, 0, 0, 0, 0],    [15, 16, 0, 0, 0]]"
        },
        "completions": [
            "```python\n    indices = tf.where(in2)\n    return tf.scatter_nd(indices, in1, tf.shape(in2, tf.int64))\n```",
            "```python\n    return tf.pad(tf.tensor_scatter_nd_update(tf.zeros_like(in2, dtype=in1.dtype),\n        tf.where(in2), tf.gather_nd(in1, tf.where(tf.tile(tf.sequence_mask([tf.reduce_sum(tf.cast(in2, tf.int32))], tf.shape(in2)[0]), [tf.shape(in2)[1]])))), \n        [[0,0], [0,tf.shape(in2)[1]-tf.shape(in1)[0]%tf.shape(in2)[1]]])\n```",
            "```python\n    return tf.reshape(tf.scatter_nd(tf.where(in2), tf.boolean_mask(in1, in2), tf.shape(in2)), tf.shape(in2))\n```",
            "```python\n    return tf.scatter_nd(tf.where(in2), in1, tf.shape(in2))\n```",
            "```python\n    return tf.pad(tf.reshape(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), tf.shape(in2)), [[0,0],[0,0]])\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tf.zeros_like(in2, tf.int32), tf.where(in2), in1)\n```",
            "```python\n    return tf.reshape(tf.pad(tf.boolean_mask(in1, tf.sequence_mask(tf.reduce_sum(tf.cast(in2, tf.int32), axis=1))), [[0, 0], [0, tf.shape(in2)[1]]]), tf.shape(in2))\n```",
            "```python\n    return tf.where(in2, tf.reshape(in1, in2.shape), 0)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tf.zeros_like(in2, dtype=in1.dtype), tf.where(in2), in1)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tf.zeros_like(in2, dtype=in1.dtype), tf.where(in2), tf.boolean_mask(in1, in2))\n```",
            "```python\n    return tf.where(in2, in1, 0)\n```",
            "```python\n    return tf.reshape(tf.scatter_nd(tf.where(in2), tf.boolean_mask(in1, in2), tf.shape(in2)), tf.shape(in2))\n```",
            "```python\n    masked_values = tf.boolean_mask(in1, tf.reshape(in2, [-1]))\n    return tf.reshape(tf.tensor_scatter_nd_update(tf.zeros(tf.shape(in2), dtype=masked_values.dtype), tf.where(in2), masked_values), tf.shape(in2))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tf.zeros_like(in2, dtype=in1.dtype), tf.where(in2), tf.boolean_mask(in1, in2))\n```",
            "```python\n    return tf.reshape(tf.tensor_scatter_nd_update(tf.zeros_like(in2, dtype=tf.int32), tf.where(in2), in1), tf.shape(in2))\n```",
            "```python\n    return tf.scatter_nd(tf.where(in2), tf.boolean_mask(in1, in2), tf.shape(in2))\n```",
            "```python\nreturn tf.where(in2, in1, 0)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tf.zeros_like(in2, dtype=tf.int32), tf.where(in2), in1)\n```",
            "```python\n    return tf.where(in2, in1, 0)\n```",
            "```python\n    return tf.reshape(tf.where(in2, in1, 0), tf.shape(in2))\n```",
            "```python\n    return tf.reshape(tf.pad(tf.boolean_mask(in1, in2), [[0, tf.size(in2) - tf.reduce_sum(tf.cast(in2, tf.int32))]]), tf.shape(in2))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tf.zeros_like(in2, dtype=tf.int32), tf.where(in2), tf.boolean_mask(in1, in2))\n```",
            "```python\n    return tf.where(in2, tf.reshape(in1, in2.shape), 0)\n```",
            "```python\n    return tf.where(in2, tf.reshape(in1, in2.shape), 0)\n```",
            "```python\n    return tf.where(in2, in1, 0)\n```",
            "```python\n    return tf.pad(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), [[0, 0], [0, tf.shape(in2)[1] - tf.math.count_nonzero(in2, axis=1)]])\n```",
            "```python\n    return tf.reshape(tf.tensor_scatter_nd_update(tf.zeros_like(in2, dtype=in1.dtype), tf.where(in2), tf.boolean_mask(in1, in2)), tf.shape(in2))\n```",
            "```python\n    return tf.pad(tf.boolean_mask(in1, tf.reshape(in2, [-1])), [[0,0], [0, tf.shape(in2)[1] - tf.shape(tf.boolean_mask(in1, in2))[0] % tf.shape(in2)[1]]])\n```",
            "```python\nreturn tf.reshape(tf.where(in2, in1, 0), tf.shape(in2))\n```",
            "def transform(in1, in2):\n    return tf.reshape(tf.scatter_nd(tf.where(in2), tf.boolean_mask(in1, in2), tf.shape(in2)), tf.shape(in2))",
            "```python\n    return tf.reshape(tf.tensor_scatter_nd_update(\n        tf.zeros_like(in2, dtype=in1.dtype),\n        tf.where(in2),\n        tf.boolean_mask(in1, in2)\n    ), tf.shape(in2))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tf.zeros_like(in2, dtype=in1.dtype), tf.where(in2), tf.boolean_mask(in1, in2))\n```",
            "```python\n    return tf.where(in2, in1, 0)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tf.zeros_like(in2, dtype=tf.int32), tf.where(in2), tf.boolean_mask(in1, in2))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tf.zeros_like(in2, dtype=in1.dtype), tf.where(in2), tf.boolean_mask(in1, in2))\n```",
            "```python\n    return tf.where(in2, tf.boolean_mask(in1, in2), 0)\n```",
            "```python\n    return tf.where(in2, in1, 0)\n```",
            "```python\n    return tf.where(in2, tf.reshape(in1, tf.shape(in2)), 0)\n```",
            "```python\n    return tf.where(in2, tf.boolean_mask(in1, in2), 0)\n```",
            "```python\n    return tf.reshape(tf.where(in2, tf.concat([in1, tf.zeros_like(in1)], 0), 0), tf.shape(in2))\n```",
            "```python\n    return tf.where(in2, tf.reshape(in1, [tf.reduce_sum(tf.cast(in2, tf.int32))]), 0)\n```",
            "```python\n    return tf.expand_dims(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), 1) * tf.cast(in2, tf.int32)\n```",
            "```python\n    return tf.where(in2, tf.reshape(in1, in2.shape), tf.zeros_like(in2, dtype=in1.dtype))\n```",
            "```python\n    return tf.cast(tf.tensor_scatter_nd_update(tf.zeros_like(in2, dtype=in1.dtype), tf.where(in2), tf.boolean_mask(in1, in2)), in1.dtype)\n```",
            "```python\n    return tf.where(in2, tf.gather_nd(in1, tf.where(in2)), 0)\n```",
            "```python\n    return tf.boolean_mask(tf.pad(in1, [[0, tf.size(in1)//tf.reduce_sum(tf.cast(in2, tf.int32)) - tf.shape(in2)[0]]]), in2)\n```",
            "```python\n    return tf.reshape(tf.tensor_scatter_nd_update(tf.zeros_like(in2, dtype=tf.int32), tf.where(in2), tf.boolean_mask(in1, in2)), tf.shape(in2))\n```",
            "```python\n    return tf.where(in2, tf.boolean_mask(in1, in2), 0)\n```",
            "```python\n    return tf.scatter_nd(tf.where(in2), tf.boolean_mask(in1, in2), tf.shape(in2))\n```",
            "```python\n    return tf.where(in2, tf.reshape(in1, tf.shape(in2)), tf.constant(0, in1.dtype))\n```",
            "```python\n    return tf.where(in2, in1, 0)\n```",
            "```python\nreturn tf.reshape(tf.tensor_scatter_nd_update(tf.zeros_like(in2, dtype=in1.dtype), tf.where(in2), tf.boolean_mask(in1, in2)), tf.shape(in2))\n```",
            "```python\n    return tf.where(in2, tf.boolean_mask(in1, in2), tf.zeros(tf.shape(in2), dtype=in1.dtype))\n```",
            "```python\n    return tf.reshape(tf.where(in2, in1, 0), tf.shape(in2))\n```",
            "```python\nreturn tf.reshape(tf.where(in2, in1, 0), tf.shape(in2))\n```",
            "```python\n    return tf.where(in2, tf.reshape(in1, [-1]), tf.zeros_like(in2, dtype=tf.int32))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tf.zeros_like(in2, dtype=in1.dtype), tf.where(in2), in1)\n```",
            "```python\n    return tf.where(in2, in1, 0)\n```",
            "```python\n    return tf.pad(tf.where(in2, in1[..., :tf.reduce_sum(tf.cast(in2, tf.int32))], 0), [[0,0], [0, tf.shape(in2)[1] - tf.reduce_sum(tf.cast(in2, tf.int32))]])\n```",
            "```python\n    indices = tf.where(in2)\n    updates = tf.boolean_mask(in1, in2)\n    shape = tf.shape(in2)\n    return tf.scatter_nd(indices, updates, shape)\n```",
            "```python\n    return tf.reshape(tf.sparse.to_dense(tf.sparse.SparseTensor(tf.where(in2), in1, tf.shape(in2))), tf.shape(in2))\n```",
            "```python\n    return tf.where(in2, in1, 0)\n```",
            "```python\n    return tf.scatter_nd(tf.where(in2), tf.boolean_mask(in1, in2), tf.shape(in2))\n```",
            "```python\n    return tf.where(in2, tf.boolean_mask(in1, in2), 0)\n```",
            "```python\n    return tf.where(in2, in1, 0)\n```",
            "```python\n    return tf.reshape(tf.boolean_mask(tf.concat([in1, tf.zeros_like(in1)], axis=0), tf.reshape(in2, [-1])), tf.shape(in2))\n```",
            "```python\nreturn tf.where(in2, tf.reshape(in1, tf.shape(in2)), 0)\n```",
            "```python\n    return tf.reshape(tf.where(in2, in1, 0), tf.shape(in2))\n```",
            "```python\n    return tf.boolean_mask(tf.pad(in1, [[0, tf.size(in2) - tf.size(in1)]]), in2)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tf.zeros_like(in2, dtype=tf.int32), tf.where(in2), tf.boolean_mask(in1, in2))\n```",
            "```python\n    return tf.boolean_mask(tf.pad(in1, [[0, tf.size(in2) - tf.size(in1)]]), in2)\n```",
            "```python\n    return tf.reshape(tf.where(in2, tf.gather(in1, tf.math.cumsum(tf.cast(in2, tf.int32), axis=1, exclusive=True)), 0), tf.shape(in2))\n```",
            "```python\n    return tf.where(in2, in1, 0)\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tf.zeros_like(in2, dtype=in1.dtype), tf.where(in2), tf.gather_nd(in1, tf.where(in2)))\n```",
            "def transform(in1, in2):\n    maxlen = tf.shape(in2)[1]\n    seq_mask = tf.cast(tf.sequence_mask(tf.reduce_sum(tf.cast(in2, tf.int32), axis=1), maxlen), tf.bool)\n    return tf.where(seq_mask, in1, 0)",
            "```python\n    return tf.where(in2, in1, 0)\n```",
            "```python\n    mask = tf.cast(in2, tf.int32)\n    return tf.reshape(tf.tensor_scatter_nd_update(\n        tf.zeros(tf.shape(mask), in1.dtype), tf.where(mask), in1), tf.shape(mask))\n```",
            "```python\n    return tf.where(in2, in1, 0)\n```",
            "```python\n    return tf.pad(tf.boolean_mask(in1, tf.reshape(in2, [-1])), [[0, tf.size(in1) - tf.reduce_sum(in2)]])\n```",
            "```python\n    return tf.where(in2, tf.reshape(in1, in2.shape), tf.zeros_like(in2, dtype=in1.dtype))\n```",
            "```python\n    return tf.where(in2, in1, 0)\n```",
            "```python\n    return tf.reshape(tf.tensor_scatter_nd_update(tf.zeros(tf.shape(in2), in1.dtype), \n                      tf.where(in2), tf.gather_nd(in1, tf.where(tf.sequence_mask(tf.reduce_sum(tf.cast(in2, tf.int32), axis=1))))),\n                      tf.shape(in2))\n```",
            "```python\n    return tf.where(in2, in1, 0)\n```",
            "```python\n    return tf.reshape(tf.where(in2, in1, 0), tf.shape(in2))\n```",
            "```python\n    return tf.tensor_scatter_nd_update(tf.zeros_like(in2, dtype=in1.dtype), tf.where(in2), tf.boolean_mask(in1, in2))\n```",
            "```python\n    return tf.pad(tf.boolean_mask(in1, tf.sequence_mask(tf.reduce_sum(tf.cast(in2, tf.int32), axis=1))), [[0, 0], [0, 1]])\n```",
            "```python\n    return tf.reshape(tf.where(in2, in1, 0), tf.shape(in2))\n```",
            "```python\n    return tf.where(in2, tf.boolean_mask(in1, in2), 0)\n```",
            "```python\n    return tf.where(in2, in1, 0)\n```",
            "```python\n    return tf.where(in2, tf.reshape(in1, in2.shape), 0)\n```",
            "```python\n    return tf.where(in2, tf.reshape(in1, [-1, in2.shape[1]]), 0)\n```",
            "```python\n    return tf.pad(tf.boolean_mask(in1, tf.transpose(in2)), [[0, 0]] * 2 + [[0, 5]], constant_values=0)\n```",
            "```python\n    return tf.where(in2, tf.reshape(in1, [-1]), 0)\n```",
            "```python\n    return tf.where(in2, in1[:tf.reduce_sum(tf.cast(in2, tf.int32))], 0)\n```",
            "```python\nreturn tf.where(in2, in1, 0)\n```",
            "```python\n    return tf.pad(tf.boolean_mask(in1, in2), [[0, 0], [0, tf.shape(in2)[1]-tf.math.count_nonzero(in2, axis=1)]])\n```",
            "```python\n    return tf.where(in2, tf.boolean_mask(in1, in2), 0)\n```",
            "```python\n    return tf.where(in2, in1, 0)\n```",
            "```python\n    paddings = tf.cast(tf.logical_not(in2), tf.int32)\n    result = tf.scatter_nd(tf.where(in2), tf.boolean_mask(in1, in2), tf.shape(in2))\n    return tf.where(in2, result, tf.zeros_like(result))\n```",
            "```python\n    r = tf.where(in2)\n    v = tf.gather_nd(in1, r)\n    out = tf.zeros_like(in2, dtype=v.dtype)\n    return tf.tensor_scatter_nd_update(out, r, v)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2869.817,
        "usage": {
            "prompt_tokens": 1624,
            "completion_tokens": 3298,
            "total_tokens": 4922
        }
    },
    {
        "name": "stackoverflow_48",
        "description": "find the indices of all elements",
        "target_program": "tf.cast(tf.argmax(tf.cast(tf.equal(in1, tf.expand_dims(in2, 1)), tf.int32), axis=1), tf.int32)",
        "source": "https://stackoverflow.com/questions/58481332/getting-the-indices-of-several-elements-in-a-tensorflow-at-once",
        "constants": "[]",
        "examples": {
            "inputs": "[[32, 53, 45, 38, 29, 89, 64, 23],[38, 53, 89, 38, 32, 64],]",
            "outputs": "[3, 1, 5, 3, 0, 6]"
        },
        "completions": [
            "```python\ndef transform(in1, in2):\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))\n```",
            "```python\n    return tf.gather(tf.argsort(in1), tf.gather(in1, in2))\n```",
            "```python\n    return tf.gather(in1, tf.searchsorted(in2, in1))\n```",
            "```python\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))\n```",
            "```python\n    return tf.cast(tf.gather_nd(tf.argsort(tf.concat([in1, in2], axis=0)),\n                                tf.expand_dims(tf.range(tf.size(in1), tf.size(in1) + tf.size(in2)), axis=1)), tf.int32)\n```",
            "```python\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))\n```",
            "```python\n    return tf.gather(in1, tf.searchsorted(in1, in2))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(tf.range(tf.shape(in1)[0]), tf.searchsorted(in1, in2, side='left'))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather_nd(tf.range(tf.shape(in1)[0]), tf.where(tf.equal(in1[:, None], in2)))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))\n```",
            "```python\n    return tf.gather(tf.range(tf.shape(in1)[0]), tf.searchsorted(in1, in2, side='left'))\n```",
            "```python\n    return tf.gather(tf.argsort(tf.concat([in1, in2], axis=0)), tf.range(len(in1), len(in1) + len(in2)))\n```",
            "```\n    return tf.gather(in1, tf.searchsorted(in1, in2, side='left'))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))\n```",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "```\n    return tf.gather(tf.range(tf.size(in1)), tf.searchsorted(in1, in2, side='left'))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))\n```",
            "```python\n    return tf.gather(tf.arange(tf.shape(in1)[0]), tf.argsort(tf.where(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))))[:, 0])\n```",
            "def transform(in1, in2):\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))",
            "```\n    return tf.gather(tf.range(tf.size(in1)), tf.searchsorted(in1, in2))\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='left')\n```",
            "```\ndef transform(in1, in2):\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))\n```",
            "```python\n    return tf.gather(tf.argsort(in1), tf.searchsorted(in1, in2))\n```",
            "def transform(in1, in2):\n    return tf.gather(in1, tf.searchsorted(in1, in2, side='left'))",
            "def transform(in1, in2):\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))",
            "```python\n    return tf.gather(tf.range(tf.shape(in1)[0]), tf.searchsorted(sorted_sequence=in1, values=in2, side='left'))\n```",
            "```python\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))\n```",
            "```python\n    return tf.gather(tf.range(tf.shape(in1)[0]), tf.searchsorted(in1, in2, side='left'))\n```",
            "```\n    return tf.gather(tf.argsort(tf.concat([in1, in2], 0)), tf.range(tf.shape(in1)[0], tf.shape(in2)[0] + tf.shape(in1)[0]))\n```",
            "def transform(in1, in2):\n    return tf.gather(tf.argsort(in1), tf.searchsorted(in1, in2))",
            "```python\n    return tf.gather(tf.range(tf.shape(in1)[0]), tf.searchsorted(in1, in2))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(tf.range(tf.shape(in1)[0]), tf.searchsorted(in1, in2, side='left'))\n```",
            "```python\n    return tf.gather(tf.range(tf.size(in1)), tf.searchsorted(in1, in2))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(tf.range(tf.size(in1)), tf.searchsorted(in1, in2))\n```",
            "```python\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))\n```",
            "```python\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))\n```",
            "def transform(in1, in2):\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))",
            "def transform(in1, in2):\n    return tf.cast(tf.where(in1[:, None] == in2)[..., 0], tf.int32)",
            "```\n    return tf.cast(tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2)), tf.int32)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))\n```",
            "```python\n    return tf.gather(in1, tf.searchsorted(in1, in2, side='left'))\n```",
            "def transform(in1, in2):\n    return tf.gather(in1, tf.searchsorted(in1, in2, side='left'))",
            "```python\n    return tf.gather(tf.range(tf.shape(in1)[0]), tf.searchsorted(in1, in2))\n```",
            "```python\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))\n```",
            "def transform(in1, in2):\n    return tf.gather_nd(tf.argsort(in1), tf.expand_dims(in2, 1))[:, 0]",
            "```python\n    return tf.searchsorted(in1, in2, side='left')\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(nd=tf.searchsorted(tf.sort(in1), in2))\n```",
            "```python\n    return tf.gather(tf.argsort(tf.concat([in2, in1], axis=0)), tf.range(tf.shape(in2)[0]))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather_nd(tf.argsort(in1), tf.expand_dims(tf.gather_indices(in1==element) for element in in2, 1))\n```",
            "```python\n    return tf.gather(tf.range(tf.shape(in1)[0]), tf.searchsorted(in1, in2, side='left'))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))\n```",
            "```python\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(tf.argsort(tf.concat([in1, in2], 0)), tf.range(len(in1), len(in1) + len(in2)))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(tf.argsort(in1), tf.searchsorted(in1, in2, side='left'))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.cast(tf.searchsorted(tf.sort(in1), in2), tf.int32)\n```",
            "```\n    return tf.gather(tf.range(tf.size(in1)), tf.searchsorted(in1, in2, 'left'))\n```",
            "```python\n    return tf.gather(tf.range(tf.size(in1)), tf.cast(tf.equal(tf.reshape(in1, (-1, 1)), in2), tf.int32), axis=0)\n```",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.gather_nd(tf.argsort(in1), tf.reshape(in2, (-1, 1)))",
            "```python\n    return tf.gather(tf.range(tf.shape(in1)[0]), tf.searchsorted(in1, in2, side='right') - 1)\n```",
            "def transform(in1, in2):\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))",
            "```python\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))\n```",
            "```\ndef transform(in1, in2):\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))\n```",
            "def transform(in1, in2):\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))",
            "```python\ndef transform(in1, in2):\n    return tf.gather(tf.argsort(in1), tf.searchsorted(in1, in2, side='left'))\n```",
            "def transform(in1, in2):\n    return tf.gather(tf.argsort(in1), tf.searchsorted(in1, in2, side='left'))",
            "    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))",
            "```python\n    return tf.gather(tf.argsort(in1), tf.searchsorted(in1, in2, side='left'))\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='left')\n```",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))",
            "```python\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))\n```",
            "def transform(in1, in2):\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))",
            "```python\ndef transform(in1, in2):\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2, side='left'))\n```",
            "```python\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))\n```",
            "def transform(in1, in2):\n    return tf.gather(tf.range(tf.shape(in1)[0]), tf.sort(tf.unique(in1)[0], axis=0))",
            "```python\n    return tf.searchsorted(in1, in2, side='left')\n```",
            "```python\n    return tf.searchsorted(in1, in2, side='left')\n```",
            "def transform(in1, in2):\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))",
            "```python\ndef transform(in1, in2):\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))\n```",
            "```\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))\n```",
            "def transform(in1, in2):\n    return tf.cast(tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2)), tf.int32)",
            "```python\ndef transform(in1, in2):\n    return tf.gather(tf.range(tf.size(in1)), in2)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))\n```",
            "```python\n    return tf.gather(tf.range(tf.shape(in1)[0]), tf.broadcast_to(tf.expand_dims(in1, 1), tf.shape(in2)) == in2)\n```",
            "```python\ndef transform(in1, in2):\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))\n```",
            "```python\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))\n```",
            "```python\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))\n```",
            "```python\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))\n```",
            "```python\n    return tf.gather(tf.range(tf.shape(in1)[0]), tf.searchsorted(in1, in2, side='left'))\n```",
            "def transform(in1, in2):\n    return tf.gather_nd(tf.argsort(in1), tf.expand_dims(tf.searchsorted(tf.sort(in1), in2), 1))",
            "```\n    return tf.searchsorted(in1, in2, side='left')\n```",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "```python\ndef transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')\n```",
            "def transform(in1, in2):\n    return tf.gather(tf.argsort(in1), tf.searchsorted(tf.sort(in1), in2))",
            "```\n    return tf.searchsorted(in1, in2)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 1999.779,
        "usage": {
            "prompt_tokens": 1478,
            "completion_tokens": 3025,
            "total_tokens": 4503
        }
    },
    {
        "name": "stackoverflow_49",
        "description": "multiply tensors by scalars in a batched way",
        "target_program": "tf.transpose(tf.multiply(in2, tf.transpose(in1)))",
        "source": "https://stackoverflow.com/questions/58466562/given-a-batch-of-n-images-how-to-scalar-multiply-each-image-by-a-different-scal",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]], [[[0.8, 1.0, 0.0], [0.6, 0.4, 0.2]]], [[[0.9, 0.8, 0.7], [0.1, 0.2, 0.3]]]],[2.0, 0.5, 1.0],]",
            "outputs": "[[[[0.2, 0.4, 0.6], [0.8, 1.0, 1.2]]],    [[[0.4, 0.5, 0.0], [0.3, 0.2, 0.1]]],    [[[0.9, 0.8, 0.7], [0.1, 0.2, 0.3]]]]"
        },
        "completions": [
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=[1, 2, 3]))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=(1, 2, 3)))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=(1, 2, 3)))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, -1), -1), -1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=[1, 2, 3]))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=[1, 2, 3]))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n```",
            "```python\n    return tf.multiply(tf.broadcast_to(in2, tf.shape(in1)), in1)\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=(1, 2, 3)))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=-1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=(1, 2, 3)))\n```",
            "```python\n    return in1 * tf.expand_dims(in2, -1)\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, [3, 1, 1, 1]))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, (-1, 1, 1, 1)))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, [1, 2, 3]))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=(1, 2, 3)))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=[-2, -1]))\n```",
            "```python\n    return in1 * tf.expand_dims(in2, axis=-1)\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, (-1, 1, 1, 1)))\n```",
            "```python\n    return in1 * tf.reshape(in2, [-1, 1, 1, 1])\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=(-1, -2, -3)))\n```",
            "```python\n    return in1 * tf.reshape(in2, [-1, 1, 1, 3])\n```",
            "```python\n    return in1 * tf.reshape(in2, (-1, 1, 1, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, (-1, 1, 1, 1)))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, (-1, 1, 1, 1)))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, -1), -1), -1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, 1), 1), 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, axis=-1), axis=-1), axis=0))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, [1, 2, 3]))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, -1), -1), -1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=[1, 2, 3]))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, (-1, 1, 1, 1)))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=[1, 2, 3]))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=[1, 2, 3]))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=[-2, -1]))\n```",
            "```python\n    return in1 * tf.reshape(in2, (-1, 1, 1, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, 1), 1), 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=(1, 2, 3)))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=(-2, -1)))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, -1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, 1), 2), 3))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, -1), -1), -1))\n```",
            "```\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=(1,2,3)))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=[1, 2, 3]))\n```",
            "```python\n    return in1 * tf.expand_dims(tf.expand_dims(in2, 1), 2)\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=[-1, -2]))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=[1, 2, 3]))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, [1, 2, 3]))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, 1), 1), 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, axis=1), axis=1), axis=1))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, (-1, 1, 1, 1)))\n```",
            "```python\n    return in1 * tf.reshape(in2, (-1, 1, 1, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=[1, 2, 3]))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=(1, 2, 3)))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, (-1, 1, 1, 1)))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, 1), 1), 1))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=(1, 2)))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=[1, 2, 3]))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=[1, 2, 3]))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=[1, 2, 3]))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=[-1, -2, -3]))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=[1, 2, 3]))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=(1, 2, 3)))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, -1), -1), -1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, -1), -1), -1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, 1), 1), 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=[1, 2, 3]))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, 1), 1), 1))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, (-1, 1, 1, 1)))\n```",
            "```python\n    return in1 * tf.reshape(in2, [3, 1, 1, 1])\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=(1, 2, 3)))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, 1), 1), 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=[1, 2, 3]))\n```",
            "```python\n    return tf.multiply(in1, tf.reshape(in2, (-1, 1, 1, 1)))\n```",
            "```python\n    return in1 * tf.reshape(in2, (-1, 1, 1, 1))\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=[1, 2, 3]))\n```",
            "```python\n    return in1 * tf.expand_dims(in2, axis=(1, 2, 3))\n```",
            "```python\n    return in1 * tf.expand_dims(in2, axis=-1)\n```",
            "```python\n    return tf.multiply(in1, tf.expand_dims(in2, axis=(1, 2, 3)))\n```",
            "```python\n    return in1 * tf.reshape(in2, (-1, 1, 1, 1))\n```",
            "```python\n    return in1 * tf.reshape(in2, [-1, 1, 1, 1])\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 2059.094,
        "usage": {
            "prompt_tokens": 1620,
            "completion_tokens": 2719,
            "total_tokens": 4339
        }
    },
    {
        "name": "stackoverflow_50",
        "description": "create a binary matrix where a specified column is set to one",
        "target_program": "tf.cast(tf.one_hot(tf.fill((in1,), in3), in2), tf.int32)",
        "source": "https://stackoverflow.com/questions/58537495/tensorflow-initialize-a-sparse-tensor-with-only-one-line-column-not-zero",
        "constants": "[]",
        "examples": {
            "inputs": "[5]",
            "outputs": "[[0, 0, 0, 1, 0, 0],    [0, 0, 0, 1, 0, 0],    [0, 0, 0, 1, 0, 0],    [0, 0, 0, 1, 0, 0],    [0, 0, 0, 1, 0, 0]]"
        },
        "completions": [
            "```python\n    return tf.one_hot([3]*in1, in1+1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3]*in1, 6)\n```",
            "```python\n    return tf.one_hot([3]*in1, 6)\n```",
            "```python\nreturn tf.transpose(tf.one_hot([3]*in1, 6))\n```",
            "```python\n    return tf.one_hot([3] * in1, in1 + 1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3]*in1, 6, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3] * in1, 6, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3]*in1, 6, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3] * in1, in1 + 1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3]*in1, in1+1)\n```",
            "```python\n    return tf.one_hot([3] * in1, depth=in1 + 1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3] * in1, depth=6)\n```",
            "```python\n    return tf.one_hot(tf.fill([in1], 3), 6)\n```",
            "```python\n    return tf.one_hot([3] * 5, 6)\n```",
            "```python\n    return tf.one_hot([3] * in1, in1+1)\n```",
            "```python\n    return tf.one_hot(tf.zeros([in1], dtype=tf.int32), 6, on_value=1, off_value=0)\n```",
            "```python\n    return tf.one_hot(tf.fill([5], 3), 6, on_value=1, off_value=0)\n```",
            "```python\n    return tf.one_hot([3] * in1, 6)\n```",
            "```python\n    return tf.one_hot([3] * in1, depth=in1 + 1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3]*in1, in1+1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3]*in1, in1+1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3]*in1, in1+1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3] * in1, in1 + 1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3]*5, 6, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3]*in1, in1+1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3]*5, 6)\n```",
            "```python\n    return tf.one_hot([3]*in1, 6)\n```",
            "```python\n    return tf.one_hot(3, in1+1, dtype=tf.int32)[:-1]\n```",
            "```python\n    return tf.one_hot([in1] * 5, 6, on_value=1, off_value=0)\n```",
            "```python\n    return tf.one_hot([3]*5, in1+1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3] * in1, in1 + 1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3] * in1, in1 + 1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3]*in1, 6, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3]*in1, in1+1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.fill([5], 3), 6, on_value=1, off_value=0)\n```",
            "```python\n    return tf.one_hot([3] * 5, 6, on_value=1, off_value=0)\n```",
            "```python\n    return tf.one_hot([3] * in1, 6)\n```",
            "```python\n    return tf.one_hot([3]*in1, in1 + 1)\n```",
            "```python\n    return tf.one_hot([3]*in1, in1 + 1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([in1] * 5, 6)[:, 0]\n```",
            "```python\n    return tf.one_hot([3] * in1, 6)\n```",
            "```python\n    return tf.one_hot([3]*in1, in1*2)\n```",
            "```python\n    return tf.one_hot([3]*in1, in1+1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.range(in1), in1 + 1, on_value=0, off_value=1)\n```",
            "```python\n    return tf.ones((in1, 6)).numpy() * tf.one_hot(3, 6).numpy()\n```",
            "```python\n    return tf.one_hot([3] * in1, in1 + 1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.fill([6], in1), 6, 1, 0)\n```",
            "```python\n    return tf.expand_dims(tf.one_hot([3], 6), 0) * tf.ones([in1, 1], dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3]*in1, in1+1)\n```",
            "```python\n    return tf.one_hot([3] * in1, 6, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.fill([in1], 3), in1+1, on_value=1, off_value=0, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([in1] * 5, 6, axis=1)\n```",
            "```python\n    return tf.one_hot(tf.fill([in1], 3), in1, on_value=1, off_value=0)\n```",
            "```python\n    return tf.one_hot([3] * in1, depth=in1 + 1)\n```",
            "```python\n    return tf.one_hot([3]*in1, 6, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3]*in1, in1+1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3] * in1, in1 + 1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.fill([5], 3), 6)\n```",
            "```python\n    return tf.one_hot([3]*in1, in1*2, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3] * in1, in1 + 1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([in1]*5, 6, axis=1)\n```",
            "```python\n    return tf.one_hot(tf.zeros(in1, dtype=tf.int32) + 3, in1 + 1, dtype=tf.float32)\n```",
            "```python\n    return tf.one_hot(tf.range(6), 6)[:, in1]\n```",
            "```python\n    return tf.one_hot([in1] * 5, 6, on_value=1, off_value=0)\n```",
            "```python\n    return tf.expand_dims(tf.one_hot(3, in1 + 1)[:-1], 0) * tf.ones([in1, in1+1], dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3]*in1, in1+1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.range(6), 6)[:, in1]\n```",
            "```python\n    return tf.one_hot([3]*in1, 6, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3]*in1, depth=in1+1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.range(in1), in1 + 1, axis=1)[:, :-1]\n```",
            "```python\n    return tf.one_hot([3] * in1, in1 + 1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.fill([in1], 3), 6, on_value=1, off_value=0)\n```",
            "```python\n    return tf.one_hot([3] * in1, in1 + 1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3] * in1, in1 + 1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([in1] * 5, 6)\n```",
            "```python\n    return tf.one_hot([3]*in1, 6)\n```",
            "```python\n    return tf.one_hot([3] * in1, 6)\n```",
            "```python\n    return tf.one_hot([3] * in1, 6, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([in1] * 5, 6)[:, :, 0]\n```",
            "```python\n    return tf.one_hot([3]*in1, in1+1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3]*in1, in1+1, dtype=tf.int32)\n```",
            "def transform(in1):\n    return tf.one_hot([3] * in1, in1 + 1, dtype=tf.int32)",
            "```python\n    return tf.one_hot([3]*in1, 6, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3]*in1, in1+1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3] * in1, in1)\n```",
            "```python\n    return tf.one_hot(tf.fill([5], 3), 6, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3]*in1, in1+1)\n```",
            "```python\n    return tf.one_hot([3]*5, in1 + 1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.fill([5], 3), 6, on_value=1, off_value=0)\n```",
            "```python\n    return tf.one_hot(tf.tile([3], [in1]), in1)\n```",
            "```python\n    return tf.one_hot([3] * in1, 6, on_value=1, off_value=0)\n```",
            "```python\n    return tf.one_hot([3]*5, 6, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.fill([5], 3), 6, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3] * in1, 6, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.fill([5], 3), 6, on_value=1.0, off_value=0.0, dtype=tf.float32)\n```",
            "```python\n    return tf.one_hot([3]*in1, in1+1, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3]*in1, 6, dtype=tf.int32)\n```",
            "```python\nreturn tf.one_hot([3]*in1, depth=6, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot([3] * in1, 6, dtype=tf.int32)\n```",
            "```python\n    return tf.one_hot(tf.fill([in1], 3), 6, on_value=1, off_value=0)\n```"
        ],
        "normalized_completions": [],
        "tf_operators": {},
        "lex_tf_operators": {},
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 0,
        "parsed_constants": [],
        "all_constants": [],
        "constant_counts": [],
        "aggregate_constant_count": {},
        "time_millis": 3495.4320000000002,
        "usage": {
            "prompt_tokens": 1505,
            "completion_tokens": 2499,
            "total_tokens": 4004
        }
    }
]